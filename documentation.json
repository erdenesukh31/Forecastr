{
    "pipes": [
        {
            "name": "SafeHtmlPipe",
            "id": "pipe-SafeHtmlPipe-abd52df5fa389b57c0623c7b61482578",
            "file": "src/app/core/pipes/safe-html.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Generated class for the SafeHtmlPipe pipe.</p>\n<p>See <a href=\"https://angular.io/api/core/Pipe\">https://angular.io/api/core/Pipe</a> for more info on Angular Pipes.</p>\n",
            "rawdescription": "\n\nGenerated class for the SafeHtmlPipe pipe.\n\nSee https://angular.io/api/core/Pipe for more info on Angular Pipes.\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "html",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "html",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "safeHtml",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport {DomSanitizer} from \"@angular/platform-browser\";\r\n\r\n/**\r\n * Generated class for the SafeHtmlPipe pipe.\r\n *\r\n * See https://angular.io/api/core/Pipe for more info on Angular Pipes.\r\n */\r\n@Pipe({\r\n  name: 'safeHtml',\r\n})\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer:DomSanitizer){}\r\n\r\n  transform(html) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n\r\n}"
        }
    ],
    "interfaces": [
        {
            "name": "ExampleFlatNode",
            "id": "interface-ExampleFlatNode-745a78a1b7eacd41bdf10424190ceaf3",
            "file": "src/app/layout/organizationModal/organization-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, Inject } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { MatDialogRef, MatDialog, MAT_DIALOG_DATA } from \"@angular/material/dialog\";\r\nimport { FlatTreeControl } from \"@angular/cdk/tree\";\r\nimport {\r\n  MatTreeFlatDataSource,\r\n  MatTreeFlattener,\r\n} from \"@angular/material/tree\";\r\nimport { ExecutiveForecastsService } from \"../../core/services/forecasts/executive-forecasts.service\";\r\nimport { BusinessOperationsService } from \"../../core/shared/business-operations.service\";\r\nimport { HierarchyNode } from \"../../core/interfaces/hierarchyNode\";\r\n\r\n/**\r\n * Food data with nested structure.\r\n * Each node has a name and an optional list of children.\r\n */\r\ninterface FoodNode {\r\n  name: string;\r\n  children?: FoodNode[];\r\n}\r\n\r\nconst TREE_DATA: HierarchyNode[] = [];\r\n\r\n/** Flat node with expandable and level information */\r\ninterface ExampleFlatNode {\r\n  expandable: boolean;\r\n  name: string;\r\n  level: number;\r\n}\r\n\r\n@Component({\r\n  templateUrl: \"./organization-dialog.component.html\",\r\n  styleUrls: [\"./organization-dialog.component.scss\"],\r\n})\r\nexport class OrganizationDialogComponent {\r\n  // tslint:disable: member-ordering\r\n  // tslint:disable: typedef\r\n  private _transformer = (node: HierarchyNode, level: number) => {\r\n    return {\r\n      expandable: !!node.children && node.children.length > 0,\r\n      name:\r\n        \"Name: \" +\r\n        node.firstName +\r\n        \"  \" +\r\n        node.lastName +\r\n        \" |  Role: \" +\r\n        node.role +\r\n        \"  | Grade: \" +\r\n        node.grade,\r\n      level: level,\r\n    };\r\n  };\r\n\r\n  treeControl = new FlatTreeControl<ExampleFlatNode>(\r\n    (node) => node.level,\r\n    (node) => node.expandable\r\n  );\r\n\r\n  treeFlattener = new MatTreeFlattener(\r\n    this._transformer,\r\n    (node) => node.level,\r\n    (node) => node.expandable,\r\n    (node) => node.children\r\n  );\r\n\r\n  dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private data: any,\r\n    private http: HttpClient,\r\n    private dialogRef: MatDialogRef<OrganizationDialogComponent>,\r\n    private BO: BusinessOperationsService,\r\n    private executiveForecastsService: ExecutiveForecastsService\r\n  ) {\r\n    this.dataSource.data = TREE_DATA;\r\n  }\r\n\r\n  /**\r\n   * init method\r\n   */\r\n  // tslint:disable: use-life-cycle-interface\r\n  ngOnInit(): void {\r\n    console.log(\"component initialized\");\r\n    this.http\r\n      .get(this.BO.companyHierarchy())\r\n      .subscribe((hierarchy: HierarchyNode) => {\r\n        console.log(hierarchy);\r\n        this.dataSource.data = [hierarchy];\r\n      });\r\n  }\r\n\r\n  hasChild = (_: number, node: ExampleFlatNode) => node.expandable;\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "expandable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "level",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<p>Flat node with expandable and level information</p>\n",
            "rawdescription": "\nFlat node with expandable and level information",
            "methods": []
        },
        {
            "name": "FoodNode",
            "id": "interface-FoodNode-745a78a1b7eacd41bdf10424190ceaf3",
            "file": "src/app/layout/organizationModal/organization-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, Inject } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { MatDialogRef, MatDialog, MAT_DIALOG_DATA } from \"@angular/material/dialog\";\r\nimport { FlatTreeControl } from \"@angular/cdk/tree\";\r\nimport {\r\n  MatTreeFlatDataSource,\r\n  MatTreeFlattener,\r\n} from \"@angular/material/tree\";\r\nimport { ExecutiveForecastsService } from \"../../core/services/forecasts/executive-forecasts.service\";\r\nimport { BusinessOperationsService } from \"../../core/shared/business-operations.service\";\r\nimport { HierarchyNode } from \"../../core/interfaces/hierarchyNode\";\r\n\r\n/**\r\n * Food data with nested structure.\r\n * Each node has a name and an optional list of children.\r\n */\r\ninterface FoodNode {\r\n  name: string;\r\n  children?: FoodNode[];\r\n}\r\n\r\nconst TREE_DATA: HierarchyNode[] = [];\r\n\r\n/** Flat node with expandable and level information */\r\ninterface ExampleFlatNode {\r\n  expandable: boolean;\r\n  name: string;\r\n  level: number;\r\n}\r\n\r\n@Component({\r\n  templateUrl: \"./organization-dialog.component.html\",\r\n  styleUrls: [\"./organization-dialog.component.scss\"],\r\n})\r\nexport class OrganizationDialogComponent {\r\n  // tslint:disable: member-ordering\r\n  // tslint:disable: typedef\r\n  private _transformer = (node: HierarchyNode, level: number) => {\r\n    return {\r\n      expandable: !!node.children && node.children.length > 0,\r\n      name:\r\n        \"Name: \" +\r\n        node.firstName +\r\n        \"  \" +\r\n        node.lastName +\r\n        \" |  Role: \" +\r\n        node.role +\r\n        \"  | Grade: \" +\r\n        node.grade,\r\n      level: level,\r\n    };\r\n  };\r\n\r\n  treeControl = new FlatTreeControl<ExampleFlatNode>(\r\n    (node) => node.level,\r\n    (node) => node.expandable\r\n  );\r\n\r\n  treeFlattener = new MatTreeFlattener(\r\n    this._transformer,\r\n    (node) => node.level,\r\n    (node) => node.expandable,\r\n    (node) => node.children\r\n  );\r\n\r\n  dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private data: any,\r\n    private http: HttpClient,\r\n    private dialogRef: MatDialogRef<OrganizationDialogComponent>,\r\n    private BO: BusinessOperationsService,\r\n    private executiveForecastsService: ExecutiveForecastsService\r\n  ) {\r\n    this.dataSource.data = TREE_DATA;\r\n  }\r\n\r\n  /**\r\n   * init method\r\n   */\r\n  // tslint:disable: use-life-cycle-interface\r\n  ngOnInit(): void {\r\n    console.log(\"component initialized\");\r\n    this.http\r\n      .get(this.BO.companyHierarchy())\r\n      .subscribe((hierarchy: HierarchyNode) => {\r\n        console.log(hierarchy);\r\n        this.dataSource.data = [hierarchy];\r\n      });\r\n  }\r\n\r\n  hasChild = (_: number, node: ExampleFlatNode) => node.expandable;\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FoodNode[]",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<p>Food data with nested structure.\nEach node has a name and an optional list of children.</p>\n",
            "rawdescription": "\n\nFood data with nested structure.\nEach node has a name and an optional list of children.\n",
            "methods": []
        },
        {
            "name": "Grade",
            "id": "interface-Grade-013123d97935b491673fc45a5df9bd8a",
            "file": "src/app/core/interfaces/grade.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Grade {\r\n\t/**\r\n\t * unique system id\r\n\t */\r\n\tgradeId: number;\r\n\t\r\n\tname: string;\r\n\r\n\tshortcut: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "gradeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>unique system id</p>\n",
                    "line": 8,
                    "rawdescription": "\n\nunique system id\n"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "shortcut",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<p>grade types structure</p>\n",
            "rawdescription": "\n\ngrade types structure\n",
            "methods": []
        },
        {
            "name": "GraphicSummaryProbabilityEntry",
            "id": "interface-GraphicSummaryProbabilityEntry-7a0783a3eb9743ec531050421499ce5a",
            "file": "src/app/core/interfaces/graphicData.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GraphicSummaryReport {\r\n\r\n    /**\r\n     * Name of the team (e. g. CSD)\r\n     */\r\n    team: string;\r\n\r\n    /**\r\n     * ARVE for this period\r\n     */\r\n    arve: number;\r\n\r\n    /**\r\n     * URVE for this period\r\n     */\r\n    urve: number;\r\n\r\n    /**\r\n     * Working Days in this Period\r\n     */\r\n    workingDays: number\r\n\r\n    /**\r\n     * revenue for this month\r\n     */\r\n    ros: number;\r\n\r\n    /**\r\n     * external revenue for this period\r\n     */\r\n    externalRevenue: number;\r\n\r\n    /**\r\n     * cor for this period\r\n     */\r\n    cor: number;\r\n\r\n    /**\r\n     * Project Type entries\r\n     */\r\n    projectTypes: GraphicSummaryProjectTypeEntry[];\r\n\r\n    /**\r\n     * Probability entries\r\n     */\r\n    probabilities: GraphicSummaryProbabilityEntry[];\r\n}\r\n\r\n/**\r\n * Simple Structure for Probability Entries\r\n */\r\nexport interface GraphicSummaryProbabilityEntry {\r\n\r\n    /**\r\n     * name of probability\r\n     */\r\n    probability: string;\r\n\r\n    /**\r\n     * days entered for the probability\r\n     */\r\n    days: number;\r\n}\r\n\r\n/**\r\n * Simple Structure for Project Type Entries\r\n */\r\nexport interface GraphicSummaryProjectTypeEntry {\r\n\r\n    /**\r\n     * Name of Project Type\r\n     */\r\n    projectType: string;\r\n\r\n    /**\r\n     * days entered for the project type\r\n     */\r\n    days: number;\r\n}",
            "properties": [
                {
                    "name": "days",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>days entered for the probability</p>\n",
                    "line": 65,
                    "rawdescription": "\n\ndays entered for the probability\n"
                },
                {
                    "name": "probability",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>name of probability</p>\n",
                    "line": 60,
                    "rawdescription": "\n\nname of probability\n"
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<p>Simple Structure for Probability Entries</p>\n",
            "rawdescription": "\n\nSimple Structure for Probability Entries\n",
            "methods": []
        },
        {
            "name": "GraphicSummaryProjectTypeEntry",
            "id": "interface-GraphicSummaryProjectTypeEntry-7a0783a3eb9743ec531050421499ce5a",
            "file": "src/app/core/interfaces/graphicData.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GraphicSummaryReport {\r\n\r\n    /**\r\n     * Name of the team (e. g. CSD)\r\n     */\r\n    team: string;\r\n\r\n    /**\r\n     * ARVE for this period\r\n     */\r\n    arve: number;\r\n\r\n    /**\r\n     * URVE for this period\r\n     */\r\n    urve: number;\r\n\r\n    /**\r\n     * Working Days in this Period\r\n     */\r\n    workingDays: number\r\n\r\n    /**\r\n     * revenue for this month\r\n     */\r\n    ros: number;\r\n\r\n    /**\r\n     * external revenue for this period\r\n     */\r\n    externalRevenue: number;\r\n\r\n    /**\r\n     * cor for this period\r\n     */\r\n    cor: number;\r\n\r\n    /**\r\n     * Project Type entries\r\n     */\r\n    projectTypes: GraphicSummaryProjectTypeEntry[];\r\n\r\n    /**\r\n     * Probability entries\r\n     */\r\n    probabilities: GraphicSummaryProbabilityEntry[];\r\n}\r\n\r\n/**\r\n * Simple Structure for Probability Entries\r\n */\r\nexport interface GraphicSummaryProbabilityEntry {\r\n\r\n    /**\r\n     * name of probability\r\n     */\r\n    probability: string;\r\n\r\n    /**\r\n     * days entered for the probability\r\n     */\r\n    days: number;\r\n}\r\n\r\n/**\r\n * Simple Structure for Project Type Entries\r\n */\r\nexport interface GraphicSummaryProjectTypeEntry {\r\n\r\n    /**\r\n     * Name of Project Type\r\n     */\r\n    projectType: string;\r\n\r\n    /**\r\n     * days entered for the project type\r\n     */\r\n    days: number;\r\n}",
            "properties": [
                {
                    "name": "days",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>days entered for the project type</p>\n",
                    "line": 81,
                    "rawdescription": "\n\ndays entered for the project type\n"
                },
                {
                    "name": "projectType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Name of Project Type</p>\n",
                    "line": 76,
                    "rawdescription": "\n\nName of Project Type\n"
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<p>Simple Structure for Project Type Entries</p>\n",
            "rawdescription": "\n\nSimple Structure for Project Type Entries\n",
            "methods": []
        },
        {
            "name": "GraphicSummaryReport",
            "id": "interface-GraphicSummaryReport-7a0783a3eb9743ec531050421499ce5a",
            "file": "src/app/core/interfaces/graphicData.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GraphicSummaryReport {\r\n\r\n    /**\r\n     * Name of the team (e. g. CSD)\r\n     */\r\n    team: string;\r\n\r\n    /**\r\n     * ARVE for this period\r\n     */\r\n    arve: number;\r\n\r\n    /**\r\n     * URVE for this period\r\n     */\r\n    urve: number;\r\n\r\n    /**\r\n     * Working Days in this Period\r\n     */\r\n    workingDays: number\r\n\r\n    /**\r\n     * revenue for this month\r\n     */\r\n    ros: number;\r\n\r\n    /**\r\n     * external revenue for this period\r\n     */\r\n    externalRevenue: number;\r\n\r\n    /**\r\n     * cor for this period\r\n     */\r\n    cor: number;\r\n\r\n    /**\r\n     * Project Type entries\r\n     */\r\n    projectTypes: GraphicSummaryProjectTypeEntry[];\r\n\r\n    /**\r\n     * Probability entries\r\n     */\r\n    probabilities: GraphicSummaryProbabilityEntry[];\r\n}\r\n\r\n/**\r\n * Simple Structure for Probability Entries\r\n */\r\nexport interface GraphicSummaryProbabilityEntry {\r\n\r\n    /**\r\n     * name of probability\r\n     */\r\n    probability: string;\r\n\r\n    /**\r\n     * days entered for the probability\r\n     */\r\n    days: number;\r\n}\r\n\r\n/**\r\n * Simple Structure for Project Type Entries\r\n */\r\nexport interface GraphicSummaryProjectTypeEntry {\r\n\r\n    /**\r\n     * Name of Project Type\r\n     */\r\n    projectType: string;\r\n\r\n    /**\r\n     * days entered for the project type\r\n     */\r\n    days: number;\r\n}",
            "properties": [
                {
                    "name": "arve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>ARVE for this period</p>\n",
                    "line": 14,
                    "rawdescription": "\n\nARVE for this period\n"
                },
                {
                    "name": "cor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>cor for this period</p>\n",
                    "line": 39,
                    "rawdescription": "\n\ncor for this period\n"
                },
                {
                    "name": "externalRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>external revenue for this period</p>\n",
                    "line": 34,
                    "rawdescription": "\n\nexternal revenue for this period\n"
                },
                {
                    "name": "probabilities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GraphicSummaryProbabilityEntry[]",
                    "optional": false,
                    "description": "<p>Probability entries</p>\n",
                    "line": 49,
                    "rawdescription": "\n\nProbability entries\n"
                },
                {
                    "name": "projectTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GraphicSummaryProjectTypeEntry[]",
                    "optional": false,
                    "description": "<p>Project Type entries</p>\n",
                    "line": 44,
                    "rawdescription": "\n\nProject Type entries\n"
                },
                {
                    "name": "ros",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>revenue for this month</p>\n",
                    "line": 29,
                    "rawdescription": "\n\nrevenue for this month\n"
                },
                {
                    "name": "team",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Name of the team (e. g. CSD)</p>\n",
                    "line": 9,
                    "rawdescription": "\n\nName of the team (e. g. CSD)\n"
                },
                {
                    "name": "urve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>URVE for this period</p>\n",
                    "line": 19,
                    "rawdescription": "\n\nURVE for this period\n"
                },
                {
                    "name": "workingDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Working Days in this Period</p>\n",
                    "line": 24,
                    "rawdescription": "\n\nWorking Days in this Period\n"
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<p>data structure for graphic data</p>\n",
            "rawdescription": "\n\ndata structure for graphic data\n",
            "methods": []
        },
        {
            "name": "HierarchyNode",
            "id": "interface-HierarchyNode-1a411e8db875c49c88420d880d8651b5",
            "file": "src/app/core/interfaces/hierarchyNode.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface HierarchyNode {\r\n\r\n    /**\r\n     * GGID\r\n     */\r\n    id: string\r\n\r\n    /**\r\n     * First Name for the Node\r\n     */\r\n    firstName: string;\r\n\r\n    /**\r\n     * Last Name for the Node\r\n     */\r\n    lastName: string;\r\n\r\n    /**\r\n     * Role Shortcut (e.g. CSS, PDL, etc...)\r\n     */\r\n    role: string;\r\n\r\n    /**\r\n     * Grade Shortcutr\r\n     */\r\n    grade: string;\r\n\r\n    /**\r\n     * Children of the node (represents sub employees)\r\n     */\r\n    children: HierarchyNode[];\r\n}",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HierarchyNode[]",
                    "optional": false,
                    "description": "<p>Children of the node (represents sub employees)</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nChildren of the node (represents sub employees)\n"
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>First Name for the Node</p>\n",
                    "line": 11,
                    "rawdescription": "\n\nFirst Name for the Node\n"
                },
                {
                    "name": "grade",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Grade Shortcutr</p>\n",
                    "line": 26,
                    "rawdescription": "\n\nGrade Shortcutr\n"
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>GGID</p>\n",
                    "line": 6,
                    "rawdescription": "\n\nGGID\n"
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Last Name for the Node</p>\n",
                    "line": 16,
                    "rawdescription": "\n\nLast Name for the Node\n"
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Role Shortcut (e.g. CSS, PDL, etc...)</p>\n",
                    "line": 21,
                    "rawdescription": "\n\nRole Shortcut (e.g. CSS, PDL, etc...)\n"
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "MonthlySummaryReport",
            "id": "interface-MonthlySummaryReport-4420d1db9d867bbd140dea6640c4852f",
            "file": "src/app/core/interfaces/kpiData.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MonthlySummaryReport {\r\n\r\n    /**\r\n     * Shortend name of the month (e. g. April = apr)\r\n     */\r\n    month: string;\r\n\r\n    /**\r\n     * Id of this month\r\n     */\r\n    monthId: number;\r\n\r\n    /**\r\n     * Number of this month in the year (e. g. August = 8)\r\n     */\r\n    monthNumber: string;\r\n\r\n    /**\r\n     * Year of this Month\r\n     */\r\n    year: number;\r\n\r\n    /**\r\n     * revenue for this month\r\n     */\r\n    ros: number;\r\n\r\n    /**\r\n     * external revenue for this month\r\n     */\r\n    externalRevenue: number;\r\n\r\n    /**\r\n     * internal revenue for this month\r\n     */\r\n    internalRevenue: number;\r\n\r\n    /**\r\n     * cor for this month\r\n     */\r\n    cor: number;\r\n\r\n    /**\r\n     * arve for this month\r\n     */\r\n    arve: number;\r\n\r\n    /**\r\n     * urve for this month\r\n     */\r\n    urve: number;\r\n\r\n    /**\r\n     * fte for this month\r\n     */\r\n    fte: number;\r\n}",
            "properties": [
                {
                    "name": "arve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>arve for this month</p>\n",
                    "line": 49,
                    "rawdescription": "\n\narve for this month\n"
                },
                {
                    "name": "cor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>cor for this month</p>\n",
                    "line": 44,
                    "rawdescription": "\n\ncor for this month\n"
                },
                {
                    "name": "externalRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>external revenue for this month</p>\n",
                    "line": 34,
                    "rawdescription": "\n\nexternal revenue for this month\n"
                },
                {
                    "name": "fte",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>fte for this month</p>\n",
                    "line": 59,
                    "rawdescription": "\n\nfte for this month\n"
                },
                {
                    "name": "internalRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>internal revenue for this month</p>\n",
                    "line": 39,
                    "rawdescription": "\n\ninternal revenue for this month\n"
                },
                {
                    "name": "month",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Shortend name of the month (e. g. April = apr)</p>\n",
                    "line": 9,
                    "rawdescription": "\n\nShortend name of the month (e. g. April = apr)\n"
                },
                {
                    "name": "monthId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Id of this month</p>\n",
                    "line": 14,
                    "rawdescription": "\n\nId of this month\n"
                },
                {
                    "name": "monthNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Number of this month in the year (e. g. August = 8)</p>\n",
                    "line": 19,
                    "rawdescription": "\n\nNumber of this month in the year (e. g. August = 8)\n"
                },
                {
                    "name": "ros",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>revenue for this month</p>\n",
                    "line": 29,
                    "rawdescription": "\n\nrevenue for this month\n"
                },
                {
                    "name": "urve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>urve for this month</p>\n",
                    "line": 54,
                    "rawdescription": "\n\nurve for this month\n"
                },
                {
                    "name": "year",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Year of this Month</p>\n",
                    "line": 24,
                    "rawdescription": "\n\nYear of this Month\n"
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<p>data structure for kpi dialog</p>\n",
            "rawdescription": "\n\ndata structure for kpi dialog\n",
            "methods": []
        },
        {
            "name": "PeriodicElement",
            "id": "interface-PeriodicElement-e140403c9fc2222a100fadf86fe41ef3",
            "file": "src/app/forecast/components/executive-summary/executive-summary.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, Input, ChangeDetectorRef } from '@angular/core';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { PageStateService } from '../../../core/shared/page-state.service';\r\n\r\nimport { CalculationService } from \"../../../core/services/forecasts/calculation.service\";\r\nimport { ProbabilitySummary } from \"../../../core/interfaces/probabilitySummary\";\r\nimport { ProbabilityRecord } from \"../../../core/interfaces/probabilityRecord\";\r\nimport { DatePipe } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-executive-summary',\r\n  templateUrl: './executive-summary.component.html',\r\n  styleUrls: ['./executive-summary.component.scss']\r\n})\r\nexport class ExecutiveSummaryComponent implements OnInit {\r\n  @Input('summary') summary: any;\r\n\r\n  loaded = false;\r\n\r\n  probabilitySummary: ProbabilitySummary;\r\n  \r\n  probabilitySource: MatTableDataSource<ProbabilityRecord>;\r\n\r\n  displayedColumns: string[] = [\r\n    \"probabilityId\",\r\n    \"total\",\r\n    \"billableDays\",\r\n    \"vacationDays\",\r\n    \"workingDays\",\r\n    \"cor\",\r\n    \"ros\",\r\n    \"ext\",\r\n    \"int\",\r\n    \"arve\",\r\n    \"urve\"\r\n  ];\r\n\r\n  constructor(\r\n    private pageState: PageStateService,\r\n    private changeDetectorRefs: ChangeDetectorRef,\r\n    private calculationService: CalculationService,\r\n    private datePipe: DatePipe,\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.calculationService.probabilitySummary$.subscribe((summ: ProbabilitySummary) => {\r\n      if(!this.loaded) {\r\n        this.loaded = true;\r\n      } else {\r\n        this.probabilitySummary = summ;\r\n        this.probabilitySource = new MatTableDataSource(summ.probabilites);\r\n        this.changeDetectorRefs.detectChanges();\r\n        setTimeout(() => {\r\n          this.pageState.hideSpinner();\r\n        }, 500);\r\n      }\r\n    });\r\n  }\r\n\r\n  exportCSV(): void {\r\n    this.pageState.showSpinner();\r\n    let lineEnding = \"\\r\\n\";\r\n\r\n    let header = \"KPI;\" + this.probabilitySummary.probabilites.map(x => x.name).join(\";\") + \";Total\" + lineEnding;\r\n    let body = \"ARVE;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.arve)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.arve) + lineEnding\r\n      + \"URVE;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.urve)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.urve) + lineEnding\r\n      + \"ROS;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.revenue)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.revenue) + lineEnding\r\n      + \"Int. Revenue;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.internalRevenue)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.internalRevenue) + lineEnding\r\n      + \"Ext. Revenue;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.externalRevenue)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.externalRevenue) + lineEnding\r\n      + \"COR;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.cor)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.cor) + lineEnding\r\n      + \"Paid Days;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.paidDays)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.paidDays) + lineEnding\r\n      + \"Vacation Days;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.vacationDays)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.vacationDays) + lineEnding\r\n      + \"Billable Days;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.billableDays)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.billableDays) + lineEnding\r\n      + \"Project Days;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.billableDays + x.nonBillableDays)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.nonBillableDays + this.probabilitySummary.billableDays) + lineEnding;\r\n\r\n    const data = header + body;\r\n    const blob: Blob = new Blob([data], { type: \"text/csv\" });\r\n    const filename: string = this.datePipe.transform(new Date(), \"yyyyMMdd\") + \"-SummaryProbabilities.csv\";    \r\n    this.pageState.hideSpinner();\r\n\r\n    let navigator: any = window.navigator;\r\n    //For IE\r\n    if (navigator.msSaveOrOpenBlob) {\r\n      navigator.msSaveOrOpenBlob(blob, filename);\r\n    //For any other browser\r\n    } else {\r\n      const url: string = window.URL.createObjectURL(blob);\r\n\r\n      let a: HTMLAnchorElement = document.createElement(\"a\");\r\n      a.href = url;\r\n      a.download = filename;\r\n\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      document.body.removeChild(a);\r\n      window.URL.revokeObjectURL(url);\r\n    }\r\n  }\r\n\r\n  numberToString(no: number): string {\r\n    return no.toLocaleString(\"de\",  { minimumFractionDigits: 0, maximumFractionDigits: 2 } ).replace(\".\",\"\");\r\n  }\r\n}\r\n\r\nexport interface PeriodicElement {\r\n  name: string;\r\n  firm: number;\r\n  weight: number;\r\n  symbol: string;\r\n}\r\n\r\nexport interface SummaryValues {\r\n  monthId: number;\r\n  probabilityId: number;\r\n  billableDays: number;\r\n  nonBillableDays: number;\r\n  vacationDays: number;\r\n  trainingDays: number;\r\n  businessDays: number;\r\n  benchDays: number;\r\n  workingDays: number;\r\n  fteCss: number;\r\n  cor: number;\r\n  arve: number;\r\n  urve: number;\r\n  ros: number;\r\n  external: number;\r\n}",
            "properties": [
                {
                    "name": "firm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 107
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 106
                },
                {
                    "name": "symbol",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 109
                },
                {
                    "name": "weight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 108
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Probability",
            "id": "interface-Probability-d800ea73286f96ab45ac8a66922ca993",
            "file": "src/app/core/interfaces/probability.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Probability {\r\n\t/**\r\n\t * unique system id\r\n\t */\r\n\tid: number;\r\n\t\r\n\t/**\r\n\t * probability name\r\n\t */\r\n\tname: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>unique system id</p>\n",
                    "line": 8,
                    "rawdescription": "\n\nunique system id\n"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>probability name</p>\n",
                    "line": 13,
                    "rawdescription": "\n\nprobability name\n"
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<p>probability types structure</p>\n",
            "rawdescription": "\n\nprobability types structure\n",
            "methods": []
        },
        {
            "name": "ProValues",
            "id": "interface-ProValues-49732f561e87fea05ed4c2275c605b8d",
            "file": "src/app/core/services/forecasts/executive-forecasts.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { BusinessOperationsService } from \"../../shared/business-operations.service\";\r\nimport { BehaviorSubject, Observable } from \"rxjs\";\r\nimport { UtilitiesService } from \"../utilities.service\";\r\nimport { Month } from \"../../interfaces/month\";\r\nimport { ForecastService } from \"./forecast.service\";\r\nimport { FcEntry } from \"../../interfaces/fcEntry\";\r\nimport { User } from \"../../interfaces/user\";\r\nimport { FcProject } from \"../../interfaces/fcProject\";\r\nimport { Project } from \"../../interfaces/project\";\r\nimport { environment } from \"../../../../environments/environment\";\r\nimport { Team } from \"../../interfaces/team\";\r\nimport { MonthlySummaryReport } from \"../../interfaces/kpiData\";\r\nimport { GraphicSummaryReport } from \"../../interfaces/graphicData\";\r\nimport { HierarchyNode } from \"../../interfaces/hierarchyNode\";\r\nimport { FinancialControllerSummaryAPPS } from \"../../interfaces/financialAppsSummary\";\r\nimport { PageStateService } from '../../shared/page-state.service';\r\nimport { reject } from \"q\";\r\n/**\r\n * executive service\r\n */\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class ExecutiveForecastsService {\r\n  summaryValues$: BehaviorSubject<SummaryValues[]>;\r\n  monthValues$: BehaviorSubject<SummaryValues[]>;\r\n  kpiData$: BehaviorSubject<MonthlySummaryReport[]>;\r\n  kpiDataPDL$: BehaviorSubject<MonthlySummaryReport[]>;\r\n    kpiDataPL$: BehaviorSubject<MonthlySummaryReport[]>;\r\n  graphicData$: BehaviorSubject<GraphicSummaryReport[]>;\r\n  financialData$: BehaviorSubject<FinancialControllerSummaryAPPS[]>;\r\n\r\n  monthId: number = 1;\r\n  months: Month[];\r\n  projects: Project[];\r\n  teams: Team[];\r\n  hierarchy: HierarchyNode;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private BO: BusinessOperationsService,\r\n    private us: UtilitiesService,\r\n    private pageState: PageStateService,\r\n    private forecastService: ForecastService,\r\n    private utilitiesService: UtilitiesService\r\n  ) {\r\n    this.summaryValues$ = new BehaviorSubject([]);\r\n    this.monthValues$ = new BehaviorSubject([]);\r\n    this.kpiData$ = new BehaviorSubject([]);\r\n    this.kpiDataPDL$ = new BehaviorSubject([]);\r\n    this.kpiDataPL$ = new BehaviorSubject([]);\r\n    this.graphicData$ = new BehaviorSubject([]);\r\n    this.financialData$ = new BehaviorSubject([]);\r\n\r\n    this.initProjects();\r\n    this.initTeams();\r\n    this.initHierarchy();\r\n  }\r\n\r\n  initProjects(): void {\r\n    this.utilitiesService.projects$.subscribe((projects: Project[]) => {\r\n      this.projects = projects;\r\n    });\r\n  }\r\n\r\n  initTeams(): void {\r\n    this.utilitiesService.teams$.subscribe((teams: Team[]) => {\r\n      this.teams = teams;\r\n    });\r\n  }\r\n\r\n  initHierarchy(): void {\r\n    this.utilitiesService.hierarchy$.subscribe((hierarchy: HierarchyNode) => {\r\n      this.hierarchy = hierarchy;\r\n    });\r\n  }\r\n\r\n  getHierarchy(): any {\r\n    return this.hierarchy;\r\n  }\r\n\r\n  getCurrentMonth(): void {\r\n    this.months = this.us.getMonths();\r\n  }\r\n\r\n  resetSummaryValues(): void {\r\n    this.summaryValues$.next([]);\r\n    this.monthValues$.next([]);\r\n  }\r\n\r\n  initializeKpiValues(): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.http\r\n      .get<MonthlySummaryReport[]>(this.BO.companyKpiStats())\r\n      .subscribe((reports: MonthlySummaryReport[]) => {\r\n        this.kpiData$.next(reports);\r\n        resolve();\r\n      }, () => reject());\r\n    });\r\n  }\r\n\r\n  initializeKpiValuesPDL(userId: number): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.http\r\n      .get<MonthlySummaryReport[]>(this.BO.companyKpiStatsPDL(userId))\r\n      .subscribe((reports: MonthlySummaryReport[]) => {\r\n        this.kpiDataPDL$.next(reports);\r\n        resolve();\r\n      }, () => reject());\r\n    });\r\n  }\r\n  initializeKpiValuesPL(userId: number): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.http\r\n      .get<MonthlySummaryReport[]>(this.BO.companyKpiStatsPL(userId))\r\n      .subscribe((reports: MonthlySummaryReport[]) => {\r\n        this.kpiDataPL$.next(reports);\r\n        resolve();\r\n      }, () => reject());\r\n    });\r\n  }\r\n\r\n  initalizeGraphicData(monthIdFrom: number, monthIdTo: number): void {\r\n    this.http\r\n      .get(this.BO.companyGraphicStats(monthIdFrom, monthIdTo))\r\n      .subscribe((reports: GraphicSummaryReport[]) => {\r\n        this.graphicData$.next(reports);\r\n      });\r\n  }\r\n\r\n  initializeSummaryValues(monthIdFrom: number, monthIdTo: number): void {\r\n    this.http\r\n      .get(this.BO.companySummary(monthIdFrom, monthIdTo))\r\n      .subscribe((values: ProValues) => {\r\n        this.summaryValues$.next(values.period);\r\n        this.monthValues$.next(values.months);\r\n      });\r\n  }\r\n\r\n  initializeDetailValues(monthId: number): Promise<FcEntry[]> {\r\n    let promise = new Promise<FcEntry[]>((resolve: any, reject: any) => {\r\n      this.http\r\n        .get(this.BO.companyDetails(monthId))\r\n        .subscribe((forecasts: FcEntry[]) => {\r\n          this.forecastService.addForecasts(forecasts);\r\n          resolve(forecasts);\r\n        });\r\n    });\r\n    return promise;\r\n  }\r\n\r\n  initializeProbabilityDetailValues(monthId: number): Promise<FcEntry[]> {\r\n    let promise = new Promise<FcEntry[]>((resolve: any, reject: any) => {\r\n      this.http\r\n      .get<FcEntry[]>(this.BO.companyDetails(monthId))\r\n      .subscribe((forecasts: FcEntry[]) => {\r\n        resolve(forecasts);\r\n      });\r\n    });\r\n\r\n    return promise;\r\n  }\r\n\r\n  initializeFinancialData(monthIdFrom: number, monthIdTo): Promise<FinancialControllerSummaryAPPS[]> {​​​​​​​​\r\n    let promise = new Promise<FinancialControllerSummaryAPPS[]>((resolve: any, reject: any) => {​​​​​​​​\r\n    this.http\r\n          .get<FinancialControllerSummaryAPPS[]>(this.BO.financialSummary(monthIdFrom,monthIdTo))\r\n          .subscribe((financialSummary: FinancialControllerSummaryAPPS[]) => {​​​​​​​​\r\n          this.financialData$.next(financialSummary);\r\n          resolve(financialSummary);\r\n          }​​​​​​​​);\r\n        }​​​​​​​​);\r\n    return promise;\r\n  }\r\n  \r\n  \r\n\r\n  getGraphicData(): GraphicSummaryReport[] {\r\n    return this.graphicData$.getValue();\r\n  }\r\n\r\n  getKpiData(): MonthlySummaryReport[] {\r\n    return this.kpiData$.getValue();\r\n  }\r\n\r\n  getKpiPDLData(): MonthlySummaryReport[] {\r\n    return this.kpiDataPDL$.getValue();\r\n  }\r\n  \r\n  getKpiDataPL(): MonthlySummaryReport[] {\r\n    return this.kpiDataPL$.getValue();\r\n  }\r\n\r\n  getSummaryValues(): SummaryValues[] {\r\n    return this.summaryValues$.getValue();\r\n  }\r\n\r\n  getMonthValues(): SummaryValues[] {\r\n    return this.monthValues$.getValue();\r\n  }\r\n\r\n  getFinancialData(): FinancialControllerSummaryAPPS[] {\r\n    return this.financialData$.getValue();\r\n  }\r\n\r\n  calculateTeamleadValues(filter: string, team: any[]): any[] {\r\n    let teamleads: any[] = [];\r\n\r\n    if (filter === \"pl\") {\r\n      team\r\n        .filter((u: User) => u.permission === environment.roles.pl || u.roleId === 7 ) //pl or hop\r\n        .forEach((p: User) => {\r\n          let childs: number[] = team\r\n            .filter((c: User) => c.parentId === p.id)\r\n            .map((c: User) => c.id);\r\n          this.getTeamnameForPL(p.id, p.firstName + \" \" + p.lastName);\r\n          \r\n          teamleads.push({\r\n            id: p.id,\r\n            name: this.getTeamnameForPL(p.id, p.firstName + \" \" + p.lastName),\r\n            prodUnitCode : p.prodUnitCode,\r\n            childs: [p.id].concat(\r\n              team\r\n                .filter((c: User) => childs.indexOf(c.parentId) >= 0)\r\n                .map((c: User) => c.id)\r\n                .concat(childs)\r\n            ),\r\n          });\r\n        });\r\n    } else {\r\n      team\r\n        .filter(\r\n          (u: User) =>\r\n            u.permission === environment.roles.pdl ||\r\n            u.permission === environment.roles.pl\r\n        )\r\n        .forEach((p: User) => {\r\n          teamleads.push({\r\n            id: p.id,\r\n            name: p.firstName + \" \" + p.lastName,\r\n            prodUnitCode : p.prodUnitCode,\r\n            childs: [p.id].concat(\r\n              team\r\n                .filter((c: User) => c.parentId === p.id)\r\n                .map((c: User) => c.id)\r\n            ),\r\n          });\r\n        });\r\n    }\r\n\r\n    teamleads.forEach((teamlead: any) => {\r\n      teamlead.projectDays = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => u.projectDays)\r\n        .reduce((a, b) => a + b, 0);\r\n\r\n      teamlead.billableDays = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => u.billableDays)\r\n        .reduce((a, b) => a + b, 0);\r\n\r\n      teamlead.vacationDays = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => u.vacationDays)\r\n        .reduce((a, b) => a + b, 0);\r\n\r\n      teamlead.totalDays = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => u.totalDays)\r\n        .reduce((a, b) => a + b, 0);\r\n\r\n      teamlead.ros = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => u.ros)\r\n        .reduce((a, b) => a + b, 0);\r\n\r\n      let fteCss: number = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => u.fte)\r\n        .reduce((a, b) => a + b, 0);\r\n      \r\n      teamlead.fte = fteCss;\r\n\r\n      teamlead.cor = teamlead.ros / teamlead.billableDays;\r\n\r\n      teamlead.arve = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => parseInt(u.arve, 10))\r\n        .reduce((a, b) => a + b, 0);\r\n      teamlead.arve = (teamlead.arve / fteCss).toFixed(0);\r\n\r\n      teamlead.urve = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => parseInt(u.urve, 10))\r\n        .reduce((a, b) => a + b, 0);\r\n      teamlead.urve = (teamlead.urve / fteCss).toFixed(0);\r\n    });\r\n\r\n    return teamleads;\r\n  }\r\n\r\n  getTeamnameForPL(teamLeadId: number, teamLeadName: string): string {\r\n    let t: Team[] = this.teams.filter(\r\n      (team: Team) => team.teamLeadId == teamLeadId\r\n    );\r\n    if (t.length > 0) {\r\n      return t[0].name;\r\n    } else {\r\n      return teamLeadName;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns an observable of the period forecast data for the company\r\n   * Used for csv export\r\n   *\r\n   * @param exportValues\r\n   */\r\n  getCsvExportData(monthIdFrom: number, monthIdTo: number): Observable<any> {\r\n    const httpOptions: object = {\r\n      responseType: \"blob\" as \"json\",\r\n    };\r\n\r\n    return this.http.get<any>(\r\n      this.BO.companyCsvExport(monthIdFrom, monthIdTo),\r\n      httpOptions\r\n    );\r\n  }\r\n}\r\n\r\nexport interface ProValues {\r\n  period: SummaryValues[];\r\n  months: SummaryValues[];\r\n}\r\n\r\nexport interface SummaryValues {\r\n  monthId: number;\r\n  probabilityId: number;\r\n  billableDays: number;\r\n  nonBillableDays: number;\r\n  vacationDays: number;\r\n  trainingDays: number;\r\n  businessDays: number;\r\n  benchDays: number;\r\n  workingDays: number;\r\n  fteCss: number;\r\n  cor: number;\r\n  arve: number;\r\n  urve: number;\r\n  ros: number;\r\n  external: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "months",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SummaryValues[]",
                    "optional": false,
                    "description": "",
                    "line": 335
                },
                {
                    "name": "period",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SummaryValues[]",
                    "optional": false,
                    "description": "",
                    "line": 334
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Role",
            "id": "interface-Role-fef7459e14726eaf65f3b5a561c50353",
            "file": "src/app/core/interfaces/role.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Role {\r\n\t/**\r\n\t * unique system id\r\n\t */\r\n\troleId: number;\r\n\t\r\n\t/**\r\n\t * role name\r\n\t */\r\n\tname: string;\r\n\r\n\t/**\r\n\t * role shortcut\r\n\t */\r\n\tshortcut: string;\r\n\r\n\t/**\r\n\t * role description\r\n\t */\r\n\tdescription: string;\r\n\r\n\tpermissionType: any;\r\n\r\n\t/**\r\n\t * role active attribute (currently ignored for roles)\r\n\t */\r\n\tactive: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>role active attribute (currently ignored for roles)</p>\n",
                    "line": 30,
                    "rawdescription": "\n\nrole active attribute (currently ignored for roles)\n"
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>role description</p>\n",
                    "line": 23,
                    "rawdescription": "\n\nrole description\n"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>role name</p>\n",
                    "line": 13,
                    "rawdescription": "\n\nrole name\n"
                },
                {
                    "name": "permissionType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "roleId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>unique system id</p>\n",
                    "line": 8,
                    "rawdescription": "\n\nunique system id\n"
                },
                {
                    "name": "shortcut",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>role shortcut</p>\n",
                    "line": 18,
                    "rawdescription": "\n\nrole shortcut\n"
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<p>role types structure</p>\n",
            "rawdescription": "\n\nrole types structure\n",
            "methods": []
        },
        {
            "name": "SubcoSummaryData",
            "id": "interface-SubcoSummaryData-98965d5ee0bd0fd1396bc78b24a8e679",
            "file": "src/app/core/interfaces/SubcoSummaryData.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SubcoSummaryData {\r\n    /**\r\n     * Total revenue\r\n     */\r\n    revenue: number;\r\n\r\n    /**\r\n     * Total costs\r\n     */\r\n    cost: number;\r\n    /**\r\n     * Total contribution\r\n     */\r\n    contribution: number;\r\n    /**\r\n     * Total cp%\r\n     */\r\n    cp: number;\r\n }",
            "properties": [
                {
                    "name": "contribution",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Total contribution</p>\n",
                    "line": 17,
                    "rawdescription": "\n\nTotal contribution\n"
                },
                {
                    "name": "cost",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Total costs</p>\n",
                    "line": 13,
                    "rawdescription": "\n\nTotal costs\n"
                },
                {
                    "name": "cp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Total cp%</p>\n",
                    "line": 21,
                    "rawdescription": "\n\nTotal cp%\n"
                },
                {
                    "name": "revenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Total revenue</p>\n",
                    "line": 8,
                    "rawdescription": "\n\nTotal revenue\n"
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<p>summary-data structure</p>\n",
            "rawdescription": "\n\nsummary-data structure\n",
            "methods": []
        },
        {
            "name": "SubCoType",
            "id": "interface-SubCoType-ac71d91ea27e0f40c2dd1b5813c3228a",
            "file": "src/app/core/interfaces/subCoType.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SubCoType {\r\n\t/**\r\n\t * unique system id\r\n\t */\r\n\tsubCoTypeId: number;\r\n\t\r\n\tsubCoTypeName: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "subCoTypeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>unique system id</p>\n",
                    "line": 5,
                    "rawdescription": "\n\nunique system id\n"
                },
                {
                    "name": "subCoTypeName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "SummaryData",
            "id": "interface-SummaryData-b5f4576a2eaca24c537a46bc64aea1bc",
            "file": "src/app/core/interfaces/summaryData.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SummaryData {\r\n  /**\r\n   * SummaryDataProject array with calculated values\r\n   */\r\n  days: SummaryDataProject[];\r\n\r\n  /**\r\n   * total revenue of all employees in one month\r\n   */\r\n  revenue: number;\r\n\r\n  /**\r\n   * external revenue of all employees in one month\r\n   */\r\n  extRevenue : number;\r\n\r\n  /**\r\n   * internal revenue of all employees in one month\r\n   */\r\n  intRevenue : number;\r\n\r\n  /**\r\n   * total working days per month\r\n   */\r\n  workingDays: number;\r\n\r\n  /**\r\n   * number of billable working days\r\n   */\r\n  billableDays: number;\r\n\r\n  /**\r\n   * total possible days - billable working days\r\n   */\r\n  nonbillableDays: number;\r\n\r\n  /**\r\n   * weighted average of team-member arve values\r\n   */\r\n  arve: number;\r\n\r\n  /**\r\n   * weighted average of team-member urve values\r\n   */\r\n  urve: number;\r\n}\r\n\r\n/**\r\n * summary-data projects structure\r\n */\r\nexport interface SummaryDataProject {\r\n  /**\r\n   * days title (e.g. 'Vacation', 'Training', 'Projects')\r\n   */\r\n  title: string;\r\n\r\n  /**\r\n   * Number of total days\r\n   */\r\n  days: number;\r\n\r\n  /**\r\n   * type equal to project-type\r\n   */\r\n  type: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "arve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>weighted average of team-member arve values</p>\n",
                    "line": 43,
                    "rawdescription": "\n\nweighted average of team-member arve values\n"
                },
                {
                    "name": "billableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>number of billable working days</p>\n",
                    "line": 33,
                    "rawdescription": "\n\nnumber of billable working days\n"
                },
                {
                    "name": "days",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SummaryDataProject[]",
                    "optional": false,
                    "description": "<p>SummaryDataProject array with calculated values</p>\n",
                    "line": 8,
                    "rawdescription": "\n\nSummaryDataProject array with calculated values\n"
                },
                {
                    "name": "extRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>external revenue of all employees in one month</p>\n",
                    "line": 18,
                    "rawdescription": "\n\nexternal revenue of all employees in one month\n"
                },
                {
                    "name": "intRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>internal revenue of all employees in one month</p>\n",
                    "line": 23,
                    "rawdescription": "\n\ninternal revenue of all employees in one month\n"
                },
                {
                    "name": "nonbillableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>total possible days - billable working days</p>\n",
                    "line": 38,
                    "rawdescription": "\n\ntotal possible days - billable working days\n"
                },
                {
                    "name": "revenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>total revenue of all employees in one month</p>\n",
                    "line": 13,
                    "rawdescription": "\n\ntotal revenue of all employees in one month\n"
                },
                {
                    "name": "urve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>weighted average of team-member urve values</p>\n",
                    "line": 48,
                    "rawdescription": "\n\nweighted average of team-member urve values\n"
                },
                {
                    "name": "workingDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>total working days per month</p>\n",
                    "line": 28,
                    "rawdescription": "\n\ntotal working days per month\n"
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<p>summary-data structure</p>\n",
            "rawdescription": "\n\nsummary-data structure\n",
            "methods": []
        },
        {
            "name": "SummaryDataProject",
            "id": "interface-SummaryDataProject-b5f4576a2eaca24c537a46bc64aea1bc",
            "file": "src/app/core/interfaces/summaryData.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SummaryData {\r\n  /**\r\n   * SummaryDataProject array with calculated values\r\n   */\r\n  days: SummaryDataProject[];\r\n\r\n  /**\r\n   * total revenue of all employees in one month\r\n   */\r\n  revenue: number;\r\n\r\n  /**\r\n   * external revenue of all employees in one month\r\n   */\r\n  extRevenue : number;\r\n\r\n  /**\r\n   * internal revenue of all employees in one month\r\n   */\r\n  intRevenue : number;\r\n\r\n  /**\r\n   * total working days per month\r\n   */\r\n  workingDays: number;\r\n\r\n  /**\r\n   * number of billable working days\r\n   */\r\n  billableDays: number;\r\n\r\n  /**\r\n   * total possible days - billable working days\r\n   */\r\n  nonbillableDays: number;\r\n\r\n  /**\r\n   * weighted average of team-member arve values\r\n   */\r\n  arve: number;\r\n\r\n  /**\r\n   * weighted average of team-member urve values\r\n   */\r\n  urve: number;\r\n}\r\n\r\n/**\r\n * summary-data projects structure\r\n */\r\nexport interface SummaryDataProject {\r\n  /**\r\n   * days title (e.g. 'Vacation', 'Training', 'Projects')\r\n   */\r\n  title: string;\r\n\r\n  /**\r\n   * Number of total days\r\n   */\r\n  days: number;\r\n\r\n  /**\r\n   * type equal to project-type\r\n   */\r\n  type: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "days",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Number of total days</p>\n",
                    "line": 63,
                    "rawdescription": "\n\nNumber of total days\n"
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>days title (e.g. &#39;Vacation&#39;, &#39;Training&#39;, &#39;Projects&#39;)</p>\n",
                    "line": 58,
                    "rawdescription": "\n\ndays title (e.g. 'Vacation', 'Training', 'Projects')\n"
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>type equal to project-type</p>\n",
                    "line": 68,
                    "rawdescription": "\n\ntype equal to project-type\n"
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<p>summary-data projects structure</p>\n",
            "rawdescription": "\n\nsummary-data projects structure\n",
            "methods": []
        },
        {
            "name": "SummaryValues",
            "id": "interface-SummaryValues-49732f561e87fea05ed4c2275c605b8d",
            "file": "src/app/core/services/forecasts/executive-forecasts.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { BusinessOperationsService } from \"../../shared/business-operations.service\";\r\nimport { BehaviorSubject, Observable } from \"rxjs\";\r\nimport { UtilitiesService } from \"../utilities.service\";\r\nimport { Month } from \"../../interfaces/month\";\r\nimport { ForecastService } from \"./forecast.service\";\r\nimport { FcEntry } from \"../../interfaces/fcEntry\";\r\nimport { User } from \"../../interfaces/user\";\r\nimport { FcProject } from \"../../interfaces/fcProject\";\r\nimport { Project } from \"../../interfaces/project\";\r\nimport { environment } from \"../../../../environments/environment\";\r\nimport { Team } from \"../../interfaces/team\";\r\nimport { MonthlySummaryReport } from \"../../interfaces/kpiData\";\r\nimport { GraphicSummaryReport } from \"../../interfaces/graphicData\";\r\nimport { HierarchyNode } from \"../../interfaces/hierarchyNode\";\r\nimport { FinancialControllerSummaryAPPS } from \"../../interfaces/financialAppsSummary\";\r\nimport { PageStateService } from '../../shared/page-state.service';\r\nimport { reject } from \"q\";\r\n/**\r\n * executive service\r\n */\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class ExecutiveForecastsService {\r\n  summaryValues$: BehaviorSubject<SummaryValues[]>;\r\n  monthValues$: BehaviorSubject<SummaryValues[]>;\r\n  kpiData$: BehaviorSubject<MonthlySummaryReport[]>;\r\n  kpiDataPDL$: BehaviorSubject<MonthlySummaryReport[]>;\r\n    kpiDataPL$: BehaviorSubject<MonthlySummaryReport[]>;\r\n  graphicData$: BehaviorSubject<GraphicSummaryReport[]>;\r\n  financialData$: BehaviorSubject<FinancialControllerSummaryAPPS[]>;\r\n\r\n  monthId: number = 1;\r\n  months: Month[];\r\n  projects: Project[];\r\n  teams: Team[];\r\n  hierarchy: HierarchyNode;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private BO: BusinessOperationsService,\r\n    private us: UtilitiesService,\r\n    private pageState: PageStateService,\r\n    private forecastService: ForecastService,\r\n    private utilitiesService: UtilitiesService\r\n  ) {\r\n    this.summaryValues$ = new BehaviorSubject([]);\r\n    this.monthValues$ = new BehaviorSubject([]);\r\n    this.kpiData$ = new BehaviorSubject([]);\r\n    this.kpiDataPDL$ = new BehaviorSubject([]);\r\n    this.kpiDataPL$ = new BehaviorSubject([]);\r\n    this.graphicData$ = new BehaviorSubject([]);\r\n    this.financialData$ = new BehaviorSubject([]);\r\n\r\n    this.initProjects();\r\n    this.initTeams();\r\n    this.initHierarchy();\r\n  }\r\n\r\n  initProjects(): void {\r\n    this.utilitiesService.projects$.subscribe((projects: Project[]) => {\r\n      this.projects = projects;\r\n    });\r\n  }\r\n\r\n  initTeams(): void {\r\n    this.utilitiesService.teams$.subscribe((teams: Team[]) => {\r\n      this.teams = teams;\r\n    });\r\n  }\r\n\r\n  initHierarchy(): void {\r\n    this.utilitiesService.hierarchy$.subscribe((hierarchy: HierarchyNode) => {\r\n      this.hierarchy = hierarchy;\r\n    });\r\n  }\r\n\r\n  getHierarchy(): any {\r\n    return this.hierarchy;\r\n  }\r\n\r\n  getCurrentMonth(): void {\r\n    this.months = this.us.getMonths();\r\n  }\r\n\r\n  resetSummaryValues(): void {\r\n    this.summaryValues$.next([]);\r\n    this.monthValues$.next([]);\r\n  }\r\n\r\n  initializeKpiValues(): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.http\r\n      .get<MonthlySummaryReport[]>(this.BO.companyKpiStats())\r\n      .subscribe((reports: MonthlySummaryReport[]) => {\r\n        this.kpiData$.next(reports);\r\n        resolve();\r\n      }, () => reject());\r\n    });\r\n  }\r\n\r\n  initializeKpiValuesPDL(userId: number): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.http\r\n      .get<MonthlySummaryReport[]>(this.BO.companyKpiStatsPDL(userId))\r\n      .subscribe((reports: MonthlySummaryReport[]) => {\r\n        this.kpiDataPDL$.next(reports);\r\n        resolve();\r\n      }, () => reject());\r\n    });\r\n  }\r\n  initializeKpiValuesPL(userId: number): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.http\r\n      .get<MonthlySummaryReport[]>(this.BO.companyKpiStatsPL(userId))\r\n      .subscribe((reports: MonthlySummaryReport[]) => {\r\n        this.kpiDataPL$.next(reports);\r\n        resolve();\r\n      }, () => reject());\r\n    });\r\n  }\r\n\r\n  initalizeGraphicData(monthIdFrom: number, monthIdTo: number): void {\r\n    this.http\r\n      .get(this.BO.companyGraphicStats(monthIdFrom, monthIdTo))\r\n      .subscribe((reports: GraphicSummaryReport[]) => {\r\n        this.graphicData$.next(reports);\r\n      });\r\n  }\r\n\r\n  initializeSummaryValues(monthIdFrom: number, monthIdTo: number): void {\r\n    this.http\r\n      .get(this.BO.companySummary(monthIdFrom, monthIdTo))\r\n      .subscribe((values: ProValues) => {\r\n        this.summaryValues$.next(values.period);\r\n        this.monthValues$.next(values.months);\r\n      });\r\n  }\r\n\r\n  initializeDetailValues(monthId: number): Promise<FcEntry[]> {\r\n    let promise = new Promise<FcEntry[]>((resolve: any, reject: any) => {\r\n      this.http\r\n        .get(this.BO.companyDetails(monthId))\r\n        .subscribe((forecasts: FcEntry[]) => {\r\n          this.forecastService.addForecasts(forecasts);\r\n          resolve(forecasts);\r\n        });\r\n    });\r\n    return promise;\r\n  }\r\n\r\n  initializeProbabilityDetailValues(monthId: number): Promise<FcEntry[]> {\r\n    let promise = new Promise<FcEntry[]>((resolve: any, reject: any) => {\r\n      this.http\r\n      .get<FcEntry[]>(this.BO.companyDetails(monthId))\r\n      .subscribe((forecasts: FcEntry[]) => {\r\n        resolve(forecasts);\r\n      });\r\n    });\r\n\r\n    return promise;\r\n  }\r\n\r\n  initializeFinancialData(monthIdFrom: number, monthIdTo): Promise<FinancialControllerSummaryAPPS[]> {​​​​​​​​\r\n    let promise = new Promise<FinancialControllerSummaryAPPS[]>((resolve: any, reject: any) => {​​​​​​​​\r\n    this.http\r\n          .get<FinancialControllerSummaryAPPS[]>(this.BO.financialSummary(monthIdFrom,monthIdTo))\r\n          .subscribe((financialSummary: FinancialControllerSummaryAPPS[]) => {​​​​​​​​\r\n          this.financialData$.next(financialSummary);\r\n          resolve(financialSummary);\r\n          }​​​​​​​​);\r\n        }​​​​​​​​);\r\n    return promise;\r\n  }\r\n  \r\n  \r\n\r\n  getGraphicData(): GraphicSummaryReport[] {\r\n    return this.graphicData$.getValue();\r\n  }\r\n\r\n  getKpiData(): MonthlySummaryReport[] {\r\n    return this.kpiData$.getValue();\r\n  }\r\n\r\n  getKpiPDLData(): MonthlySummaryReport[] {\r\n    return this.kpiDataPDL$.getValue();\r\n  }\r\n  \r\n  getKpiDataPL(): MonthlySummaryReport[] {\r\n    return this.kpiDataPL$.getValue();\r\n  }\r\n\r\n  getSummaryValues(): SummaryValues[] {\r\n    return this.summaryValues$.getValue();\r\n  }\r\n\r\n  getMonthValues(): SummaryValues[] {\r\n    return this.monthValues$.getValue();\r\n  }\r\n\r\n  getFinancialData(): FinancialControllerSummaryAPPS[] {\r\n    return this.financialData$.getValue();\r\n  }\r\n\r\n  calculateTeamleadValues(filter: string, team: any[]): any[] {\r\n    let teamleads: any[] = [];\r\n\r\n    if (filter === \"pl\") {\r\n      team\r\n        .filter((u: User) => u.permission === environment.roles.pl || u.roleId === 7 ) //pl or hop\r\n        .forEach((p: User) => {\r\n          let childs: number[] = team\r\n            .filter((c: User) => c.parentId === p.id)\r\n            .map((c: User) => c.id);\r\n          this.getTeamnameForPL(p.id, p.firstName + \" \" + p.lastName);\r\n          \r\n          teamleads.push({\r\n            id: p.id,\r\n            name: this.getTeamnameForPL(p.id, p.firstName + \" \" + p.lastName),\r\n            prodUnitCode : p.prodUnitCode,\r\n            childs: [p.id].concat(\r\n              team\r\n                .filter((c: User) => childs.indexOf(c.parentId) >= 0)\r\n                .map((c: User) => c.id)\r\n                .concat(childs)\r\n            ),\r\n          });\r\n        });\r\n    } else {\r\n      team\r\n        .filter(\r\n          (u: User) =>\r\n            u.permission === environment.roles.pdl ||\r\n            u.permission === environment.roles.pl\r\n        )\r\n        .forEach((p: User) => {\r\n          teamleads.push({\r\n            id: p.id,\r\n            name: p.firstName + \" \" + p.lastName,\r\n            prodUnitCode : p.prodUnitCode,\r\n            childs: [p.id].concat(\r\n              team\r\n                .filter((c: User) => c.parentId === p.id)\r\n                .map((c: User) => c.id)\r\n            ),\r\n          });\r\n        });\r\n    }\r\n\r\n    teamleads.forEach((teamlead: any) => {\r\n      teamlead.projectDays = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => u.projectDays)\r\n        .reduce((a, b) => a + b, 0);\r\n\r\n      teamlead.billableDays = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => u.billableDays)\r\n        .reduce((a, b) => a + b, 0);\r\n\r\n      teamlead.vacationDays = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => u.vacationDays)\r\n        .reduce((a, b) => a + b, 0);\r\n\r\n      teamlead.totalDays = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => u.totalDays)\r\n        .reduce((a, b) => a + b, 0);\r\n\r\n      teamlead.ros = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => u.ros)\r\n        .reduce((a, b) => a + b, 0);\r\n\r\n      let fteCss: number = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => u.fte)\r\n        .reduce((a, b) => a + b, 0);\r\n      \r\n      teamlead.fte = fteCss;\r\n\r\n      teamlead.cor = teamlead.ros / teamlead.billableDays;\r\n\r\n      teamlead.arve = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => parseInt(u.arve, 10))\r\n        .reduce((a, b) => a + b, 0);\r\n      teamlead.arve = (teamlead.arve / fteCss).toFixed(0);\r\n\r\n      teamlead.urve = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => parseInt(u.urve, 10))\r\n        .reduce((a, b) => a + b, 0);\r\n      teamlead.urve = (teamlead.urve / fteCss).toFixed(0);\r\n    });\r\n\r\n    return teamleads;\r\n  }\r\n\r\n  getTeamnameForPL(teamLeadId: number, teamLeadName: string): string {\r\n    let t: Team[] = this.teams.filter(\r\n      (team: Team) => team.teamLeadId == teamLeadId\r\n    );\r\n    if (t.length > 0) {\r\n      return t[0].name;\r\n    } else {\r\n      return teamLeadName;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns an observable of the period forecast data for the company\r\n   * Used for csv export\r\n   *\r\n   * @param exportValues\r\n   */\r\n  getCsvExportData(monthIdFrom: number, monthIdTo: number): Observable<any> {\r\n    const httpOptions: object = {\r\n      responseType: \"blob\" as \"json\",\r\n    };\r\n\r\n    return this.http.get<any>(\r\n      this.BO.companyCsvExport(monthIdFrom, monthIdTo),\r\n      httpOptions\r\n    );\r\n  }\r\n}\r\n\r\nexport interface ProValues {\r\n  period: SummaryValues[];\r\n  months: SummaryValues[];\r\n}\r\n\r\nexport interface SummaryValues {\r\n  monthId: number;\r\n  probabilityId: number;\r\n  billableDays: number;\r\n  nonBillableDays: number;\r\n  vacationDays: number;\r\n  trainingDays: number;\r\n  businessDays: number;\r\n  benchDays: number;\r\n  workingDays: number;\r\n  fteCss: number;\r\n  cor: number;\r\n  arve: number;\r\n  urve: number;\r\n  ros: number;\r\n  external: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "arve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 350
                },
                {
                    "name": "benchDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 346
                },
                {
                    "name": "billableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 341
                },
                {
                    "name": "businessDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 345
                },
                {
                    "name": "cor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 349
                },
                {
                    "name": "external",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 353
                },
                {
                    "name": "fteCss",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 348
                },
                {
                    "name": "monthId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 339
                },
                {
                    "name": "nonBillableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 342
                },
                {
                    "name": "probabilityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 340
                },
                {
                    "name": "ros",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 352
                },
                {
                    "name": "trainingDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 344
                },
                {
                    "name": "urve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 351
                },
                {
                    "name": "vacationDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 343
                },
                {
                    "name": "workingDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 347
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "SummaryValues",
            "id": "interface-SummaryValues-e36e2aa0e03da5e2244e65d8a5a451de-1",
            "file": "src/app/forecast/components/executive-chart-pdl/executive-chart-pdl.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, OnInit, Inject } from \"@angular/core\";\r\nimport { Chart } from \"chart.js\";\r\nimport {\r\n  MatDialogRef,\r\n  MAT_DIALOG_DATA\r\n} from \"@angular/material/dialog\";\r\nimport { ExecutiveForecastsService } from \"../../../core/services/forecasts/executive-forecasts.service\";\r\nimport { MonthlySummaryReport } from \"../../../core/interfaces/kpiData\";\r\nimport { PageStateService } from \"../../../core/shared/page-state.service\";\r\nimport { DatePipe } from '@angular/common';\r\n\r\n@Component({\r\n  selector: \"app-executive-chart-pdl\",\r\n  templateUrl: \"./executive-chart-pdl.component.html\",\r\n  styleUrls: [\"./executive-chart-pdl.component.scss\"]\r\n})\r\nexport class ExecutiveChartPdlComponent implements OnInit {\r\n\r\n  showComponent: boolean = false;\r\n  \r\n  summaryValuesArray: SummaryValues[];\r\n  \r\n  reports: MonthlySummaryReport[];\r\n\r\n  monthLabels: string[];\r\n\r\n  /*\r\n   *ChartJs object which will render the ARVE/URVE chart\r\n   */\r\n  arveUrveChart;\r\n  /*\r\n   * ARVE set for total ARVE/month for the next 6 months\r\n   */\r\n  arve: number[];\r\n  /*\r\n   * URVE set for total URVE/month for the next 6 months\r\n   */\r\n  urve: number[];\r\n\r\n  /*\r\n   *ChartJs object which will render the COR chart\r\n   */\r\n  corChart;\r\n  /*\r\n   * COR set for total COR/month for the next 6 months\r\n   */\r\n  cor: number[];\r\n\r\n  /*\r\n   *ChartJs object which will render the Revenue chart\r\n   */\r\n  revenueChart;\r\n  /*\r\n   * Internal revenue set for internal revenue/month for the next 6 months\r\n   */\r\n  intRev: number[];\r\n  /*\r\n   * External revenue set for external revenue/month for the next 6 months\r\n   */\r\n  extRev: number[];\r\n  /*\r\n   * Total revenue set for total revenue/month for the next 6 months\r\n   */\r\n  totalRev: number[];\r\n\r\n  fte: number[];\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<ExecutiveChartPdlComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    private executiveService: ExecutiveForecastsService,\r\n    private pageState: PageStateService,\r\n    private datePipe: DatePipe,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.reports = this.executiveService.getKpiPDLData();\r\n    this.reports = this.reports.sort(function(a, b) { return a.monthId-b.monthId });\r\n    \r\n    /**initialize arve to empty set */\r\n    this.arve = [];\r\n    \r\n    /**initialize urve to empty set */\r\n    this.urve = [];\r\n    \r\n    /**initialize cor to empty set */\r\n    this.cor = [];\r\n    \r\n    /**initialize extRev to empty set */\r\n    this.extRev = [];\r\n    \r\n    /**initialize intRev to empty set */\r\n    this.intRev = [];\r\n    \r\n    /**initialize totalRev to empty set */\r\n    this.totalRev = [];\r\n\r\n    this.monthLabels = [];\r\n\r\n    this.fte = [];\r\n\r\n    if (this.reports.length > 0) {\r\n      this.processTableData(this.reports);\r\n      this.showComponent = true;    \r\n    }   \r\n  }\r\n\r\n  processTableData(reports: MonthlySummaryReport[]) : void {\r\n    for (let report of reports) {\r\n      this.arve.push(report.arve * 100);\r\n      this.urve.push(report.urve * 100);\r\n      this.cor.push(report.cor);\r\n      this.intRev.push(report.internalRevenue);\r\n      this.fte.push(report.fte);\r\n      this.extRev.push(report.externalRevenue);\r\n      this.totalRev.push(report.ros);\r\n      this.monthLabels.push(report.month.charAt(0).toUpperCase() + report.month.slice(1) + ' \\'' + (report.year % 100).toString());\r\n    }\r\n\r\n    this.arveUrveChart = new Chart(\"arve-urve\", {\r\n      type: \"bar\",\r\n      data: {\r\n        labels: this.monthLabels,\r\n        datasets: [\r\n          {\r\n            label: \"ARVE\",\r\n            backgroundColor: \"#95E616\",\r\n            data: this.arve\r\n          },\r\n          {\r\n            label: \"URVE\",\r\n            backgroundColor: \"#FF304C\",\r\n            data: this.urve\r\n          }\r\n        ]\r\n      },\r\n      options: {\r\n        legend: {\r\n          display: false\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              barPercentage: 0.7,\r\n              categoryPercentage: 0.5\r\n            }\r\n          ],\r\n          yAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              ticks: {\r\n                min: 0,\r\n                max: 100\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    });\r\n\r\n    this.corChart = new Chart(\"cor\", {\r\n      type: \"line\",\r\n      data: {\r\n        labels: this.monthLabels,\r\n        datasets: [\r\n          {\r\n            data: this.cor,\r\n            borderColor: \"#7e39ba\",\r\n            fill: false\r\n          }\r\n        ]\r\n      },\r\n      options: {\r\n        legend: {\r\n          display: false\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              barPercentage: 0.5,\r\n              categoryPercentage: 0.5\r\n            }\r\n          ],\r\n          yAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              ticks: {\r\n                min: 0\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    });\r\n\r\n    this.revenueChart = this.arveUrveChart = new Chart(\"revenue\", {\r\n      type: \"bar\",\r\n      data: {\r\n        labels: this.monthLabels,\r\n        datasets: [\r\n          {\r\n            label: \"INT\",\r\n            backgroundColor: \"#12abdb\",\r\n            data: this.intRev\r\n          },\r\n          {\r\n            label: \"EXT\",\r\n            backgroundColor: \"#0070ad\",\r\n            data: this.extRev\r\n          },\r\n          {\r\n            label: \"TOTAL\",\r\n            backgroundColor: \"#2b0a3d\",\r\n            data: this.totalRev\r\n          }\r\n        ]\r\n      },\r\n      options: {\r\n        legend: {\r\n          display: true\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              barPercentage: 0.7,\r\n              categoryPercentage: 0.5\r\n            }\r\n          ],\r\n          yAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              ticks: {\r\n                min: 0\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  total(numArray: number[]) {\r\n    return numArray.reduce(function(a, b) {\r\n      return a + b;\r\n    }, 0);\r\n  }\r\n\r\n  average(numArray: number[]) : number {\r\n    return this.total(numArray) / numArray.length;\r\n  }\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  exportCSV(): void {\r\n    this.pageState.showSpinner();\r\n    let lineEnding = \"\\r\\n\";\r\n    let header = \"KPI;\" + this.monthLabels.join(\";\") + lineEnding;\r\n    let body: string = \"ARVE;\" + this.arve.map(this.numberToString).join(\";\") + lineEnding + \r\n      \"URVE;\" + this.urve.map(this.numberToString).join(\";\") + lineEnding +\r\n      \"COR;\" + this.cor.map(this.numberToString).join(\";\") + lineEnding +\r\n      \"Int. Revenue;\" + this.intRev.map(this.numberToString).join(\";\") + lineEnding + \r\n      \"Ext. Revenue;\" + this.extRev.map(this.numberToString).join(\";\") + lineEnding +\r\n      \"Total Revenue;\" + this.totalRev.map(this.numberToString).join(\";\") + lineEnding +\r\n      \"FTE;\" + this.fte.map(this.numberToString).join(\";\") + lineEnding;\r\n    const data = header + body;\r\n    const blob: Blob = new Blob([data], { type: \"text/csv\" });\r\n    const filename: string = this.datePipe.transform(new Date(), \"yyyyMMdd\") + \"-KPIOverview.csv\";    \r\n    this.pageState.hideSpinner();\r\n\r\n    //For IE\r\n    let navigator: any = window.navigator;\r\n    if (navigator.msSaveOrOpenBlob) {\r\n      navigator.msSaveOrOpenBlob(blob, filename);\r\n    //For any other browser\r\n    } else {\r\n      const url: string = window.URL.createObjectURL(blob);\r\n\r\n      let a: HTMLAnchorElement = document.createElement(\"a\");\r\n      a.href = url;\r\n      a.download = filename;\r\n\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      document.body.removeChild(a);\r\n      window.URL.revokeObjectURL(url);\r\n    }\r\n  }\r\n\r\n  numberToString(no: number): string {\r\n    return no.toLocaleString(\"de\",  { minimumFractionDigits: 0, maximumFractionDigits: 2 } ).replace(\".\",\"\");\r\n  }\r\n}\r\n\r\nexport interface SummaryValues {\r\n  monthId: number;\r\n  probabilityId: number;\r\n  billableDays: number;\r\n  nonBillableDays: number;\r\n  vacationDays: number;\r\n  trainingDays: number;\r\n  businessDays: number;\r\n  benchDays: number;\r\n  workingDays: number;\r\n  fteCss: number;\r\n  cor: number;\r\n  arve: number;\r\n  fte: number;\r\n  urve: number;\r\n  ros: number;\r\n  external: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "arve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 329
                },
                {
                    "name": "benchDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 325
                },
                {
                    "name": "billableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 320
                },
                {
                    "name": "businessDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 324
                },
                {
                    "name": "cor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 328
                },
                {
                    "name": "external",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 333
                },
                {
                    "name": "fte",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 330
                },
                {
                    "name": "fteCss",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 327
                },
                {
                    "name": "monthId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 318
                },
                {
                    "name": "nonBillableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 321
                },
                {
                    "name": "probabilityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 319
                },
                {
                    "name": "ros",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 332
                },
                {
                    "name": "trainingDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 323
                },
                {
                    "name": "urve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 331
                },
                {
                    "name": "vacationDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 322
                },
                {
                    "name": "workingDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 326
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "SummaryValues-1"
        },
        {
            "name": "SummaryValues",
            "id": "interface-SummaryValues-24b61e416c085ccde162ec5a5b7fc914-2",
            "file": "src/app/forecast/components/executive-chart/executive-chart.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, OnInit, Inject } from \"@angular/core\";\r\nimport { Chart } from \"chart.js\";\r\nimport {\r\n  MatDialogRef,\r\n  MAT_DIALOG_DATA\r\n} from \"@angular/material/dialog\";\r\nimport { ExecutiveForecastsService } from \"../../../core/services/forecasts/executive-forecasts.service\";\r\nimport { MonthlySummaryReport } from \"../../../core/interfaces/kpiData\";\r\nimport { PageStateService } from \"../../../core/shared/page-state.service\";\r\nimport { DatePipe } from '@angular/common';\r\n\r\n@Component({\r\n  selector: \"app-executive-chart\",\r\n  templateUrl: \"./executive-chart.component.html\",\r\n  styleUrls: [\"./executive-chart.component.scss\"]\r\n})\r\nexport class ExecutiveChartComponent implements OnInit {\r\n\r\n  showComponent: boolean = false;\r\n  \r\n  summaryValuesArray: SummaryValues[];\r\n  \r\n  reports: MonthlySummaryReport[];\r\n\r\n  monthLabels: string[];\r\n\r\n  /*\r\n   *ChartJs object which will render the ARVE/URVE chart\r\n   */\r\n  arveUrveChart;\r\n  /*\r\n   * ARVE set for total ARVE/month for the next 6 months\r\n   */\r\n  arve: number[];\r\n  /*\r\n   * URVE set for total URVE/month for the next 6 months\r\n   */\r\n  urve: number[];\r\n\r\n  /*\r\n   *ChartJs object which will render the COR chart\r\n   */\r\n  corChart;\r\n  /*\r\n   * COR set for total COR/month for the next 6 months\r\n   */\r\n  cor: number[];\r\n\r\n  /*\r\n   *ChartJs object which will render the Revenue chart\r\n   */\r\n  revenueChart;\r\n  /*\r\n   * Internal revenue set for internal revenue/month for the next 6 months\r\n   */\r\n  intRev: number[];\r\n  /*\r\n   * External revenue set for external revenue/month for the next 6 months\r\n   */\r\n  extRev: number[];\r\n  /*\r\n   * Total revenue set for total revenue/month for the next 6 months\r\n   */\r\n  totalRev: number[];\r\n\r\n  fte: number[];\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<ExecutiveChartComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    private executiveService: ExecutiveForecastsService,\r\n    private pageState: PageStateService,\r\n    private datePipe: DatePipe,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.reports = this.executiveService.getKpiData();\r\n    this.reports = this.reports.sort(function(a, b) { return a.monthId-b.monthId });\r\n    \r\n    /**initialize arve to empty set */\r\n    this.arve = [];\r\n    \r\n    /**initialize urve to empty set */\r\n    this.urve = [];\r\n    \r\n    /**initialize cor to empty set */\r\n    this.cor = [];\r\n    \r\n    /**initialize extRev to empty set */\r\n    this.extRev = [];\r\n    \r\n    /**initialize intRev to empty set */\r\n    this.intRev = [];\r\n    \r\n    /**initialize totalRev to empty set */\r\n    this.totalRev = [];\r\n\r\n    this.monthLabels = [];\r\n\r\n    this.fte = [];\r\n\r\n    if (this.reports.length > 0) {\r\n      this.processTableData(this.reports);\r\n      this.showComponent = true;    \r\n    }   \r\n  }\r\n\r\n  processTableData(reports: MonthlySummaryReport[]) : void {\r\n    for (let report of reports) {\r\n      this.arve.push(report.arve * 100);\r\n      this.urve.push(report.urve * 100);\r\n      this.cor.push(report.cor);\r\n      this.intRev.push(report.internalRevenue);\r\n      this.fte.push(report.fte);\r\n      this.extRev.push(report.externalRevenue);\r\n      this.totalRev.push(report.ros);\r\n      this.monthLabels.push(report.month.charAt(0).toUpperCase() + report.month.slice(1) + ' \\'' + (report.year % 100).toString());\r\n    }\r\n\r\n    this.arveUrveChart = new Chart(\"arve-urve\", {\r\n      type: \"bar\",\r\n      data: {\r\n        labels: this.monthLabels,\r\n        datasets: [\r\n          {\r\n            label: \"ARVE\",\r\n            backgroundColor: \"#95E616\",\r\n            data: this.arve\r\n          },\r\n          {\r\n            label: \"URVE\",\r\n            backgroundColor: \"#FF304C\",\r\n            data: this.urve\r\n          }\r\n        ]\r\n      },\r\n      options: {\r\n        legend: {\r\n          display: false\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              barPercentage: 0.7,\r\n              categoryPercentage: 0.5\r\n            }\r\n          ],\r\n          yAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              ticks: {\r\n                min: 0,\r\n                max: 100\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    });\r\n\r\n    this.corChart = new Chart(\"cor\", {\r\n      type: \"line\",\r\n      data: {\r\n        labels: this.monthLabels,\r\n        datasets: [\r\n          {\r\n            data: this.cor,\r\n            borderColor: \"#7e39ba\",\r\n            fill: false\r\n          }\r\n        ]\r\n      },\r\n      options: {\r\n        legend: {\r\n          display: false\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              barPercentage: 0.5,\r\n              categoryPercentage: 0.5\r\n            }\r\n          ],\r\n          yAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              ticks: {\r\n                min: 0\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    });\r\n\r\n    this.revenueChart = this.arveUrveChart = new Chart(\"revenue\", {\r\n      type: \"bar\",\r\n      data: {\r\n        labels: this.monthLabels,\r\n        datasets: [\r\n          {\r\n            label: \"INT\",\r\n            backgroundColor: \"#12abdb\",\r\n            data: this.intRev\r\n          },\r\n          {\r\n            label: \"EXT\",\r\n            backgroundColor: \"#0070ad\",\r\n            data: this.extRev\r\n          },\r\n          {\r\n            label: \"TOTAL\",\r\n            backgroundColor: \"#2b0a3d\",\r\n            data: this.totalRev\r\n          }\r\n        ]\r\n      },\r\n      options: {\r\n        legend: {\r\n          display: true\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              barPercentage: 0.7,\r\n              categoryPercentage: 0.5\r\n            }\r\n          ],\r\n          yAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              ticks: {\r\n                min: 0\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  total(numArray: number[]) {\r\n    return numArray.reduce(function(a, b) {\r\n      return a + b;\r\n    }, 0);\r\n  }\r\n\r\n  average(numArray: number[]) : number {\r\n    return this.total(numArray) / numArray.length;\r\n  }\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  exportCSV(): void {\r\n    this.pageState.showSpinner();\r\n    let lineEnding = \"\\r\\n\";\r\n    let header = \"KPI;\" + this.monthLabels.join(\";\") + lineEnding;\r\n    let body: string = \"ARVE;\" + this.arve.map(this.numberToString).join(\";\") + lineEnding + \r\n      \"URVE;\" + this.urve.map(this.numberToString).join(\";\") + lineEnding +\r\n      \"COR;\" + this.cor.map(this.numberToString).join(\";\") + lineEnding +\r\n      \"Int. Revenue;\" + this.intRev.map(this.numberToString).join(\";\") + lineEnding + \r\n      \"Ext. Revenue;\" + this.extRev.map(this.numberToString).join(\";\") + lineEnding +\r\n      \"Total Revenue;\" + this.totalRev.map(this.numberToString).join(\";\") + lineEnding +\r\n      \"FTE;\" + this.fte.map(this.numberToString).join(\";\") + lineEnding;\r\n    const data = header + body;\r\n    const blob: Blob = new Blob([data], { type: \"text/csv\" });\r\n    const filename: string = this.datePipe.transform(new Date(), \"yyyyMMdd\") + \"-KPIOverview.csv\";    \r\n    this.pageState.hideSpinner();\r\n\r\n    //For IE\r\n    let navigator: any = window.navigator;\r\n    if (navigator.msSaveOrOpenBlob) {\r\n      navigator.msSaveOrOpenBlob(blob, filename);\r\n    //For any other browser\r\n    } else {\r\n      const url: string = window.URL.createObjectURL(blob);\r\n\r\n      let a: HTMLAnchorElement = document.createElement(\"a\");\r\n      a.href = url;\r\n      a.download = filename;\r\n\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      document.body.removeChild(a);\r\n      window.URL.revokeObjectURL(url);\r\n    }\r\n  }\r\n\r\n  numberToString(no: number): string {\r\n    return no.toLocaleString(\"de\",  { minimumFractionDigits: 0, maximumFractionDigits: 2 } ).replace(\".\",\"\");\r\n  }\r\n}\r\n\r\nexport interface SummaryValues {\r\n  monthId: number;\r\n  probabilityId: number;\r\n  billableDays: number;\r\n  nonBillableDays: number;\r\n  vacationDays: number;\r\n  trainingDays: number;\r\n  businessDays: number;\r\n  benchDays: number;\r\n  workingDays: number;\r\n  fteCss: number;\r\n  cor: number;\r\n  arve: number;\r\n  fte: number;\r\n  urve: number;\r\n  ros: number;\r\n  external: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "arve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 329
                },
                {
                    "name": "benchDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 325
                },
                {
                    "name": "billableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 320
                },
                {
                    "name": "businessDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 324
                },
                {
                    "name": "cor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 328
                },
                {
                    "name": "external",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 333
                },
                {
                    "name": "fte",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 330
                },
                {
                    "name": "fteCss",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 327
                },
                {
                    "name": "monthId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 318
                },
                {
                    "name": "nonBillableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 321
                },
                {
                    "name": "probabilityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 319
                },
                {
                    "name": "ros",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 332
                },
                {
                    "name": "trainingDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 323
                },
                {
                    "name": "urve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 331
                },
                {
                    "name": "vacationDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 322
                },
                {
                    "name": "workingDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 326
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "SummaryValues-2"
        },
        {
            "name": "SummaryValues",
            "id": "interface-SummaryValues-a47bd418cfc9bf10a2b60bcf9fa003bd-3",
            "file": "src/app/forecast/components/executive-chart-pl/executive-chart-pl.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, OnInit, Inject } from \"@angular/core\";\r\nimport { Chart } from \"chart.js\";\r\nimport {\r\n  MatDialogRef,\r\n  MAT_DIALOG_DATA\r\n} from \"@angular/material/dialog\";\r\nimport { ExecutiveForecastsService } from \"../../../core/services/forecasts/executive-forecasts.service\";\r\nimport { MonthlySummaryReport } from \"../../../core/interfaces/kpiData\";\r\nimport { PageStateService } from \"../../../core/shared/page-state.service\";\r\nimport { DatePipe } from '@angular/common';\r\n\r\n@Component({\r\n  selector: \"app-executive-chart-pl\",\r\n  templateUrl: \"./executive-chart-pl.component.html\",\r\n  styleUrls: [\"./executive-chart-pl.component.scss\"]\r\n})\r\nexport class ExecutiveChartPlComponent implements OnInit {\r\n\r\n  showComponent: boolean = false;\r\n  \r\n  summaryValuesArray: SummaryValues[];\r\n  \r\n  reports: MonthlySummaryReport[];\r\n\r\n  monthLabels: string[];\r\n\r\n  /*\r\n   *ChartJs object which will render the ARVE/URVE chart\r\n   */\r\n  arveUrveChart;\r\n  /*\r\n   * ARVE set for total ARVE/month for the next 6 months\r\n   */\r\n  arve: number[];\r\n  /*\r\n   * URVE set for total URVE/month for the next 6 months\r\n   */\r\n  urve: number[];\r\n\r\n  /*\r\n   *ChartJs object which will render the COR chart\r\n   */\r\n  corChart;\r\n  /*\r\n   * COR set for total COR/month for the next 6 months\r\n   */\r\n  cor: number[];\r\n\r\n  /*\r\n   *ChartJs object which will render the Revenue chart\r\n   */\r\n  revenueChart;\r\n  /*\r\n   * Internal revenue set for internal revenue/month for the next 6 months\r\n   */\r\n  intRev: number[];\r\n  /*\r\n   * External revenue set for external revenue/month for the next 6 months\r\n   */\r\n  extRev: number[];\r\n  /*\r\n   * Total revenue set for total revenue/month for the next 6 months\r\n   */\r\n  totalRev: number[];\r\n\r\n  fte: number[];\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<ExecutiveChartPlComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    private executiveService: ExecutiveForecastsService,\r\n    private pageState: PageStateService,\r\n    private datePipe: DatePipe,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.reports = this.executiveService.getKpiDataPL();\r\n    this.reports = this.reports.sort(function(a, b) { return a.monthId-b.monthId });\r\n    \r\n    /**initialize arve to empty set */\r\n    this.arve = [];\r\n    \r\n    /**initialize urve to empty set */\r\n    this.urve = [];\r\n    \r\n    /**initialize cor to empty set */\r\n    this.cor = [];\r\n    \r\n    /**initialize extRev to empty set */\r\n    this.extRev = [];\r\n    \r\n    /**initialize intRev to empty set */\r\n    this.intRev = [];\r\n    \r\n    /**initialize totalRev to empty set */\r\n    this.totalRev = [];\r\n\r\n    this.monthLabels = [];\r\n\r\n    this.fte = [];\r\n\r\n    if (this.reports.length > 0) {\r\n      this.processTableData(this.reports);\r\n      this.showComponent = true;    \r\n    }   \r\n  }\r\n\r\n  processTableData(reports: MonthlySummaryReport[]) : void {\r\n    for (let report of reports) {\r\n      this.arve.push(report.arve * 100);\r\n      this.urve.push(report.urve * 100);\r\n      this.cor.push(report.cor);\r\n      this.intRev.push(report.internalRevenue);\r\n      this.fte.push(report.fte);\r\n      this.extRev.push(report.externalRevenue);\r\n      this.totalRev.push(report.ros);\r\n      this.monthLabels.push(report.month.charAt(0).toUpperCase() + report.month.slice(1) + ' \\'' + (report.year % 100).toString());\r\n    }\r\n\r\n    this.arveUrveChart = new Chart(\"arve-urve\", {\r\n      type: \"bar\",\r\n      data: {\r\n        labels: this.monthLabels,\r\n        datasets: [\r\n          {\r\n            label: \"ARVE\",\r\n            backgroundColor: \"#95E616\",\r\n            data: this.arve\r\n          },\r\n          {\r\n            label: \"URVE\",\r\n            backgroundColor: \"#FF304C\",\r\n            data: this.urve\r\n          }\r\n        ]\r\n      },\r\n      options: {\r\n        legend: {\r\n          display: false\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              barPercentage: 0.7,\r\n              categoryPercentage: 0.5\r\n            }\r\n          ],\r\n          yAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              ticks: {\r\n                min: 0,\r\n                max: 100\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    });\r\n\r\n    this.corChart = new Chart(\"cor\", {\r\n      type: \"line\",\r\n      data: {\r\n        labels: this.monthLabels,\r\n        datasets: [\r\n          {\r\n            data: this.cor,\r\n            borderColor: \"#7e39ba\",\r\n            fill: false\r\n          }\r\n        ]\r\n      },\r\n      options: {\r\n        legend: {\r\n          display: false\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              barPercentage: 0.5,\r\n              categoryPercentage: 0.5\r\n            }\r\n          ],\r\n          yAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              ticks: {\r\n                min: 0\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    });\r\n\r\n    this.revenueChart = this.arveUrveChart = new Chart(\"revenue\", {\r\n      type: \"bar\",\r\n      data: {\r\n        labels: this.monthLabels,\r\n        datasets: [\r\n          {\r\n            label: \"INT\",\r\n            backgroundColor: \"#12abdb\",\r\n            data: this.intRev\r\n          },\r\n          {\r\n            label: \"EXT\",\r\n            backgroundColor: \"#0070ad\",\r\n            data: this.extRev\r\n          },\r\n          {\r\n            label: \"TOTAL\",\r\n            backgroundColor: \"#2b0a3d\",\r\n            data: this.totalRev\r\n          }\r\n        ]\r\n      },\r\n      options: {\r\n        legend: {\r\n          display: true\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              barPercentage: 0.7,\r\n              categoryPercentage: 0.5\r\n            }\r\n          ],\r\n          yAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              ticks: {\r\n                min: 0\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  total(numArray: number[]) {\r\n    return numArray.reduce(function(a, b) {\r\n      return a + b;\r\n    }, 0);\r\n  }\r\n\r\n  average(numArray: number[]) : number {\r\n    return this.total(numArray) / numArray.length;\r\n  }\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  exportCSV(): void {\r\n    this.pageState.showSpinner();\r\n    let lineEnding = \"\\r\\n\";\r\n    let header = \"KPI;\" + this.monthLabels.join(\";\") + lineEnding;\r\n    let body: string = \"ARVE;\" + this.arve.map(this.numberToString).join(\";\") + lineEnding + \r\n      \"URVE;\" + this.urve.map(this.numberToString).join(\";\") + lineEnding +\r\n      \"COR;\" + this.cor.map(this.numberToString).join(\";\") + lineEnding +\r\n      \"Int. Revenue;\" + this.intRev.map(this.numberToString).join(\";\") + lineEnding + \r\n      \"Ext. Revenue;\" + this.extRev.map(this.numberToString).join(\";\") + lineEnding +\r\n      \"Total Revenue;\" + this.totalRev.map(this.numberToString).join(\";\") + lineEnding +\r\n      \"FTE;\" + this.fte.map(this.numberToString).join(\";\") + lineEnding;\r\n    const data = header + body;\r\n    const blob: Blob = new Blob([data], { type: \"text/csv\" });\r\n    const filename: string = this.datePipe.transform(new Date(), \"yyyyMMdd\") + \"-KPIOverview.csv\";    \r\n    this.pageState.hideSpinner();\r\n\r\n    //For IE\r\n    let navigator: any = window.navigator;\r\n    if (navigator.msSaveOrOpenBlob) {\r\n      navigator.msSaveOrOpenBlob(blob, filename);\r\n    //For any other browser\r\n    } else {\r\n      const url: string = window.URL.createObjectURL(blob);\r\n\r\n      let a: HTMLAnchorElement = document.createElement(\"a\");\r\n      a.href = url;\r\n      a.download = filename;\r\n\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      document.body.removeChild(a);\r\n      window.URL.revokeObjectURL(url);\r\n    }\r\n  }\r\n\r\n  numberToString(no: number): string {\r\n    return no.toLocaleString(\"de\",  { minimumFractionDigits: 0, maximumFractionDigits: 2 } ).replace(\".\",\"\");\r\n  }\r\n}\r\n\r\nexport interface SummaryValues {\r\n  monthId: number;\r\n  probabilityId: number;\r\n  billableDays: number;\r\n  nonBillableDays: number;\r\n  vacationDays: number;\r\n  trainingDays: number;\r\n  businessDays: number;\r\n  benchDays: number;\r\n  workingDays: number;\r\n  fteCss: number;\r\n  cor: number;\r\n  arve: number;\r\n  fte: number;\r\n  urve: number;\r\n  ros: number;\r\n  external: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "arve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 329
                },
                {
                    "name": "benchDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 325
                },
                {
                    "name": "billableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 320
                },
                {
                    "name": "businessDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 324
                },
                {
                    "name": "cor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 328
                },
                {
                    "name": "external",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 333
                },
                {
                    "name": "fte",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 330
                },
                {
                    "name": "fteCss",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 327
                },
                {
                    "name": "monthId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 318
                },
                {
                    "name": "nonBillableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 321
                },
                {
                    "name": "probabilityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 319
                },
                {
                    "name": "ros",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 332
                },
                {
                    "name": "trainingDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 323
                },
                {
                    "name": "urve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 331
                },
                {
                    "name": "vacationDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 322
                },
                {
                    "name": "workingDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 326
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "SummaryValues-3"
        },
        {
            "name": "SummaryValues",
            "id": "interface-SummaryValues-e140403c9fc2222a100fadf86fe41ef3-4",
            "file": "src/app/forecast/components/executive-summary/executive-summary.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, Input, ChangeDetectorRef } from '@angular/core';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { PageStateService } from '../../../core/shared/page-state.service';\r\n\r\nimport { CalculationService } from \"../../../core/services/forecasts/calculation.service\";\r\nimport { ProbabilitySummary } from \"../../../core/interfaces/probabilitySummary\";\r\nimport { ProbabilityRecord } from \"../../../core/interfaces/probabilityRecord\";\r\nimport { DatePipe } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-executive-summary',\r\n  templateUrl: './executive-summary.component.html',\r\n  styleUrls: ['./executive-summary.component.scss']\r\n})\r\nexport class ExecutiveSummaryComponent implements OnInit {\r\n  @Input('summary') summary: any;\r\n\r\n  loaded = false;\r\n\r\n  probabilitySummary: ProbabilitySummary;\r\n  \r\n  probabilitySource: MatTableDataSource<ProbabilityRecord>;\r\n\r\n  displayedColumns: string[] = [\r\n    \"probabilityId\",\r\n    \"total\",\r\n    \"billableDays\",\r\n    \"vacationDays\",\r\n    \"workingDays\",\r\n    \"cor\",\r\n    \"ros\",\r\n    \"ext\",\r\n    \"int\",\r\n    \"arve\",\r\n    \"urve\"\r\n  ];\r\n\r\n  constructor(\r\n    private pageState: PageStateService,\r\n    private changeDetectorRefs: ChangeDetectorRef,\r\n    private calculationService: CalculationService,\r\n    private datePipe: DatePipe,\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.calculationService.probabilitySummary$.subscribe((summ: ProbabilitySummary) => {\r\n      if(!this.loaded) {\r\n        this.loaded = true;\r\n      } else {\r\n        this.probabilitySummary = summ;\r\n        this.probabilitySource = new MatTableDataSource(summ.probabilites);\r\n        this.changeDetectorRefs.detectChanges();\r\n        setTimeout(() => {\r\n          this.pageState.hideSpinner();\r\n        }, 500);\r\n      }\r\n    });\r\n  }\r\n\r\n  exportCSV(): void {\r\n    this.pageState.showSpinner();\r\n    let lineEnding = \"\\r\\n\";\r\n\r\n    let header = \"KPI;\" + this.probabilitySummary.probabilites.map(x => x.name).join(\";\") + \";Total\" + lineEnding;\r\n    let body = \"ARVE;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.arve)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.arve) + lineEnding\r\n      + \"URVE;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.urve)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.urve) + lineEnding\r\n      + \"ROS;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.revenue)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.revenue) + lineEnding\r\n      + \"Int. Revenue;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.internalRevenue)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.internalRevenue) + lineEnding\r\n      + \"Ext. Revenue;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.externalRevenue)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.externalRevenue) + lineEnding\r\n      + \"COR;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.cor)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.cor) + lineEnding\r\n      + \"Paid Days;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.paidDays)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.paidDays) + lineEnding\r\n      + \"Vacation Days;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.vacationDays)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.vacationDays) + lineEnding\r\n      + \"Billable Days;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.billableDays)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.billableDays) + lineEnding\r\n      + \"Project Days;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.billableDays + x.nonBillableDays)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.nonBillableDays + this.probabilitySummary.billableDays) + lineEnding;\r\n\r\n    const data = header + body;\r\n    const blob: Blob = new Blob([data], { type: \"text/csv\" });\r\n    const filename: string = this.datePipe.transform(new Date(), \"yyyyMMdd\") + \"-SummaryProbabilities.csv\";    \r\n    this.pageState.hideSpinner();\r\n\r\n    let navigator: any = window.navigator;\r\n    //For IE\r\n    if (navigator.msSaveOrOpenBlob) {\r\n      navigator.msSaveOrOpenBlob(blob, filename);\r\n    //For any other browser\r\n    } else {\r\n      const url: string = window.URL.createObjectURL(blob);\r\n\r\n      let a: HTMLAnchorElement = document.createElement(\"a\");\r\n      a.href = url;\r\n      a.download = filename;\r\n\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      document.body.removeChild(a);\r\n      window.URL.revokeObjectURL(url);\r\n    }\r\n  }\r\n\r\n  numberToString(no: number): string {\r\n    return no.toLocaleString(\"de\",  { minimumFractionDigits: 0, maximumFractionDigits: 2 } ).replace(\".\",\"\");\r\n  }\r\n}\r\n\r\nexport interface PeriodicElement {\r\n  name: string;\r\n  firm: number;\r\n  weight: number;\r\n  symbol: string;\r\n}\r\n\r\nexport interface SummaryValues {\r\n  monthId: number;\r\n  probabilityId: number;\r\n  billableDays: number;\r\n  nonBillableDays: number;\r\n  vacationDays: number;\r\n  trainingDays: number;\r\n  businessDays: number;\r\n  benchDays: number;\r\n  workingDays: number;\r\n  fteCss: number;\r\n  cor: number;\r\n  arve: number;\r\n  urve: number;\r\n  ros: number;\r\n  external: number;\r\n}",
            "properties": [
                {
                    "name": "arve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 124
                },
                {
                    "name": "benchDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 120
                },
                {
                    "name": "billableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 115
                },
                {
                    "name": "businessDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 119
                },
                {
                    "name": "cor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 123
                },
                {
                    "name": "external",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 127
                },
                {
                    "name": "fteCss",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 122
                },
                {
                    "name": "monthId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 113
                },
                {
                    "name": "nonBillableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 116
                },
                {
                    "name": "probabilityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 114
                },
                {
                    "name": "ros",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 126
                },
                {
                    "name": "trainingDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 118
                },
                {
                    "name": "urve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 125
                },
                {
                    "name": "vacationDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 117
                },
                {
                    "name": "workingDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 121
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 4,
            "duplicateName": "SummaryValues-4"
        }
    ],
    "injectables": [
        {
            "name": "AppDateAdapter",
            "id": "injectable-AppDateAdapter-f0c7130b0221adb79792e4ea5dcfd582",
            "file": "src/app/admin/dialogs/add-month/add-month.dialog.ts",
            "properties": [],
            "methods": [
                {
                    "name": "format",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "displayFormat",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndate format method\n",
                    "description": "<p>date format method</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 618,
                                "end": 622,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "date"
                            },
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 612,
                                "end": 617,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 636,
                                "end": 649,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "displayFormat"
                            },
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 630,
                                "end": 635,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Customized DateAdapter to show Date in the correct format</p>\n",
            "rawdescription": "\n\nCustomized DateAdapter to show Date in the correct format\n",
            "sourceCode": "import { Component, Inject, Injectable } from '@angular/core';\r\nimport { formatDate } from '@angular/common';\r\nimport { DateAdapter, NativeDateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material/core';\r\nimport { MatDatepicker } from '@angular/material/datepicker';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\r\n\r\n/**\r\n * Customized DateAdapter to show Date in the correct format\r\n */\r\n@Injectable()\r\nexport class AppDateAdapter extends NativeDateAdapter {\r\n  /**\r\n   * date format method\r\n   * @param date\r\n   * @param displayFormat\r\n   */\r\n  format(date: Date, displayFormat: Object): string {\r\n      return formatDate(date, 'MMMM yyyy', 'en');\r\n  }\r\n}\r\n\r\n/**\r\n * Month Dialog component for creating + updating months\r\n */\r\n@Component({\r\n  templateUrl: './add-month.dialog.html',\r\n  providers: [\r\n    {provide: DateAdapter, useClass: AppDateAdapter},\r\n  ],\r\n  styleUrls: ['../../admin.component.scss'],\r\n}) export class AddMonthDialog {\r\n  /**\r\n   * month form group for create + update\r\n   */\r\n  monthForm: FormGroup;\r\n\r\n  /**\r\n   * Initializes month formgroup\r\n   * @param dialogRef\r\n   * @param data\r\n   * @param fb\r\n   */\r\n\tconstructor(\r\n    public dialogRef: MatDialogRef<AddMonthDialog>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    private fb: FormBuilder,\r\n  ) {\r\n    this.monthForm = this.fb.group({\r\n      id: this.fb.control(data.month.id),\r\n      name: this.fb.control(data.month.name, Validators.required),\r\n      workingdays: this.fb.control(data.month.workingdays, [Validators.required, Validators.min(0), Validators.max(31)]),\r\n      time: this.fb.control(data.month.time, Validators.required),\r\n      active: this.fb.control((typeof data.month.active !== 'undefined') ? data.month.active : true),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Called on 'Cancel' click\r\n   */\r\n  onNoClick(): void {\r\n    this.dialogRef.close(false);\r\n  }\r\n\r\n  /**\r\n   * Called on 'Save' click\r\n   */\r\n  onSaveClick(): void {\r\n    this.dialogRef.close(this.monthForm.getRawValue());\r\n  }\r\n\r\n  /**\r\n   * Sets form value after datepicker update (when closed after month selection)\r\n   * @param normalizedDate\r\n   * @param datepicker\r\n   */\r\n  chosenMonthHandler(normalizedDate: Date, datepicker: MatDatepicker<any>): void {\r\n    this.monthForm.get('time').setValue(normalizedDate);\r\n    datepicker.close();\r\n  }\r\n\r\n  /**\r\n   * Sets form value after datepicker update\r\n   */\r\n  datepickerClosed(): void {\r\n    let date: Date = new Date(this.monthForm.get('time').value);\r\n    date.setDate(1);\r\n    this.monthForm.get('time').setValue(new Date((date.getTime() - (date.getTimezoneOffset() * 60000))).toISOString().slice(0, -5));\r\n  }\r\n}\r\n",
            "extends": "NativeDateAdapter",
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-68d37a1f5ae6f09de9c38a438efea02d",
            "file": "src/app/core/security/auth.service.ts",
            "properties": [
                {
                    "name": "admin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>user isAdmin flag (extracted from token)</p>\n",
                    "line": 40,
                    "rawdescription": "\n\nuser isAdmin flag (extracted from token)\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "engagementManager",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>user isEngagementManager flag (extracted from token)</p>\n",
                    "line": 45,
                    "rawdescription": "\n\nuser isEngagementManager flag (extracted from token)\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "expireDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>token expire date (extracted from token)</p>\n",
                    "line": 35,
                    "rawdescription": "\n\ntoken expire date (extracted from token)\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "getstarted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>getstated (extracted from token)\ntrue if user loggs in the first time or hasn&#39;t logged in for 2 months</p>\n",
                    "line": 51,
                    "rawdescription": "\n\ngetstated (extracted from token)\ntrue if user loggs in the first time or hasn't logged in for 2 months\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "logged",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Locked state</p>\n",
                    "line": 15,
                    "rawdescription": "\n\nLocked state\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "loginScreenTimeout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>timeout which triggers when token expires</p>\n",
                    "line": 56,
                    "rawdescription": "\n\ntimeout which triggers when token expires\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "roleId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>roleid [updated role variable] (extracted from token)</p>\n",
                    "line": 30,
                    "rawdescription": "\n\nroleid [updated role variable] (extracted from token)\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>JWT token</p>\n",
                    "line": 20,
                    "rawdescription": "\n\nJWT token\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>userId (extracted from token)</p>\n",
                    "line": 25,
                    "rawdescription": "\n\nuserId (extracted from token)\n",
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getExpireDate",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nget token expire date\n",
                    "description": "<p>get token expire date</p>\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "getRoleId",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nget role id\n",
                    "description": "<p>get role id</p>\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "getToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 185,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nget token\n",
                    "description": "<p>get token</p>\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "getUserId",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nget user id\n",
                    "description": "<p>get user id</p>\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "hasAdminPermission",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 199,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nget admin permission flag\n",
                    "description": "<p>get admin permission flag</p>\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "hasRole",
                    "args": [
                        {
                            "name": "expectedRole",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTests if user has a specific role\nRole has to be equal or more powerful than expected role\nRoles: CSS: Client Serving Staff, PDL: People Development Lead, TL: Team Lead, PL: Practice Lead, MSL: Market Segment Lead, FC: Financial Controller\n",
                    "description": "<p>Tests if user has a specific role\nRole has to be equal or more powerful than expected role\nRoles: CSS: Client Serving Staff, PDL: People Development Lead, TL: Team Lead, PL: Practice Lead, MSL: Market Segment Lead, FC: Financial Controller</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3293,
                                "end": 3305,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "expectedRole"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3287,
                                "end": 3292,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "isEngagementManager",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nget is engagement manager\n",
                    "description": "<p>get is engagement manager</p>\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "isLogged",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTest if user is logged in\n",
                    "description": "<p>Test if user is logged in</p>\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "setAdminPermission",
                    "args": [
                        {
                            "name": "admin",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 240,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nset admin permission flag\n",
                    "description": "<p>set admin permission flag</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5064,
                                "end": 5069,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "admin"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5058,
                                "end": 5063,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setExpireDate",
                    "args": [
                        {
                            "name": "expireDate",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 232,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nset token expire date\n",
                    "description": "<p>set token expire date</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4899,
                                "end": 4909,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "expireDate"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4893,
                                "end": 4898,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setGetStarted",
                    "args": [
                        {
                            "name": "getstarted",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "getstarted",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setIsEngagementManager",
                    "args": [
                        {
                            "name": "isEM",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 224,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nset is engagementManager\n",
                    "description": "<p>set is engagementManager</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "isEM",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setLogged",
                    "args": [
                        {
                            "name": "login",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nset logged state\nif logged false: set token to empty string\n",
                    "description": "<p>set logged state\nif logged false: set token to empty string</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2865,
                                "end": 2870,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "login"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2859,
                                "end": 2864,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setRoleId",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nset role id\n",
                    "description": "<p>set role id</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4610,
                                "end": 4612,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4604,
                                "end": 4609,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 248,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nset token (variable + localstorage)\n",
                    "description": "<p>set token (variable + localstorage)</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5225,
                                "end": 5230,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "token"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5219,
                                "end": 5224,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setUserId",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 208,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nset user id\n",
                    "description": "<p>set user id</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4491,
                                "end": 4493,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4485,
                                "end": 4490,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "showGetStarted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "useToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nApply token and set auth variables if token is valid.\nOtherwise: set logged in to false.\n",
                    "description": "<p>Apply token and set auth variables if token is valid.\nOtherwise: set logged in to false.</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1648,
                                "end": 1653,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "token"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1642,
                                "end": 1647,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Handles token authentication</p>\n",
            "rawdescription": "\n\nHandles token authentication\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { environment as env } from '../../../environments/environment';\r\nimport * as jwt_decode from 'jwt-decode';\r\n\r\n/**\r\n * Handles token authentication\r\n */\r\n@Injectable()\r\nexport class AuthService {\r\n\r\n  /**\r\n   * Locked state\r\n   */\r\n  private logged: boolean = false;\r\n\r\n  /**\r\n   * JWT token\r\n   */\r\n  private token: string;\r\n\r\n  /**\r\n   * userId (extracted from token)\r\n   */\r\n  private userId: number;\r\n\r\n  /**\r\n   * roleid [updated role variable] (extracted from token)\r\n   */\r\n  private roleId: number;\r\n\r\n  /**\r\n   * token expire date (extracted from token)\r\n   */\r\n  private expireDate: number;\r\n\r\n  /**\r\n   * user isAdmin flag (extracted from token)\r\n   */\r\n  private admin: boolean;\r\n\r\n    /**\r\n   * user isEngagementManager flag (extracted from token)\r\n   */\r\n  private engagementManager: boolean;\r\n\r\n  /**\r\n   * getstated (extracted from token)\r\n   * true if user loggs in the first time or hasn't logged in for 2 months\r\n   */\r\n  private getstarted: boolean = false;\r\n\r\n  /**\r\n   * timeout which triggers when token expires\r\n   */\r\n  private loginScreenTimeout: any;\r\n\r\n  /**\r\n   * constructor for router\r\n   */\r\n  constructor(private router: Router) {}\r\n\r\n  /**\r\n   * Test if user is logged in\r\n   */\r\n  public isLogged(): boolean {\r\n    if (!this.logged && localStorage.getItem('v-token')) {\r\n      return this.useToken(localStorage.getItem('v-token'));\r\n    } else {\r\n      return this.logged || false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply token and set auth variables if token is valid. \r\n   * Otherwise: set logged in to false.\r\n   * @param token\r\n   */\r\n  public useToken(token: string): boolean {\r\n    if (this.loginScreenTimeout) {\r\n      clearTimeout(this.loginScreenTimeout);\r\n    }\r\n    try {\r\n      const tokenContent: any = jwt_decode(token);\r\n      //console.log(tokenContent);\r\n\r\n      const time: number = tokenContent.exp - (new Date().getTime() / 1000);\r\n\r\n      if (time < 0) {\r\n        this.setToken('');\r\n        this.setLogged(false);\r\n\r\n        return false;\r\n      } else {\r\n        this.loginScreenTimeout = setTimeout(() => {\r\n          this.router.navigate(['/login']);\r\n          this.setToken('');\r\n          this.setLogged(false);\r\n        }, (time * 1000));\r\n      }\r\n\r\n      this.setUserId(tokenContent.userId);\r\n      this.setRoleId(tokenContent.permission);\r\n      this.setExpireDate(tokenContent.exp);\r\n      this.setAdminPermission(tokenContent.admin ? tokenContent.admin : false);\r\n      this.setLogged(true);\r\n      this.setToken(token);\r\n      this.setIsEngagementManager(tokenContent.isEM);\r\n\r\n      return true;\r\n    } catch (e) {\r\n        this.setToken('');\r\n        this.setLogged(false);\r\n\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * set logged state\r\n   * if logged false: set token to empty string\r\n   * @param login\r\n   */\r\n  public setLogged(login: boolean): void {\r\n    this.logged = login;\r\n\r\n    if (!this.logged) {\r\n      this.setToken('');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tests if user has a specific role\r\n   * Role has to be equal or more powerful than expected role\r\n   * Roles: CSS: Client Serving Staff, PDL: People Development Lead, TL: Team Lead, PL: Practice Lead, MSL: Market Segment Lead, FC: Financial Controller\r\n   * @param expectedRole\r\n   */\r\n  public hasRole(expectedRole: number): boolean {\r\n    if (expectedRole === env.roles.admin) {\r\n      return this.hasAdminPermission();\r\n    } else if (expectedRole <= this.roleId) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public setGetStarted(getstarted: boolean): void {\r\n    this.getstarted = getstarted;\r\n  }\r\n\r\n  public showGetStarted(): boolean {\r\n    if (this.getstarted) {\r\n      this.getstarted = false;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * get user id\r\n   */\r\n  public getUserId(): number {\r\n    return this.userId;\r\n  }\r\n\r\n  /**\r\n   * get role id\r\n   */\r\n  public getRoleId(): number {\r\n    return this.roleId;\r\n  }\r\n\r\n  /**\r\n   * get token expire date\r\n   */\r\n  public getExpireDate(): number {\r\n    return this.expireDate;\r\n  }\r\n\r\n  /**\r\n   * get token\r\n   */\r\n  public getToken(): string {\r\n    return this.token;\r\n  }\r\n\r\n    /**\r\n   * get is engagement manager\r\n   */\r\n  public isEngagementManager(): boolean{\r\n    return this.engagementManager;\r\n  }\r\n\r\n  /**\r\n   * get admin permission flag\r\n   */\r\n  private hasAdminPermission(): boolean {\r\n    return this.admin;\r\n  }\r\n\r\n\r\n  /**\r\n   * set user id\r\n   * @param id\r\n   */\r\n  private setUserId(id: number): void {\r\n    this.userId = id;\r\n  }\r\n\r\n  /**\r\n   * set role id\r\n   * @param id\r\n   */\r\n  private setRoleId(id: number): void {\r\n    this.roleId = id;\r\n  }\r\n\r\n  /**\r\n   * set is engagementManager\r\n   * @param id\r\n   */\r\n  private setIsEngagementManager(isEM: boolean): void{\r\n    this.engagementManager = isEM;\r\n  }\r\n\r\n  /**\r\n   * set token expire date\r\n   * @param expireDate\r\n   */\r\n  private setExpireDate(expireDate: number): void {\r\n    this.expireDate = expireDate;\r\n  }\r\n\r\n  /**\r\n   * set admin permission flag\r\n   * @param admin\r\n   */\r\n  private setAdminPermission(admin: boolean): void {\r\n    this.admin = admin;\r\n  }\r\n\r\n  /**\r\n   * set token (variable + localstorage)\r\n   * @param token\r\n   */\r\n  private setToken(token: string): void {\r\n    localStorage.setItem('v-token', token);\r\n    this.token = token;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor for router</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 56,
                "rawdescription": "\n\nconstructor for router\n",
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "BusinessOperationsService",
            "id": "injectable-BusinessOperationsService-2e2a57440d1be161e4f85285f4407345",
            "file": "src/app/core/shared/business-operations.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addSubCoDetail",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 309,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "addSubCoForecasts",
                    "args": [
                        {
                            "name": "subCoForecastId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 341,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "subCoForecastId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addSubCoPreview",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 305,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "companyCsvExport",
                    "args": [
                        {
                            "name": "monthIdFrom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthIdTo",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 221,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns csv with summarized company data\n",
                    "description": "<p>returns csv with summarized company data</p>\n",
                    "jsdoctags": [
                        {
                            "name": "monthIdFrom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthIdTo",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "companyDetails",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns company data details for executive view\n",
                    "description": "<p>returns company data details for executive view</p>\n",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "companyGraphicStats",
                    "args": [
                        {
                            "name": "monthIdFrom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthIdTo",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 248,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns graphic stats path\n",
                    "description": "<p>returns graphic stats path</p>\n",
                    "jsdoctags": [
                        {
                            "name": "monthIdFrom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthIdTo",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "companyHierarchy",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 255,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns hierarchy path\n",
                    "description": "<p>returns hierarchy path</p>\n"
                },
                {
                    "name": "companyKpiStats",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 228,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns kpi stats path\n",
                    "description": "<p>returns kpi stats path</p>\n"
                },
                {
                    "name": "companyKpiStatsPDL",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 235,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns kpi stats path\n",
                    "description": "<p>returns kpi stats path</p>\n",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "companyKpiStatsPL",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 241,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns kpi stats path\n",
                    "description": "<p>returns kpi stats path</p>\n",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "companySummary",
                    "args": [
                        {
                            "name": "monthIdFrom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthIdTo",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 207,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns company data summary for executive view\n",
                    "description": "<p>returns company data summary for executive view</p>\n",
                    "jsdoctags": [
                        {
                            "name": "monthIdFrom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthIdTo",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createSubcoForecast",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 353,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createUser",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteSubCoDetail",
                    "args": [
                        {
                            "name": "subCoId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 317,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "subCoId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteSubCoPreview",
                    "args": [
                        {
                            "name": "subCoId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 313,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "subCoId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteTeam",
                    "args": [
                        {
                            "name": "teamId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "teamId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "financialSummary",
                    "args": [
                        {
                            "name": "monthIdFrom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthIdTo",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 273,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthIdFrom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthIdTo",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "forecast",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns get single forecast path\n",
                    "description": "<p>returns get single forecast path</p>\n",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "forecastHistory",
                    "args": [
                        {
                            "name": "forecastId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 200,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns get forecast history path\n",
                    "description": "<p>returns get forecast history path</p>\n",
                    "jsdoctags": [
                        {
                            "name": "forecastId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAdminMonths",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns get months path\n",
                    "description": "<p>returns get months path</p>\n"
                },
                {
                    "name": "getAdminProjects",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns get projects path\n",
                    "description": "<p>returns get projects path</p>\n"
                },
                {
                    "name": "getGrades",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns get grades path\n",
                    "description": "<p>returns get grades path</p>\n"
                },
                {
                    "name": "getLockedMonths",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getOwnUser",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns get own user path\n",
                    "description": "<p>returns get own user path</p>\n"
                },
                {
                    "name": "getProbabilities",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns get probabilities path\n",
                    "description": "<p>returns get probabilities path</p>\n"
                },
                {
                    "name": "getRoles",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns get roles path\n",
                    "description": "<p>returns get roles path</p>\n"
                },
                {
                    "name": "getSavedMonths",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSubcoDetail",
                    "args": [
                        {
                            "name": "subCoId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 293,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "subCoId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSubcoDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 285,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSubCoDetails",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "emId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 325,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "emId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSubCoDetailsMonth",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 321,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSubCoDetailTotalsMonthRange",
                    "args": [
                        {
                            "name": "startMonthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "endMonthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 389,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "startMonthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "endMonthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSubCoExternalForMonth",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 361,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSubCoExternalForMonthRange",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "endMonthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 374,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "endMonthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSubCoForecastsMonthRange",
                    "args": [
                        {
                            "name": "startMonthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "endMonthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "emId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 333,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "startMonthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "endMonthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "emId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSubCoInternalForMonth",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 357,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSubCoInternalForMonthRange",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "endMonthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 370,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "endMonthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSubCoOffshoreForMonth",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 366,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSubCoOffshoreForMonthRange",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "endMonthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 379,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "endMonthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSubcoPreview",
                    "args": [
                        {
                            "name": "subCoId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 289,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "subCoId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSubcoPreviews",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 277,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSubcoPreviewsByEmId",
                    "args": [
                        {
                            "name": "emId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 281,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "emId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSubCoTotalsForMonth",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 384,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSubCoTypes",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 329,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTeam",
                    "args": [
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTeams",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUser",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns get user by id path\n",
                    "description": "<p>returns get user by id path</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1238,
                                "end": 1244,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "userId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1232,
                                "end": 1237,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getUsers",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns get all team-members path\n",
                    "description": "<p>returns get all team-members path</p>\n"
                },
                {
                    "name": "getUtilMonths",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns get months path\n",
                    "description": "<p>returns get months path</p>\n"
                },
                {
                    "name": "getUtilProjects",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns get projects path\n",
                    "description": "<p>returns get projects path</p>\n"
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns login-path\n",
                    "description": "<p>returns login-path</p>\n"
                },
                {
                    "name": "monthlyForecast",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns get monthly forecast path\n",
                    "description": "<p>returns get monthly forecast path</p>\n"
                },
                {
                    "name": "periodForecast",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns get period forecast path\n",
                    "description": "<p>returns get period forecast path</p>\n"
                },
                {
                    "name": "renewToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns token-refresh path\n",
                    "description": "<p>returns token-refresh path</p>\n"
                },
                {
                    "name": "requestProject",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 262,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturn reqeust path for projects\n",
                    "description": "<p>return reqeust path for projects</p>\n"
                },
                {
                    "name": "setMonths",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nadd/update a project\n",
                    "description": "<p>add/update a project</p>\n"
                },
                {
                    "name": "setMonthState",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setProject",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nadd/update a project\n",
                    "description": "<p>add/update a project</p>\n"
                },
                {
                    "name": "setProjectState",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setSubcoForecastUnlocked",
                    "args": [
                        {
                            "name": "forecastid",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 345,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "forecastid",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTeam",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setTeamLockState",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setUserState",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "staffingForecasts",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 269,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns forcasts for staffing for month\n",
                    "description": "<p>returns forcasts for staffing for month</p>\n",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subcoForecast",
                    "args": [
                        {
                            "name": "subcontractorForecastId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 349,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "subcontractorForecastId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "teamForecast",
                    "args": [
                        {
                            "name": "teamleadId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "levelId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns get forecasts for all team-members path\n",
                    "description": "<p>returns get forecasts for all team-members path</p>\n",
                    "jsdoctags": [
                        {
                            "name": "teamleadId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "levelId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unlockForecast",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\n",
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSubCoDetail",
                    "args": [
                        {
                            "name": "subCoId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 301,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "subCoId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSubCoForecasts",
                    "args": [
                        {
                            "name": "subCoForecastId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 337,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "subCoForecastId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSubCoPreview",
                    "args": [
                        {
                            "name": "subCoId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 297,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "subCoId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUser",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>business-operations service: provides the urls for all possible requests</p>\n",
            "rawdescription": "\n\nbusiness-operations service: provides the urls for all possible requests\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { NumberValueAccessor } from '@angular/forms';\r\nimport { environment as env } from '../../../environments/environment';\r\n\r\n/**\r\n * business-operations service: provides the urls for all possible requests\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class BusinessOperationsService {\r\n \r\n  \r\n \r\n  /**\r\n   * returns login-path\r\n   */\r\n  login(): string {\r\n    return env.api + env.authPath + '/login';\r\n  }\r\n\r\n  /**\r\n   * returns token-refresh path\r\n   */\r\n  renewToken(): string {\r\n    return env.api + env.authPath + '/refresh-token';\r\n  }\r\n\r\n  /**\r\n   * returns get all team-members path\r\n   */\r\n  getUsers(): string {\r\n    return env.api + env.usersPath;\r\n  }\r\n\r\n  getTeam(level: number): string {\r\n    return env.api + env.teamPath + '/level/' + level;\r\n  }\r\n\r\n  setTeamLockState(monthId: number, level: number): string {\r\n    return env.api + env.teamPath + '/level/' + level + '/month/' + monthId + '/lock';\r\n  }\r\n\r\n  getLockedMonths(): string {\r\n    return env.api + env.forecastsPath + '/' + env.lockedPath;\r\n  }\r\n\r\n  getSavedMonths(): string {\r\n    return env.api + env.forecastsPath + '/' + env.savedPath;\r\n  }\r\n\r\n  /**\r\n   * returns get user by id path\r\n   * @param userId\r\n   */\r\n  getUser(userId: number): string {\r\n    return env.api + env.usersPath + '/' + userId;\r\n  }\r\n\r\n  /**\r\n   * returns get own user path\r\n   */\r\n  getOwnUser(): string {\r\n    return env.api + 'user/me';\r\n  }\r\n\r\n  updateUser(userId: number): string {\r\n    return env.api + env.usersPath + '/' + userId;\r\n  }\r\n\r\n  createUser(): string {\r\n    return env.api + env.usersPath\r\n  }\r\n\r\n  setUserState(userId: number): string {\r\n    return env.api + env.usersPath + '/' + userId + '/active';\r\n  }\r\n\r\n  /**\r\n   * returns get roles path\r\n   */\r\n  getRoles(): string {\r\n    return env.api + env.rolePath;\r\n  }\r\n\r\n  /**\r\n   * returns get grades path\r\n   */\r\n  getGrades(): string {\r\n    return env.api + env.gradePath;\r\n  }\r\n\r\n  /**\r\n   * returns get months path\r\n   */\r\n  getUtilMonths(): string {\r\n    return env.api + env.utilsPath + '/months';\r\n  }\r\n\r\n  /**\r\n   * returns get months path\r\n   */\r\n  getAdminMonths(): string {\r\n    return env.api + env.monthsPath;\r\n  }\r\n\r\n  /**\r\n   * add/update a project\r\n   */\r\n  setMonths(): string {\r\n    return env.api + env.monthsPath;\r\n  }\r\n\r\n  setMonthState(): string {\r\n    return env.api + env.monthsPath + '/active';\r\n  }\r\n\r\n  /**\r\n   * returns get projects path\r\n   */\r\n  getUtilProjects(): string {\r\n    return env.api + env.utilsPath + '/projects';\r\n  }\r\n\r\n  /**\r\n   * returns get projects path\r\n   */\r\n  getAdminProjects(): string {\r\n    return env.api + env.projectsPath;\r\n  }\r\n\r\n  /**\r\n   * add/update a project\r\n   */\r\n  setProject(): string {\r\n    return env.api + env.projectsPath;\r\n  }\r\n\r\n  setProjectState(): string {\r\n    return env.api + env.projectsPath + '/active';\r\n  }\r\n\r\n  getTeams(): string {\r\n    return env.api + env.utilsPath + '/' + env.teamUtilsPath;\r\n  }\r\n\r\n  setTeam(): string {\r\n    return env.api + env.utilsPath + '/' + env.teamUtilsPath;\r\n  }\r\n\r\n  deleteTeam(teamId: number): string {\r\n    return env.api + env.utilsPath + '/' + env.teamUtilsPath + '/' + teamId;\r\n  }\r\n\r\n  /**\r\n   * returns get probabilities path\r\n   */\r\n  getProbabilities(): string {\r\n    return env.api + env.utilsPath + '/probabilities';\r\n  }\r\n\r\n  /**\r\n   * returns get single forecast path\r\n   */\r\n  forecast(userId: number, monthId: number): string {\r\n    return env.api + env.forecastsPath + '/user/' + userId + '/months/' + monthId;\r\n  }\r\n\r\n  /**\r\n   * returns get forecasts for all team-members path\r\n   */\r\n  teamForecast(teamleadId: number, monthId: number, levelId: number = 0): string {\r\n    return env.api + env.forecastsPath + '/team/' + teamleadId + '/months/' + monthId + '/level/' + levelId;\r\n  }\r\n\r\n  /**\r\n   * \r\n   */\r\n  unlockForecast(userId: number, monthId: number): string {\r\n    return env.api + env.forecastsPath + '/user/' + userId + '/months/' + monthId + '/unlock';\r\n  }\r\n\r\n  /**\r\n   * returns get monthly forecast path\r\n   */\r\n  monthlyForecast(): string {\r\n    return env.api + env.forecastsPath + '/export';\r\n  }\r\n\r\n  /**\r\n   * returns get period forecast path\r\n   */\r\n  periodForecast(): string {\r\n    return env.api + env.forecastsPath + '/export-team';\r\n  }\r\n\r\n  /**\r\n   * returns get forecast history path\r\n   */\r\n  forecastHistory(forecastId: number): string {\r\n    return env.api + env.forecastsPath + '/' + forecastId + '/history';\r\n  }\r\n\r\n  /**\r\n   * returns company data summary for executive view\r\n   */\r\n  companySummary(monthIdFrom: number, monthIdTo: number): string {\r\n    return env.api + env.forecastsPath + '/' + env.executivePath + '/summary/' + monthIdFrom + '/' + monthIdTo;\r\n  }\r\n\r\n  /**\r\n   * returns company data details for executive view\r\n   */\r\n  companyDetails(monthId: number): string {\r\n    return env.api + env.forecastsPath + '/' + env.executivePath + '/detail/' + monthId;\r\n  }\r\n\r\n  /**\r\n   * returns csv with summarized company data\r\n   */\r\n  companyCsvExport(monthIdFrom: number, monthIdTo: number): string {\r\n    return env.api + env.forecastsPath + '/export-summary/month/' + monthIdFrom + '/' + monthIdTo;\r\n  }\r\n\r\n  /**\r\n   * returns kpi stats path\r\n   */\r\n  companyKpiStats(): string {\r\n    return env.api + env.forecastsPath + '/' + env.executivePath + '/kpi-stats';\r\n  }\r\n\r\n    /**\r\n   * returns kpi stats path\r\n   */\r\n     companyKpiStatsPDL(userId: number): string {\r\n      return env.api + env.forecastsPath + '/' + env.executivePath + '/kpi-stats-pdl-pl/' + userId + '/1';\r\n    }\r\n        /**\r\n   * returns kpi stats path\r\n   */\r\n         companyKpiStatsPL(userId: number): string {\r\n          return env.api + env.forecastsPath + '/' + env.executivePath + '/kpi-stats-pdl-pl/' + userId + '/2';\r\n        }\r\n\r\n  /**\r\n   * returns graphic stats path\r\n   */\r\n  companyGraphicStats(monthIdFrom: number, monthIdTo: number): string {\r\n    return env.api + env.forecastsPath + '/' + env.executivePath + '/graphics-data/' + monthIdFrom + '/' + monthIdTo;\r\n  }\r\n\r\n  /**\r\n   * returns hierarchy path\r\n   */\r\n  companyHierarchy(): string {\r\n    return env.api + env.forecastsPath + '/' + env.executivePath + '/hierarchy';\r\n  }\r\n\r\n  /**\r\n   * return reqeust path for projects\r\n   */\r\n  requestProject(): string {\r\n    return env.api + env.projectsPath + '/request';\r\n  }\r\n\r\n  /**\r\n   * returns forcasts for staffing for month\r\n  */\r\n  staffingForecasts(monthId: number): string {\r\n    return env.api + env.forecastsPath + '/' + env.executivePath + '/' + monthId;\r\n  }\r\n\r\n  financialSummary(monthIdFrom: number, monthIdTo: number): string {\r\n   return env.api + env.forecastsPath + '/' + env.executivePath + '/financial-summary/' + monthIdFrom + '/' + monthIdTo;\r\n}\r\n\r\n  getSubcoPreviews(): string {\r\n    return env.api + 'subcos';\r\n  }\r\n\r\n  getSubcoPreviewsByEmId(emId:number): string {\r\n    return env.api + 'subcos'+ '/' + emId;\r\n  }\r\n\r\n  getSubcoDetails(): string {\r\n    return env.api + 'subcos';\r\n  }\r\n\r\n  getSubcoPreview(subCoId: number): string {\r\n    return env.api + 'subcos' + '/' + subCoId;\r\n  }\r\n\r\n  getSubcoDetail(subCoId: number): string {\r\n    return env.api + 'subcos' + '/' + subCoId;\r\n  }\r\n\r\n  updateSubCoPreview(subCoId: number): string {\r\n    return env.api + 'subcos' + '/'   + subCoId;\r\n  }\r\n\r\n  updateSubCoDetail(subCoId: number): string {\r\n    return env.api + 'subcos' + '/'   + subCoId;\r\n  }\r\n\r\n  addSubCoPreview(): string {\r\n    return env.api + 'subcos' + '/';\r\n  }\r\n\r\n  addSubCoDetail(): string {\r\n    return env.api + 'subcos' + '/';\r\n  }\r\n\r\n  deleteSubCoPreview(subCoId: number): string {\r\n    return env.api + 'subcos' + '/'  + subCoId;\r\n  }\r\n\r\n  deleteSubCoDetail(subCoId: number): string {\r\n    return env.api + 'subcos' + '/'  + subCoId;\r\n  }\r\n\r\n  getSubCoDetailsMonth(monthId: number): string {\r\n    return env.api + 'subcos' + '/'  + 'forecasts' + '/month/' + monthId;\r\n  }  \r\n\r\n  getSubCoDetails(monthId: number, emId: number): string {\r\n    return env.api + 'subcos' + '/'  + 'forecasts' +'/' + monthId + '/' + emId;\r\n  }  \r\n  \r\n  getSubCoTypes(): string {\r\n    return env.api + 'subcos' + '/' + 'type';\r\n  }\r\n\r\n  getSubCoForecastsMonthRange(startMonthId: number, endMonthId: number, emId: number): string {\r\n    return env.api + 'subcos' + '/'  + 'forecasts' +'/' + startMonthId+ '/' + endMonthId+ '/'+emId;\r\n  }  \r\n\r\n  updateSubCoForecasts(subCoForecastId: number): string {\r\n    return env.api + 'subcos' + '/'  + 'forecasts' +'/' + subCoForecastId;\r\n  }  \r\n\r\n  addSubCoForecasts(subCoForecastId: number): string {\r\n    return env.api + 'subcos' + '/'  + 'forecasts';\r\n  }\r\n\r\n  setSubcoForecastUnlocked(forecastid : number){\r\n    return env.api + 'subcos' + '/'  + 'forecasts' + '/' + forecastid + '/' + 'unlock';\r\n  }\r\n\r\n  subcoForecast(subcontractorForecastId: number): string {\r\n    return env.api + 'subcos' + '/'  + 'forecasts' +'/' + subcontractorForecastId ;\r\n  }\r\n  \r\n  createSubcoForecast(): string {\r\n    return env.api + 'subcos' + '/'  + 'forecasts';\r\n  }\r\n\r\n  getSubCoInternalForMonth(monthId: number): string {\r\n    return env.api + 'subcos' + '/'  + 'internal' +'/' + monthId ;\r\n  }\r\n\r\n  getSubCoExternalForMonth(monthId: number): string {\r\n    return env.api + 'subcos' + '/'  + 'external' +'/' + monthId ;\r\n  }\r\n\r\n\r\n  getSubCoOffshoreForMonth(monthId: number): string {\r\n    return env.api + 'subcos' + '/'  + 'offshore' +'/' + monthId ;\r\n  }\r\n\r\n  getSubCoInternalForMonthRange(monthId: number, endMonthId:number): string {\r\n    return env.api + 'subcos' + '/'  + 'internal' +'/' + monthId +'/' + endMonthId;\r\n  }\r\n\r\n  getSubCoExternalForMonthRange(monthId: number, endMonthId:number): string {\r\n    return env.api + 'subcos' + '/'  + 'external' +'/' + monthId +'/' + endMonthId;\r\n  }\r\n\r\n\r\n  getSubCoOffshoreForMonthRange(monthId: number, endMonthId:number): string {\r\n    return env.api + 'subcos' + '/'  + 'offshore' +'/' + monthId +'/' + endMonthId;\r\n  }\r\n\r\n  //for Avg FTE Summary Financial Controller\r\n  getSubCoTotalsForMonth(monthId: number): string {\r\n    return env.api + 'subcos' + '/' + 'totals' + '/' + monthId;\r\n  }\r\n\r\n  //for Subco Total Summary HOP and Financial Controller\r\n  getSubCoDetailTotalsMonthRange(startMonthId: number, endMonthId: number): string {\r\n    return env.api + 'subcos' + '/' + 'totals' + '/' + startMonthId +'/'+ endMonthId;\r\n  }\r\n\r\n}\r\n",
            "type": "injectable"
        },
        {
            "name": "CalculationService",
            "id": "injectable-CalculationService-e8bd346a0b73e5312d5add82d9319e9c",
            "file": "src/app/core/services/forecasts/calculation.service.ts",
            "properties": [
                {
                    "name": "periodLength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "periodMonths",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "probabilityForecasts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FcEntry[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "probabilityForecastsPerMonth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | FcEntry[]>",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "probabilitySummary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProbabilitySummary",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "probabilitySummary$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<ProbabilitySummary>",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "probabilitySummaryPerMonth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | ProbabilitySummary>",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "probabilitySummaryPerMonth$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Map<number, ProbabilitySummary>>",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methods": [
                {
                    "name": "calculateFcProbabilitySummary",
                    "args": [
                        {
                            "name": "entry",
                            "type": "FcEntry",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "summary",
                            "type": "ProbabilitySummary",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ProbabilitySummary",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entry",
                            "type": "FcEntry",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "summary",
                            "type": "ProbabilitySummary",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calculateProbabilitySummary",
                    "args": [
                        {
                            "name": "entries",
                            "type": "FcEntry[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ProbabilitySummary",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entries",
                            "type": "FcEntry[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calculateProjectEntryProbabilitySummary",
                    "args": [
                        {
                            "name": "entry",
                            "type": "FcProject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "summary",
                            "type": "ProbabilitySummary",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isRelevant",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "gradeId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ProbabilitySummary",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entry",
                            "type": "FcProject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "summary",
                            "type": "ProbabilitySummary",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isRelevant",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "gradeId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkPeriodRequest",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 292,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "checkPeriodRequestPerMonth",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 286,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProbabilitySummary",
                    "args": [],
                    "optional": false,
                    "returnType": "ProbabilitySummary",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "init",
                    "args": [
                        {
                            "name": "from",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "to",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "from",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "to",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initProbabilitySummary",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initProbabilitySummaryPerMonth",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isUserRelevant",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "summarize",
                    "args": [
                        {
                            "name": "summary",
                            "type": "ProbabilitySummary",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ProbabilitySummary",
                    "typeParameters": [],
                    "line": 273,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "summary",
                            "type": "ProbabilitySummary",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "summarizeRecord",
                    "args": [
                        {
                            "name": "record",
                            "type": "ProbabilityRecord",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ProbabilityRecord",
                    "typeParameters": [],
                    "line": 253,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "record",
                            "type": "ProbabilityRecord",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "summarizeTotal",
                    "args": [
                        {
                            "name": "summary",
                            "type": "ProbabilitySummary",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ProbabilitySummary",
                    "typeParameters": [],
                    "line": 263,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "summary",
                            "type": "ProbabilitySummary",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>forecast service</p>\n",
            "rawdescription": "\n\nforecast service\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nimport { FcProject } from '../../interfaces/fcProject';\r\nimport { FcEntry } from '../../interfaces/fcEntry';\r\nimport { BusinessOperationsService } from '../../shared/business-operations.service';\r\nimport { Month } from '../../interfaces/month';\r\nimport { UtilitiesService } from '../utilities.service';\r\nimport { PageStateService } from '../../shared/page-state.service';\r\nimport { UserService } from '../user.service';\r\nimport { ForecastService } from './forecast.service';\r\nimport { ProbabilitySummary } from '../../interfaces/probabilitySummary';\r\nimport { ProbabilityRecord } from '../../interfaces/probabilityRecord';\r\nimport { ExecutiveForecastsService } from '../forecasts/executive-forecasts.service';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { PerGrade } from '../../interfaces/perGrade';\r\n\r\n/**\r\n * forecast service\r\n */\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class CalculationService {\r\n    probabilitySummary: ProbabilitySummary;\r\n    probabilitySummaryPerMonth: Map<number, ProbabilitySummary>;\r\n    periodLength: number;\r\n    periodMonths: Month[];\r\n    probabilityForecasts: FcEntry[];\r\n    probabilityForecastsPerMonth: Map<number, FcEntry[]>;\r\n    probabilitySummary$: BehaviorSubject<ProbabilitySummary>;\r\n    probabilitySummaryPerMonth$: BehaviorSubject<Map<number, ProbabilitySummary>>;\r\n\r\n    constructor(\r\n        private utilitiesService: UtilitiesService,\r\n        private userService: UserService,\r\n        private executiveService: ExecutiveForecastsService\r\n      ) {\r\n          this.probabilitySummary = new ProbabilitySummary();\r\n          this.probabilitySummaryPerMonth = new Map();\r\n\r\n          let probabilities = this.utilitiesService.getProbabilities();\r\n          for(let probability of probabilities) {\r\n              let record = new ProbabilityRecord();\r\n              record.id = probability.id;\r\n              record.name = probability.name;\r\n              this.probabilitySummary.probabilites.push(record);\r\n          }\r\n\r\n          this.probabilityForecasts = [];\r\n          this.probabilityForecastsPerMonth = new Map<number, FcEntry[]>();\r\n          this.periodMonths = [];\r\n          this.periodLength = 0;\r\n          this.probabilitySummary$ = new BehaviorSubject(this.probabilitySummary);\r\n          this.probabilitySummaryPerMonth$ = new BehaviorSubject(this.probabilitySummaryPerMonth);\r\n      }\r\n\r\n      isUserRelevant(monthId: number, userId: number): boolean {\r\n          let monthIndex = this.utilitiesService.getMonths().findIndex(x => x.id === monthId);\r\n          let month = this.utilitiesService.getMonths()[monthIndex];\r\n          \r\n          if(monthIndex === undefined || monthIndex === -1) {\r\n              return false;\r\n          }\r\n\r\n          let user = this.userService.getUser(userId);\r\n\r\n          if(user === undefined) {\r\n              return false;\r\n          }\r\n\r\n          return true;\r\n      }\r\n\r\n      init(from: number, to: number) {\r\n          this.probabilityForecasts = [];\r\n          this.probabilityForecastsPerMonth = new Map<number, FcEntry[]>();\r\n          let months = this.utilitiesService\r\n            .getMonths()\r\n            .filter((m: Month) => m.id >= from && m.id <= to);\r\n          this.periodLength = months.length;\r\n          this.periodMonths = months;\r\n\r\n          for(let month of this.periodMonths) {\r\n              this.executiveService.initializeProbabilityDetailValues(month.id).then((entries: FcEntry[]) => {\r\n                  this.probabilityForecastsPerMonth.set(month.id,entries);\r\n                  this.probabilityForecasts = this.probabilityForecasts.concat(entries);\r\n                  this.checkPeriodRequest();\r\n                  this.checkPeriodRequestPerMonth(month.id);\r\n              }).catch(() => {\r\n                  this.checkPeriodRequest();\r\n                  this.checkPeriodRequestPerMonth(month.id);\r\n              });\r\n          }\r\n      }\r\n\r\n      initProbabilitySummaryPerMonth(monthId :number): void {\r\n        this.probabilitySummaryPerMonth.set(monthId, this.calculateProbabilitySummary(this.probabilityForecastsPerMonth.get(monthId)));\r\n        this.probabilitySummaryPerMonth$.next(this.probabilitySummaryPerMonth);\r\n      }\r\n\r\n      initProbabilitySummary(): void {\r\n          this.probabilitySummary = this.calculateProbabilitySummary(this.probabilityForecasts);\r\n          this.probabilitySummary$.next(this.probabilitySummary);\r\n      }\r\n\r\n      getProbabilitySummary(): ProbabilitySummary {\r\n          return this.probabilitySummary;\r\n      }\r\n\r\n      calculateProbabilitySummary(entries: FcEntry[]): ProbabilitySummary {\r\n          let probabilities = this.utilitiesService.getProbabilities();\r\n          let summary = new  ProbabilitySummary();\r\n\r\n          for(let probability of probabilities) {\r\n              let record = new ProbabilityRecord();\r\n              record.id = probability.id;\r\n              record.name = probability.name;\r\n              summary.probabilites.push(record);\r\n          }\r\n\r\n          for(let entry of entries) {\r\n            //   if(!entry.isRelevant) {\r\n            //       continue;\r\n            //   }\r\n              \r\n              if(!this.isUserRelevant(entry.monthId, entry.userId)) {\r\n                  continue;\r\n              }\r\n\r\n              summary = this.calculateFcProbabilitySummary(entry, summary);\r\n          }\r\n\r\n          Array.from(summary.avgVacationDaysPerGrade.keys()).forEach(key=>{\r\n              summary.avgVacationDaysPerGrade.get(key).getAverage();\r\n          })\r\n\r\n          Array.from(summary.avgFTEPerGrade.keys()).forEach(key=>{\r\n            summary.avgFTEPerGrade.get(key).getAverage();\r\n        })\r\n          \r\n\r\n          summary = this.summarize(summary);\r\n          return summary;\r\n      }\r\n\r\n      calculateFcProbabilitySummary(entry: FcEntry, summary: ProbabilitySummary): ProbabilitySummary {\r\n          if(!summary.avgVacationDaysPerGrade.has(entry.gradeId)){\r\n              summary.avgVacationDaysPerGrade.set(entry.gradeId, new PerGrade());\r\n          }\r\n          if(!summary.avgFTEPerGrade.has(entry.gradeId)){\r\n            summary.avgFTEPerGrade.set(entry.gradeId, new PerGrade());\r\n          }\r\n\r\n          for(let projectEntry of entry.projects) {\r\n              summary = this.calculateProjectEntryProbabilitySummary(projectEntry, summary, entry.isRelevant, entry.gradeId);\r\n          }\r\n\r\n\r\n          summary.avgFTEPerGrade.get(entry.gradeId).value += entry.fte;\r\n\r\n          summary.avgVacationDaysPerGrade.get(entry.gradeId).users.add(entry.userId);\r\n          summary.avgFTEPerGrade.get(entry.gradeId).users.add(entry.userId);\r\n\r\n          let monthIndex = this.utilitiesService.getMonths().findIndex(x => x.id === entry.monthId);\r\n          let month = this.utilitiesService.getMonths()[monthIndex];\r\n          if(entry.isRelevant) {\r\n              summary.paidDays += entry.fte * parseInt(month.workingdays);\r\n          }\r\n\r\n          return summary;\r\n      }\r\n\r\n      calculateProjectEntryProbabilitySummary(entry: FcProject, summary: ProbabilitySummary, isRelevant: boolean, gradeId: number): ProbabilitySummary {\r\n          let recordIndex = summary.probabilites.findIndex(x => x.id === entry.probabilityId);\r\n          \r\n          if(recordIndex === undefined || recordIndex === -1) {\r\n              return summary;\r\n          }\r\n\r\n          let record = summary.probabilites[recordIndex];\r\n          record.paidDays += entry.plannedProjectDays;\r\n\r\n          if(entry.projectType === 1) { //billable\r\n            if(!entry.billable) {\r\n                    if(isRelevant) {\r\n                        record.nonBillableDays += entry.plannedProjectDays;\r\n                        summary.nonBillableDays += entry.plannedProjectDays;\r\n                    }\r\n                    \r\n            } else { //billable\r\n                if (isRelevant) {\r\n                    record.billableDays += entry.plannedProjectDays;\r\n                    summary.billableDays += entry.plannedProjectDays;\r\n                }\r\n                if (entry.cor !== 0) {\r\n                    record.corDays += entry.plannedProjectDays;\r\n                    summary.corDays += entry.plannedProjectDays;\r\n                }\r\n\r\n                record.revenue += entry.cor * entry.plannedProjectDays;\r\n                summary.revenue += entry.cor * entry.plannedProjectDays;\r\n                \r\n                if(entry.externalRevenue) {\r\n                    record.externalRevenue += entry.cor * entry.plannedProjectDays;\r\n                    summary.externalRevenue += entry.cor * entry.plannedProjectDays;\r\n                } else {\r\n                    record.internalRevenue += entry.cor * entry.plannedProjectDays;\r\n                    summary.internalRevenue += entry.cor * entry.plannedProjectDays;\r\n                }\r\n            }\r\n        } else if(entry.projectType === 4) { //vacation days\r\n            if(isRelevant) {\r\n                record.vacationDays += entry.plannedProjectDays;\r\n                summary.vacationDays += entry.plannedProjectDays;\r\n                summary.avgVacationDaysPerGrade.get(gradeId).value += entry.plannedProjectDays;\r\n            }\r\n        } else if(entry.projectType === 6) { //non billable\r\n            if(!entry.billable) {\r\n                if (isRelevant) {\r\n                    record.nonBillableDays += entry.plannedProjectDays;\r\n                    summary.nonBillableDays += entry.plannedProjectDays;\r\n                }\r\n            } else {\r\n                if (isRelevant) {\r\n                    record.billableDays += entry.plannedProjectDays;\r\n                    summary.billableDays += entry.plannedProjectDays;\r\n                }\r\n                \r\n                if (entry.cor !== 0) {\r\n                    record.corDays += entry.plannedProjectDays;\r\n                    summary.corDays += entry.plannedProjectDays;\r\n                }\r\n\r\n                record.revenue += entry.cor * entry.plannedProjectDays;\r\n                summary.revenue += entry.cor * entry.plannedProjectDays;\r\n\r\n                if(entry.externalRevenue) {\r\n                    record.externalRevenue += entry.cor * entry.plannedProjectDays;\r\n                    summary.externalRevenue += entry.cor * entry.plannedProjectDays;\r\n                } else {\r\n                    record.internalRevenue += entry.cor * entry.plannedProjectDays;\r\n                    summary.internalRevenue += entry.cor * entry.plannedProjectDays;\r\n                }\r\n            }\r\n        }\r\n\r\n        summary.probabilites[recordIndex] = record;\r\n\r\n        return summary\r\n      }\r\n\r\n      summarizeRecord(record: ProbabilityRecord): ProbabilityRecord {\r\n          record.cor = record.corDays === 0 ? 0 : record.revenue / record.corDays;\r\n\r\n          let divisor = record.paidDays - record.vacationDays;\r\n          record.arve = divisor === 0 ? 1 : (record.billableDays + record.nonBillableDays) / (record.paidDays - record.vacationDays);\r\n          record.urve = divisor === 0 ? 1 : (record.billableDays) / (record.paidDays - record.vacationDays);\r\n\r\n          return record;\r\n      }\r\n\r\n      summarizeTotal(summary: ProbabilitySummary): ProbabilitySummary {\r\n          summary.cor = summary.corDays === 0 ? 0 : summary.revenue / summary.corDays;\r\n\r\n          let divisor = summary.paidDays - summary.vacationDays;\r\n          summary.arve = divisor === 0 ? 1 : (summary.billableDays + summary.nonBillableDays) / (summary.paidDays - summary.vacationDays);\r\n          summary.urve = divisor === 0 ? 1 : (summary.billableDays) / (summary.paidDays - summary.vacationDays)\r\n\r\n          return summary;\r\n      }\r\n\r\n      summarize(summary: ProbabilitySummary): ProbabilitySummary {\r\n          summary = this.summarizeTotal(summary);\r\n          let records = [];\r\n          \r\n          for(let record of summary.probabilites) {\r\n              records.push(this.summarizeRecord(record));\r\n          }\r\n\r\n          summary.probabilites = records;\r\n\r\n          return summary;\r\n      }\r\n\r\n      checkPeriodRequestPerMonth(monthId: number): void {\r\n        if(monthId > 0) {\r\n            this.initProbabilitySummaryPerMonth(monthId);\r\n        }\r\n      }\r\n\r\n      checkPeriodRequest(): void {\r\n          this.periodLength = this.periodLength - 1;\r\n          if(this.periodLength <= 0) {\r\n              this.initProbabilitySummary();\r\n          }\r\n      }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DataSharingService",
            "id": "injectable-DataSharingService-c818fe36a54f179d83250fabfc67b177",
            "file": "src/app/core/shared/data-sharing.service.ts",
            "properties": [
                {
                    "name": "corValueBiggerThanZero",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "hasInputFocus",
                    "defaultValue": "this.projectInputFocus.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "invalidInputs",
                    "defaultValue": "this.noOfInvalidInputs.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "isCorBiggerThanZero",
                    "defaultValue": "this.corValueBiggerThanZero.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "isProjectValid",
                    "defaultValue": "this.projectInputValid.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "noOfInvalidInputs",
                    "defaultValue": "new BehaviorSubject<number>(0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "projectInputFocus",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "projectInputValid",
                    "defaultValue": "new BehaviorSubject<boolean>(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "hasProjectInputFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isCorValueBiggerThanZero",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isProjectInputValid",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "numberOfInvalidInputs",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setCorValueBiggerThanZero",
                    "args": [
                        {
                            "name": "corBiggerThanZero",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "corBiggerThanZero",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setNumberOfInvalidInputs",
                    "args": [
                        {
                            "name": "invalidInputsNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "invalidInputsNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setProjectInputFocus",
                    "args": [
                        {
                            "name": "projectFocus",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "projectFocus",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setProjectInputValid",
                    "args": [
                        {
                            "name": "projectValid",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "projectValid",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { User } from '../interfaces/user';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class DataSharingService {\r\n    private projectInputFocus = new BehaviorSubject<boolean>(false);\r\n    private projectInputValid = new BehaviorSubject<boolean>(true);\r\n    private corValueBiggerThanZero = new BehaviorSubject<boolean>(false);\r\n    private noOfInvalidInputs = new BehaviorSubject<number>(0);\r\n    \r\n    private isProjectValid = this.projectInputValid.asObservable();\r\n    private hasInputFocus = this.projectInputFocus.asObservable();\r\n    private isCorBiggerThanZero = this.corValueBiggerThanZero.asObservable();\r\n    private invalidInputs = this.noOfInvalidInputs.asObservable();\r\n \r\n    constructor() {}\r\n\r\n    setProjectInputFocus(projectFocus: boolean): void {\r\n        this.projectInputFocus.next(projectFocus);\r\n    }\r\n\r\n    hasProjectInputFocus(): Observable<boolean> {\r\n        return this.hasInputFocus;\r\n    }\r\n\r\n    setNumberOfInvalidInputs(invalidInputsNumber: number): void {\r\n        this.noOfInvalidInputs.next(invalidInputsNumber);\r\n    }\r\n\r\n    numberOfInvalidInputs(): Observable<number> {\r\n        return this.invalidInputs;\r\n    }\r\n\r\n    setProjectInputValid(projectValid: boolean): void {\r\n        this.projectInputValid.next(projectValid);\r\n    }\r\n\r\n    isProjectInputValid(): Observable<boolean> {\r\n        return this.isProjectValid;\r\n    }\r\n\r\n    setCorValueBiggerThanZero(corBiggerThanZero: boolean): void {\r\n        this.corValueBiggerThanZero.next(corBiggerThanZero);\r\n    }\r\n\r\n    isCorValueBiggerThanZero(): Observable<boolean> {\r\n        return this.isCorBiggerThanZero;\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 17
            },
            "type": "injectable"
        },
        {
            "name": "ExecutiveForecastsService",
            "id": "injectable-ExecutiveForecastsService-49732f561e87fea05ed4c2275c605b8d",
            "file": "src/app/core/services/forecasts/executive-forecasts.service.ts",
            "properties": [
                {
                    "name": "financialData$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<FinancialControllerSummaryAPPS[]>",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "graphicData$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<GraphicSummaryReport[]>",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "hierarchy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HierarchyNode",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "kpiData$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<MonthlySummaryReport[]>",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "kpiDataPDL$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<MonthlySummaryReport[]>",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "kpiDataPL$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<MonthlySummaryReport[]>",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "monthId",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "months",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "monthValues$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<SummaryValues[]>",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "projects",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Project[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "summaryValues$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<SummaryValues[]>",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "teams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Team[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methods": [
                {
                    "name": "calculateTeamleadValues",
                    "args": [
                        {
                            "name": "filter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "team",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any[]",
                    "typeParameters": [],
                    "line": 208,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "team",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCsvExportData",
                    "args": [
                        {
                            "name": "monthIdFrom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthIdTo",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 321,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns an observable of the period forecast data for the company\nUsed for csv export\n\n",
                    "description": "<p>Returns an observable of the period forecast data for the company\nUsed for csv export</p>\n",
                    "jsdoctags": [
                        {
                            "name": "monthIdFrom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthIdTo",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCurrentMonth",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFinancialData",
                    "args": [],
                    "optional": false,
                    "returnType": "FinancialControllerSummaryAPPS[]",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getGraphicData",
                    "args": [],
                    "optional": false,
                    "returnType": "GraphicSummaryReport[]",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getHierarchy",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getKpiData",
                    "args": [],
                    "optional": false,
                    "returnType": "MonthlySummaryReport[]",
                    "typeParameters": [],
                    "line": 184,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getKpiDataPL",
                    "args": [],
                    "optional": false,
                    "returnType": "MonthlySummaryReport[]",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getKpiPDLData",
                    "args": [],
                    "optional": false,
                    "returnType": "MonthlySummaryReport[]",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMonthValues",
                    "args": [],
                    "optional": false,
                    "returnType": "SummaryValues[]",
                    "typeParameters": [],
                    "line": 200,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSummaryValues",
                    "args": [],
                    "optional": false,
                    "returnType": "SummaryValues[]",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTeamnameForPL",
                    "args": [
                        {
                            "name": "teamLeadId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "teamLeadName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 304,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "teamLeadId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "teamLeadName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initalizeGraphicData",
                    "args": [
                        {
                            "name": "monthIdFrom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthIdTo",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthIdFrom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthIdTo",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initHierarchy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initializeDetailValues",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<FcEntry[]>",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeFinancialData",
                    "args": [
                        {
                            "name": "monthIdFrom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthIdTo",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<FinancialControllerSummaryAPPS[]>",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthIdFrom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthIdTo",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeKpiValues",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initializeKpiValuesPDL",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeKpiValuesPL",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeProbabilityDetailValues",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<FcEntry[]>",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeSummaryValues",
                    "args": [
                        {
                            "name": "monthIdFrom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthIdTo",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthIdFrom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthIdTo",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initProjects",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initTeams",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetSummaryValues",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>executive service</p>\n",
            "rawdescription": "\n\nexecutive service\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { BusinessOperationsService } from \"../../shared/business-operations.service\";\r\nimport { BehaviorSubject, Observable } from \"rxjs\";\r\nimport { UtilitiesService } from \"../utilities.service\";\r\nimport { Month } from \"../../interfaces/month\";\r\nimport { ForecastService } from \"./forecast.service\";\r\nimport { FcEntry } from \"../../interfaces/fcEntry\";\r\nimport { User } from \"../../interfaces/user\";\r\nimport { FcProject } from \"../../interfaces/fcProject\";\r\nimport { Project } from \"../../interfaces/project\";\r\nimport { environment } from \"../../../../environments/environment\";\r\nimport { Team } from \"../../interfaces/team\";\r\nimport { MonthlySummaryReport } from \"../../interfaces/kpiData\";\r\nimport { GraphicSummaryReport } from \"../../interfaces/graphicData\";\r\nimport { HierarchyNode } from \"../../interfaces/hierarchyNode\";\r\nimport { FinancialControllerSummaryAPPS } from \"../../interfaces/financialAppsSummary\";\r\nimport { PageStateService } from '../../shared/page-state.service';\r\nimport { reject } from \"q\";\r\n/**\r\n * executive service\r\n */\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class ExecutiveForecastsService {\r\n  summaryValues$: BehaviorSubject<SummaryValues[]>;\r\n  monthValues$: BehaviorSubject<SummaryValues[]>;\r\n  kpiData$: BehaviorSubject<MonthlySummaryReport[]>;\r\n  kpiDataPDL$: BehaviorSubject<MonthlySummaryReport[]>;\r\n    kpiDataPL$: BehaviorSubject<MonthlySummaryReport[]>;\r\n  graphicData$: BehaviorSubject<GraphicSummaryReport[]>;\r\n  financialData$: BehaviorSubject<FinancialControllerSummaryAPPS[]>;\r\n\r\n  monthId: number = 1;\r\n  months: Month[];\r\n  projects: Project[];\r\n  teams: Team[];\r\n  hierarchy: HierarchyNode;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private BO: BusinessOperationsService,\r\n    private us: UtilitiesService,\r\n    private pageState: PageStateService,\r\n    private forecastService: ForecastService,\r\n    private utilitiesService: UtilitiesService\r\n  ) {\r\n    this.summaryValues$ = new BehaviorSubject([]);\r\n    this.monthValues$ = new BehaviorSubject([]);\r\n    this.kpiData$ = new BehaviorSubject([]);\r\n    this.kpiDataPDL$ = new BehaviorSubject([]);\r\n    this.kpiDataPL$ = new BehaviorSubject([]);\r\n    this.graphicData$ = new BehaviorSubject([]);\r\n    this.financialData$ = new BehaviorSubject([]);\r\n\r\n    this.initProjects();\r\n    this.initTeams();\r\n    this.initHierarchy();\r\n  }\r\n\r\n  initProjects(): void {\r\n    this.utilitiesService.projects$.subscribe((projects: Project[]) => {\r\n      this.projects = projects;\r\n    });\r\n  }\r\n\r\n  initTeams(): void {\r\n    this.utilitiesService.teams$.subscribe((teams: Team[]) => {\r\n      this.teams = teams;\r\n    });\r\n  }\r\n\r\n  initHierarchy(): void {\r\n    this.utilitiesService.hierarchy$.subscribe((hierarchy: HierarchyNode) => {\r\n      this.hierarchy = hierarchy;\r\n    });\r\n  }\r\n\r\n  getHierarchy(): any {\r\n    return this.hierarchy;\r\n  }\r\n\r\n  getCurrentMonth(): void {\r\n    this.months = this.us.getMonths();\r\n  }\r\n\r\n  resetSummaryValues(): void {\r\n    this.summaryValues$.next([]);\r\n    this.monthValues$.next([]);\r\n  }\r\n\r\n  initializeKpiValues(): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.http\r\n      .get<MonthlySummaryReport[]>(this.BO.companyKpiStats())\r\n      .subscribe((reports: MonthlySummaryReport[]) => {\r\n        this.kpiData$.next(reports);\r\n        resolve();\r\n      }, () => reject());\r\n    });\r\n  }\r\n\r\n  initializeKpiValuesPDL(userId: number): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.http\r\n      .get<MonthlySummaryReport[]>(this.BO.companyKpiStatsPDL(userId))\r\n      .subscribe((reports: MonthlySummaryReport[]) => {\r\n        this.kpiDataPDL$.next(reports);\r\n        resolve();\r\n      }, () => reject());\r\n    });\r\n  }\r\n  initializeKpiValuesPL(userId: number): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.http\r\n      .get<MonthlySummaryReport[]>(this.BO.companyKpiStatsPL(userId))\r\n      .subscribe((reports: MonthlySummaryReport[]) => {\r\n        this.kpiDataPL$.next(reports);\r\n        resolve();\r\n      }, () => reject());\r\n    });\r\n  }\r\n\r\n  initalizeGraphicData(monthIdFrom: number, monthIdTo: number): void {\r\n    this.http\r\n      .get(this.BO.companyGraphicStats(monthIdFrom, monthIdTo))\r\n      .subscribe((reports: GraphicSummaryReport[]) => {\r\n        this.graphicData$.next(reports);\r\n      });\r\n  }\r\n\r\n  initializeSummaryValues(monthIdFrom: number, monthIdTo: number): void {\r\n    this.http\r\n      .get(this.BO.companySummary(monthIdFrom, monthIdTo))\r\n      .subscribe((values: ProValues) => {\r\n        this.summaryValues$.next(values.period);\r\n        this.monthValues$.next(values.months);\r\n      });\r\n  }\r\n\r\n  initializeDetailValues(monthId: number): Promise<FcEntry[]> {\r\n    let promise = new Promise<FcEntry[]>((resolve: any, reject: any) => {\r\n      this.http\r\n        .get(this.BO.companyDetails(monthId))\r\n        .subscribe((forecasts: FcEntry[]) => {\r\n          this.forecastService.addForecasts(forecasts);\r\n          resolve(forecasts);\r\n        });\r\n    });\r\n    return promise;\r\n  }\r\n\r\n  initializeProbabilityDetailValues(monthId: number): Promise<FcEntry[]> {\r\n    let promise = new Promise<FcEntry[]>((resolve: any, reject: any) => {\r\n      this.http\r\n      .get<FcEntry[]>(this.BO.companyDetails(monthId))\r\n      .subscribe((forecasts: FcEntry[]) => {\r\n        resolve(forecasts);\r\n      });\r\n    });\r\n\r\n    return promise;\r\n  }\r\n\r\n  initializeFinancialData(monthIdFrom: number, monthIdTo): Promise<FinancialControllerSummaryAPPS[]> {​​​​​​​​\r\n    let promise = new Promise<FinancialControllerSummaryAPPS[]>((resolve: any, reject: any) => {​​​​​​​​\r\n    this.http\r\n          .get<FinancialControllerSummaryAPPS[]>(this.BO.financialSummary(monthIdFrom,monthIdTo))\r\n          .subscribe((financialSummary: FinancialControllerSummaryAPPS[]) => {​​​​​​​​\r\n          this.financialData$.next(financialSummary);\r\n          resolve(financialSummary);\r\n          }​​​​​​​​);\r\n        }​​​​​​​​);\r\n    return promise;\r\n  }\r\n  \r\n  \r\n\r\n  getGraphicData(): GraphicSummaryReport[] {\r\n    return this.graphicData$.getValue();\r\n  }\r\n\r\n  getKpiData(): MonthlySummaryReport[] {\r\n    return this.kpiData$.getValue();\r\n  }\r\n\r\n  getKpiPDLData(): MonthlySummaryReport[] {\r\n    return this.kpiDataPDL$.getValue();\r\n  }\r\n  \r\n  getKpiDataPL(): MonthlySummaryReport[] {\r\n    return this.kpiDataPL$.getValue();\r\n  }\r\n\r\n  getSummaryValues(): SummaryValues[] {\r\n    return this.summaryValues$.getValue();\r\n  }\r\n\r\n  getMonthValues(): SummaryValues[] {\r\n    return this.monthValues$.getValue();\r\n  }\r\n\r\n  getFinancialData(): FinancialControllerSummaryAPPS[] {\r\n    return this.financialData$.getValue();\r\n  }\r\n\r\n  calculateTeamleadValues(filter: string, team: any[]): any[] {\r\n    let teamleads: any[] = [];\r\n\r\n    if (filter === \"pl\") {\r\n      team\r\n        .filter((u: User) => u.permission === environment.roles.pl || u.roleId === 7 ) //pl or hop\r\n        .forEach((p: User) => {\r\n          let childs: number[] = team\r\n            .filter((c: User) => c.parentId === p.id)\r\n            .map((c: User) => c.id);\r\n          this.getTeamnameForPL(p.id, p.firstName + \" \" + p.lastName);\r\n          \r\n          teamleads.push({\r\n            id: p.id,\r\n            name: this.getTeamnameForPL(p.id, p.firstName + \" \" + p.lastName),\r\n            prodUnitCode : p.prodUnitCode,\r\n            childs: [p.id].concat(\r\n              team\r\n                .filter((c: User) => childs.indexOf(c.parentId) >= 0)\r\n                .map((c: User) => c.id)\r\n                .concat(childs)\r\n            ),\r\n          });\r\n        });\r\n    } else {\r\n      team\r\n        .filter(\r\n          (u: User) =>\r\n            u.permission === environment.roles.pdl ||\r\n            u.permission === environment.roles.pl\r\n        )\r\n        .forEach((p: User) => {\r\n          teamleads.push({\r\n            id: p.id,\r\n            name: p.firstName + \" \" + p.lastName,\r\n            prodUnitCode : p.prodUnitCode,\r\n            childs: [p.id].concat(\r\n              team\r\n                .filter((c: User) => c.parentId === p.id)\r\n                .map((c: User) => c.id)\r\n            ),\r\n          });\r\n        });\r\n    }\r\n\r\n    teamleads.forEach((teamlead: any) => {\r\n      teamlead.projectDays = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => u.projectDays)\r\n        .reduce((a, b) => a + b, 0);\r\n\r\n      teamlead.billableDays = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => u.billableDays)\r\n        .reduce((a, b) => a + b, 0);\r\n\r\n      teamlead.vacationDays = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => u.vacationDays)\r\n        .reduce((a, b) => a + b, 0);\r\n\r\n      teamlead.totalDays = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => u.totalDays)\r\n        .reduce((a, b) => a + b, 0);\r\n\r\n      teamlead.ros = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => u.ros)\r\n        .reduce((a, b) => a + b, 0);\r\n\r\n      let fteCss: number = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => u.fte)\r\n        .reduce((a, b) => a + b, 0);\r\n      \r\n      teamlead.fte = fteCss;\r\n\r\n      teamlead.cor = teamlead.ros / teamlead.billableDays;\r\n\r\n      teamlead.arve = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => parseInt(u.arve, 10))\r\n        .reduce((a, b) => a + b, 0);\r\n      teamlead.arve = (teamlead.arve / fteCss).toFixed(0);\r\n\r\n      teamlead.urve = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => parseInt(u.urve, 10))\r\n        .reduce((a, b) => a + b, 0);\r\n      teamlead.urve = (teamlead.urve / fteCss).toFixed(0);\r\n    });\r\n\r\n    return teamleads;\r\n  }\r\n\r\n  getTeamnameForPL(teamLeadId: number, teamLeadName: string): string {\r\n    let t: Team[] = this.teams.filter(\r\n      (team: Team) => team.teamLeadId == teamLeadId\r\n    );\r\n    if (t.length > 0) {\r\n      return t[0].name;\r\n    } else {\r\n      return teamLeadName;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns an observable of the period forecast data for the company\r\n   * Used for csv export\r\n   *\r\n   * @param exportValues\r\n   */\r\n  getCsvExportData(monthIdFrom: number, monthIdTo: number): Observable<any> {\r\n    const httpOptions: object = {\r\n      responseType: \"blob\" as \"json\",\r\n    };\r\n\r\n    return this.http.get<any>(\r\n      this.BO.companyCsvExport(monthIdFrom, monthIdTo),\r\n      httpOptions\r\n    );\r\n  }\r\n}\r\n\r\nexport interface ProValues {\r\n  period: SummaryValues[];\r\n  months: SummaryValues[];\r\n}\r\n\r\nexport interface SummaryValues {\r\n  monthId: number;\r\n  probabilityId: number;\r\n  billableDays: number;\r\n  nonBillableDays: number;\r\n  vacationDays: number;\r\n  trainingDays: number;\r\n  businessDays: number;\r\n  benchDays: number;\r\n  workingDays: number;\r\n  fteCss: number;\r\n  cor: number;\r\n  arve: number;\r\n  urve: number;\r\n  ros: number;\r\n  external: number;\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "us",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "us",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ForecastService",
            "id": "injectable-ForecastService-d96ee6c4cc440941c541b6468dfe79d6",
            "file": "src/app/core/services/forecasts/forecast.service.ts",
            "properties": [
                {
                    "name": "forecasts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FcEntry[]",
                    "optional": false,
                    "description": "<p>contains all available forecasts which have already been loaded from the server</p>\n",
                    "line": 39,
                    "rawdescription": "\n\ncontains all available forecasts which have already been loaded from the server\n"
                },
                {
                    "name": "forecasts$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<FcEntry[]>",
                    "optional": false,
                    "description": "<p>observable which returns all available forecasts which have already been loaded from the server</p>\n",
                    "line": 34,
                    "rawdescription": "\n\nobservable which returns all available forecasts which have already been loaded from the server\n"
                },
                {
                    "name": "months",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "<p>contains all months</p>\n",
                    "line": 49,
                    "rawdescription": "\n\ncontains all months\n"
                },
                {
                    "name": "projects",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Project[]",
                    "optional": false,
                    "description": "<p>contains all projects</p>\n",
                    "line": 44,
                    "rawdescription": "\n\ncontains all projects\n"
                }
            ],
            "methods": [
                {
                    "name": "addForecasts",
                    "args": [
                        {
                            "name": "forecasts",
                            "type": "FcEntry[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "loadHistory",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nadds new forecasts\nmonthId can be used if new placeholder forecasts need to be added\nto the service forecast cache if e.g. copying data from last month\n",
                    "description": "<p>adds new forecasts\nmonthId can be used if new placeholder forecasts need to be added\nto the service forecast cache if e.g. copying data from last month</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2838,
                                "end": 2847,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "forecasts"
                            },
                            "type": "FcEntry[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2832,
                                "end": 2837,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2861,
                                "end": 2872,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "loadHistory"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "pos": 2855,
                                "end": 2860,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addMandatoryProjects",
                    "args": [
                        {
                            "name": "fcProjects",
                            "type": "FcProject[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FcProject[]",
                    "typeParameters": [],
                    "line": 409,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTest if an available project is mandatory and has not been added to the forecast-projects yet\nIf it has not been added yet: adds it to projects\n",
                    "description": "<p>Test if an available project is mandatory and has not been added to the forecast-projects yet\nIf it has not been added yet: adds it to projects</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 14110,
                                "end": 14120,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "fcProjects"
                            },
                            "type": "FcProject[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 14104,
                                "end": 14109,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "addProject",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fcProject",
                            "type": "FcProject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 427,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd a project to a forecast entry\n",
                    "description": "<p>Add a project to a forecast entry</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 14689,
                                "end": 14696,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "monthId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 14683,
                                "end": 14688,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 14710,
                                "end": 14716,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "userId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 14704,
                                "end": 14709,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 14730,
                                "end": 14739,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "fcProject"
                            },
                            "type": "FcProject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 14724,
                                "end": 14729,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "addProjectsToForecast",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "suggestedData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 253,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "suggestedData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calculateValues",
                    "args": [
                        {
                            "name": "forecast",
                            "type": "FcEntry",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FcEntry",
                    "typeParameters": [],
                    "line": 459,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalculate values: billable days, nonbillable days, projectDays, businessDays, vacationDays, arve, urve\n",
                    "description": "<p>Calculate values: billable days, nonbillable days, projectDays, businessDays, vacationDays, arve, urve</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 15756,
                                "end": 15764,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "forecast"
                            },
                            "type": "FcEntry",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 15750,
                                "end": 15755,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "checkForecastState",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 606,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nchecks state of forecast: currently \"locked\" and \"edited\" possible\n",
                    "description": "<p>checks state of forecast: currently &quot;locked&quot; and &quot;edited&quot; possible</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 20929,
                                "end": 20933,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "originalKeywordKind": 149,
                                "escapedText": "type"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 20923,
                                "end": 20928,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 20947,
                                "end": 20954,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "monthId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 20941,
                                "end": 20946,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 20968,
                                "end": 20974,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "userId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 20962,
                                "end": 20967,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "createNewForecast",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 239,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getForecastLockLevel",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number | boolean",
                    "typeParameters": [],
                    "line": 591,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMonthlyForecasts",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<FcEntry[]>",
                    "typeParameters": [],
                    "line": 636,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns promise of all forecasts for one month\nReturns data instantly if they already exist, otherwise: loads them from the server first\n",
                    "description": "<p>returns promise of all forecasts for one month\nReturns data instantly if they already exist, otherwise: loads them from the server first</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 22162,
                                "end": 22169,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "monthId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 22156,
                                "end": 22161,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "hasLeadRole",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 542,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initStaffingForecasts",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 654,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns forcasts for staffing component\n",
                    "description": "<p>returns forcasts for staffing component</p>\n",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadForecast",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 218,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoad a forecast from the server\n",
                    "description": "<p>Load a forecast from the server</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7328,
                                "end": 7334,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "userId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7322,
                                "end": 7327,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 7348,
                                "end": 7355,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "monthId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7342,
                                "end": 7347,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "loadForecastHistory",
                    "args": [
                        {
                            "name": "forecastId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<FcEntry[]>",
                    "typeParameters": [],
                    "line": 290,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoad the history of a forecast from the server\n",
                    "description": "<p>Load the history of a forecast from the server</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 9876,
                                "end": 9886,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "forecastId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 9870,
                                "end": 9875,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "removeProject",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 444,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemove a project from a forecast entry\n",
                    "description": "<p>Remove a project from a forecast entry</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 15223,
                                "end": 15230,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "monthId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 15217,
                                "end": 15222,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 15244,
                                "end": 15250,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "userId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 15238,
                                "end": 15243,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 15264,
                                "end": 15269,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 15258,
                                "end": 15263,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 537,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeletes all forecasts from application\n",
                    "description": "<p>Deletes all forecasts from application</p>\n"
                },
                {
                    "name": "saveForecast",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "submit",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 309,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSaves a forecast for a specific month\nIf submit param is set to true: Forecast gets locked\n",
                    "description": "<p>Saves a forecast for a specific month\nIf submit param is set to true: Forecast gets locked</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 10367,
                                "end": 10374,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "monthId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 10361,
                                "end": 10366,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 10388,
                                "end": 10394,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "userId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 10382,
                                "end": 10387,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 10408,
                                "end": 10414,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "submit"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "pos": 10402,
                                "end": 10407,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setForecast",
                    "args": [
                        {
                            "name": "forecast",
                            "type": "FcEntry",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "loadHistory",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "updated",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets forecast data\n",
                    "description": "<p>Sets forecast data</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3312,
                                "end": 3320,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "forecast"
                            },
                            "type": "FcEntry",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3306,
                                "end": 3311,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 3334,
                                "end": 3345,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "loadHistory"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3328,
                                "end": 3333,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": "updated",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setForecastComment",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "comment",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the comment of a forecast\n",
                    "description": "<p>Sets the comment of a forecast</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6922,
                                "end": 6929,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "monthId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6916,
                                "end": 6921,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 6943,
                                "end": 6949,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "userId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6937,
                                "end": 6942,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 6963,
                                "end": 6970,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "comment"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6957,
                                "end": 6962,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setForecastHistory",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fcHistory",
                            "type": "FcEntry[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds the forecast history to a single forecast\n",
                    "description": "<p>Adds the forecast history to a single forecast</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6481,
                                "end": 6487,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "userId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6475,
                                "end": 6480,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 6501,
                                "end": 6508,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "monthId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6495,
                                "end": 6500,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 6522,
                                "end": 6531,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "fcHistory"
                            },
                            "type": "FcEntry[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6516,
                                "end": 6521,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setTeamLockState",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lockState",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 393,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lockState",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unlockForecast",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 374,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnlocks a forecast: only possible for teamleads\n",
                    "description": "<p>Unlocks a forecast: only possible for teamleads</p>\n",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateProjects",
                    "args": [
                        {
                            "name": "forecast",
                            "type": "FcEntry",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FcEntry",
                    "typeParameters": [],
                    "line": 550,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nValidates projects before saving forecast\n",
                    "description": "<p>Validates projects before saving forecast</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 19212,
                                "end": 19220,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "forecast"
                            },
                            "type": "FcEntry",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 19206,
                                "end": 19211,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>forecast service</p>\n",
            "rawdescription": "\n\nforecast service\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\nimport { FcProject } from '../../interfaces/fcProject';\r\nimport { Project } from '../../interfaces/project';\r\nimport { FcEntry } from '../../interfaces/fcEntry';\r\nimport { BusinessOperationsService } from '../../shared/business-operations.service';\r\nimport { Month } from '../../interfaces/month';\r\nimport { UtilitiesService } from '../utilities.service';\r\nimport { AuthService } from '../../security/auth.service';\r\nimport { PageStateService } from '../../shared/page-state.service';\r\nimport { UserService } from '../user.service';\r\nimport { User } from '../../interfaces/user';\r\nimport { environment as env } from '../../../../environments/environment.prod';\r\nimport { TeamUserService } from './team-user.service';\r\nimport { cloneDeep } from 'lodash';\r\nimport { DataSharingService } from '../../shared/data-sharing.service';\r\nimport { Router } from '@angular/router';\r\nimport { Suggestion } from '../../interfaces/suggestion';\r\nimport { resolve } from 'url';\r\n\r\n/**\r\n * forecast service\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ForecastService {\r\n  /**\r\n   * observable which returns all available forecasts which have already been loaded from the server\r\n   */\r\n  forecasts$: BehaviorSubject<FcEntry[]>;\r\n\r\n  /**\r\n   * contains all available forecasts which have already been loaded from the server\r\n   */\r\n  forecasts: FcEntry[];\r\n\r\n  /**\r\n   * contains all projects\r\n   */\r\n  projects: Project[];\r\n\r\n  /**\r\n   * contains all months\r\n   */\r\n  months: Month[];\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private snackBar: MatSnackBar,\r\n    private BO: BusinessOperationsService,\r\n    private utilitiesService: UtilitiesService,\r\n    private authService: AuthService,\r\n    private pageState: PageStateService,\r\n    private userService: UserService,\r\n    private teamService: TeamUserService,\r\n    private dataSharingService: DataSharingService,\r\n    private router: Router,\r\n  ) {\r\n    this.forecasts = [];\r\n    this.forecasts$ = new BehaviorSubject([]);\r\n\r\n    this.utilitiesService.projects$\r\n      .subscribe((projects: Project[]) => {\r\n        this.projects = projects;\r\n\r\n        this.forecasts.forEach((forecast: FcEntry) => {\r\n          forecast.projects = this.addMandatoryProjects(forecast.projects);\r\n        });\r\n        this.forecasts$.next(this.forecasts);\r\n      });\r\n\r\n    this.utilitiesService.months$\r\n      .subscribe((months: Month[]) => {\r\n        this.months = months;\r\n      });\r\n    \r\n  }\r\n\r\n  /**\r\n   * adds new forecasts\r\n   * monthId can be used if new placeholder forecasts need to be added \r\n   * to the service forecast cache if e.g. copying data from last month\r\n   * @param forecasts\r\n   * @param loadHistory\r\n   */\r\n  addForecasts(forecasts: FcEntry[], loadHistory: boolean = false, monthId: number = 0): void {\r\n    forecasts.forEach((forecast: FcEntry) => {\r\n      if(forecast && forecast.forecastId >= 0){\r\n        this.setForecast(forecast, loadHistory, false);\r\n\r\n      } else {\r\n        //create new Placeholder\r\n        this.createNewForecast(forecast.userId, monthId);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sets forecast data\r\n   * @param forecast\r\n   * @param loadHistory\r\n   */\r\n  setForecast(forecast: FcEntry, loadHistory: boolean, updated: boolean = false): void {\r\n    if (!forecast.userId || !forecast.monthId) {\r\n      return;\r\n    }\r\n\r\n    let mandatoryProjects: FcProject[] = forecast.projects.filter((p: FcProject) => p.mandatory === 'Y');\r\n    let nonmandatoryProjects: FcProject[] = forecast.projects.filter((p: FcProject) => p.mandatory !== 'Y');\r\n    if (this.forecasts.find((fc: FcEntry) => fc.userId === forecast.userId && fc.monthId === forecast.monthId)) {\r\n      this.forecasts\r\n        .filter((fc: FcEntry) => fc.userId === forecast.userId && fc.monthId === forecast.monthId)\r\n        .forEach((fc: FcEntry) => {\r\n          fc.forecastId = forecast.forecastId;\r\n          if (typeof forecast.locked !== 'number') {\r\n            fc.locked = forecast.locked === true ? this.authService.getRoleId() : -1;\r\n          } else {\r\n            fc.locked = forecast.locked;\r\n          }\r\n          fc.comment = forecast.comment;\r\n          fc.fte = forecast.fte //? forecast.fte : 1; \r\n          fc.ros = forecast.ros;\r\n          fc.cor = forecast.cor;\r\n          fc.gradeId = forecast.gradeId;\r\n          fc.isRelevant = forecast.isRelevant;\r\n          fc.projects = mandatoryProjects;\r\n          fc.updated = updated;\r\n\r\n          // Adds all mandatory projects which are not already set\r\n          if (fc.locked <= this.authService.getRoleId()) {\r\n            fc.projects = this.addMandatoryProjects(fc.projects);\r\n          }\r\n\r\n          // Adds all non-mandatory projects which have been set\r\n          fc.projects = [...fc.projects, ...nonmandatoryProjects];\r\n\r\n          // Calculates summary values\r\n          fc = this.calculateValues(fc);\r\n\r\n          // Validates entries if there has already been an invalid validation before\r\n          if (forecast.instantValidation) {\r\n            fc.instantValidation = forecast.instantValidation;\r\n            fc = this.validateProjects(fc);\r\n          }\r\n        });\r\n    } else {\r\n      if (typeof forecast.locked !== 'number') {\r\n        forecast.locked = forecast.locked === true ? this.authService.getRoleId() : -1;\r\n      }\r\n      forecast.projects = mandatoryProjects;\r\n\r\n      if (!forecast.gradeId || forecast.gradeId === 0) {\r\n        let u: User = this.userService.getUser(forecast.userId);\r\n        forecast.gradeId = u ? u.gradeId : 0;\r\n      }\r\n\r\n      if (forecast.locked <= this.authService.getRoleId()) {\r\n        forecast.projects = this.addMandatoryProjects(forecast.projects);\r\n      }\r\n      forecast.projects = [...forecast.projects, ...nonmandatoryProjects];\r\n\r\n      forecast = this.calculateValues(forecast);\r\n\r\n      this.forecasts.push(forecast);\r\n    }\r\n\r\n    // If history is not set or outdated: reload history\r\n    if (forecast.forecastId && (!forecast.history || loadHistory)) {\r\n      this.loadForecastHistory(forecast.forecastId)\r\n      .then((fcHistory: FcEntry[]) => {\r\n        this.setForecastHistory(forecast.userId, forecast.monthId, fcHistory ? fcHistory : []);\r\n      });\r\n    }\r\n\r\n    this.forecasts$.next(this.forecasts);\r\n  }\r\n\r\n  /**\r\n   * Adds the forecast history to a single forecast\r\n   * @param userId\r\n   * @param monthId\r\n   * @param fcHistory\r\n   */\r\n  setForecastHistory(userId: number, monthId: number, fcHistory: FcEntry[]): void {\r\n    this.forecasts\r\n      .filter((fc: FcEntry) => fc.userId === userId && fc.monthId === monthId)\r\n      .forEach((fcEntry: FcEntry) => {\r\n        fcEntry.history = fcHistory;\r\n      });\r\n\r\n    this.forecasts$.next(this.forecasts);\r\n  }\r\n\r\n  /**\r\n   * Sets the comment of a forecast\r\n   * @param monthId\r\n   * @param userId\r\n   * @param comment\r\n   */\r\n  setForecastComment(monthId: number, userId: number, comment: string): void {\r\n    this.forecasts\r\n      .filter((fc: FcEntry) => fc.userId === userId && fc.monthId === monthId)\r\n      .forEach((fc: FcEntry) => {\r\n        fc.comment = comment;\r\n        fc.updated = true;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Load a forecast from the server\r\n   * @param userId\r\n   * @param monthId\r\n   */\r\n  loadForecast(userId: number, monthId: number): Promise<boolean> {\r\n    return new Promise((resolve: any, reject: any) => {\r\n      this.http.get<FcEntry>(this.BO.forecast(userId, monthId)).subscribe(\r\n        (fcEntry: any) => {\r\n          if (fcEntry && (<FcEntry>fcEntry).forecastId >= 0) {\r\n            this.setForecast(fcEntry, false, false);\r\n            resolve({showDialog: false});\r\n\r\n          } else {\r\n            this.createNewForecast(userId, monthId);\r\n\r\n            if (fcEntry && fcEntry.suggestedData) {\r\n              resolve({showDialog: true, suggestedData: fcEntry.suggestedData });\r\n            } else {\r\n              resolve({showDialog: false });\r\n            }\r\n          }\r\n        });\r\n    });\r\n  }\r\n\r\n  createNewForecast(userId: number, monthId: number): void {\r\n    let forecast: FcEntry = new FcEntry();\r\n    forecast.monthId = monthId;\r\n    forecast.userId = userId;\r\n    let user: User = this.userService.getUser(userId);\r\n    forecast.gradeId = user ? user.gradeId : 0;\r\n    forecast.fte = user ? user.fte : 0;\r\n    if (user.gradeId === 7) {\r\n      forecast.isRelevant = false;\r\n    }\r\n\r\n    this.setForecast(forecast, false, false);\r\n  }\r\n\r\n  addProjectsToForecast(userId: number, monthId: number, suggestedData: any): void {\r\n    this.forecasts.filter((fc: FcEntry) => fc.userId === userId && fc.monthId === monthId).forEach((fc: FcEntry) => {\r\n      if (suggestedData.projects && (<Suggestion[]>suggestedData.projects).length > 0) {\r\n        suggestedData.projects.forEach((suggestion: Suggestion) => {\r\n          let fcProject: FcProject = new FcProject();\r\n          fcProject.projectId = suggestion.projectId;\r\n          \r\n          if (this.projects.find((p: Project) => p.id === suggestion.projectId && p.projectType !== 0)) {\r\n            fcProject.billable = false;\r\n            fcProject.externalRevenue = false;\r\n          } else {\r\n            fcProject.billable = suggestion.billable;\r\n            fcProject.externalRevenue = suggestion.externalRevenue;\r\n            fcProject.cor = suggestion.cor;\r\n            fcProject.probabilityId = suggestion.probabilityId;\r\n          }\r\n\r\n          this.addProject(monthId, userId, fcProject);\r\n        });\r\n      }\r\n\r\n      if (suggestedData.gradeId) {\r\n        fc.gradeId = suggestedData.gradeId;\r\n      }\r\n\r\n      if (suggestedData.fte) {\r\n        fc.fte = suggestedData.fte;\r\n      }\r\n    });\r\n\r\n    this.forecasts$.next(this.forecasts);\r\n  }\r\n\r\n  /**\r\n   * Load the history of a forecast from the server\r\n   * @param forecastId\r\n   */\r\n  loadForecastHistory(forecastId: number): Promise<FcEntry[]> {\r\n    return new Promise((resolve: any, reject: any) => {\r\n\r\n      this.http.get<FcEntry[]>(this.BO.forecastHistory(forecastId)).subscribe(\r\n        (fcEntries: FcEntry[]) => {\r\n          resolve(fcEntries);\r\n        }, (e: any) => {\r\n          reject([]);\r\n        });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Saves a forecast for a specific month\r\n   * If submit param is set to true: Forecast gets locked\r\n   * @param monthId\r\n   * @param userId\r\n   * @param submit\r\n   */\r\n  saveForecast(monthId: number, userId: number, submit: boolean = false): void {\r\n    let forecast: FcEntry = cloneDeep(this.forecasts.find((fc: FcEntry) => fc.userId === userId && fc.monthId === monthId));\r\n    if (!forecast) {\r\n      return;\r\n    }\r\n\r\n    forecast = this.validateProjects(forecast);\r\n    if (([].concat.apply([], forecast.projects.map((p: FcProject) => p.errors))).length > 0) {\r\n      forecast.instantValidation = true;\r\n      this.setForecast(forecast, false, true);\r\n\r\n      this.snackBar.open('Forecast cannot be saved due to one or more invalid data fields.', 'OK', { duration: 5000, });\r\n      return;\r\n    }\r\n\r\n    if (submit) {\r\n      forecast.locked = true;\r\n    } else {\r\n      forecast.locked = false;\r\n    }\r\n\r\n    forecast.history = undefined;\r\n\r\n    this.pageState.showSpinner();\r\n    \r\n    this.http.put(this.BO.forecast(userId, monthId), forecast)\r\n      .subscribe((fc: FcEntry) => {\r\n        this.setForecast(fc, true, false);\r\n        if(!submit) {\r\n          this.snackBar.open('Your forecast has been successfully saved.', 'OK', { duration: 5000, });\r\n        }\r\n        else {\r\n          this.snackBar.open('Your forecast has been successfully submitted.', 'OK', { duration: 5000, });\r\n        }\r\n        \r\n        this.pageState.hideSpinner();\r\n\r\n      }, (e: any) => {\r\n        if(e.status === 409) {\r\n          if(!this.hasLeadRole()) {\r\n            this.snackBar.open('Your forecast has already been submitted by your team lead. Please contact your supervisor. The page will be refreshed automatically.', 'OK', { duration: 10000, });\r\n          }\r\n          else {\r\n            this.snackBar.open('The forecast has already been submitted by your colleague. The page will be refreshed automatically.', 'OK', { duration: 10000, });\r\n          }\r\n\r\n          setTimeout(() => window.location.reload(), 5000);\r\n          \r\n        }\r\n        else {\r\n          if(!submit) {\r\n            this.snackBar.open('Your forecast could not be saved. Please try again later.', 'OK', { duration: 10000, });\r\n          }\r\n          else if(submit){\r\n            this.snackBar.open('Your forecast could not be submitted. Please try again later.', 'OK', { duration: 10000, });\r\n          }\r\n        }\r\n        this.pageState.hideSpinner();\r\n\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Unlocks a forecast: only possible for teamleads\r\n   */\r\n  unlockForecast(monthId: number, userId: number): void {\r\n    this.http.put(this.BO.unlockForecast(userId, monthId), {})\r\n      .subscribe((forecast: FcEntry) => {\r\n\r\n        this.forecasts\r\n          .filter((fc: FcEntry) => fc.userId === userId && fc.monthId === monthId)\r\n          .forEach((fc: FcEntry) => {\r\n            fc.locked = -1;\r\n          });\r\n        this.forecasts$.next(this.forecasts);\r\n        this.snackBar.open('Forecast has sucessfuly been unlocked', 'OK', { duration: 10000, });\r\n        this.pageState.hideSpinner();\r\n      }, (e: any) => {\r\n        this.snackBar.open('Your forecast could not be unlocked. Please try again later.', 'OK', { duration: 10000, });\r\n        this.pageState.hideSpinner();\r\n\r\n      });\r\n  }\r\n\r\n  setTeamLockState(monthId: number, level: number, lockState: number): void {\r\n    const parentId: number = this.authService.getUserId();\r\n    let user: number[] = this.teamService.getTeamChilds(level, parentId);\r\n\r\n    this.forecasts\r\n      .filter((fc: FcEntry) => fc.monthId === monthId && user.indexOf(fc.userId) >= 0)\r\n      .forEach((fc: FcEntry) => {\r\n        fc.locked = lockState;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Test if an available project is mandatory and has not been added to the forecast-projects yet\r\n   * If it has not been added yet: adds it to projects\r\n   * @param fcProjects\r\n   */\r\n  addMandatoryProjects(fcProjects: FcProject[]): FcProject[] {\r\n    let mandatory: number[] = this.projects.filter((p: Project) => p.active === true && p.mandatory === 'Y').map((p: Project) => p.id);\r\n\r\n    mandatory.forEach((mp: number) => {\r\n      if (!fcProjects.find((p: FcProject) => p.projectId === mp)) {\r\n        fcProjects.push({ projectId: mp, plannedProjectDays: 0, probabilityId: null, cor: 0, externalRevenue: false, mandatory: 'Y' });\r\n      }\r\n    });\r\n\r\n    return fcProjects;\r\n  }\r\n\r\n  /**\r\n   * Add a project to a forecast entry\r\n   * @param monthId\r\n   * @param userId\r\n   * @param fcProject\r\n   */\r\n  addProject(monthId: number, userId: number, fcProject: FcProject): void {\r\n    this.forecasts\r\n      .filter((fc: FcEntry) => fc.monthId === monthId && fc.userId === userId)\r\n      .forEach((fc: FcEntry) => {\r\n        fc.projects = fc.projects.filter((p: FcProject) => p.projectId !== fcProject.projectId);\r\n        fc.projects.push(fcProject);\r\n      });\r\n\r\n    this.forecasts$.next(this.forecasts);\r\n  }\r\n\r\n  /**\r\n   * Remove a project from a forecast entry\r\n   * @param monthId\r\n   * @param userId\r\n   * @param index\r\n   */\r\n  removeProject(monthId: number, userId: number, index: number): void {\r\n    this.forecasts\r\n      .filter((fc: FcEntry) => fc.monthId === monthId && fc.userId === userId)\r\n      .forEach((fc: FcEntry) => {\r\n        fc.projects.splice(index, 1);\r\n        fc = this.calculateValues(fc);\r\n      });\r\n\r\n    this.forecasts$.next(this.forecasts);\r\n  }\r\n\r\n  /**\r\n   * Calculate values: billable days, nonbillable days, projectDays, businessDays, vacationDays, arve, urve\r\n   * @param forecast\r\n   */\r\n  calculateValues(forecast: FcEntry): FcEntry {\r\n    var user = this.userService.getUser(forecast.userId);\r\n    forecast.totalDays = this.months.find((m: Month) => m.id === forecast.monthId) ? parseInt(this.months.find((m: Month) => m.id === forecast.monthId).workingdays, 10) : 0;\r\n\r\n    if (forecast.fte) {\r\n      forecast.totalDays *= forecast.fte;\r\n    } else {\r\n      forecast.totalDays = 0;\r\n    }\r\n\r\n    // calculate billable + non-billable days\r\n    forecast.billableDays = 0;\r\n    forecast.nonbillableDays = 0;\r\n    forecast.nonbillableProjectDays = 0;\r\n\r\n    forecast.projects.forEach((p: FcProject) => {\r\n      if (p.billable) {\r\n        forecast.billableDays += (p.plannedProjectDays ? p.plannedProjectDays : 0 );\r\n      } else {\r\n        forecast.nonbillableDays += (p.plannedProjectDays ? p.plannedProjectDays : 0 );\r\n        let project: Project = this.projects.find((pr: Project) => pr.id === p.projectId);\r\n        if(project && (project.projectType === 0 || project.projectType === 5)) {\r\n          forecast.nonbillableProjectDays += (p.plannedProjectDays ? p.plannedProjectDays : 0 );\r\n        }\r\n      }\r\n    });\r\n\r\n    // Calculate total project days (without vacation + business-development days)\r\n    forecast.projectDays = 0;\r\n    forecast.projects\r\n      .filter((p: FcProject) => this.projects.find((ap: Project) => ap.projectType === 0 && ap.id === p.projectId))\r\n      .forEach((p: FcProject) => forecast.projectDays += (p.plannedProjectDays ? p.plannedProjectDays : 0));\r\n\r\n    forecast.businessDays = 0;\r\n    forecast.vacationDays = 0;\r\n    if (this.projects.length > 0 && forecast.projects.length > 0) {\r\n\r\n      // Calculate vacation days\r\n      let vacationProject: Project = this.projects.find((ap: Project) => ap.projectType === 3);\r\n      if (vacationProject) {0\r\n        let project: FcProject = forecast.projects.find((p: FcProject) => p.projectId === vacationProject.id);\r\n        if (project && project.plannedProjectDays) {\r\n          forecast.vacationDays = project.plannedProjectDays;\r\n        }\r\n      }\r\n\r\n      // Calculate business development days\r\n      let businessProject: Project = this.projects.find((ap: Project) => ap.projectType === 1);\r\n      if (businessProject) {\r\n        let project: FcProject = forecast.projects.find((p: FcProject) => p.projectId === businessProject.id);\r\n        if (project && project.plannedProjectDays) {\r\n          forecast.businessDays = project.plannedProjectDays;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Calculate URVE + ARVE\r\n    if (!forecast.isRelevant) {\r\n      forecast.urve = 0;\r\n      forecast.arve = 0;\r\n    } else {\r\n      forecast.urve = (forecast.billableDays !== 0) ? ((forecast.billableDays) / (forecast.totalDays - forecast.vacationDays)) : 0;\r\n      if (forecast.urve < 0) {\r\n        forecast.urve = 0;\r\n      }\r\n\r\n      forecast.arve = (forecast.billableDays !== 0 || forecast.nonbillableProjectDays !== 0) ? ((forecast.billableDays + forecast.nonbillableProjectDays) / (forecast.totalDays - forecast.vacationDays)) : 0;\r\n      if (forecast.arve < 0) {\r\n        forecast.arve = 0;\r\n      }\r\n    }\r\n\r\n    return forecast;\r\n  }\r\n\r\n  /**\r\n   * Deletes all forecasts from application\r\n   */\r\n  reset(): void {\r\n    this.forecasts = [];\r\n    this.forecasts$.next(this.forecasts);\r\n  }\r\n\r\n  hasLeadRole(): boolean {\r\n    return this.authService.hasRole(env.roles.pdl);\r\n  }\r\n\r\n  /**\r\n   * Validates projects before saving forecast\r\n   * @param forecast\r\n   */\r\n  validateProjects(forecast: FcEntry): FcEntry {\r\n    forecast.projects.forEach((p: FcProject) => {\r\n      p.errors = [];\r\n\r\n      if (typeof p.projectId === 'undefined') {\r\n        p.errors.push('No project found.');\r\n      }\r\n\r\n\r\n\r\n      // if (typeof p.cor === 'undefined') {\r\n      //   if (this.authService.getRoleId() === env.roles.css) {\r\n      //     p.cor = 0;\r\n      //   } else {\r\n      //     p.errors.push('No COR value defined.');\r\n      //   }\r\n      // } else if (typeof p.cor !== 'number') {\r\n      //   p.errors.push('COR value has to be a number.');\r\n      // } else if (p.cor < 0) {\r\n      //   p.errors.push('COR value has to be a positive number.');\r\n      // }\r\n\r\n      if (typeof p.plannedProjectDays === 'undefined') {\r\n        p.errors.push('Number of project days not specified.');\r\n      } else if (typeof p.plannedProjectDays !== 'number') {\r\n        p.errors.push('Project days value has to be a number.');\r\n      } else if (p.plannedProjectDays < 0) {\r\n        p.errors.push('Project days value has to be a positive number.');\r\n      }\r\n\r\n      if (!p.probabilityId) {\r\n        p.errors.push('No probability defined.');\r\n      }\r\n      if(p.cor < 1 && p.billable && this.hasLeadRole()) {\r\n        p.errors.push(\"COR value cannot be 0 or empty.\");\r\n      }\r\n    });\r\n\r\n    return forecast;\r\n  }\r\n\r\n  getForecastLockLevel(monthId: number, userId: number): number | boolean {\r\n    let forecast: FcEntry = this.forecasts.find((fc: FcEntry) => fc.monthId === monthId && fc.userId === userId);\r\n    if (!forecast) {\r\n      return false;\r\n    }\r\n\r\n    return forecast.locked;\r\n  }\r\n\r\n  /**\r\n   * checks state of forecast: currently \"locked\" and \"edited\" possible\r\n   * @param type\r\n   * @param monthId\r\n   * @param userId\r\n   */\r\n  checkForecastState(type: string, monthId: number, userId: number): boolean {\r\n    let forecast: FcEntry = this.forecasts.find((fc: FcEntry) => fc.monthId === monthId && fc.userId === userId);\r\n    if (!forecast) {\r\n      return false;\r\n    }\r\n\r\n    if (type === 'locked' && forecast.locked >= this.authService.getRoleId()) {\r\n      return true;\r\n    } else if (type === 'locked-sub' && forecast.locked >= 0 && forecast.locked < this.authService.getRoleId()) {\r\n      return true;\r\n    } else if (type === 'edited' && forecast.updated) {\r\n      return true;\r\n    } else if (type === 'saved' && forecast.locked < 0) {\r\n      var members = this.teamService.getTeamChilds(1, this.authService.getUserId()).concat(this.teamService.getTeamChilds(2, this.authService.getUserId()));\r\n      for(var i = 0; i < members.length; i++) {\r\n        var user = this.userService.getUser(members[i]);\r\n        if(user.email == forecast.changedBy) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * returns promise of all forecasts for one month\r\n   * Returns data instantly if they already exist, otherwise: loads them from the server first\r\n   * @param monthId\r\n   */\r\n  getMonthlyForecasts(monthId: number): Promise<FcEntry[]> {\r\n    let promise: Promise<FcEntry[]> = new Promise((resolve: any, reject: any) => {\r\n      let fcEntries: FcEntry[] = this.forecasts$.getValue().filter((fc: FcEntry) => fc.monthId === monthId);\r\n      if (fcEntries.length > 0) {\r\n        resolve(fcEntries);\r\n      } else {\r\n        this.http.get<FcEntry[]>(this.BO.teamForecast(this.authService.getUserId(), monthId)).subscribe((fc: FcEntry[]) => {\r\n          resolve(fc);\r\n        });\r\n      }\r\n    });\r\n\r\n    return promise;\r\n  }\r\n\r\n  /**\r\n  * returns forcasts for staffing component\r\n  */\r\n  initStaffingForecasts(monthId: number): void {\r\n    this.pageState.showSpinner();\r\n\r\n    this.http\r\n    .get(this.BO.staffingForecasts(monthId))\r\n    .subscribe((forecasts: FcEntry[]) => {\r\n      this.addForecasts(forecasts);\r\n      this.pageState.hideSpinner();\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "teamService",
                        "type": "TeamUserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataSharingService",
                        "type": "DataSharingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "teamService",
                        "type": "TeamUserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataSharingService",
                        "type": "DataSharingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LoginService",
            "id": "injectable-LoginService-4fd9716bee2ae2e52a0b77c39d976a9f",
            "file": "src/app/core/security/login.service.ts",
            "properties": [
                {
                    "name": "location",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Location",
                    "optional": false,
                    "line": 40,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "optional": false,
                    "line": 39,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "tokenRenewActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>set to true when token renew request was already sent, but system is waiting for a response</p>\n",
                    "line": 24,
                    "rawdescription": "\n\nset to true when token renew request was already sent, but system is waiting for a response\n"
                }
            ],
            "methods": [
                {
                    "name": "deleteData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeletes all data in services when called.\nTypically called at logout process.\n",
                    "description": "<p>Deletes all data in services when called.\nTypically called at logout process.</p>\n"
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles login tasks\n\n",
                    "description": "<p>Handles login tasks</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1779,
                                "end": 1784,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "email"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1773,
                                "end": 1778,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1798,
                                "end": 1806,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "password"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1792,
                                "end": 1797,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles logout tasks\n",
                    "description": "<p>Handles logout tasks</p>\n"
                },
                {
                    "name": "renewToken",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets new token from server\n",
                    "description": "<p>Gets new token from server</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>login service</p>\n",
            "rawdescription": "\n\nlogin service\n",
            "sourceCode": "import { Router } from '@angular/router';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { BusinessOperationsService } from '../../core/shared/business-operations.service';\r\nimport { AuthService } from './auth.service';\r\nimport { UtilitiesService } from '../services/utilities.service';\r\nimport { ForecastService } from '../services/forecasts/forecast.service';\r\nimport { UserService } from '../services/user.service';\r\nimport { TeamUserService } from '../services/forecasts/team-user.service';\r\nimport { Location } from '@angular/common';\r\nimport { PageStateService } from '../shared/page-state.service';\r\nimport { ExecutiveForecastsService } from '../services/forecasts/executive-forecasts.service';\r\n\r\n/**\r\n * login service\r\n */\r\n@Injectable()\r\nexport class LoginService {\r\n  /**\r\n   * set to true when token renew request was already sent, but system is waiting for a response\r\n   */\r\n  tokenRenewActive: boolean = false;\r\n\r\n  /**\r\n   * login service constructor\r\n   * \r\n   * @param router\r\n   * @param location\r\n   * @param BO\r\n   * @param http\r\n   * @param auth\r\n   * @param utilitiesService\r\n   * @param forecastService\r\n   * @param userService\r\n   */\r\n  constructor(\r\n    public router: Router,\r\n    public location: Location,\r\n    private BO: BusinessOperationsService,\r\n    private http: HttpClient,\r\n    private auth: AuthService,\r\n    private utilitiesService: UtilitiesService,\r\n    private forecastService: ForecastService,\r\n    private userService: UserService,\r\n    private teamService: TeamUserService,\r\n    private executiveService: ExecutiveForecastsService,\r\n    private pageState: PageStateService,\r\n  ) {}\r\n\r\n  /**\r\n   * Handles login tasks\r\n   * \r\n   * @param email\r\n   * @param password\r\n   */\r\n  login(email: string, password: string): Observable<any> {\r\n    let options: any = {\r\n      observe: 'response',\r\n    };\r\n\r\n    return this.http.post(\r\n       this.BO.login(),\r\n       {\r\n         email: email,\r\n         password: password,\r\n       },\r\n       options,\r\n     );\r\n  }\r\n\r\n  /**\r\n   * Handles logout tasks\r\n   */\r\n  logout(): void {\r\n    this.auth.setLogged(false);\r\n    this.router.navigate(['/login']);\r\n\r\n    setTimeout(() => {\r\n      this.deleteData();\r\n    }, 500);\r\n  }\r\n\r\n  /**\r\n   * Gets new token from server\r\n   */\r\n  renewToken(): void {\r\n    if (this.auth.getExpireDate() < ((new Date().getTime() / 1000) + 1800) ) {\r\n\r\n      if (!this.tokenRenewActive) {\r\n        this.tokenRenewActive = true;\r\n        this.http.get(this.BO.renewToken())\r\n          .subscribe((token: string) => {\r\n            this.auth.useToken('Bearer ' + token);\r\n            this.tokenRenewActive = false;\r\n          });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deletes all data in services when called.\r\n   * Typically called at logout process.\r\n   */\r\n  deleteData(): void {\r\n    this.userService.reset();\r\n    this.teamService.reset();\r\n    this.utilitiesService.reset();\r\n    this.forecastService.reset();\r\n    this.executiveService.resetSummaryValues();\r\n    this.pageState.resetForecastrReady();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>login service constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "teamService",
                        "type": "TeamUserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "rawdescription": "\n\nlogin service constructor\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1083,
                            "end": 1089,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "router"
                        },
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1077,
                            "end": 1082,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1103,
                            "end": 1111,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "location"
                        },
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1097,
                            "end": 1102,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1125,
                            "end": 1127,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "BO"
                        },
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1119,
                            "end": 1124,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1141,
                            "end": 1145,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "http"
                        },
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1135,
                            "end": 1140,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1159,
                            "end": 1163,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "auth"
                        },
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1153,
                            "end": 1158,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1177,
                            "end": 1193,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "utilitiesService"
                        },
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1171,
                            "end": 1176,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1207,
                            "end": 1222,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "forecastService"
                        },
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1201,
                            "end": 1206,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1236,
                            "end": 1247,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "userService"
                        },
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1230,
                            "end": 1235,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "teamService",
                        "type": "TeamUserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MonthService",
            "id": "injectable-MonthService-b0eca0f7614c86c46fb4d24f5e0feb35",
            "file": "src/app/core/services/admin/months.service.ts",
            "properties": [
                {
                    "name": "months$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Month[]>",
                    "optional": false,
                    "description": "<p>Observable which contains all months</p>\n",
                    "line": 20,
                    "rawdescription": "\n\nObservable which contains all months\n"
                }
            ],
            "methods": [
                {
                    "name": "addMonth",
                    "args": [
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLockedMonths",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMonths",
                    "args": [],
                    "optional": false,
                    "returnType": "Month[]",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns all months\n",
                    "description": "<p>returns all months</p>\n"
                },
                {
                    "name": "getSavedMonths",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initializeMonths",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInitializes months\n",
                    "description": "<p>Initializes months</p>\n"
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmpties month-data\nTypically called at logout\n",
                    "description": "<p>Empties month-data\nTypically called at logout</p>\n"
                },
                {
                    "name": "setMonth",
                    "args": [
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate or create month\n",
                    "description": "<p>Update or create month</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1896,
                                "end": 1901,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "month"
                            },
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1890,
                                "end": 1895,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setMonthActiveState",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\n",
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>months service</p>\n",
            "rawdescription": "\n\nmonths service\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\n\r\nimport { Month } from '../../interfaces/month';\r\nimport { BusinessOperationsService } from '../../shared/business-operations.service';\r\nimport { PageStateService } from '../../shared/page-state.service';\r\n\r\n/**\r\n * months service\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MonthService {\r\n  /**\r\n   * Observable which contains all months\r\n   */\r\n  months$: BehaviorSubject<Month[]>;\r\n\r\n  /**\r\n   * utilities service constructor\r\n   * \r\n   * @param http\r\n   * @param BO\r\n   * @param pageState\r\n   */\r\n  constructor(\r\n    private http: HttpClient,\r\n    private snackBar: MatSnackBar,\r\n    private BO: BusinessOperationsService,\r\n    private pageState: PageStateService,\r\n  ) {\r\n    this.months$ = new BehaviorSubject([]);\r\n  }\r\n\r\n  /**\r\n   * Initializes months\r\n   */\r\n  initializeMonths(): void {\r\n    this.http.get(this.BO.getAdminMonths()).subscribe((months: Month[]) => {\r\n      this.months$.next(months.sort((a, b) => (a.time > b.time) ? 1 : -1));\r\n    });\r\n  }\r\n\r\n  addMonth(month: Month): void {\r\n    let months: Month[] = this.months$.getValue();\r\n    months = months.filter((p: Month) => p.id !== month.id);\r\n    months.push(month);\r\n\r\n    this.months$.next(months);\r\n  }\r\n\r\n  getLockedMonths(): Observable<any> {\r\n    return this.http.get(this.BO.getLockedMonths());\r\n  }\r\n  \r\n  getSavedMonths(): Observable<any> {\r\n    return this.http.get(this.BO.getSavedMonths());\r\n  }\r\n\r\n  /**\r\n   * Empties month-data\r\n   * Typically called at logout\r\n   */\r\n  reset(): void {\r\n    this.months$.next([]);\r\n  }\r\n\r\n  /**\r\n   * returns all months\r\n   */\r\n  getMonths(): Month[] {\r\n    return this.months$.getValue();\r\n  }\r\n\r\n\t/**\r\n   * Update or create month\r\n   * @param month \r\n   */\r\n  setMonth(month: Month): void {\r\n    this.http.put(this.BO.setMonths(), month)\r\n      .subscribe((m: Month) => {\r\n        this.addMonth(m);\r\n        this.snackBar.open('Month successfully saved!', 'OK', { duration: 5000, });\r\n        this.pageState.hideSpinner();\r\n\r\n      }, (e: any) => {\r\n        this.snackBar.open('Month could not be saved!', 'OK', { duration: 10000, });\r\n        this.pageState.hideSpinner();\r\n\r\n      });\r\n  }\r\n\r\n  /**\r\n   * \r\n   */\r\n  setMonthActiveState(id: number, state: boolean): void {\r\n    this.http.put(this.BO.setMonthState(), {id: id, active: state })\r\n      .subscribe((m: Month) => {\r\n        this.addMonth(m);\r\n      });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>utilities service constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "rawdescription": "\n\nutilities service constructor\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 678,
                            "end": 682,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "http"
                        },
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 672,
                            "end": 677,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 696,
                            "end": 698,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "BO"
                        },
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 690,
                            "end": 695,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 712,
                            "end": 721,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "pageState"
                        },
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 706,
                            "end": 711,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MyErrorHandler",
            "id": "injectable-MyErrorHandler-2acb80d0eba5459a6d55b3fd54bc4de5",
            "file": "src/app/core/errors/error.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMain error handling method. Is called automatically when an error occurs.\n\n",
                    "description": "<p>Main error handling method. Is called automatically when an error occurs.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 322,
                                "end": 327,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "error"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 316,
                                "end": 321,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Own error handler to extend the default angular error handler if needed</p>\n",
            "rawdescription": "\n\nOwn error handler to extend the default angular error handler if needed\n",
            "sourceCode": "import { ErrorHandler, Injectable } from '@angular/core';\r\n\r\n/**\r\n * Own error handler to extend the default angular error handler if needed\r\n */\r\n@Injectable()\r\nexport class MyErrorHandler implements ErrorHandler {\r\n\t\r\n\t/**\r\n\t * Main error handling method. Is called automatically when an error occurs.\r\n\t * \r\n\t * @param error \r\n\t */\r\n\thandleError(error: any): void {}\r\n}\r\n",
            "type": "injectable"
        },
        {
            "name": "PageStateService",
            "id": "injectable-PageStateService-7fdb6d18a9e85134cc70762b47359ac2",
            "file": "src/app/core/shared/page-state.service.ts",
            "properties": [
                {
                    "name": "forecastrReady$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "spinner$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "<p>Observable which contains the current spinner value (boolean)</p>\n",
                    "line": 14,
                    "rawdescription": "\n\nObservable which contains the current spinner value (boolean)\n"
                }
            ],
            "methods": [
                {
                    "name": "hideSpinner",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets spinner inactive when called\n",
                    "description": "<p>Sets spinner inactive when called</p>\n"
                },
                {
                    "name": "resetForecastrReady",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setForecastrReady",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showSpinner",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets spinner active when called\n",
                    "description": "<p>Sets spinner active when called</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>spinner-service</p>\n",
            "rawdescription": "\n\nspinner-service\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\n/**\r\n * spinner-service\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PageStateService {\r\n  /**\r\n   * Observable which contains the current spinner value (boolean)\r\n   */\r\n  spinner$: BehaviorSubject<boolean>;\r\n  forecastrReady$: BehaviorSubject<boolean>;\r\n\r\n  /**\r\n   * spinner-service constructor\r\n   */\r\n  constructor(\r\n  ) {\r\n    this.forecastrReady$ = new BehaviorSubject(false);\r\n    this.spinner$ = new BehaviorSubject(true);\r\n  }\r\n\r\n  /**\r\n   * Sets spinner active when called\r\n   */\r\n  showSpinner(): void {\r\n    this.spinner$.next(true);\r\n  }\r\n\r\n  /**\r\n   * Sets spinner inactive when called\r\n   */\r\n  hideSpinner(): void {\r\n    this.spinner$.next(false);\r\n  }\r\n\r\n  setForecastrReady(): void {\r\n    this.forecastrReady$.next(true);\r\n  }\r\n\r\n  resetForecastrReady(): void {\r\n    this.forecastrReady$.next(false);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>spinner-service constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15,
                "rawdescription": "\n\nspinner-service constructor\n"
            },
            "type": "injectable"
        },
        {
            "name": "ProjectService",
            "id": "injectable-ProjectService-15b6e0a35dad460ab8aa792448f60e6e",
            "file": "src/app/core/services/admin/projects.service.ts",
            "properties": [
                {
                    "name": "projects$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Project[]>",
                    "optional": false,
                    "description": "<p>Observable which contains all projects</p>\n",
                    "line": 20,
                    "rawdescription": "\n\nObservable which contains all projects\n"
                }
            ],
            "methods": [
                {
                    "name": "addProject",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProjects",
                    "args": [],
                    "optional": false,
                    "returnType": "Project[]",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns all projects\n",
                    "description": "<p>returns all projects</p>\n"
                },
                {
                    "name": "initializeProjects",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInitializes projects\n",
                    "description": "<p>Initializes projects</p>\n"
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmpties project-data\nTypically called at logout\n",
                    "description": "<p>Empties project-data\nTypically called at logout</p>\n"
                },
                {
                    "name": "setProject",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\n",
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setProjectActiveState",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>projects service</p>\n",
            "rawdescription": "\n\nprojects service\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { Project } from '../../interfaces/project';\r\nimport { BusinessOperationsService } from '../../shared/business-operations.service';\r\nimport { PageStateService } from '../../shared/page-state.service';\r\n\r\n/**\r\n * projects service\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ProjectService {\r\n  /**\r\n   * Observable which contains all projects\r\n   */\r\n  projects$: BehaviorSubject<Project[]>;\r\n\r\n  /**\r\n   * utilities service constructor\r\n   * \r\n   * @param http\r\n   * @param BO\r\n   * @param spinner\r\n   */\r\n  constructor(\r\n    private http: HttpClient,\r\n    private snackBar: MatSnackBar,\r\n    private BO: BusinessOperationsService,\r\n    private pageState: PageStateService,\r\n  ) {\r\n    this.projects$ = new BehaviorSubject([]);\r\n  }\r\n\r\n  /**\r\n   * Initializes projects\r\n   */\r\n  initializeProjects(): void {\r\n    this.http.get(this.BO.getAdminProjects()).subscribe((projects: Project[]) => {\r\n      this.projects$.next(projects.sort((a, b) => (b.mandatory === 'Y') ? 1 : -1));\r\n    });\r\n  }\r\n\r\n  addProject(project: Project): void {\r\n    let projects: Project[] = this.projects$.getValue();\r\n    projects = projects.filter((p: Project) => p.id !== project.id);\r\n    projects.push(project);\r\n    this.projects$.next(projects);\r\n  }\r\n\r\n  /**\r\n   * Empties project-data\r\n   * Typically called at logout\r\n   */\r\n  reset(): void {\r\n    this.projects$.next([]);\r\n  }\r\n\r\n  /**\r\n   * returns all projects\r\n   */\r\n  getProjects(): Project[] {\r\n    return this.projects$.getValue();\r\n  }\r\n\r\n\t/**\r\n\t * \r\n\t */\r\n  setProject(project: Project): void {\r\n    this.http.put(this.BO.setProject(), project)\r\n      .subscribe((p: Project) => {\r\n        this.addProject(p);\r\n        this.snackBar.open('Project successfully saved!', 'OK', { duration: 5000, });\r\n        this.pageState.hideSpinner();\r\n      }, (e: any) => {    \r\n        if (e.status === 400) {\r\n          this.snackBar.open('Project already exists!', 'OK', { duration: 10000, });\r\n          this.pageState.hideSpinner();\r\n        }\r\n        else{\r\n          this.snackBar.open('Project could not be saved!', 'OK', { duration: 10000, });\r\n          this.pageState.hideSpinner();\r\n        }        \r\n      }      \r\n      );\r\n  }\r\n\r\n  setProjectActiveState(id: number, state: boolean): void {\r\n    this.http.put(this.BO.setProjectState(), {id: id, active: state })\r\n      .subscribe((p: Project) => {\r\n        this.addProject(p);\r\n      });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>utilities service constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "rawdescription": "\n\nutilities service constructor\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 680,
                            "end": 684,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "http"
                        },
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 674,
                            "end": 679,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 698,
                            "end": 700,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "BO"
                        },
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 692,
                            "end": 697,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ResetPasswordService",
            "id": "injectable-ResetPasswordService-3a321e636d29b26bebd9ebfc61af3605",
            "file": "src/app/core/security/resetPassword.service.ts",
            "properties": [
                {
                    "name": "options",
                    "defaultValue": "{\r\n        headers: new HttpHeaders({\r\n            'Content-Type': 'application/json',\r\n        }),\r\n        observe: 'response',\r\n        responseType: 'blob',\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "optionsWithTokenRequest",
                    "defaultValue": "{\r\n        headers: new HttpHeaders({\r\n            'Content-Type': 'application/json',\r\n        }),\r\n        observe: 'response',\r\n        responseType: 'text',\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "resetPasswordApiUrl",
                    "defaultValue": "environment.api + environment.resetPasswordPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "resetPassword",
                    "args": [
                        {
                            "name": "emailAddress",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "emailAddress",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetPasswordWithToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newPassword",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newPassword",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { environment } from '../../../environments/environment';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class ResetPasswordService {\r\n\r\n    resetPasswordApiUrl: string = environment.api + environment.resetPasswordPath;\r\n    options: any = {\r\n        headers: new HttpHeaders({\r\n            'Content-Type': 'application/json',\r\n        }),\r\n        observe: 'response',\r\n        responseType: 'blob',\r\n    };\r\n    optionsWithTokenRequest: any = {\r\n        headers: new HttpHeaders({\r\n            'Content-Type': 'application/json',\r\n        }),\r\n        observe: 'response',\r\n        responseType: 'text',\r\n    };\r\n\r\n    constructor(\r\n        private http: HttpClient,\r\n    ) {}\r\n\r\n    resetPassword(emailAddress: string) { \r\n        emailAddress = \"\\\"\" + emailAddress + \"\\\"\";\r\n        return this.http.post(this.resetPasswordApiUrl, emailAddress, this.options);\r\n    }\r\n    resetPasswordWithToken(token: string, newPassword: string) {\r\n        let resetPasswordUrlWithToken = this.resetPasswordApiUrl + \"/\" + token;\r\n        newPassword = \"\\\"\" + newPassword + \"\\\"\";\r\n        return this.http.put(resetPasswordUrlWithToken, newPassword, this.optionsWithTokenRequest);\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SubCoFinancialControllerService",
            "id": "injectable-SubCoFinancialControllerService-02abc091c99e7a05a35ef456751bc4eb",
            "file": "src/app/core/services/subCoFinancialController.service.ts",
            "properties": [
                {
                    "name": "extSubCoRange$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<SubCoFcIntExt[]>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "intExtSubCo$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<SubCoFcIntExt[]>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "intSubCoRange$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<SubCoFcIntExt[]>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "offshoreSubCo$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<SubCoFcOffshore[]>",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "offshoreSubCoRange$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<SubCoFcOffshore[]>",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methods": [
                {
                    "name": "initSubCoExternalForMonth",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoads the current external subCo data from the server\n",
                    "description": "<p>Loads the current external subCo data from the server</p>\n",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initSubCoExternalForMonthRange",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "endMonthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoads the current external subCo data from the server\n",
                    "description": "<p>Loads the current external subCo data from the server</p>\n",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "endMonthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initSubCoInternalForMonth",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoads the current internal subCo  data from the server\n",
                    "description": "<p>Loads the current internal subCo  data from the server</p>\n",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initSubCoInternalForMonthRange",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "endMonthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoads the current internal subCo  data from the server\n",
                    "description": "<p>Loads the current internal subCo  data from the server</p>\n",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "endMonthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initSubCoOffshoreForMonth",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoads the current offshore subCo data from the server\n",
                    "description": "<p>Loads the current offshore subCo data from the server</p>\n",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initSubCoOffshoreForMonthRange",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "endMonthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoads the current offshore subCo data from the server\n",
                    "description": "<p>Loads the current offshore subCo data from the server</p>\n",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "endMonthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, Type } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { SubCoFcIntExt } from '../interfaces/subCoFcIntExt';\r\nimport { SubCoFcOffshore } from '../interfaces/subCoFcOffshore';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BusinessOperationsService } from '../shared/business-operations.service';\r\nimport { FcEntry } from '../interfaces/fcEntry';\r\nimport { SubcoSummaryData } from '../interfaces/subcoSummaryData';\r\nimport { FcProject } from '../interfaces/fcProject';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { PageStateService } from '../shared/page-state.service';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SubCoFinancialControllerService {\r\n\r\n  intExtSubCo$: BehaviorSubject<SubCoFcIntExt[]>;\r\n  offshoreSubCo$: BehaviorSubject<SubCoFcOffshore[]>;\r\n  intSubCoRange$: BehaviorSubject<SubCoFcIntExt[]>;\r\n  extSubCoRange$: BehaviorSubject<SubCoFcIntExt[]>;\r\n  offshoreSubCoRange$: BehaviorSubject<SubCoFcOffshore[]>;\r\n\r\n  /**\r\n   * subCo service constructor\r\n   * @param http\r\n   * @param snackBar\r\n   * @param BO\r\n   * @param pageState\r\n   */\r\n  constructor(\r\n    private http: HttpClient,\r\n    private BO: BusinessOperationsService,\r\n    private snackBar: MatSnackBar,\r\n    private pageState: PageStateService\r\n  ) {\r\n    this.intExtSubCo$ = new BehaviorSubject([]);\r\n    this.offshoreSubCo$ = new BehaviorSubject(null);\r\n    this.intSubCoRange$ = new BehaviorSubject([]);\r\n    this.extSubCoRange$ = new BehaviorSubject([]);\r\n    this.offshoreSubCoRange$ = new BehaviorSubject([]);\r\n  }\r\n\r\n  /**\r\n   * Loads the current internal subCo  data from the server\r\n   */\r\n  initSubCoInternalForMonth(monthId: number): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.http.get<SubCoFcIntExt[]>(this.BO.getSubCoInternalForMonth(monthId))   //WIP in Business Operations --> add Endpoint\r\n        .subscribe((subCos: SubCoFcIntExt[]) => {\r\n          this.intExtSubCo$.next(subCos);\r\n          resolve();\r\n        }, () => reject());\r\n    });\r\n  }\r\n  /**\r\n   * Loads the current external subCo data from the server\r\n   */\r\n  initSubCoExternalForMonth(monthId: number): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.http.get<SubCoFcIntExt[]>(this.BO.getSubCoExternalForMonth(monthId))   //WIP in Business Operations --> add Endpoint\r\n        .subscribe((subCos: SubCoFcIntExt[]) => {\r\n          this.intExtSubCo$.next(subCos);\r\n          resolve();\r\n        }, () => reject());\r\n    });\r\n  }\r\n  /**\r\n  * Loads the current offshore subCo data from the server\r\n  */\r\n  initSubCoOffshoreForMonth(monthId: number): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.http.get<SubCoFcOffshore[]>(this.BO.getSubCoOffshoreForMonth(monthId))   //WIP in Business Operations --> add Endpoint\r\n        .subscribe((subCos: SubCoFcOffshore[]) => {\r\n          this.offshoreSubCo$.next(subCos);\r\n          resolve();\r\n        }, () => reject());\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n* Loads the current internal subCo  data from the server\r\n*/\r\n  initSubCoInternalForMonthRange(monthId: number, endMonthId: number): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.http.get<SubCoFcIntExt[]>(this.BO.getSubCoInternalForMonthRange(monthId, endMonthId))   //WIP in Business Operations --> add Endpoint\r\n        .subscribe((subCos: SubCoFcIntExt[]) => {\r\n          this.intSubCoRange$.next(subCos);\r\n          resolve();\r\n        }, () => reject());\r\n    });\r\n  }\r\n  /**\r\n   * Loads the current external subCo data from the server\r\n   */\r\n  initSubCoExternalForMonthRange(monthId: number, endMonthId: number): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.http.get<SubCoFcIntExt[]>(this.BO.getSubCoExternalForMonthRange(monthId, endMonthId))   //WIP in Business Operations --> add Endpoint\r\n        .subscribe((subCos: SubCoFcIntExt[]) => {\r\n          this.extSubCoRange$.next(subCos);\r\n          resolve();\r\n        }, () => reject());\r\n    });\r\n  }\r\n  /**\r\n  * Loads the current offshore subCo data from the server\r\n  */\r\n  initSubCoOffshoreForMonthRange(monthId: number, endMonthId: number): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.http.get<SubCoFcOffshore[]>(this.BO.getSubCoOffshoreForMonthRange(monthId, endMonthId))   //WIP in Business Operations --> add Endpoint\r\n        .subscribe((subCos: SubCoFcOffshore[]) => {\r\n          this.offshoreSubCoRange$.next(subCos);\r\n          resolve();\r\n        }, () => reject());\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>subCo service constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "rawdescription": "\n\nsubCo service constructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1075,
                            "end": 1079,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "http"
                        },
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1069,
                            "end": 1074,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1115,
                            "end": 1117,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "BO"
                        },
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1109,
                            "end": 1114,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1093,
                            "end": 1101,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "snackBar"
                        },
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1087,
                            "end": 1092,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1131,
                            "end": 1140,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "pageState"
                        },
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1125,
                            "end": 1130,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SubCoForecastService",
            "id": "injectable-SubCoForecastService-859f15ac6adc2eeef1ca8f6c04da66d6",
            "file": "src/app/core/services/subCoForecast.service.ts",
            "properties": [
                {
                    "name": "months",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "<p>contains all months</p>\n",
                    "line": 51,
                    "rawdescription": "\n\ncontains all months\n"
                },
                {
                    "name": "projects",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Project[]",
                    "optional": false,
                    "description": "<p>contains all projects</p>\n",
                    "line": 46,
                    "rawdescription": "\n\ncontains all projects\n"
                },
                {
                    "name": "subcoDetails",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SubCoDetails[]",
                    "optional": false,
                    "description": "<p>contains all available forecasts which have already been loaded from the server</p>\n",
                    "line": 41,
                    "rawdescription": "\n\ncontains all available forecasts which have already been loaded from the server\n"
                },
                {
                    "name": "subcoDetails$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<SubCoDetails[]>",
                    "optional": false,
                    "description": "<p>observable which returns all available forecasts which have already been loaded from the server</p>\n",
                    "line": 36,
                    "rawdescription": "\n\nobservable which returns all available forecasts which have already been loaded from the server\n"
                }
            ],
            "methods": [
                {
                    "name": "getForecastPromise",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<SubCoDetails[]>",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initSubCoDetailsByMonth",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<FcEntry[]>",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns promise of all forecasts for one month\nReturns data instantly if they already exist, otherwise: loads them from the server first\n",
                    "description": "<p>returns promise of all forecasts for one month\nReturns data instantly if they already exist, otherwise: loads them from the server first</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3603,
                                "end": 3610,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "monthId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3597,
                                "end": 3602,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "initSubCoDetailsByMonthAndEm",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "emId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<FcEntry[]>",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns promise of all forecasts for one month\nReturns data instantly if they already exist, otherwise: loads them from the server first\n",
                    "description": "<p>returns promise of all forecasts for one month\nReturns data instantly if they already exist, otherwise: loads them from the server first</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2713,
                                "end": 2720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "monthId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2707,
                                "end": 2712,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": "emId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initSubCoForecastMonthRange",
                    "args": [
                        {
                            "name": "startMonthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "endMonthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "emId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<FcEntry[]>",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns promise of all forecasts a month range\nReturns data instantly if they already exist, otherwise: loads them from the server first\n",
                    "description": "<p>returns promise of all forecasts a month range\nReturns data instantly if they already exist, otherwise: loads them from the server first</p>\n",
                    "jsdoctags": [
                        {
                            "name": "startMonthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "endMonthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "emId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "putSubCoForecastByMonth",
                    "args": [
                        {
                            "name": "subCoForecastId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<SubCoDetails[]>",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nchanges promise of all forecasts for one month\n",
                    "description": "<p>changes promise of all forecasts for one month</p>\n",
                    "jsdoctags": [
                        {
                            "name": "subCoForecastId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveForecast",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "subcoId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "submit",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 217,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "subcoId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "submit",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setForecast",
                    "args": [
                        {
                            "name": "subCoDetails",
                            "type": "SubCoDetails",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "loadHistory",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "updated",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "subCoDetails",
                            "type": "SubCoDetails",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "loadHistory",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "updated",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unlockForecast",
                    "args": [
                        {
                            "name": "forecastId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 208,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "forecastId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateProjects",
                    "args": [
                        {
                            "name": "subcoForecats",
                            "type": "SubCoDetails",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SubCoDetails",
                    "typeParameters": [],
                    "line": 327,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "subcoForecats",
                            "type": "SubCoDetails",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>forecast service</p>\n",
            "rawdescription": "\n\nforecast service\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\nimport { FcProject } from '../interfaces/fcProject';\r\nimport { Project } from '../interfaces/project';\r\nimport { FcEntry } from '../interfaces/fcEntry';\r\nimport { BusinessOperationsService } from '../shared/business-operations.service';\r\nimport { Month } from '../interfaces/month';\r\nimport { UtilitiesService } from './utilities.service';\r\nimport { AuthService } from '../security/auth.service';\r\nimport { PageStateService } from '../shared/page-state.service';\r\nimport { SubCoService } from './subCo.service';\r\nimport { SubCoDetails } from '../interfaces/subCoDetails';\r\nimport { environment as env } from '../../../environments/environment.prod';\r\nimport { cloneDeep } from 'lodash';\r\nimport { DataSharingService } from '../shared/data-sharing.service';\r\nimport { Router } from '@angular/router';\r\nimport { Suggestion } from '../interfaces/suggestion';\r\nimport { resolve } from 'url';\r\nimport { SubcosComponent } from '../../forecast/pages/subcos/subcos.component';\r\nimport { User } from '../interfaces/user';\r\n\r\n/**\r\n * forecast service\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SubCoForecastService {\r\n\r\n  /**\r\n   * observable which returns all available forecasts which have already been loaded from the server\r\n   */\r\n  subcoDetails$: BehaviorSubject<SubCoDetails[]>;\r\n\r\n  /**\r\n   * contains all available forecasts which have already been loaded from the server\r\n   */\r\n  subcoDetails: SubCoDetails[];\r\n\r\n  /**\r\n   * contains all projects\r\n   */\r\n  projects: Project[];\r\n\r\n  /**\r\n   * contains all months\r\n   */\r\n  months: Month[];\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private snackBar: MatSnackBar,\r\n    private BO: BusinessOperationsService,\r\n    private utilitiesService: UtilitiesService,\r\n    private authService: AuthService,\r\n    private pageState: PageStateService,\r\n    private subCoService: SubCoService,\r\n    private dataSharingService: DataSharingService,\r\n    private router: Router,\r\n  ) {\r\n    this.subcoDetails = [];\r\n    this.subcoDetails$ = new BehaviorSubject([]);\r\n\r\n    this.utilitiesService.projects$\r\n      .subscribe((projects: Project[]) => {\r\n        this.projects = projects;\r\n        this.subcoDetails$.next(this.subcoDetails);\r\n      });\r\n\r\n    this.utilitiesService.months$\r\n      .subscribe((months: Month[]) => {\r\n        this.months = months;\r\n      });\r\n    \r\n  }\r\n\r\n  /**\r\n   * returns promise of all forecasts for one month\r\n   * Returns data instantly if they already exist, otherwise: loads them from the server first\r\n   * @param monthId\r\n   */\r\n  initSubCoDetailsByMonthAndEm(monthId: number, emId: number): Promise<FcEntry[]> {\r\n    let promise: Promise<FcEntry[]> = new Promise((resolve: any, reject: any) => {\r\n      let fcEntries: SubCoDetails[] = this.subcoDetails$.getValue().filter((fc: SubCoDetails) => fc.monthId === monthId && fc.engagementManagerId === emId);\r\n      if (fcEntries.length > 0) {\r\n        resolve(fcEntries);\r\n      } else {\r\n        this.http.get<SubCoDetails[]>(this.BO.getSubCoDetails(monthId, emId)).subscribe((details: SubCoDetails[]) => {\r\n          this.subcoDetails$.next(details);\r\n          this.subcoDetails = details;\r\n          resolve(details);\r\n        });\r\n      }\r\n    });\r\n\r\n    return promise;\r\n  }\r\n\r\n  \r\n  /**\r\n   * returns promise of all forecasts for one month\r\n   * Returns data instantly if they already exist, otherwise: loads them from the server first\r\n   * @param monthId\r\n   */\r\n   initSubCoDetailsByMonth(monthId: number): Promise<FcEntry[]> {\r\n    let promise: Promise<FcEntry[]> = new Promise((resolve: any, reject: any) => {\r\n      let fcEntries: SubCoDetails[] = this.subcoDetails$.getValue().filter((fc: SubCoDetails) => fc.monthId >= monthId);\r\n      if (fcEntries.length > 0) {\r\n        resolve(fcEntries);\r\n      } else {\r\n        this.http.get<SubCoDetails[]>(this.BO.getSubCoDetailsMonth(monthId)).subscribe((details: SubCoDetails[]) => {\r\n          this.subcoDetails$.next(details);\r\n          this.subcoDetails = details;\r\n          resolve(details);\r\n        });\r\n      }\r\n    });\r\n\r\n    return promise;\r\n  }\r\n\r\n   /**\r\n   * returns promise of all forecasts a month range\r\n   * Returns data instantly if they already exist, otherwise: loads them from the server first\r\n   * @param monthId\r\n   */\r\n    initSubCoForecastMonthRange(startMonthId: number,endMonthId:number,emId: number): Promise<FcEntry[]> {\r\n        let promise: Promise<FcEntry[]> = new Promise((resolve: any, reject: any) => {\r\n          let fcEntries: SubCoDetails[] = this.subcoDetails$.getValue().filter((fc: SubCoDetails) => fc.monthId >= startMonthId && fc.monthId <= endMonthId && fc.engagementManagerId === emId);\r\n          if (fcEntries.length > 0) {\r\n            resolve(fcEntries);\r\n          } else {\r\n            this.http.get<FcEntry[]>(this.BO.getSubCoForecastsMonthRange(startMonthId, endMonthId,this.authService.getUserId()))\r\n            .subscribe((fc: FcEntry[]) => {\r\n              resolve(fc);\r\n            });\r\n          }\r\n        });\r\n    \r\n        return promise;\r\n      }\r\n\r\n     /**\r\n   * changes promise of all forecasts for one month\r\n   * @param monthId\r\n   */\r\n  \r\n    putSubCoForecastByMonth(subCoForecastId:number): Promise<SubCoDetails[]> {\r\n        let promise: Promise<SubCoDetails[]> = new Promise((resolve: any, reject: any) => {\r\n          let fcEntries: SubCoDetails[] = this.subcoDetails$.getValue().filter((fc: SubCoDetails) => fc.forecastId === subCoForecastId);\r\n          if (fcEntries.length > 0) {\r\n            resolve(fcEntries);\r\n          } else {\r\n            \r\n            this.http.get<SubCoDetails[]>(this.BO.updateSubCoForecasts(subCoForecastId)).subscribe((fc: SubCoDetails[]) => {\r\n              resolve(fc);\r\n            });\r\n          }\r\n        });\r\n    \r\n        return promise;\r\n      }\r\n      \r\n      setForecast(subCoDetails: SubCoDetails, loadHistory: boolean, updated: boolean = false): void { //TODO: add LoadHistory\r\n        if (!subCoDetails.subcontractorId || !subCoDetails.monthId || !subCoDetails.projectId) {\r\n          return;\r\n        }    \r\n        if (this.subcoDetails.find((sd: SubCoDetails) => sd.subcontractorId === subCoDetails.subcontractorId && sd.monthId === subCoDetails.monthId)) {\r\n          this.subcoDetails\r\n            .filter((sd: SubCoDetails) => sd.subcontractorId === subCoDetails.subcontractorId && sd.monthId === subCoDetails.monthId)\r\n            .forEach((sd: SubCoDetails) => {\r\n              sd.forecastId = subCoDetails.forecastId;\r\n              //TODO: Add Locked\r\n              // if (typeof forecast.locked !== 'number') {\r\n              //   sd.locked = forecast.locked === true ? this.authService.getRoleId() : -1;\r\n              // } else {\r\n              //   sd.locked = forecast.locked;\r\n              // }  \r\n              sd.lockState = subCoDetails.lockState;\r\n              sd.manDay = subCoDetails.manDay;\r\n              sd.cor = subCoDetails.cor;\r\n              sd.costRate = subCoDetails.costRate;\r\n              sd.revenue = subCoDetails.cor * subCoDetails.manDay;\r\n              sd.cost = subCoDetails.costRate * subCoDetails.manDay;\r\n              sd.contribution = sd.revenue - sd.cost;\r\n              sd.cp = sd.contribution / sd.revenue;\r\n              sd.projectId = subCoDetails.projectId;\r\n              sd.updated = updated;\r\n            });\r\n        } else {\r\n          //TODO: AddLocked\r\n          // if (typeof subCoDetails.locked !== 'number') {\r\n          //   subCoDetails.locked = subCoDetails.locked === true ? this.authService.getRoleId() : -1;\r\n          // }\r\n          // let u: SubCoDetails = this.subCoService.getSubcoDetail(subCoDetails.subcontractorId);    \r\n          this.subcoDetails.push(subCoDetails);\r\n        }    \r\n        this.subcoDetails$.next(this.subcoDetails);\r\n      }\r\n\r\n      getForecastPromise(monthId: number) : Promise<SubCoDetails[]> {\r\n        return this.http.get<SubCoDetails[]>(this.BO.getSubCoDetails(monthId, this.authService.getUserId())).toPromise();\r\n      }\r\n\r\n      unlockForecast(forecastId: number) {\r\n        this.http.put(this.BO.setSubcoForecastUnlocked(forecastId),null)\r\n        .subscribe(r =>{\r\n          let subcoDetails : SubCoDetails= this.subcoDetails.find(sd => sd.forecastId === forecastId);\r\n          subcoDetails.lockState = 'Unlocked'\r\n          this.setForecast(subcoDetails, true, false);\r\n        });\r\n    \r\n      }\r\n      saveForecast(monthId: number, subcoId: number, submit: boolean) {\r\n        let subcoDetails: SubCoDetails = cloneDeep(this.subcoDetails.find((fc: SubCoDetails) => fc.subcontractorId === subcoId && fc.monthId === monthId));\r\n        if (!subcoDetails) {\r\n          return;\r\n        }\r\n    \r\n        subcoDetails = this.validateProjects(subcoDetails); //TODO: validate not needed?\r\n        if (subcoDetails.errors.length > 0) {\r\n          subcoDetails.instantValidation = true;\r\n          this.setForecast(subcoDetails, false, true);\r\n    \r\n          this.snackBar.open('Forecast cannot be saved due to one or more invalid data fields.', 'OK', { duration: 5000, });\r\n          return;\r\n        }\r\n    \r\n        if (submit) {\r\n          subcoDetails.lockState = 'LockedState1';\r\n        } else {\r\n          subcoDetails.lockState = 'Unlocked';\r\n        }\r\n    \r\n        //TODO: Add History\r\n        // forecast.history = undefined;\r\n    \r\n        this.pageState.showSpinner();\r\n    \r\n        if(subcoDetails.forecastId && subcoDetails.projectId){\r\n          this.http.put(this.BO.subcoForecast(subcoDetails.forecastId), subcoDetails)\r\n          .subscribe((subcoDetails: SubCoDetails) => {\r\n            this.setForecast(subcoDetails, true, false);\r\n            if(!submit) {\r\n              this.snackBar.open('Your forecast has been successfully saved.', 'OK', { duration: 5000, });\r\n            }\r\n            else {\r\n              this.snackBar.open('Your forecast has been successfully submitted.', 'OK', { duration: 5000, });\r\n            }\r\n            \r\n            this.pageState.hideSpinner();\r\n    \r\n          }, (e: any) => {\r\n            if(e.status === 409) {\r\n              // if(!this.hasLeadRole()) {\r\n              //   this.snackBar.open('Your forecast has already been submitted by your team lead. Please contact your supervisor. The page will be refreshed automatically.', 'OK', { duration: 10000, });\r\n              // }\r\n              // else {\r\n              //   this.snackBar.open('The forecast has already been submitted by your colleague. The page will be refreshed automatically.', 'OK', { duration: 10000, });\r\n              // }\r\n    \r\n              setTimeout(() => window.location.reload(), 5000);\r\n              \r\n            }\r\n            else {\r\n              if(!submit) {\r\n                this.snackBar.open('Your forecast could not be saved. Please try again later.', 'OK', { duration: 10000, });\r\n              }\r\n              else if(submit){\r\n                this.snackBar.open('Your forecast could not be submitted. Please try again later.', 'OK', { duration: 10000, });\r\n              }\r\n            }\r\n            this.pageState.hideSpinner();\r\n    \r\n          });\r\n        }else if(subcoDetails.projectId){\r\n          this.http.post(this.BO.createSubcoForecast(), subcoDetails)\r\n          .subscribe((sd: SubCoDetails) => {\r\n            this.setForecast(sd, true, false);\r\n            if(!submit) {\r\n              this.snackBar.open('Your forecast has been successfully saved.', 'OK', { duration: 5000, });\r\n            }\r\n            else {\r\n              this.snackBar.open('Your forecast has been successfully submitted.', 'OK', { duration: 5000, });\r\n            }\r\n            \r\n            this.pageState.hideSpinner();\r\n    \r\n          }, (e: any) => {\r\n            if(e.status === 409) {\r\n              // if(!this.hasLeadRole()) {\r\n              //   this.snackBar.open('Your forecast has already been submitted by your team lead. Please contact your supervisor. The page will be refreshed automatically.', 'OK', { duration: 10000, });\r\n              // }\r\n              // else {\r\n              //   this.snackBar.open('The forecast has already been submitted by your colleague. The page will be refreshed automatically.', 'OK', { duration: 10000, });\r\n              // }\r\n    \r\n              setTimeout(() => window.location.reload(), 5000);\r\n              \r\n            }\r\n            else {\r\n              if(!submit) {\r\n                this.snackBar.open('Your forecast could not be saved. Please try again later.', 'OK', { duration: 10000, });\r\n              }\r\n              else if(submit){\r\n                this.snackBar.open('Your forecast could not be submitted. Please try again later.', 'OK', { duration: 10000, });\r\n              }\r\n            }\r\n            this.pageState.hideSpinner();\r\n    \r\n          });\r\n        }else{\r\n          if(!submit) {\r\n            this.snackBar.open('Your forecast could not be saved. Please try again later.', 'OK', { duration: 10000, });\r\n          }\r\n          else if(submit){\r\n            this.snackBar.open('Your forecast could not be submitted. Please try again later.', 'OK', { duration: 10000, });\r\n          }\r\n          this.pageState.hideSpinner();\r\n        }\r\n        \r\n      }\r\n\r\n      validateProjects(subcoForecats: SubCoDetails): SubCoDetails {\r\n        \r\n        subcoForecats.errors = [];\r\n    \r\n          if (typeof subcoForecats.projectId === 'undefined') {\r\n            subcoForecats.errors.push('No project found.');\r\n          }\r\n          // if (typeof p.cor === 'undefined') {\r\n          //   if (this.authService.getRoleId() === env.roles.css) {\r\n          //     p.cor = 0;\r\n          //   } else {\r\n          //     p.errors.push('No COR value defined.');\r\n          //   }\r\n          // } else if (typeof p.cor !== 'number') {\r\n          //   p.errors.push('COR value has to be a number.');\r\n          // } else if (p.cor < 0) {\r\n          //   p.errors.push('COR value has to be a positive number.');\r\n          // }\r\n    \r\n          if (typeof subcoForecats.manDay === 'undefined') {\r\n            subcoForecats.errors.push('Number of project days not specified.');\r\n          } else if (typeof subcoForecats.manDay !== 'number') {\r\n            subcoForecats.errors.push('Project days value has to be a number.');\r\n          } else if (subcoForecats.manDay < 0) {\r\n            subcoForecats.errors.push('Project days value has to be a positive number.');\r\n          }\r\n    \r\n          if (!subcoForecats.probabilityId) {\r\n            subcoForecats.errors.push('No probability defined.');\r\n          }\r\n          if(subcoForecats.cor < 1) {\r\n            subcoForecats.errors.push(\"COR value cannot be 0 or empty.\");\r\n          }\r\n        return subcoForecats;\r\n      }\r\n}\r\n\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "subCoService",
                        "type": "SubCoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataSharingService",
                        "type": "DataSharingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "subCoService",
                        "type": "SubCoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataSharingService",
                        "type": "DataSharingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "SubCoService",
            "id": "injectable-SubCoService-cec03387e4290baee64131ccfe09a9c5",
            "file": "src/app/core/services/subCo.service.ts",
            "properties": [
                {
                    "name": "allSubCoDetails$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<SubCoDetails[]>",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "allSubCoPreviews$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<SubCoPreview[]>",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "subCoDetailTotals$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<SubCoDetailTotals[]>",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "subCoPreviews$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<SubCoPreview[]>",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "subCoTotals$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<SubCoTotals>",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "types$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<SubCoType[]>",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methods": [
                {
                    "name": "addSubco",
                    "args": [
                        {
                            "name": "subco",
                            "type": "SubCoPreview",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 191,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds subco to subco-list\n",
                    "description": "<p>Adds subco to subco-list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6597,
                                "end": 6602,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "subco"
                            },
                            "type": "SubCoPreview",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6591,
                                "end": 6596,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "addSubCoDetails",
                    "args": [
                        {
                            "name": "newSubCos",
                            "type": "SubCoDetails[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 213,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newSubCos",
                            "type": "SubCoDetails[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addSubCoPreviews",
                    "args": [
                        {
                            "name": "newSubCos",
                            "type": "SubCoPreview[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 202,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nadds subCo to list\n",
                    "description": "<p>adds subCo to list</p>\n",
                    "jsdoctags": [
                        {
                            "name": "newSubCos",
                            "type": "SubCoPreview[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editSubco",
                    "args": [
                        {
                            "name": "subco",
                            "type": "SubCoPreview",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 270,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates subco in subco-list\n",
                    "description": "<p>Updates subco in subco-list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 9140,
                                "end": 9145,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "subco"
                            },
                            "type": "SubCoPreview",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 9134,
                                "end": 9139,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getForecastPromise",
                    "args": [
                        {
                            "name": "emId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<FcEntry[]>",
                    "typeParameters": [],
                    "line": 237,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "emId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSubcoDetail",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SubCoDetails | undefined",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSubcoPreview",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SubCoPreview | undefined",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns subCo by a given id\n",
                    "description": "<p>returns subCo by a given id</p>\n",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSubcoTypes",
                    "args": [],
                    "optional": false,
                    "returnType": "SubCoType[]",
                    "typeParameters": [],
                    "line": 330,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSummaryData",
                    "args": [
                        {
                            "name": "subcos",
                            "type": "SubCoDetails[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SubcoSummaryData",
                    "typeParameters": [],
                    "line": 242,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "subcos",
                            "type": "SubCoDetails[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeAllSubCoDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initializeAllSubCoPreviews",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoads all subco data from the server\n",
                    "description": "<p>Loads all subco data from the server</p>\n"
                },
                {
                    "name": "initializeSubcoDetailTotalsForMonthRange",
                    "args": [
                        {
                            "name": "startMonthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "endMonthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRquests subcototals for a month range from server\n",
                    "description": "<p>Rquests subcototals for a month range from server</p>\n",
                    "jsdoctags": [
                        {
                            "name": "startMonthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "endMonthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeSubcoTotalsForMonth",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRquests subcototals from server\n",
                    "description": "<p>Rquests subcototals from server</p>\n",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeTypes",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRequests type data from server\n",
                    "description": "<p>Requests type data from server</p>\n"
                },
                {
                    "name": "initSubCoPreviewById",
                    "args": [
                        {
                            "name": "emId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoads the current subCo data from the server\n",
                    "description": "<p>Loads the current subCo data from the server</p>\n",
                    "jsdoctags": [
                        {
                            "name": "emId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetSubCoDetails",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetSubCoPreviews",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmpties subco data\n",
                    "description": "<p>Empties subco data</p>\n"
                },
                {
                    "name": "setSubco",
                    "args": [
                        {
                            "name": "subco",
                            "type": "SubCoPreview",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 338,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalls add or edit subco request to server\n",
                    "description": "<p>Calls add or edit subco request to server</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 11439,
                                "end": 11444,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "subco"
                            },
                            "type": "SubCoPreview",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 11433,
                                "end": 11438,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "updateSubCoDetails",
                    "args": [
                        {
                            "name": "newSubCos",
                            "type": "SubCoDetails[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 302,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newSubCos",
                            "type": "SubCoDetails[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSubCoPreviews",
                    "args": [
                        {
                            "name": "newSubCos",
                            "type": "SubCoPreview[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 287,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nupdates/changes subco\n",
                    "description": "<p>updates/changes subco</p>\n",
                    "jsdoctags": [
                        {
                            "name": "newSubCos",
                            "type": "SubCoPreview[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, Type } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { SubCoDetails } from '../interfaces/subCoDetails';\r\nimport { SubCoPreview } from '../interfaces/subCoPreview';\r\nimport { SubCoType } from '../interfaces/subCoType';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BusinessOperationsService } from '../shared/business-operations.service';\r\nimport { SubcosComponent } from '../../forecast/pages/subcos/subcos.component';\r\nimport { FcEntry } from '../interfaces/fcEntry';\r\nimport { SummaryData } from '../interfaces/summaryData';\r\nimport { UserService } from './user.service';\r\nimport { AuthService } from '../security/auth.service';\r\nimport { SubcoSummaryData } from '../interfaces/subcoSummaryData';\r\nimport { FcProject } from '../interfaces/fcProject';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { PageStateService } from '../shared/page-state.service';\r\nimport { SubCoTotals } from '../interfaces/subCoTotals';\r\nimport { SubCoDetailTotals } from '../interfaces/subCoDetailTotals';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SubCoService {\r\n\r\n  // subCoPrev$: BehaviorSubject<subCoPreview>;\r\n  // subCoDet$: BehaviorSubject<subCoDetails>;\r\n\r\n  subCoPreviews$: BehaviorSubject<SubCoPreview[]>;\r\n  // subCoDets$: BehaviorSubject<subCoDetails[]>;\r\n\r\n  allSubCoPreviews$: BehaviorSubject<SubCoPreview[]>;\r\n  allSubCoDetails$: BehaviorSubject<SubCoDetails[]>;\r\n  subCoTotals$: BehaviorSubject<SubCoTotals>;\r\n  subCoDetailTotals$: BehaviorSubject<SubCoDetailTotals[]>;     //array or not?\r\n\r\n  types$: BehaviorSubject<SubCoType[]>;\r\n\r\n\r\n  /**\r\n   * subCo service constructor\r\n   * @param http\r\n   * @param snackBar\r\n   * @param BO\r\n   * @param pageState\r\n   */\r\n  constructor(\r\n    private http: HttpClient,\r\n    private BO: BusinessOperationsService,\r\n    private snackBar: MatSnackBar,\r\n    private pageState: PageStateService\r\n  ) {\r\n    // this.subCoPrev$ = new BehaviorSubject(new subCoPreview);\r\n    this.subCoPreviews$ = new BehaviorSubject([]);\r\n    // this.subCoDet$ = new BehaviorSubject(new subCoDetails);\r\n    this.allSubCoPreviews$ = new BehaviorSubject([]);\r\n    this.allSubCoDetails$ = new BehaviorSubject([]);\r\n    this.subCoTotals$ = new BehaviorSubject(null);\r\n    this.subCoDetailTotals$ = new BehaviorSubject([]);           //empty array or null?\r\n    this.types$ = new BehaviorSubject([]);\r\n\r\n  }\r\n\r\n  /**\r\n   * Loads the current subCo data from the server\r\n   */\r\n  // initSubCoPreview(): Promise<void> {\r\n  //   return new Promise<void>((resolve, reject) => {\r\n  //     this.http.get<subCoPreview[]>(this.BO.getSubcoPreviews())\r\n  //       .subscribe((subCo: subCoPreview[]) => {\r\n  //         this.allSubCoPreviews$.next(subCo);\r\n  //         this.addSubCoPreviews(subCo);           \r\n  //         resolve();\r\n  //       }, () => reject());\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n * Loads the current subCo data from the server\r\n */\r\n  initSubCoPreviewById(emId: number): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.http.get<SubCoPreview[]>(this.BO.getSubcoPreviewsByEmId(emId))\r\n        .subscribe((subCos: SubCoPreview[]) => {\r\n          this.subCoPreviews$.next(subCos);\r\n          // this.addSubCoPreviews(subCos);           \r\n          resolve();\r\n        }, () => reject());\r\n    });\r\n  }\r\n\r\n  // initSubCoDetails(): Promise<void> {\r\n  //   return new Promise<void>((resolve, reject) => {\r\n  //     this.http.get<subCoDetails>(this.BO.getSubcoDetails())\r\n  //       .subscribe((subCo: subCoDetails) => {\r\n  //         this.subCoDet$.next(subCo);\r\n  //         this.addSubCoDetails([subCo]);                        \r\n  //         resolve();\r\n  //       }, () => reject());\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n   * Loads all subco data from the server\r\n   */\r\n  initializeAllSubCoPreviews(): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.http.get<SubCoPreview[]>(this.BO.getSubcoPreviews())\r\n        .subscribe((subCos: SubCoPreview[]) => {\r\n          this.allSubCoPreviews$.next(subCos.sort((a, b) => (a.resourceName > b.resourceName) ? 1 : -1));\r\n          resolve();\r\n        }, () => reject());\r\n    });\r\n  }\r\n\r\n  initializeAllSubCoDetails(): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.http.get<SubCoDetails[]>(this.BO.getSubcoDetails())\r\n        .subscribe((subCos: SubCoDetails[]) => {\r\n          this.allSubCoDetails$.next(subCos.sort((a, b) => (a.resourceName > b.resourceName) ? 1 : -1));\r\n          resolve();\r\n        }, () => reject());\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n    * Requests type data from server\r\n    */\r\n  initializeTypes(): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.http.get<SubCoType[]>(this.BO.getSubCoTypes())\r\n        .subscribe((types$: SubCoType[]) => {\r\n          this.types$.next(types$);\r\n          resolve();\r\n        }, () => reject());\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Rquests subcototals from server\r\n   */\r\n  initializeSubcoTotalsForMonth(monthId: number): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.http.get<SubCoTotals>(this.BO.getSubCoTotalsForMonth(monthId))\r\n        .subscribe((subCoTotals$: SubCoTotals) => {\r\n          this.subCoTotals$.next(subCoTotals$);\r\n          resolve();\r\n        }, () => reject());\r\n    });\r\n  }\r\n\r\n  /**\r\n  * Rquests subcototals for a month range from server\r\n  */\r\n  initializeSubcoDetailTotalsForMonthRange(startMonthId: number, endMonthId: number): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.http.get<SubCoDetailTotals[]>(this.BO.getSubCoDetailTotalsMonthRange(startMonthId, endMonthId))\r\n        .subscribe((subCoDetailTotals$: SubCoDetailTotals[]) => {\r\n          this.subCoDetailTotals$.next(subCoDetailTotals$);\r\n          resolve();\r\n        }, () => reject());\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Empties subco data\r\n   */\r\n  resetSubCoPreviews(): void {\r\n    this.allSubCoPreviews$.next([]);\r\n    // this.subCoPrev$.next(new subCoPreview());\r\n  }\r\n  resetSubCoDetails(): void {\r\n    this.allSubCoDetails$.next([]);\r\n    // this.subCoDet$.next(new subCoDetails());\r\n  }\r\n\r\n  /**\r\n   * returns subCo by a given id\r\n   */\r\n  getSubcoPreview(id: number): SubCoPreview | undefined {\r\n    return this.allSubCoPreviews$.getValue().find((u: SubCoPreview) => u.subcontractorId === id);\r\n  }\r\n  getSubcoDetail(id: number): SubCoDetails | undefined {\r\n    return this.allSubCoDetails$.getValue().find((u: SubCoDetails) => u.subcontractorId === id);\r\n  }\r\n\r\n  /**\r\n   * Adds subco to subco-list\r\n   * @param subco\r\n   */\r\n  addSubco(subco: SubCoPreview): void {\r\n    let subcos: SubCoPreview[] = this.allSubCoPreviews$.getValue();\r\n    subcos = subcos.filter((s: SubCoPreview) => s.subcontractorId !== subco.subcontractorId);\r\n    subcos.push(subco);\r\n\r\n    this.subCoPreviews$.next(subcos);\r\n  }\r\n\r\n  /**\r\n   * adds subCo to list \r\n   */\r\n  addSubCoPreviews(newSubCos: SubCoPreview[]): void {\r\n    let subCos: SubCoPreview[] = this.allSubCoPreviews$.getValue();\r\n    newSubCos.forEach((u: SubCoPreview) => {\r\n      if (!subCos.find((us: SubCoPreview) => us.subcontractorId === u.subcontractorId)) {\r\n        subCos.push(u);\r\n      }\r\n    });\r\n\r\n    this.allSubCoPreviews$.next(subCos);\r\n  }\r\n\r\n  addSubCoDetails(newSubCos: SubCoDetails[]): void {\r\n    let subCos: SubCoDetails[] = this.allSubCoDetails$.getValue();\r\n    newSubCos.forEach((u: SubCoDetails) => {\r\n      if (!subCos.find((us: SubCoDetails) => us.subcontractorId === u.subcontractorId)) {\r\n        subCos.push(u);\r\n      }\r\n    });\r\n\r\n    this.allSubCoDetails$.next(subCos);\r\n  }\r\n\r\n  //See team-forecast.service:302 setForecastsLockState\r\n  // setForecastsLockState(monthId: number, emId:number, lockState: boolean): Promise<FcEntry[]> {\r\n  //   return new Promise<any>((resolve: any, reject: any) => {\r\n  //     this.http.put(this.BO.setSubcoForecastUnlocked(monthId, emId), { lockState: lockState })\r\n  //     .subscribe((forecasts: FcEntry[]) => {\r\n  //       resolve(forecasts);\r\n  //     }, (e: any) => {\r\n  //       reject();\r\n  //     });\r\n  //   });\r\n  // }\r\n\r\n  // See team-forecast.service:56 getTeamForecastPromise\r\n  getForecastPromise(emId: number, id: number): Promise<FcEntry[]> {\r\n    throw new Error(\"Method not implemented.\");\r\n  }\r\n\r\n  //See team-forecast.service:105 getSummaryData\r\n  getSummaryData(subcos: SubCoDetails[]): SubcoSummaryData {\r\n    let summaryData: SubcoSummaryData = {\r\n      revenue: 0,\r\n      cost: 0,\r\n      contribution: 0,\r\n      cp: 0,\r\n    }\r\n    subcos.forEach(sub => {\r\n      let revenue: number;\r\n      let cost: number;\r\n      let contribution: number;\r\n      summaryData.revenue += revenue = sub.cor * sub.manDay;\r\n      summaryData.cost += cost = sub.costRate * sub.manDay;\r\n      summaryData.contribution += contribution = revenue - cost;\r\n    });\r\n    if (summaryData.contribution == 0 || summaryData.revenue == 0) {\r\n      summaryData.cp += 0;\r\n    } else {\r\n      summaryData.cp += summaryData.contribution / summaryData.revenue * 100;\r\n    }\r\n\r\n    return summaryData;\r\n  }\r\n\r\n  /**\r\n   * Updates subco in subco-list\r\n   * @param subco\r\n   */\r\n  editSubco(subco: SubCoPreview): void {\r\n    let subcos: SubCoPreview[] = this.allSubCoPreviews$.getValue();\r\n    subcos\r\n      .filter((s: SubCoPreview) => s.subcontractorId === subco.subcontractorId)\r\n      .forEach((s: SubCoPreview) => {\r\n        s.subcontractorTypeName = subco.subcontractorTypeName;\r\n        s.resourceName = subco.resourceName;\r\n        s.subcontractorEmId = subco.subcontractorEmId;\r\n      });\r\n\r\n    this.allSubCoPreviews$.next(subcos);\r\n  }\r\n\r\n\r\n  /**\r\n  * updates/changes subco \r\n  */\r\n  updateSubCoPreviews(newSubCos: SubCoPreview[]): void {\r\n    let subCos: SubCoPreview[] = this.allSubCoPreviews$.getValue();\r\n    var i = 0;\r\n    newSubCos.forEach((u: SubCoPreview) => {\r\n      if (subCos.find((us: SubCoPreview) => us.subcontractorId === u.subcontractorId)) {\r\n        subCos[i].subcontractorTypeName = u.subcontractorTypeName;\r\n        subCos[i].subcontractorTypeId = u.subcontractorTypeId;\r\n        subCos[i].resourceName = u.resourceName;\r\n      }\r\n      i++;\r\n    });\r\n\r\n    this.allSubCoPreviews$.next(subCos);\r\n  }\r\n\r\n  updateSubCoDetails(newSubCos: SubCoDetails[]): void {\r\n    let subCos: SubCoDetails[] = this.allSubCoDetails$.getValue();\r\n    var i = 0;\r\n    newSubCos.forEach((u: SubCoDetails) => {\r\n      if (subCos.find((us: SubCoDetails) => us.subcontractorId === u.subcontractorId)) {\r\n        subCos[i].subcontractorTypeName = u.subcontractorTypeName;\r\n        subCos[i].subcontractorTypeId = u.subcontractorTypeId;\r\n        subCos[i].resourceName = u.resourceName;\r\n        subCos[i].projectId = u.projectId;\r\n        subCos[i].projectName = u.projectName;\r\n        subCos[i].customer = u.customer;\r\n        subCos[i].monthId = u.monthId;\r\n        subCos[i].forecastId = u.forecastId;\r\n        subCos[i].manDay = u.manDay;\r\n        subCos[i].revenue = u.revenue;\r\n        subCos[i].costRate = u.costRate;\r\n        subCos[i].cor = u.cor;\r\n        subCos[i].cost = u.cost;\r\n        subCos[i].contribution = u.contribution;\r\n        subCos[i].cp = u.cp;\r\n        subCos[i].engagementManagerId = u.engagementManagerId;\r\n      }\r\n      i++;\r\n    });\r\n\r\n    this.allSubCoDetails$.next(subCos);\r\n  }\r\n\r\n  getSubcoTypes(): SubCoType[] {\r\n    return this.types$.getValue();\r\n  }\r\n\r\n  /**\r\n * Calls add or edit subco request to server\r\n * @param subco\r\n */\r\n  setSubco(subco: SubCoPreview): void {\r\n    if (subco.subcontractorId) {\r\n      this.http.put(this.BO.updateSubCoPreview(subco.subcontractorId), subco).subscribe(\r\n        (s: SubCoPreview) => {\r\n          this.editSubco(s);\r\n          this.snackBar.open(\"Subco successfully saved!\", \"OK\", {\r\n            duration: 5000,\r\n          });\r\n          this.pageState.hideSpinner();\r\n        },\r\n        (e: any) => {\r\n          this.snackBar.open(\"Subco could not be saved!\", \"OK\", {\r\n            duration: 10000,\r\n          });\r\n          this.pageState.hideSpinner();\r\n        }\r\n      );\r\n    } else {\r\n      this.http.post(this.BO.addSubCoPreview(), subco).subscribe(\r\n        (s: SubCoPreview) => {\r\n          this.addSubco(s);\r\n          this.snackBar.open(\"Subco successfully added!\", \"OK\", {\r\n            duration: 5000,\r\n          });\r\n          this.pageState.hideSpinner();\r\n        },\r\n        (e: any) => {\r\n          this.snackBar.open(\"Subco could not be added!\", \"OK\", {\r\n            duration: 10000,\r\n          });\r\n          this.pageState.hideSpinner();\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>subCo service constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "rawdescription": "\n\nsubCo service constructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1685,
                            "end": 1689,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "http"
                        },
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1679,
                            "end": 1684,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1725,
                            "end": 1727,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "BO"
                        },
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1719,
                            "end": 1724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1703,
                            "end": 1711,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "snackBar"
                        },
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1697,
                            "end": 1702,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1741,
                            "end": 1750,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "pageState"
                        },
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1735,
                            "end": 1740,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TeamForecastService",
            "id": "injectable-TeamForecastService-802ef4b9793232a31f2b72c125e69be9",
            "file": "src/app/core/services/forecasts/team-forecasts.service.ts",
            "properties": [
                {
                    "name": "projects",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Project[]",
                    "optional": false,
                    "description": "<p>contains all projects</p>\n",
                    "line": 25,
                    "rawdescription": "\n\ncontains all projects\n"
                },
                {
                    "name": "shouldShowCopyDialogForMonth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "<p>Dicitonary if the copy data dialoug should be shown for a month.</p>\n",
                    "line": 30,
                    "rawdescription": "\n\nDicitonary if the copy data dialoug should be shown for a month.\n"
                }
            ],
            "methods": [
                {
                    "name": "getEmptyData",
                    "args": [],
                    "optional": false,
                    "returnType": "SummaryDataProject[]",
                    "typeParameters": [],
                    "line": 272,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ninits the summarydata-projects with empty data\n",
                    "description": "<p>inits the summarydata-projects with empty data</p>\n"
                },
                {
                    "name": "getMonthlyExportData",
                    "args": [
                        {
                            "name": "fcEntries",
                            "type": "FcEntry[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "user",
                            "type": "User[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "workingDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Export",
                    "typeParameters": [],
                    "line": 222,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns the export data for one months in the exact format the backend needs them to generate a csv file\n\n",
                    "description": "<p>Returns the export data for one months in the exact format the backend needs them to generate a csv file</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6961,
                                "end": 6970,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "fcEntries"
                            },
                            "type": "FcEntry[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6955,
                                "end": 6960,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 6984,
                                "end": 6988,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "user"
                            },
                            "type": "User[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6978,
                                "end": 6983,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 7002,
                                "end": 7009,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "monthId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6996,
                                "end": 7001,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 7023,
                                "end": 7034,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "workingDays"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7017,
                                "end": 7022,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getMonthlyForecast",
                    "args": [
                        {
                            "name": "exportValues",
                            "type": "Export",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Export>",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns an observable of the monthly forecast data for one team\nUsed for csv export\n\n",
                    "description": "<p>Returns an observable of the monthly forecast data for one team\nUsed for csv export</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2457,
                                "end": 2469,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "exportValues"
                            },
                            "type": "Export",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2451,
                                "end": 2456,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getPeriodForecast",
                    "args": [
                        {
                            "name": "exportValues",
                            "type": "Export[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Export[]>",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns an observable of the period forecast data for one team\nUsed for csv export\n\n",
                    "description": "<p>Returns an observable of the period forecast data for one team\nUsed for csv export</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2854,
                                "end": 2866,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "exportValues"
                            },
                            "type": "Export[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2848,
                                "end": 2853,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getShowDialogForMonth",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 296,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSummaryData",
                    "args": [
                        {
                            "name": "fcEntries",
                            "type": "FcEntry[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "workingDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "team",
                            "type": "User[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SummaryData",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreutrns the summarydata to the provided forecast-entries\n\n",
                    "description": "<p>reutrns the summarydata to the provided forecast-entries</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3223,
                                "end": 3232,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "fcEntries"
                            },
                            "type": "FcEntry[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3217,
                                "end": 3222,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 3246,
                                "end": 3257,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "workingDays"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3240,
                                "end": 3245,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 3271,
                                "end": 3275,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "team"
                            },
                            "type": "User[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3265,
                                "end": 3270,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getTeamForecast",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "levelId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<FcEntry[]>",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet the TeamForecast from the Backend for giving userId & monthId\n\n",
                    "description": "<p>Get the TeamForecast from the Backend for giving userId &amp; monthId</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1584,
                                "end": 1590,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "userId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1578,
                                "end": 1583,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1604,
                                "end": 1611,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "monthId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1598,
                                "end": 1603,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": "levelId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTeamForecastPromise",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "levelId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<FcEntry[]>",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "levelId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setForecastsLockState",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lockState",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 281,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lockState",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setShowDialogForMonth",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "show",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 292,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "show",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>team forecast service</p>\n",
            "rawdescription": "\n\nteam forecast service\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { FcProject } from '../../interfaces/fcProject';\r\nimport { Project } from '../../interfaces/project';\r\nimport { FcEntry } from '../../interfaces/fcEntry';\r\nimport { SummaryData, SummaryDataProject } from '../../interfaces/summaryData';\r\nimport { BusinessOperationsService } from '../../shared/business-operations.service';\r\nimport { UtilitiesService } from '../utilities.service';\r\nimport { Export } from '../../interfaces/exportCSV/export';\r\nimport { User } from '../../interfaces/user';\r\nimport { Entry } from '../../interfaces/exportCSV/entry';\r\n\r\n/**\r\n * team forecast service\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TeamForecastService {\r\n  /**\r\n   * contains all projects\r\n   */\r\n  projects: Project[];\r\n  \r\n  /**\r\n   * Dicitonary if the copy data dialoug should be shown for a month.\r\n   */\r\n  shouldShowCopyDialogForMonth: { [monthID: number]: boolean  };\r\n\r\n  /**\r\n   * constructor for team-forecast service\r\n   * \r\n   * @param http\r\n   * @param BO\r\n   * @param utilitiesService\r\n   */\r\n  constructor(\r\n    private http: HttpClient,\r\n    private BO: BusinessOperationsService,\r\n    private utilitiesService: UtilitiesService,\r\n  ) {\r\n    this.shouldShowCopyDialogForMonth = {};\r\n    this.utilitiesService.projects$\r\n      .subscribe((projects: Project[]) => {\r\n        this.projects = projects;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Get the TeamForecast from the Backend for giving userId & monthId\r\n   * \r\n   * @param userId\r\n   * @param monthId\r\n   */\r\n  getTeamForecast(userId: number, monthId: number, levelId: number): Observable<FcEntry[]> {\r\n    if(!(monthId in this.shouldShowCopyDialogForMonth))\r\n      this.shouldShowCopyDialogForMonth[monthId] = true;\r\n    return this.http\r\n      .get<FcEntry[]>(this.BO.teamForecast(userId, monthId, levelId));\r\n  }\r\n\r\n  getTeamForecastPromise(userId: number, monthId: number, levelId: number): Promise<FcEntry[]> {\r\n    return new Promise<any>((resolve: any, reject: any) => {\r\n      this.http\r\n        .get<FcEntry[]>(this.BO.teamForecast(userId, monthId, levelId))\r\n        .subscribe((forecasts: FcEntry[]) => {\r\n          resolve(forecasts);\r\n        }, (e: any) => {\r\n          reject();\r\n        });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns an observable of the monthly forecast data for one team\r\n   * Used for csv export\r\n   * \r\n   * @param exportValues\r\n   */\r\n  getMonthlyForecast(exportValues: Export): Observable<Export> {\r\n    const httpOptions: object = {\r\n      responseType: 'blob' as 'json',\r\n    };\r\n\r\n    return this.http\r\n      .post<Export>(this.BO.monthlyForecast(), exportValues, httpOptions);\r\n  }\r\n\r\n  /**\r\n   * Returns an observable of the period forecast data for one team\r\n   * Used for csv export\r\n   * \r\n   * @param exportValues\r\n   */\r\n  getPeriodForecast(exportValues: Export[]): Observable<Export[]> {\r\n    const httpOptions: object = {\r\n      responseType: 'blob' as 'json',\r\n    };\r\n\r\n    return this.http\r\n      .post<Export[]>(this.BO.periodForecast(), exportValues, httpOptions);\r\n  }\r\n\r\n  /**\r\n   * reutrns the summarydata to the provided forecast-entries\r\n   * \r\n   * @param fcEntries\r\n   * @param workingDays\r\n   * @param team\r\n   */\r\n  getSummaryData(fcEntries: FcEntry[], workingDays: number, team: User[]): SummaryData {\r\n  //  console.log(\"Get Summary Data\")\r\n    let summaryData: SummaryData = {\r\n      days: this.getEmptyData(),\r\n      revenue: 0,\r\n      workingDays: 0,\r\n      billableDays: 0,\r\n      nonbillableDays: 0,\r\n      arve: 0,\r\n      urve: 0,\r\n      extRevenue: 0,\r\n      intRevenue: 0,\r\n    };\r\n\r\n    team.forEach((user: User) => {\r\n      summaryData.workingDays += user.fte ? (user.fte * workingDays) : workingDays;\r\n    });\r\n\r\n    if (fcEntries.length === 0) {\r\n      return summaryData;\r\n    }\r\n\r\n    if (this.projects.length > 0) {\r\n      fcEntries.forEach((fcEntry: FcEntry) => {\r\n        if (fcEntry.fte && team.find((u: User) => u.id === fcEntry.userId)) {\r\n          summaryData.workingDays -= (team.find((u: User) => u.id === fcEntry.userId).fte - fcEntry.fte) * workingDays;\r\n        }\r\n\r\n        if (fcEntry.projects) {\r\n          fcEntry.projects.forEach((fcProject: FcProject) => {\r\n           \r\n            let project: Project = this.projects.find((p: Project) => p.id === fcProject.projectId);\r\n       \r\n            summaryData.days\r\n              .filter((sd: SummaryDataProject) => sd.type === (project ? project.projectType : 0))\r\n              .forEach((sd: SummaryDataProject) => {\r\n               \r\n                  sd.days += (fcProject.plannedProjectDays ? fcProject.plannedProjectDays : 0);\r\n              });\r\n\r\n            if (fcProject.billable && fcEntry.isRelevant) {\r\n              summaryData.revenue += (fcProject.cor && fcProject.plannedProjectDays) ? (fcProject.cor * fcProject.plannedProjectDays) : 0;\r\n              summaryData.extRevenue += (fcProject.externalRevenue && fcProject.cor && fcProject.plannedProjectDays) ? (fcProject.cor * fcProject.plannedProjectDays) : 0;;\r\n              summaryData.intRevenue += (!fcProject.externalRevenue && fcProject.cor && fcProject.plannedProjectDays) ? (fcProject.cor * fcProject.plannedProjectDays) : 0;;\r\n              summaryData.billableDays += (fcProject.plannedProjectDays ? fcProject.plannedProjectDays : 0);\r\n            }  else if (!fcProject.billable && fcEntry.isRelevant) {\r\n              summaryData.nonbillableDays += (fcProject.plannedProjectDays ? fcProject.plannedProjectDays : 0);\r\n            }\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    let totalDays: number = 0;\r\n    summaryData.days.forEach((sd: SummaryDataProject) => {\r\n      totalDays = totalDays + sd.days;\r\n    });\r\n  \r\n    summaryData.arve = 0;\r\n    summaryData.urve = 0;\r\n\r\n    //----------------------------------------------------------------------------------------\r\n\r\n    let proDays = 0\r\n    let bilDays = 0\r\n    let nobilDays = 0\r\n    let vacDays = 0\r\n\r\n    fcEntries.forEach((fe: FcEntry) => {\r\n      if (fe.isRelevant) {\r\n        proDays += fe.projectDays\r\n        bilDays += fe.billableDays\r\n        nobilDays += fe.nonbillableDays\r\n        vacDays += fe.vacationDays\r\n      }\r\n    });\r\n\r\n    let vacationDays = 0;\r\n    let projektDays = 0;\r\n\r\n    summaryData.days.forEach((vacD: SummaryDataProject) => {\r\n      if (vacD.title == \"Vacation days\") {\r\n        vacationDays = vacD.days;\r\n\r\n      }\r\n      if (vacD.title == \"Project days\") {\r\n        projektDays = vacD.days;\r\n      }\r\n\r\n    }\r\n    );\r\n\r\n    //let denominator = summaryData.billableDays + summaryData.nonbillableDays - vacationDays;\r\n\r\n    let denominator = bilDays + nobilDays - vacDays;\r\n\r\n    summaryData.arve = proDays / denominator;\r\n    summaryData.urve = bilDays/ denominator;\r\n    return summaryData;\r\n  }\r\n\r\n  /**\r\n   * Returns the export data for one months in the exact format the backend needs them to generate a csv file\r\n   * \r\n   * @param fcEntries\r\n   * @param user\r\n   * @param monthId\r\n   * @param workingDays\r\n   */\r\n  getMonthlyExportData(fcEntries: FcEntry[], user: User[], monthId: number, workingDays: number): Export {\r\n    let csvExportItem: Export = new Export();\r\n    csvExportItem.monthId = monthId;\r\n\r\n    user.forEach((u: User) => {\r\n      let temp: Entry = new Entry();\r\n      temp.urve = 0;\r\n      temp.arve = 0;\r\n      temp.workingDays = 0;\r\n      temp.ros = 0;\r\n\r\n      let userForecast: FcEntry = fcEntries.find((fc: FcEntry) => fc.userId === u.id);\r\n\r\n      temp.name = u.firstName + ' ' + u.lastName;\r\n      if (userForecast) {\r\n        temp.urve = parseFloat((userForecast.urve * 100).toFixed(0));\r\n        temp.arve = parseFloat((userForecast.arve * 100).toFixed(0));\r\n\r\n        if (userForecast.projects.length > 0) {\r\n          temp.workingDays = userForecast.projects\r\n            .map((p: FcProject) => (p.plannedProjectDays ? p.plannedProjectDays : 0))\r\n            .reduce((pSum: number, a: number) => pSum + a);\r\n          temp.ros = userForecast.projects\r\n            .map((p: FcProject) => ((p.plannedProjectDays ? p.plannedProjectDays : 0) * (p.cor ? p.cor : 0)))\r\n            .reduce((pSum: number, a: number) => pSum + a);\r\n        }\r\n      }\r\n\r\n      csvExportItem.employeeEntry.push(temp);\r\n    });\r\n\r\n    let summaryData: SummaryData = this.getSummaryData(fcEntries, workingDays, user);\r\n    csvExportItem.summary.projectDays = summaryData.days.find((sd: SummaryDataProject) => sd.type === 0).days;\r\n    csvExportItem.summary.businessDevelopmentDays = summaryData.days.find((sd: SummaryDataProject) => sd.type === 1).days;\r\n    csvExportItem.summary.trainingDays = summaryData.days.find((sd: SummaryDataProject) => sd.type === 2).days;\r\n    csvExportItem.summary.vacationDays = summaryData.days.find((sd: SummaryDataProject) => sd.type === 3).days;\r\n    csvExportItem.summary.billableDays = summaryData.billableDays;\r\n    csvExportItem.summary.nonbillableDays = summaryData.nonbillableDays;\r\n\r\n    csvExportItem.summary.totalWorkingDays = summaryData.workingDays;\r\n    csvExportItem.summary.arve = parseInt((summaryData.arve * 100).toFixed(0), 10);\r\n    csvExportItem.summary.urve = parseInt((summaryData.urve * 100).toFixed(0), 10);\r\n    csvExportItem.summary.ros = summaryData.revenue;\r\n\r\n    return csvExportItem;\r\n  }\r\n\r\n  /**\r\n   * inits the summarydata-projects with empty data\r\n   */\r\n  getEmptyData(): SummaryDataProject[] {\r\n    return [\r\n      { title: 'Project days', days: 0, type: 0 },\r\n      { title: 'Business development days', days: 0, type: 1 },\r\n      { title: 'Training days', days: 0, type: 2 },\r\n      { title: 'Vacation days', days: 0, type: 3 },\r\n    ];\r\n  }\r\n\r\n  setForecastsLockState(monthId: number, level: number, lockState: boolean): Promise<any> {\r\n    return new Promise<any>((resolve: any, reject: any) => {\r\n      this.http.put(this.BO.setTeamLockState(monthId, level), { lockState: lockState })\r\n        .subscribe((forecasts: FcEntry[]) => {\r\n          resolve(forecasts);\r\n        }, (e: any) => {\r\n          reject();\r\n        });\r\n    });\r\n  }\r\n\r\n  setShowDialogForMonth(monthId:number, show: boolean){\r\n    this.shouldShowCopyDialogForMonth[monthId] = show;\r\n  }\r\n\r\n  getShowDialogForMonth(monthId: number){\r\n    return this.shouldShowCopyDialogForMonth[monthId];\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor for team-forecast service</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "rawdescription": "\n\nconstructor for team-forecast service\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1100,
                            "end": 1104,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "http"
                        },
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1094,
                            "end": 1099,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1118,
                            "end": 1120,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "BO"
                        },
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1112,
                            "end": 1117,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1134,
                            "end": 1150,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "utilitiesService"
                        },
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1128,
                            "end": 1133,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TeamService",
            "id": "injectable-TeamService-8cc029597f5e5fe7529ac134823a1a0b",
            "file": "src/app/core/services/admin/team.service.ts",
            "properties": [
                {
                    "name": "teams$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<any>",
                    "optional": false,
                    "description": "<p>team array</p>\n",
                    "line": 20,
                    "rawdescription": "\n\nteam array\n"
                }
            ],
            "methods": [
                {
                    "name": "deleteTeam",
                    "args": [
                        {
                            "name": "teamId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "teamId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initTeams",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nResets team data\n",
                    "description": "<p>Resets team data</p>\n"
                },
                {
                    "name": "setTeam",
                    "args": [
                        {
                            "name": "team",
                            "type": "Team",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "team",
                            "type": "Team",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>team service</p>\n",
            "rawdescription": "\n\nteam service\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject } from \"rxjs\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { BusinessOperationsService } from \"../../shared/business-operations.service\";\r\nimport { UserService } from \"../user.service\";\r\nimport { Team } from \"../../interfaces/team\";\r\nimport { MatSnackBar } from \"@angular/material/snack-bar\";\r\nimport { PageStateService } from \"../../shared/page-state.service\";\r\n\r\n/**\r\n * team service\r\n */\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class TeamService {\r\n  /**\r\n   * team array\r\n   */\r\n  teams$: BehaviorSubject<any>;\r\n\r\n  /**\r\n   * default constructor for teamservice\r\n   * @param http\r\n   * @param BO\r\n   * @param userService\r\n   */\r\n  constructor(\r\n    private snackBar: MatSnackBar,\r\n    private http: HttpClient,\r\n    private BO: BusinessOperationsService,\r\n    private userService: UserService,\r\n    private pageState: PageStateService,\r\n    ) {\r\n    this.teams$ = new BehaviorSubject([]);\r\n  }\r\n\r\n  initTeams(): void {\r\n    this.http.get(this.BO.getTeams()).subscribe((teams: Team[]) => {\r\n      this.teams$.next(teams);\r\n    });\r\n  }\r\n\r\n  setTeam(team: Team): void {\r\n    this.pageState.showSpinner();\r\n\r\n    if (typeof team.teamId !== 'number') {\r\n      this.http.put(this.BO.setTeam(), team)\r\n        .subscribe((t: Team) => {\r\n          let teams: Team[] = this.teams$.getValue();\r\n          teams.push(t);\r\n          this.teams$.next(teams);\r\n\r\n          this.snackBar.open('Team successfully added!', 'OK', { duration: 5000, });\r\n          this.pageState.hideSpinner();\r\n\r\n        }, (e: any) => {\r\n          this.snackBar.open('Team could not be added!', 'OK', { duration: 10000, });\r\n          this.pageState.hideSpinner();\r\n\r\n        });\r\n    } else {\r\n      this.http.put(this.BO.setTeam(), team)\r\n        .subscribe((t: Team) => {\r\n          let teams: Team[] = this.teams$.getValue();\r\n          teams\r\n            .filter((te: Team) => te.teamId === t.teamId)\r\n            .forEach((te: Team) => {\r\n              te.name = t.name;\r\n              te.teamLeadId = t.teamLeadId;\r\n            });\r\n          this.teams$.next(teams);\r\n\r\n          this.snackBar.open('Team successfully saved!', 'OK', { duration: 5000, });\r\n          this.pageState.hideSpinner();\r\n\r\n        }, (e: any) => {\r\n          this.snackBar.open('Team could not be saved!', 'OK', { duration: 10000, });\r\n          this.pageState.hideSpinner();\r\n\r\n        });\r\n    }\r\n  }\r\n\r\n  deleteTeam(teamId: number): void {\r\n    this.http.delete(this.BO.deleteTeam(teamId))\r\n      .subscribe(() => {\r\n        let teams: Team[] = this.teams$.getValue();\r\n        this.teams$.next(teams.filter((te: Team) => te.teamId !== teamId));\r\n\r\n        this.snackBar.open('Team successfully deleted!', 'OK', { duration: 5000, });\r\n        this.pageState.hideSpinner();\r\n\r\n      }, (e: any) => {\r\n        this.snackBar.open('Team could not be deleted!', 'OK', { duration: 10000, });\r\n        this.pageState.hideSpinner();\r\n\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Resets team data\r\n   */\r\n  reset(): void {\r\n    this.teams$.next([]);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>default constructor for teamservice</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "rawdescription": "\n\ndefault constructor for teamservice\n",
                "jsdoctags": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 675,
                            "end": 679,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "http"
                        },
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 669,
                            "end": 674,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 693,
                            "end": 695,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "BO"
                        },
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 687,
                            "end": 692,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 709,
                            "end": 720,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "userService"
                        },
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 703,
                            "end": 708,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TeamUserService",
            "id": "injectable-TeamUserService-89f7a4c5c2c8bf4a99fb89ac8299890b",
            "file": "src/app/core/services/forecasts/team-user.service.ts",
            "properties": [
                {
                    "name": "practices",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | User[]>",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "prTeams$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Team[]>",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "teamPDL$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<User[]>",
                    "optional": false,
                    "description": "<p>pdl team array</p>\n",
                    "line": 21,
                    "rawdescription": "\n\npdl team array\n"
                },
                {
                    "name": "teamPL$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<User[]>",
                    "optional": false,
                    "description": "<p>pl team array</p>\n",
                    "line": 26,
                    "rawdescription": "\n\npl team array\n"
                }
            ],
            "methods": [
                {
                    "name": "getPrTeams",
                    "args": [],
                    "optional": false,
                    "returnType": "Team[]",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTeamChilds",
                    "args": [
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parentId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number[]",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns childs\nif level > 1: also returns childs of childs\n",
                    "description": "<p>Returns childs\nif level &gt; 1: also returns childs of childs</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3229,
                                "end": 3234,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "level"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3223,
                                "end": 3228,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 3248,
                                "end": 3256,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "parentId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3242,
                                "end": 3247,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "initializePDLTeam",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRequests PDL-team data from server\n",
                    "description": "<p>Requests PDL-team data from server</p>\n"
                },
                {
                    "name": "initializePLTeam",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRequest PL-team data from server\n",
                    "description": "<p>Request PL-team data from server</p>\n"
                },
                {
                    "name": "initializeTeams",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nResets team data\n",
                    "description": "<p>Resets team data</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>team service for PDL (team) + PL (practice)</p>\n",
            "rawdescription": "\n\nteam service for PDL (team) + PL (practice)\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject } from \"rxjs\";\r\nimport { User } from \"../../interfaces/user\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { BusinessOperationsService } from \"../../shared/business-operations.service\";\r\nimport { UserService } from \"../user.service\";\r\nimport { AuthService } from \"../../security/auth.service\";\r\nimport { environment as env } from '../../../../environments/environment';\r\nimport { Team } from \"../../interfaces/team\";\r\n\r\n/**\r\n * team service for PDL (team) + PL (practice)\r\n */\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class TeamUserService {\r\n  /**\r\n   * pdl team array\r\n   */\r\n  teamPDL$: BehaviorSubject<User[]>;\r\n\r\n  /**\r\n   * pl team array\r\n   */\r\n  teamPL$: BehaviorSubject<User[]>;\r\n\r\n  prTeams$: BehaviorSubject<Team[]>;\r\n\r\n  practices: Map<number, User[]>;\r\n\r\n  /**\r\n   * default constructor for teamservice\r\n   * @param http\r\n   * @param BO\r\n   * @param userService\r\n   */\r\n  constructor(\r\n    private http: HttpClient,\r\n    private BO: BusinessOperationsService,\r\n    private userService: UserService,\r\n    private authService: AuthService,\r\n    ) {\r\n    this.teamPDL$ = new BehaviorSubject([]);\r\n    this.teamPL$ = new BehaviorSubject([]);\r\n    this.prTeams$ = new BehaviorSubject([]);\r\n  }\r\n\r\n  initializeTeams(): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.http.get(this.BO.getTeams()).subscribe((ts: Team[]) => {\r\n        this.prTeams$.next(ts);\r\n      })\r\n      resolve();\r\n    })\r\n  }\r\n\r\n  getPrTeams(): Team[] {\r\n    return this.prTeams$.getValue();\r\n  }\r\n\r\n  /**\r\n   * Requests PDL-team data from server\r\n   */\r\n  initializePDLTeam(): void {\r\n    this.http.get<User[]>(this.BO.getTeam(1))\r\n      .subscribe((user: User[]) => {\r\n        this.teamPDL$.next(user.sort((a, b) => (a.lastName > b.lastName) ? 1 : -1));\r\n        this.userService.addUsers(user);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Request PL-team data from server\r\n   */\r\n  initializePLTeam(): void {\r\n    if(this.authService.hasRole(env.roles.msl)) {\r\n      this.http.get<User[]>(this.BO.getTeam(3)).subscribe((user: User[]) => {\r\n        let ts = this.getPrTeams().filter((t: Team) => t.teamLeadId !== this.authService.getUserId());\r\n        let tsUsers: number[] = [];\r\n\r\n        ts.forEach((t: Team) => {\r\n          let childs = [t.teamLeadId];\r\n          childs = [...childs, ...user.filter((u: User) => u.parentId === t.teamLeadId).map((u: User) => u.id)];\r\n          let tUsers = [...childs, ...user.filter((u: User) => childs.indexOf(u.parentId) >= 0).map((u: User) => u.id)];\r\n          tsUsers = tsUsers.concat(tUsers);\r\n        });\r\n\r\n        let users = user.filter((u: User) => tsUsers.findIndex((tU: number) => tU === u.id) === -1);\r\n\r\n        this.teamPL$.next(users.sort((a, b) => (a.lastName > b.lastName ? 1 : -1)));\r\n        this.userService.addUsers(users);\r\n      });\r\n    } else {\r\n      this.http.get<User[]>(this.BO.getTeam(2)).subscribe((user: User[]) => {\r\n        this.teamPL$.next(user.sort((a, b) => (a.lastName > b.lastName ? 1 : -1)));\r\n        this.userService.addUsers(user);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns childs\r\n   * if level > 1: also returns childs of childs\r\n   * @param level\r\n   * @param parentId\r\n   */\r\n  getTeamChilds(level: number, parentId: number): number[] {\r\n    let childs: number[] = [parentId];\r\n\r\n    if (level === 2) {\r\n      childs = [...childs, ...this.teamPL$.getValue().filter((u: User) => u.parentId === parentId).map((u: User) => u.id)];\r\n      return [...childs, ...this.teamPL$.getValue().filter((u: User) => childs.indexOf(u.parentId) >= 0).map((u: User) => u.id)];\r\n    }\r\n\r\n    return [...childs, ...this.teamPDL$.getValue().filter((u: User) => u.parentId === parentId).map((u: User) => u.id)];\r\n  }\r\n\r\n  /**\r\n   * Resets team data\r\n   */\r\n  reset(): void {\r\n    this.teamPDL$.next([]);\r\n    this.teamPL$.next([]);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>default constructor for teamservice</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "rawdescription": "\n\ndefault constructor for teamservice\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 923,
                            "end": 927,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "http"
                        },
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 917,
                            "end": 922,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 941,
                            "end": 943,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "BO"
                        },
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 935,
                            "end": 940,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 957,
                            "end": 968,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "userService"
                        },
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 951,
                            "end": 956,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserAdminService",
            "id": "injectable-UserAdminService-010d2dc8bf6793bd440d3b8e3b5e477b",
            "file": "src/app/core/services/admin/user.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds user to user-list\n",
                    "description": "<p>Adds user to user-list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1129,
                                "end": 1133,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "user"
                            },
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1123,
                                "end": 1128,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "editUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates user in user-list\n",
                    "description": "<p>Updates user in user-list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1423,
                                "end": 1427,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "user"
                            },
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1417,
                                "end": 1422,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "initData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ninit user service data\n",
                    "description": "<p>init user service data</p>\n"
                },
                {
                    "name": "setUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalls add or edit user request to server\n",
                    "description": "<p>Calls add or edit user request to server</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2058,
                                "end": 2062,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "user"
                            },
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2052,
                                "end": 2057,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setUserActiveState",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalls set active state request to server\n",
                    "description": "<p>Calls set active state request to server</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3167,
                                "end": 3169,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3161,
                                "end": 3166,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 3183,
                                "end": 3188,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "state"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3177,
                                "end": 3182,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>user service</p>\n",
            "rawdescription": "\n\nuser service\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { User } from '../../interfaces/user';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BusinessOperationsService } from '../../shared/business-operations.service';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { PageStateService } from '../../shared/page-state.service';\r\nimport { UserService } from '../user.service';\r\n\r\n/**\r\n * user service\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserAdminService {\r\n  /**\r\n   * user service constructor\r\n   * @param http\r\n   * @param snackBar\r\n   * @param BO\r\n   * @param pageState\r\n   */\r\n  constructor(\r\n    private http: HttpClient,\r\n    private snackBar: MatSnackBar,\r\n    private BO: BusinessOperationsService,\r\n    private pageState: PageStateService,\r\n    private userService: UserService,\r\n  ) {}\r\n\r\n  /**\r\n   * init user service data\r\n   */\r\n  initData(): void {\r\n    this.userService.initializeAllUser().then(() => {\r\n      this.userService.initializeRoles();\r\n      this.userService.initializeGrades();    \r\n    });\r\n  }\r\n\r\n  /**\r\n   * Adds user to user-list\r\n   * @param user\r\n   */\r\n  addUser(user: User): void {\r\n    let users: User[] = this.userService.allUsers$.getValue();\r\n    users = users.filter((u: User) => u.id !== user.id);\r\n    users.push(user);\r\n\r\n    this.userService.allUsers$.next(users);\r\n  }\r\n\r\n  /**\r\n   * Updates user in user-list\r\n   * @param user\r\n   */\r\n  editUser(user: User): void {\r\n    let users: User[] = this.userService.allUsers$.getValue();\r\n    users\r\n      .filter((u: User) => u.id === user.id)\r\n      .forEach((u: User) => {\r\n        u.globalId = user.globalId;\r\n        u.firstName = user.firstName;\r\n        u.lastName = user.lastName;\r\n        u.email = user.email;\r\n        u.roleId = user.roleId;\r\n        u.gradeId = user.gradeId;\r\n        u.parentId = user.parentId;\r\n        u.fte = user.fte;\r\n        u.admin = user.admin;\r\n      });\r\n\r\n    this.userService.allUsers$.next(users);\r\n  }\r\n\r\n  /**\r\n   * Calls add or edit user request to server\r\n   * @param user\r\n   */\r\n  setUser(user: User): void {\r\n    if (user.id) {\r\n      this.http.put(this.BO.updateUser(user.id), user).subscribe(\r\n        (u: User) => {\r\n          this.editUser(u);\r\n          this.snackBar.open(\"User successfully saved!\", \"OK\", {\r\n            duration: 5000,\r\n          });\r\n          this.pageState.hideSpinner();\r\n        },\r\n        (e: any) => {\r\n          this.snackBar.open(\"User could not be saved!\", \"OK\", {\r\n            duration: 10000,\r\n          });\r\n          this.pageState.hideSpinner();\r\n        }\r\n      );\r\n    } else {\r\n      this.http.post(this.BO.createUser(), user).subscribe(\r\n        (u: User) => {\r\n          this.addUser(u);\r\n          this.snackBar.open(\"User successfully added!\", \"OK\", {\r\n            duration: 5000,\r\n          });\r\n          this.pageState.hideSpinner();\r\n        },\r\n        (e: any) => {\r\n          this.snackBar.open(\"User could not be added!\", \"OK\", {\r\n            duration: 10000,\r\n          });\r\n          this.pageState.hideSpinner();\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calls set active state request to server\r\n   * @param id\r\n   * @param state\r\n   */\r\n  setUserActiveState(id: number, state: boolean): void {\r\n    this.http\r\n      .put(this.BO.setUserState(id), { id: id, active: state })\r\n      .subscribe(() => {\r\n        let users: User[] = this.userService.allUsers$.getValue();\r\n        users\r\n          .filter((u: User) => u.id === id)\r\n          .forEach((u: User) => {\r\n            u.active = state;\r\n          });\r\n\r\n        this.userService.allUsers$.next(users);\r\n      });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>user service constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "rawdescription": "\n\nuser service constructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 562,
                            "end": 566,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "http"
                        },
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 556,
                            "end": 561,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 580,
                            "end": 588,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "snackBar"
                        },
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 574,
                            "end": 579,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 602,
                            "end": 604,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "BO"
                        },
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 596,
                            "end": 601,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 618,
                            "end": 627,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "pageState"
                        },
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 612,
                            "end": 617,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-d93615552db1be2599fa7ef226dd17c9",
            "file": "src/app/core/services/user.service.ts",
            "properties": [
                {
                    "name": "allUsers$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<User[]>",
                    "optional": false,
                    "description": "<p>Observable which contains all users (for admins only)</p>\n",
                    "line": 24,
                    "rawdescription": "\n\nObservable which contains all users (for admins only)\n"
                },
                {
                    "name": "grades$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Grade[]>",
                    "optional": false,
                    "description": "<p>Observable which contains all possible grades</p>\n",
                    "line": 34,
                    "rawdescription": "\n\nObservable which contains all possible grades\n"
                },
                {
                    "name": "roles$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Role[]>",
                    "optional": false,
                    "description": "<p>Observable which contains all possible roles</p>\n",
                    "line": 29,
                    "rawdescription": "\n\nObservable which contains all possible roles\n"
                },
                {
                    "name": "user$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<User>",
                    "optional": false,
                    "description": "<p>observable which contains the current user</p>\n",
                    "line": 19,
                    "rawdescription": "\n\nobservable which contains the current user\n"
                }
            ],
            "methods": [
                {
                    "name": "addUsers",
                    "args": [
                        {
                            "name": "newUsers",
                            "type": "User[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newUsers",
                            "type": "User[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGrades",
                    "args": [],
                    "optional": false,
                    "returnType": "Grade[]",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns possible grades\n",
                    "description": "<p>returns possible grades</p>\n"
                },
                {
                    "name": "getRole",
                    "args": [
                        {
                            "name": "roleId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Role",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roleId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRoleName",
                    "args": [
                        {
                            "name": "rolePermission",
                            "type": "number | boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rolePermission",
                            "type": "number | boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUser",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "User | undefined",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns user by a given id\n",
                    "description": "<p>returns user by a given id</p>\n",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeAllUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoads all user data from the server\n",
                    "description": "<p>Loads all user data from the server</p>\n"
                },
                {
                    "name": "initializeGrades",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRequests grade data from server\n",
                    "description": "<p>Requests grade data from server</p>\n"
                },
                {
                    "name": "initializeRoles",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRequests role data from server\n",
                    "description": "<p>Requests role data from server</p>\n"
                },
                {
                    "name": "initUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoads the current user data from the server\n",
                    "description": "<p>Loads the current user data from the server</p>\n"
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmpties userdata\nTypically called at logout\n",
                    "description": "<p>Empties userdata\nTypically called at logout</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>user service</p>\n",
            "rawdescription": "\n\nuser service\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { User } from '../interfaces/user';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BusinessOperationsService } from '../shared/business-operations.service';\r\nimport { Role } from '../interfaces/role';\r\nimport { Grade } from '../interfaces/grade';\r\n\r\n/**\r\n * user service\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserService {\r\n  /**\r\n   * observable which contains the current user\r\n   */\r\n  user$: BehaviorSubject<User>;\r\n\r\n  /**\r\n   * Observable which contains all users (for admins only)\r\n   */\r\n  allUsers$: BehaviorSubject<User[]>;\r\n  \r\n  /**\r\n   * Observable which contains all possible roles\r\n   */\r\n  roles$: BehaviorSubject<Role[]>;\r\n\r\n  /**\r\n   * Observable which contains all possible grades\r\n   */\r\n  grades$: BehaviorSubject<Grade[]>;\r\n\r\n  /**\r\n   * user service constructor\r\n   * @param http\r\n   * @param snackBar\r\n   * @param BO\r\n   * @param pageState\r\n   */\r\n  constructor(\r\n    private http: HttpClient,\r\n    private BO: BusinessOperationsService,\r\n  ) {\r\n    this.user$ = new BehaviorSubject(new User());\r\n    this.allUsers$ = new BehaviorSubject([]);\r\n    this.roles$ = new BehaviorSubject([]);\r\n    this.grades$ = new BehaviorSubject([]);\r\n  }\r\n\r\n  /**\r\n   * Loads the current user data from the server\r\n   */\r\n  initUser(): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.http.get<User>(this.BO.getOwnUser())\r\n        .subscribe((user: User) => {\r\n          this.user$.next(user);\r\n          this.addUsers([user]);\r\n          resolve();\r\n        }, () => reject());\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Loads all user data from the server\r\n   */\r\n  initializeAllUser(): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.http.get<User[]>(this.BO.getUsers())\r\n        .subscribe((users: User[]) => {\r\n          this.allUsers$.next(users.sort((a, b) => (a.lastName > b.lastName) ? 1 : -1));\r\n          resolve();\r\n        }, () => reject());\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Requests role data from server\r\n   */\r\n  initializeRoles(): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.http.get<any[]>(this.BO.getRoles())\r\n      .subscribe((roles: any[]) => {\r\n        this.roles$.next(roles);\r\n        resolve();\r\n      }, () => reject());\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Requests grade data from server\r\n   */\r\n  initializeGrades(): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.http.get<Grade[]>(this.BO.getGrades())\r\n        .subscribe((grades: Grade[]) => {\r\n          this.grades$.next(grades);\r\n          resolve();\r\n        }, () => reject());\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Empties userdata\r\n   * Typically called at logout\r\n   */\r\n  reset(): void {\r\n    this.allUsers$.next([]);\r\n    this.user$.next(new User());\r\n  }\r\n\r\n  /**\r\n   * returns user by a given id\r\n   */\r\n  getUser(id: number): User | undefined {\r\n    return this.allUsers$.getValue().find((u: User) => u.id === id);\r\n  }\r\n\r\n  addUsers(newUsers: User[]): void {\r\n    let users: User[] = this.allUsers$.getValue();\r\n    newUsers.forEach((u: User) => {\r\n      if (!users.find((us: User) => us.id === u.id)) {\r\n        users.push(u);\r\n      }\r\n    });\r\n\r\n    this.allUsers$.next(users);\r\n  }\r\n\r\n  getRoleName(rolePermission: number | boolean): string {\r\n    if (rolePermission !== false && this.roles$.getValue().find((role: Role) => role.permissionType === rolePermission)) {\r\n      return this.roles$.getValue().find((role: Role) => role.permissionType === rolePermission).shortcut;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * returns possible grades\r\n   */\r\n  getGrades(): Grade[] {\r\n    return this.grades$.getValue();\r\n  }\r\n\r\n\r\n  getRole(roleId: number): Role {\r\n    return this.roles$.getValue().find((role: Role) => role.roleId === roleId);\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>user service constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "rawdescription": "\n\nuser service constructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 929,
                            "end": 933,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "http"
                        },
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 923,
                            "end": 928,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 969,
                            "end": 971,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "BO"
                        },
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 963,
                            "end": 968,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UtilitiesService",
            "id": "injectable-UtilitiesService-e6fe5aec4d93a39f38027a908d43bede",
            "file": "src/app/core/services/utilities.service.ts",
            "properties": [
                {
                    "name": "hierarchy$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<HierarchyNode>",
                    "optional": false,
                    "description": "<p>Observable which contains the hirarchy</p>\n",
                    "line": 42,
                    "rawdescription": "\n\nObservable which contains the hirarchy\n"
                },
                {
                    "name": "months$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Month[]>",
                    "optional": false,
                    "description": "<p>Observable which contains all months which are shown in the application</p>\n",
                    "line": 22,
                    "rawdescription": "\n\nObservable which contains all months which are shown in the application\n"
                },
                {
                    "name": "probabilities$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Probability[]>",
                    "optional": false,
                    "description": "<p>Observable which contains all probability types</p>\n",
                    "line": 32,
                    "rawdescription": "\n\nObservable which contains all probability types\n"
                },
                {
                    "name": "projects$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Project[]>",
                    "optional": false,
                    "description": "<p>Observable which contains all projects</p>\n",
                    "line": 27,
                    "rawdescription": "\n\nObservable which contains all projects\n"
                },
                {
                    "name": "teams$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Team[]>",
                    "optional": false,
                    "description": "<p>Observable which contains all teams</p>\n",
                    "line": 37,
                    "rawdescription": "\n\nObservable which contains all teams\n"
                }
            ],
            "methods": [
                {
                    "name": "addProject",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addTeam",
                    "args": [
                        {
                            "name": "team",
                            "type": "Team",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "team",
                            "type": "Team",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMonths",
                    "args": [],
                    "optional": false,
                    "returnType": "Month[]",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns all months\n",
                    "description": "<p>returns all months</p>\n"
                },
                {
                    "name": "getProbabilities",
                    "args": [],
                    "optional": false,
                    "returnType": "Probability[]",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns all probabilities\n",
                    "description": "<p>returns all probabilities</p>\n"
                },
                {
                    "name": "getProjects",
                    "args": [],
                    "optional": false,
                    "returnType": "Project[]",
                    "typeParameters": [],
                    "line": 140,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns all projects\n",
                    "description": "<p>returns all projects</p>\n"
                },
                {
                    "name": "getSubcoProbabilities",
                    "args": [],
                    "optional": false,
                    "returnType": "Probability[]",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns all probabilities\n",
                    "description": "<p>returns all probabilities</p>\n"
                },
                {
                    "name": "getTeams",
                    "args": [],
                    "optional": false,
                    "returnType": "Team[]",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns all teams\n",
                    "description": "<p>returns all teams</p>\n"
                },
                {
                    "name": "initHirarchy",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initMonths",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initProbabilities",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initProjects",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initTeams",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmpties utility-data\nTypically called at logout\n",
                    "description": "<p>Empties utility-data\nTypically called at logout</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>utilities services (for months + projects + probabilities)</p>\n",
            "rawdescription": "\n\nutilities services (for months + projects + probabilities)\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { Project } from '../interfaces/project';\r\nimport { Month } from '../interfaces/month';\r\nimport { Probability } from '../interfaces/probability';\r\nimport { Team } from '../interfaces/team';\r\nimport { BusinessOperationsService } from '../shared/business-operations.service';\r\nimport { HierarchyNode } from '../interfaces/hierarchyNode';\r\n\r\n/**\r\n * utilities services (for months + projects + probabilities)\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UtilitiesService {\r\n  /**\r\n   * Observable which contains all months which are shown in the application\r\n   */\r\n  months$: BehaviorSubject<Month[]>;\r\n\r\n  /**\r\n   * Observable which contains all projects\r\n   */\r\n  projects$: BehaviorSubject<Project[]>;\r\n\r\n  /**\r\n   * Observable which contains all probability types\r\n   */\r\n  probabilities$: BehaviorSubject<Probability[]>;\r\n\r\n  /**\r\n   * Observable which contains all teams\r\n   */\r\n  teams$: BehaviorSubject<Team[]>;\r\n\r\n  /**\r\n   * Observable which contains the hirarchy\r\n   */\r\n  hierarchy$: BehaviorSubject<HierarchyNode>;\r\n\r\n\r\n\r\n  /**\r\n   * utilities service constructor\r\n    * @param http\r\n    * @param BO\r\n    */\r\n   constructor(\r\n    private http: HttpClient,\r\n    private BO: BusinessOperationsService,\r\n  ) {\r\n    this.months$ = new BehaviorSubject([]);\r\n    this.projects$ = new BehaviorSubject([]);\r\n    this.probabilities$ = new BehaviorSubject([]);\r\n    this.hierarchy$ = new BehaviorSubject(null);\r\n    this.teams$ = new BehaviorSubject([]);\r\n  }\r\n\r\n  initMonths(): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.http.get(this.BO.getUtilMonths()).subscribe((months: Month[]) => {\r\n        this.months$.next(months);\r\n        resolve();\r\n      }, () => reject());\r\n    });\r\n  }\r\n\r\n  initTeams(): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.http.get(this.BO.getTeams()).subscribe((teams: Team[]) => {\r\n        this.teams$.next(teams);\r\n        resolve();\r\n      }, () => reject());\r\n    });\r\n  }\r\n\r\n  initProjects(): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.http.get(this.BO.getUtilProjects()).subscribe((projects: Project[]) => {\r\n        this.projects$.next(projects.sort((a, b) => (b.mandatory === 'Y') ? 1 : -1));\r\n        resolve();\r\n      }, () => reject());\r\n    });\r\n  }\r\n\r\n  initProbabilities(): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.http.get(this.BO.getProbabilities()).subscribe((probabilities: Probability[]) => {\r\n        this.probabilities$.next(probabilities);\r\n        resolve();\r\n      }, () => reject());\r\n    });\r\n  }\r\n\r\n  initHirarchy(): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.http.get(this.BO.companyHierarchy()).subscribe((hierarchy: HierarchyNode) => {\r\n        this.hierarchy$.next(hierarchy);\r\n        resolve();\r\n      }, () => reject());\r\n    });\r\n  }\r\n\r\n  addProject(project: Project): void {\r\n    let projects: Project[] = this.projects$.getValue();\r\n    projects.push(project);\r\n    this.projects$.next(projects);\r\n  }\r\n\r\n  addTeam(team: Team): void {\r\n    let teams: Team[] = this.teams$.getValue();\r\n    teams.push(team);\r\n    this.teams$.next(teams);\r\n  }\r\n\r\n  /**\r\n   * Empties utility-data\r\n   * Typically called at logout\r\n   */\r\n  reset(): void {\r\n    this.months$.next([]);\r\n    this.projects$.next([]);\r\n    this.probabilities$.next([]);\r\n    this.teams$.next([]);\r\n  }\r\n\r\n  /**\r\n   * returns all months\r\n   */\r\n  getMonths(): Month[] {\r\n    return this.months$.getValue();\r\n  }\r\n\r\n  /**\r\n   * returns all projects\r\n   */\r\n  getProjects(): Project[] {\r\n    return this.projects$.getValue();\r\n  }\r\n\r\n  /**\r\n   * returns all probabilities\r\n   */\r\n  getProbabilities(): Probability[] {\r\n    return this.probabilities$.getValue();\r\n  }\r\n\r\n    /**\r\n   * returns all probabilities\r\n   */\r\n    getSubcoProbabilities(): Probability[] {\r\n      return this.probabilities$.getValue().filter(p => p.name != 'Unnamed');\r\n    }\r\n\r\n  /**\r\n   * returns all teams\r\n   */\r\n  getTeams(): Team[] {\r\n    return this.teams$.getValue();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>utilities service constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 42,
                "rawdescription": "\n\nutilities service constructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1252,
                            "end": 1256,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "http"
                        },
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1246,
                            "end": 1251,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1271,
                            "end": 1273,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "BO"
                        },
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1265,
                            "end": 1270,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "RoleGuard",
            "id": "injectable-RoleGuard-91cc12a1a26778cde342fff19e93cf35",
            "file": "src/app/core/security/role-guard.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf user is logged in and is allowed to access page with his role: returns true.\nOtherwise: returns false. Additionally navigates to login page if user is not logged in at all.\n\n",
                    "description": "<p>If user is logged in and is allowed to access page with his role: returns true.\nOtherwise: returns false. Additionally navigates to login page if user is not logged in at all.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 707,
                                "end": 712,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "route"
                            },
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 701,
                                "end": 706,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 727,
                                "end": 732,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "state"
                            },
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 721,
                                "end": 726,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Tests if user is authenticated and fulfills specific role criteria</p>\n",
            "rawdescription": "\n\nTests if user is authenticated and fulfills specific role criteria\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {\r\n  CanActivate, Router,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot,\r\n} from '@angular/router';\r\nimport { AuthService } from './auth.service';\r\n\r\n/**\r\n * Tests if user is authenticated and fulfills specific role criteria\r\n */\r\n@Injectable()\r\nexport class RoleGuard implements CanActivate {\r\n  /**\r\n   * needs auth + route services\r\n   */\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router,\r\n  ) {}\r\n\r\n  /**\r\n   * If user is logged in and is allowed to access page with his role: returns true.\r\n   * Otherwise: returns false. Additionally navigates to login page if user is not logged in at all.\r\n   * \r\n   * @param route \r\n   * @param state \r\n   */\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n    if (this.authService.isLogged()) {\r\n      const expectedRole: number = route.data.expectedRole;\r\n      if (this.authService.hasRole(expectedRole)) {\r\n        return true;\r\n      }\r\n\r\n      this.router.navigate(['/']);\r\n      return false;\r\n    }\r\n\r\n    if (this.router.url === '/') {\r\n      this.router.navigate(['/login']);\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>needs auth + route services</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "rawdescription": "\n\nneeds auth + route services\n",
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "HttpRequestInterceptorService",
            "id": "injectable-HttpRequestInterceptorService-25e31d69fb3b81cda46f3a3004ffc433",
            "file": "src/app/core/security/httpRequestInterceptor.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMethod called at every http request\n\n",
                    "description": "<p>Method called at every http request</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 941,
                                "end": 944,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "req"
                            },
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 935,
                                "end": 940,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 958,
                                "end": 962,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "next"
                            },
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 952,
                                "end": 957,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Request Interceptor for all http requests</p>\n",
            "rawdescription": "\n\nRequest Interceptor for all http requests\n",
            "sourceCode": "import { Injectable, Injector } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest, HttpErrorResponse } from '@angular/common/http';\r\n\r\nimport { AuthService } from './auth.service';\r\nimport { LoginService } from './login.service';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Router } from '@angular/router';\r\n\r\n/**\r\n * Request Interceptor for all http requests\r\n */\r\n@Injectable()\r\nexport class HttpRequestInterceptorService implements HttpInterceptor {\r\n  /**\r\n   * necessary service implementations\r\n   * \r\n   * @param auth\r\n   * @param login\r\n   * @param router\r\n   * @param snackBar\r\n   */\r\n  constructor(\r\n    private injector: Injector,\r\n    private router: Router,\r\n    private snackBar: MatSnackBar,\r\n  ) {}\r\n\r\n  /**\r\n   * Method called at every http request\r\n   * \r\n   * @param req\r\n   * @param next\r\n   */\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    // Get the auth header from the service.\r\n    const authInj= this.injector.get(AuthService);\r\n    const loginInj= this.injector.get(LoginService);\r\n    const authHeader: string = authInj.getToken();\r\n    if (authHeader) {\r\n      let authReq: HttpRequest<any>;\r\n      authReq = req.clone({\r\n        setHeaders: { Authorization: authHeader },\r\n      });\r\n\r\n      loginInj.renewToken();\r\n      req = authReq;\r\n    }\r\n\r\n    return next.handle(req)\r\n      .pipe(\r\n        catchError((error: HttpErrorResponse, caught: Observable<HttpEvent<any>>) => {\r\n          console.log(error);\r\n\r\n          let errorStatus: number = (error.status ? error.status : 0);\r\n          let errorMessage: string = (error && error.error && error.error.error) ? error.error.error : 'An error occured.';\r\n\r\n          if (errorStatus === 401) {\r\n            authInj.setLogged(false);\r\n            this.router.navigate(['/login']);\r\n          }\r\n\r\n          if (authInj.isLogged()) {\r\n            this.snackBar.open(errorMessage, 'OK', { duration: 10000, });\r\n          }\r\n\r\n          return throwError(error);\r\n        })) as any;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>necessary service implementations</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "rawdescription": "\n\nnecessary service implementations\n\n",
                "jsdoctags": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 712,
                            "end": 718,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "router"
                        },
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 706,
                            "end": 711,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 732,
                            "end": 740,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "snackBar"
                        },
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 726,
                            "end": 731,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "Entry",
            "id": "class-Entry-033c5d0b8804fe49c9a0676c7ffd8a3b",
            "file": "src/app/core/interfaces/exportCSV/entry.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Entry {\r\n\r\n  /**\r\n   * entry (project) name\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * number of working days (project + vacation + training + bdd days)\r\n   */\r\n  workingDays: number;\r\n\r\n  /**\r\n   * arve = (projectdays billable + non-billable) / (totalworkingdays - vacationdays)\r\n   */\r\n  arve: number;\r\n\r\n  /**\r\n   * urve = (projectdays billable) / (totalworkingdays - vacationdays)\r\n   */\r\n  urve: number;\r\n\r\n  /**\r\n   * Return on sales of all projects\r\n   */\r\n  ros: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "arve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>arve = (projectdays billable + non-billable) / (totalworkingdays - vacationdays)</p>\n",
                    "line": 19,
                    "rawdescription": "\n\narve = (projectdays billable + non-billable) / (totalworkingdays - vacationdays)\n"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>entry (project) name</p>\n",
                    "line": 9,
                    "rawdescription": "\n\nentry (project) name\n"
                },
                {
                    "name": "ros",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Return on sales of all projects</p>\n",
                    "line": 29,
                    "rawdescription": "\n\nReturn on sales of all projects\n"
                },
                {
                    "name": "urve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>urve = (projectdays billable) / (totalworkingdays - vacationdays)</p>\n",
                    "line": 24,
                    "rawdescription": "\n\nurve = (projectdays billable) / (totalworkingdays - vacationdays)\n"
                },
                {
                    "name": "workingDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>number of working days (project + vacation + training + bdd days)</p>\n",
                    "line": 14,
                    "rawdescription": "\n\nnumber of working days (project + vacation + training + bdd days)\n"
                }
            ],
            "description": "<p>Single entry structure for csv export</p>\n",
            "rawdescription": "\n\nSingle entry structure for csv export\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Export",
            "id": "class-Export-f072255d2e76feb258229c2f3951c3ec",
            "file": "src/app/core/interfaces/exportCSV/export.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Entry } from \"./entry\";\r\nimport { Summary } from \"./summary\";\r\n\r\n/**\r\n * Export item structure for csv export\r\n */\r\nexport class Export {\r\n  /**\r\n   * id of selected month\r\n   */\r\n  monthId: number;\r\n\r\n  /**\r\n   * constructor for Export class needed\r\n   */\r\n  constructor(\r\n    /**\r\n     * array of entries from all teammembers\r\n     */\r\n    public employeeEntry: Entry[] = [],\r\n\r\n    /**\r\n     * summary data of teammember\r\n     */\r\n    public summary: Summary = new Summary(),\r\n  ) {}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor for Export class needed</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "employeeEntry",
                        "type": "Entry[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    },
                    {
                        "name": "summary",
                        "type": "Summary",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "new Summary()"
                    }
                ],
                "line": 11,
                "rawdescription": "\n\nconstructor for Export class needed\n",
                "jsdoctags": [
                    {
                        "name": "employeeEntry",
                        "type": "Entry[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "summary",
                        "type": "Summary",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "new Summary()",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "employeeEntry",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Entry[]",
                    "optional": false,
                    "description": "<p>array of entries from all teammembers</p>\n",
                    "line": 20,
                    "rawdescription": "\n\narray of entries from all teammembers\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "monthId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>id of selected month</p>\n",
                    "line": 11,
                    "rawdescription": "\n\nid of selected month\n"
                },
                {
                    "name": "summary",
                    "defaultValue": "new Summary()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Summary",
                    "optional": false,
                    "description": "<p>summary data of teammember</p>\n",
                    "line": 25,
                    "rawdescription": "\n\nsummary data of teammember\n",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "description": "<p>Export item structure for csv export</p>\n",
            "rawdescription": "\n\nExport item structure for csv export\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FcEntry",
            "id": "class-FcEntry-3644911613d9b4ac53d07b2c973ef11d",
            "file": "src/app/core/interfaces/fcEntry.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { FcProject } from './fcProject';\r\n\r\n/**\r\n * main forecast entry class\r\n */\r\nexport class FcEntry {\r\n    forecastId?: number;\r\n    subcoForecastId?: number;\r\n    userId: number;\r\n    monthId: number;\r\n    comment: string;\r\n    projects: FcProject[];\r\n    fte: number;\r\n    gradeId: number;\r\n    isRelevant: boolean;\r\n    isHundredPercent: boolean;\r\n    isFiveTenFifteen: boolean;\r\n    rangeHundredPercent: number;\r\n\r\n    /**\r\n     * forecast entry cannot be edited if locked-level is >= permission-level\r\n     */\r\n    locked?: number | boolean;\r\n\r\n    /**\r\n     * created time for history\r\n     */\r\n    createdAt?: string;\r\n    /**\r\n     * changed by user for history\r\n     */\r\n    changedBy?: string;\r\n    updated?: boolean;\r\n    /**\r\n     * all historic entry values for a forecast with a specific id\r\n     */\r\n    history?: FcEntry[];\r\n\r\n    /**\r\n     * arve = (projectdays billable + non-billable) / (totalworkingdays - vacationdays)\r\n     */\r\n    arve?: number;\r\n\r\n    /**\r\n     * urve = (projectdays billable) / (totalworkingdays - vacationdays)\r\n     */\r\n    urve?: number;\r\n\r\n    /**\r\n     * all billable days\r\n     */\r\n    billableDays?: number;\r\n\r\n    /**\r\n     * all days that are set non-billable (can be != total - billable)\r\n     */\r\n    nonbillableDays?: number;\r\n\r\n    /**\r\n     * vacation days\r\n     */\r\n    vacationDays?: number;\r\n\r\n    /**\r\n     * all project days ( = days from projects where project-type = 0)\r\n     */\r\n    projectDays?: number;\r\n\r\n    /**\r\n     * business-development days\r\n     */\r\n    businessDays?: number;\r\n\r\n    /**\r\n     * total possible days in a month for a specific user (workingdays per month * user-fte)\r\n     */\r\n    totalDays?: number;\r\n    nonbillableProjectDays?: number;\r\n    cor?: number;\r\n    ros?: number;\r\n\r\n    /**\r\n     * if set to true, input fields in fc-entry will be validated instantly (otherwise only when \"Save\" is clicked)\r\n     */\r\n    instantValidation?: boolean;\r\n\r\n    constructor() {\r\n        this.forecastId = undefined;\r\n        this.monthId = undefined;\r\n        this.userId = undefined;\r\n        this.comment = '';\r\n        this.projects = [];\r\n        this.fte = undefined;\r\n        this.gradeId = undefined;\r\n        this.isRelevant = true;\r\n        this.locked = -1;\r\n        this.arve = 0;\r\n        this.urve = 0;\r\n        this.projectDays = 0;\r\n        this.billableDays = 0;\r\n        this.nonbillableDays = 0;\r\n        this.vacationDays = 0;\r\n        this.businessDays = 0;\r\n        this.totalDays = 0;\r\n        this.isHundredPercent = false;\r\n        this.isFiveTenFifteen = false;\r\n        this.rangeHundredPercent = 0;\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 85
            },
            "properties": [
                {
                    "name": "arve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>arve = (projectdays billable + non-billable) / (totalworkingdays - vacationdays)</p>\n",
                    "line": 42,
                    "rawdescription": "\n\narve = (projectdays billable + non-billable) / (totalworkingdays - vacationdays)\n"
                },
                {
                    "name": "billableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>all billable days</p>\n",
                    "line": 52,
                    "rawdescription": "\n\nall billable days\n"
                },
                {
                    "name": "businessDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>business-development days</p>\n",
                    "line": 72,
                    "rawdescription": "\n\nbusiness-development days\n"
                },
                {
                    "name": "changedBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>changed by user for history</p>\n",
                    "line": 32,
                    "rawdescription": "\n\nchanged by user for history\n"
                },
                {
                    "name": "comment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "cor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>created time for history</p>\n",
                    "line": 28,
                    "rawdescription": "\n\ncreated time for history\n"
                },
                {
                    "name": "forecastId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "fte",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "gradeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "history",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FcEntry[]",
                    "optional": true,
                    "description": "<p>all historic entry values for a forecast with a specific id</p>\n",
                    "line": 37,
                    "rawdescription": "\n\nall historic entry values for a forecast with a specific id\n"
                },
                {
                    "name": "instantValidation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>if set to true, input fields in fc-entry will be validated instantly (otherwise only when &quot;Save&quot; is clicked)</p>\n",
                    "line": 85,
                    "rawdescription": "\n\nif set to true, input fields in fc-entry will be validated instantly (otherwise only when \"Save\" is clicked)\n"
                },
                {
                    "name": "isFiveTenFifteen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "isHundredPercent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isRelevant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "locked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | boolean",
                    "optional": true,
                    "description": "<p>forecast entry cannot be edited if locked-level is &gt;= permission-level</p>\n",
                    "line": 23,
                    "rawdescription": "\n\nforecast entry cannot be edited if locked-level is >= permission-level\n"
                },
                {
                    "name": "monthId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "nonbillableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>all days that are set non-billable (can be != total - billable)</p>\n",
                    "line": 57,
                    "rawdescription": "\n\nall days that are set non-billable (can be != total - billable)\n"
                },
                {
                    "name": "nonbillableProjectDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "projectDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>all project days ( = days from projects where project-type = 0)</p>\n",
                    "line": 67,
                    "rawdescription": "\n\nall project days ( = days from projects where project-type = 0)\n"
                },
                {
                    "name": "projects",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FcProject[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "rangeHundredPercent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "ros",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "subcoForecastId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "totalDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>total possible days in a month for a specific user (workingdays per month * user-fte)</p>\n",
                    "line": 77,
                    "rawdescription": "\n\ntotal possible days in a month for a specific user (workingdays per month * user-fte)\n"
                },
                {
                    "name": "updated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "urve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>urve = (projectdays billable) / (totalworkingdays - vacationdays)</p>\n",
                    "line": 47,
                    "rawdescription": "\n\nurve = (projectdays billable) / (totalworkingdays - vacationdays)\n"
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "vacationDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>vacation days</p>\n",
                    "line": 62,
                    "rawdescription": "\n\nvacation days\n"
                }
            ],
            "description": "<p>main forecast entry class</p>\n",
            "rawdescription": "\n\nmain forecast entry class\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FcProject",
            "id": "class-FcProject-5cd1b884bbc85c3aab14b5b55c88240f",
            "file": "src/app/core/interfaces/fcProject.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class FcProject {\r\n    projectId: number;\r\n    plannedProjectDays: number;\r\n    probabilityId: number;\r\n\r\n    /**\r\n     * Is project billable?\r\n     * default: true\r\n     * Automatically set to false for vacation + training + business development days\r\n     */\r\n    billable?: boolean;\r\n\r\n    /**\r\n     * employee cor for project\r\n     */\r\n    cor: number;\r\n\r\n    /**\r\n     * Project generates external revenue\r\n     * default: true\r\n     * Automatically set to false for vacation + training + business development days\r\n     */\r\n    externalRevenue?: boolean;\r\n\r\n    /**\r\n     * project type\r\n     * default: 0, 1 - xx: special types (vacation, ...)\r\n     */\r\n    projectType?: number;\r\n\r\n    /**\r\n     * Is project mandatory?\r\n     * Set to true for vacation + training + business development days\r\n     */\r\n    mandatory?: string;\r\n\r\n    /**\r\n     * List of errors if validation was unsuccessful\r\n     */\r\n    errors?: string[];\r\n\r\n    costRate?: number;\r\n\r\n    constructor() {\r\n        this.projectId = undefined;\r\n        this.plannedProjectDays = 0;\r\n        this.probabilityId = null;\r\n        this.cor = 0;\r\n        this.externalRevenue = true;\r\n        this.billable = true;\r\n        this.mandatory = 'N';\r\n        this.projectType = 0;\r\n        this.costRate = 0;\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 45
            },
            "properties": [
                {
                    "name": "billable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Is project billable?\ndefault: true\nAutomatically set to false for vacation + training + business development days</p>\n",
                    "line": 14,
                    "rawdescription": "\n\nIs project billable?\ndefault: true\nAutomatically set to false for vacation + training + business development days\n"
                },
                {
                    "name": "cor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>employee cor for project</p>\n",
                    "line": 19,
                    "rawdescription": "\n\nemployee cor for project\n"
                },
                {
                    "name": "costRate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "<p>List of errors if validation was unsuccessful</p>\n",
                    "line": 43,
                    "rawdescription": "\n\nList of errors if validation was unsuccessful\n"
                },
                {
                    "name": "externalRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Project generates external revenue\ndefault: true\nAutomatically set to false for vacation + training + business development days</p>\n",
                    "line": 26,
                    "rawdescription": "\n\nProject generates external revenue\ndefault: true\nAutomatically set to false for vacation + training + business development days\n"
                },
                {
                    "name": "mandatory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Is project mandatory?\nSet to true for vacation + training + business development days</p>\n",
                    "line": 38,
                    "rawdescription": "\n\nIs project mandatory?\nSet to true for vacation + training + business development days\n"
                },
                {
                    "name": "plannedProjectDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "probabilityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "projectId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "projectType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>project type\ndefault: 0, 1 - xx: special types (vacation, ...)</p>\n",
                    "line": 32,
                    "rawdescription": "\n\nproject type\ndefault: 0, 1 - xx: special types (vacation, ...)\n"
                }
            ],
            "description": "<p>forecast project structure (projects that have been assigned to a forecast)</p>\n",
            "rawdescription": "\n\nforecast project structure (projects that have been assigned to a forecast)\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FinancialControllerSummaryAPPS",
            "id": "class-FinancialControllerSummaryAPPS-227579d30768cb0d3a9fc0a45344627d",
            "file": "src/app/core/interfaces/financialAppsSummary.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class FinancialControllerSummaryAPPS {\r\n    \r\n    ros: number;\r\n\r\n    internalRevenue: number;\r\n\r\n    externalRevenue: number;\r\n\r\n    avgVacation: number;\r\n\r\n    fte: number;\r\n\r\n    urve: number;\r\n\r\n    arve: number;\r\n\r\n    cor: number;\r\n\r\n    btu: number;\r\n\r\n    pror: number;\r\n\r\n    arvi: number;\r\n\r\n    urvi: number;\r\n\r\n    expectedRevenue: number;\r\n\r\n    monthId: number;\r\n\r\n    constructor() {\r\n        this.ros = 0;\r\n        this.internalRevenue = 0,\r\n        this.externalRevenue = 0,\r\n        this.avgVacation = 0;\r\n        this.fte = 0;\r\n        this.urve = 0;\r\n        this.arve = 0;\r\n        this.cor = 0;\r\n        this.btu = 0;\r\n        this.pror = 0;\r\n        this.arvi = 0;\r\n        this.urvi = 0;\r\n        this.expectedRevenue = 0;\r\n        this.monthId = 0;\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 29
            },
            "properties": [
                {
                    "name": "arve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "arvi",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "avgVacation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "btu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "cor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "expectedRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "externalRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "fte",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "internalRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "monthId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "pror",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "ros",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "urve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "urvi",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FincancialControllerSummary",
            "id": "class-FincancialControllerSummary-df0ddbb407b03c9f4ea74cc53a839cf5",
            "file": "src/app/core/interfaces/financialSummary.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class FincancialControllerSummary {\r\n\r\n    totalRevenue: number;\r\n\r\n    internalRevenue: number;\r\n\r\n    externalRevenue: number;\r\n\r\n    btu: number;\r\n\r\n    pror: number;\r\n\r\n    arvi: number;\r\n\r\n    urvi: number;\r\n\r\n    constructor() {\r\n        this.totalRevenue = 0;\r\n        this.internalRevenue = 0;\r\n        this.externalRevenue = 0;\r\n        this.btu = 0;\r\n        this.pror = 0;\r\n        this.arvi = 0;\r\n        this.urvi = 0;\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "properties": [
                {
                    "name": "arvi",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "btu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "externalRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "internalRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "pror",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "totalRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "urvi",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LockedMonth",
            "id": "class-LockedMonth-cf86fea9b28ca1af72a3fe7286891f5c",
            "file": "src/app/core/interfaces/lockedMonth.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class LockedMonth {\r\n    /**\r\n     * unique system id\r\n     */\r\n    id?: number;\r\n  \r\n    /**\r\n     * Value for whether the month is submitted and locked.\r\n     */\r\n    locked?: boolean;\r\n  \r\n    /**\r\n     * constructor with default values\r\n     */\r\n    constructor() {\r\n      \r\n    }\r\n  }",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor with default values</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13,
                "rawdescription": "\n\nconstructor with default values\n"
            },
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>unique system id</p>\n",
                    "line": 8,
                    "rawdescription": "\n\nunique system id\n"
                },
                {
                    "name": "locked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Value for whether the month is submitted and locked.</p>\n",
                    "line": 13,
                    "rawdescription": "\n\nValue for whether the month is submitted and locked.\n"
                }
            ],
            "description": "<p>locked month data structure</p>\n",
            "rawdescription": "\n\nlocked month data structure\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LoginPage",
            "id": "class-LoginPage-b5e1d3e6927b16acf8a8afb822d9f222",
            "file": "e2e_testing/login/login.po.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { browser, by, element } from \"protractor\";\r\n\r\nclass LoginPage {\r\n    private credentials = {\r\n        username: \"michael.danninger@capgemini.com\",\r\n        password: \"Password1!\"\r\n    }\r\n\r\n    navigateTo() {\r\n        return browser.get(\"http://localhost:4200/forecast\")\r\n    }\r\n    fillCredentials(credentials: any = this.credentials) {\r\n        element(by.id(\"mat-input-0\")).sendKeys(credentials.username);\r\n        element(by.id(\"mat-input-1\")).sendKeys(credentials.password);\r\n        element(by.css(\"login-button\")).click();\r\n    }\r\n    getPageTitleText() {\r\n        return element(by.css(\"user\")).getText();\r\n    }\r\n    getErrorMessage() {\r\n        return element(by.id(\"mat-error-0\")).getText();\r\n    }\r\n}\r\n\r\nexport { LoginPage }",
            "properties": [
                {
                    "name": "credentials",
                    "defaultValue": "{\r\n        username: \"michael.danninger@capgemini.com\",\r\n        password: \"Password1!\"\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "fillCredentials",
                    "args": [
                        {
                            "name": "credentials",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.credentials"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "credentials",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.credentials",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getErrorMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPageTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Month",
            "id": "class-Month-605aff725cb8102aff55a2e36a9132aa",
            "file": "src/app/core/interfaces/month.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Month {\r\n  /**\r\n   * unique system id\r\n   */\r\n  id: number;\r\n\r\n  /**\r\n   * month name\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * possible working days for month\r\n   */\r\n  workingdays: string;\r\n\r\n  /**\r\n   * Time of start of month\r\n   * E.g. for April 2019: 20190401T00:00:00\r\n   */\r\n  time: string;\r\n\r\n  /**\r\n   * Used for csv export\r\n   */\r\n  checked?: boolean;\r\n\r\n  /**\r\n   * Active value for a month (only active months can be seen)\r\n   * Default: true\r\n   */\r\n  active?: boolean;\r\n\r\n  /**\r\n   * Value for whether the month is submitted and locked.\r\n   */\r\n  locked?: boolean;\r\n\r\n    /**\r\n   * Value for whether the month is submitted and saved.\r\n   */\r\n  saved?: boolean;\r\n\r\n  /**\r\n   * constructor with default values\r\n   */\r\n  constructor() {\r\n    let d: Date = new Date();\r\n    d.setDate(1);\r\n    d.setHours(0, 0, 0, 0);\r\n\r\n    this.name = \"\";\r\n    this.workingdays = \"0\";\r\n    this.time = d.toISOString();\r\n    this.active = true;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor with default values</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 45,
                "rawdescription": "\n\nconstructor with default values\n"
            },
            "properties": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Active value for a month (only active months can be seen)\nDefault: true</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nActive value for a month (only active months can be seen)\nDefault: true\n"
                },
                {
                    "name": "checked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Used for csv export</p>\n",
                    "line": 29,
                    "rawdescription": "\n\nUsed for csv export\n"
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>unique system id</p>\n",
                    "line": 8,
                    "rawdescription": "\n\nunique system id\n"
                },
                {
                    "name": "locked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Value for whether the month is submitted and locked.</p>\n",
                    "line": 40,
                    "rawdescription": "\n\nValue for whether the month is submitted and locked.\n"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>month name</p>\n",
                    "line": 13,
                    "rawdescription": "\n\nmonth name\n"
                },
                {
                    "name": "saved",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Value for whether the month is submitted and saved.</p>\n",
                    "line": 45,
                    "rawdescription": "\n\nValue for whether the month is submitted and saved.\n"
                },
                {
                    "name": "time",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Time of start of month\nE.g. for April 2019: 20190401T00:00:00</p>\n",
                    "line": 24,
                    "rawdescription": "\n\nTime of start of month\nE.g. for April 2019: 20190401T00:00:00\n"
                },
                {
                    "name": "workingdays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>possible working days for month</p>\n",
                    "line": 18,
                    "rawdescription": "\n\npossible working days for month\n"
                }
            ],
            "description": "<p>month data structure</p>\n",
            "rawdescription": "\n\nmonth data structure\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PerGrade",
            "id": "class-PerGrade-d1d38a0c35cb1ec3c07c906d7196c594",
            "file": "src/app/core/interfaces/perGrade.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class PerGrade {\r\n    value : number;\r\n    count: number;\r\n    users: Set<number>;\r\n    average : number;\r\n\r\n    getAverage() : number{\r\n        this.average = this.value/this.users.size;\r\n        return this.average;\r\n    }\r\n    \r\n    constructor(){\r\n        this.value = 0;\r\n        this.count = 0;\r\n        this.average = 0;\r\n        this.users = new Set();\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "properties": [
                {
                    "name": "average",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "users",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Set<number>",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [
                {
                    "name": "getAverage",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProbabilityRecord",
            "id": "class-ProbabilityRecord-6f63295131848cf350ded6a8bfd36533",
            "file": "src/app/core/interfaces/probabilityRecord.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ProbabilityRecord {\r\n\r\n\tid: number;\r\n\r\n\tname: string;\r\n\r\n\tprojectDays: number;\r\n\r\n\tbillableDays: number;\r\n\r\n\tvacationDays: number;\r\n\r\n\tpaidDays: number;\r\n\r\n\tcorDays: number; \r\n\r\n\tcor: number;\r\n\r\n\texternalRevenue: number;\r\n\r\n\tinternalRevenue: number;\r\n\r\n\trevenue: number;\r\n\r\n\tarve: number;\r\n\r\n\turve: number;\r\n\r\n\tnonBillableDays: number;\r\n\t\r\n  constructor() {\r\n\t\tthis.nonBillableDays = 0;\r\n\t\tthis.id = 0;\r\n\t\tthis.name = \"\";\r\n\t\tthis.arve = 0;\r\n\t\tthis.urve = 0;\r\n\t\tthis.revenue = 0;\r\n\t\tthis.internalRevenue = 0;\r\n\t\tthis.vacationDays = 0;\r\n\t\tthis.externalRevenue = 0;\r\n\t\tthis.corDays = 0;\r\n\t\tthis.paidDays = 0;\r\n\t\tthis.billableDays = 0;\r\n\t\tthis.cor = 0;\r\n\t\tthis.projectDays = 0;\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 29
            },
            "properties": [
                {
                    "name": "arve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "billableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "cor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "corDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "externalRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "internalRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "nonBillableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "paidDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "projectDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "revenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "urve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "vacationDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProbabilitySummary",
            "id": "class-ProbabilitySummary-66ad83c74f919ff8ceed4ac4d547b64f",
            "file": "src/app/core/interfaces/probabilitySummary.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ProbabilityRecord } from \"./probabilityRecord\";\r\nimport { PerGrade } from \"./perGrade\";\r\n\r\nexport class ProbabilitySummary {\r\n\r\n\tprojectDays: number;\r\n\r\n\tbillableDays: number;\r\n\r\n\tvacationDays: number;\r\n\r\n\tavgVacationDaysPerGrade: Map<number, PerGrade>;\r\n\r\n\tavgFTEPerGrade: Map<number, PerGrade>;\r\n\r\n\tpaidDays: number;\r\n\r\n\tcorDays: number;\r\n\r\n\tcor: number;\r\n\r\n\texternalRevenue: number;\r\n\r\n\tinternalRevenue: number;\r\n\r\n\trevenue: number;\r\n\r\n\tarve: number;\r\n\r\n\turve: number;\r\n    \r\n    probabilites: ProbabilityRecord[];\r\n\r\n    nonBillableDays: number;\r\n\r\n    nonForecastedDays: number;\r\n\r\n    constructor() {\r\n        this.nonBillableDays = 0;\r\n        this.nonForecastedDays = 0;\r\n\t\tthis.corDays = 0;\r\n        this.arve = 0;\r\n\t\tthis.urve = 0;\r\n\t\tthis.revenue = 0;\r\n\t\tthis.internalRevenue = 0;\r\n\t\tthis.vacationDays = 0;\r\n\t\tthis.externalRevenue = 0;\r\n\t\tthis.paidDays = 0;\r\n\t\tthis.billableDays = 0;\r\n\t\tthis.cor = 0;\r\n        this.projectDays = 0;\r\n        this.probabilites = [];\r\n\t\tthis.avgVacationDaysPerGrade = new Map();\r\n\t\tthis.avgFTEPerGrade = new Map();\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 36
            },
            "properties": [
                {
                    "name": "arve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "avgFTEPerGrade",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | PerGrade>",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "avgVacationDaysPerGrade",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | PerGrade>",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "billableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "cor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "corDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "externalRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "internalRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "nonBillableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "nonForecastedDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "paidDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "probabilites",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProbabilityRecord[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "projectDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "revenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "urve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "vacationDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Project",
            "id": "class-Project-5ce45a0a5f3c075fa10ce68b9fd914c7",
            "file": "src/app/core/interfaces/project.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Project {\r\n\t/**\r\n\t * unique id\r\n\t */\r\n\tid: number;\r\n\r\n\t/**\r\n\t * project code (imported from ctr)\r\n\t */\r\n\tcode?: string;\r\n\r\n\t/**\r\n\t * project name (imported from ctr)\r\n\t */\r\n\tname: string;\r\n\r\n\t/**\r\n\t * customer name (currently not set)\r\n\t */\r\n\tcustomer?: string;\r\n\r\n\t/**\r\n\t * billable default value\r\n\t */\r\n\tbillable?: boolean;\r\n\r\n\t/**\r\n\t * is project mandatory?\r\n\t * If yes: 'Y', if no: 'N'\r\n\t */\r\n\tmandatory: string;\r\n\r\n\t/**\r\n\t * Project type.\r\n\t * 0: default, 1 - xx: special types\r\n\t */\r\n\tprojectType: number;\r\n\r\n\t/**\r\n\t * if project is active or not (default: active)\r\n\t */\r\n\tactive?: boolean;\r\n\r\n\t/**\r\n\t * new project constructor with default values\r\n\t */\r\n\tconstructor() {\r\n\t\tthis.code = '';\r\n\t\tthis.name = '';\r\n\t\tthis.customer = '';\r\n\t\tthis.mandatory = 'N';\r\n\t\tthis.projectType = 0;\r\n\t\tthis.billable = true;\r\n\t\tthis.active = true;\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>new project constructor with default values</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 45,
                "rawdescription": "\n\nnew project constructor with default values\n"
            },
            "properties": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>if project is active or not (default: active)</p>\n",
                    "line": 45,
                    "rawdescription": "\n\nif project is active or not (default: active)\n"
                },
                {
                    "name": "billable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>billable default value</p>\n",
                    "line": 28,
                    "rawdescription": "\n\nbillable default value\n"
                },
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>project code (imported from ctr)</p>\n",
                    "line": 13,
                    "rawdescription": "\n\nproject code (imported from ctr)\n"
                },
                {
                    "name": "customer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>customer name (currently not set)</p>\n",
                    "line": 23,
                    "rawdescription": "\n\ncustomer name (currently not set)\n"
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>unique id</p>\n",
                    "line": 8,
                    "rawdescription": "\n\nunique id\n"
                },
                {
                    "name": "mandatory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>is project mandatory?\nIf yes: &#39;Y&#39;, if no: &#39;N&#39;</p>\n",
                    "line": 34,
                    "rawdescription": "\n\nis project mandatory?\nIf yes: 'Y', if no: 'N'\n"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>project name (imported from ctr)</p>\n",
                    "line": 18,
                    "rawdescription": "\n\nproject name (imported from ctr)\n"
                },
                {
                    "name": "projectType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Project type.\n0: default, 1 - xx: special types</p>\n",
                    "line": 40,
                    "rawdescription": "\n\nProject type.\n0: default, 1 - xx: special types\n"
                }
            ],
            "description": "<p>projects structure (projects that can be assigned to a forecast)</p>\n",
            "rawdescription": "\n\nprojects structure (projects that can be assigned to a forecast)\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProjectHelper",
            "id": "class-ProjectHelper-6209781b4b89d702c67adf186657c2e1",
            "file": "src/app/forecast/components/staffing-overview/staffing-overview.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnInit, OnDestroy, Input, OnChanges, SimpleChange, SimpleChanges, AfterContentInit, AfterViewInit } from \"@angular/core\";\r\n\r\nimport { User } from \"../../../core/interfaces/user\";\r\nimport { Month } from \"../../../core/interfaces/month\";\r\nimport { FcEntry } from \"../../../core/interfaces/fcEntry\";\r\nimport { ForecastService } from \"../../../core/services/forecasts/forecast.service\";\r\nimport { UserService } from \"../../../core/services/user.service\";\r\nimport { DatePipe } from \"@angular/common\";\r\nimport { PageStateService } from \"../../../core/shared/page-state.service\";\r\nimport { MatTooltipModule } from \"@angular/material/tooltip\";\r\nimport { TooltipPosition } from '@angular/material/tooltip';\r\nimport { Subscription } from \"rxjs\";\r\nimport { Project } from \"../../../core/interfaces/project\";\r\nimport { UtilitiesService } from \"../../../core/services/utilities.service\";\r\nimport { parseHostBindings } from \"@angular/compiler\";\r\n\r\nclass ProjectHelper {\r\n    projectId: number;\r\n    days: number;\r\n    projectCode: String;\r\n\r\n    constructor() {\r\n        this.projectId = 0;\r\n        this.days = 0;\r\n        this.projectCode = undefined;\r\n    }\r\n\r\n}\r\n\r\n@Component({\r\n    selector: 'app-staffing-overview',\r\n    templateUrl: './staffing-overview.component.html',\r\n    styleUrls: ['./staffing-overview.component.scss'],\r\n})\r\nexport class StaffingOverviewComponent implements OnInit, OnDestroy, OnChanges {\r\n\r\n    @Input('months') months: Month[];\r\n\r\n    @Input('users') users: User[];\r\n\r\n    /**\r\n      * columns which are displayed\r\n     */\r\n    columnsToDisplay: String[] = [];\r\n\r\n    /**\r\n      * list of all forecast entries for all users\r\n     */\r\n    forecasts: FcEntry[] = [];\r\n\r\n    projects: Project[] = [];\r\n    // allForecast: FcEntry[] = [];\r\n\r\n    projectHelpers: ProjectHelper[] = [];\r\n\r\n    forecastrSubscription: Subscription;\r\n\r\n    isPageReady: boolean = false;\r\n\r\n     isFinished: boolean = false;\r\n    /**\r\n     * constructor for staffing-overview component\r\n     *  @param forecastService\r\n     */\r\n    constructor(\r\n        private forecastService: ForecastService,\r\n        private userService: UserService,\r\n        private datePipe: DatePipe,\r\n        private pageState: PageStateService,\r\n        private utilityService: UtilitiesService\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.pageState.forecastrReady$.subscribe((ready: boolean) => {\r\n            if (ready) {\r\n                this.initStaffing();\r\n            }\r\n        });\r\n\r\n    }\r\n    ngOnChanges(): void {\r\n        this.pageState.forecastrReady$.subscribe((ready: boolean) => {\r\n            if (ready) {\r\n                this.initStaffing();\r\n            }\r\n        });\r\n    }\r\n\r\n    getTotalARVE(month: Month): string {\r\n        let projectDays = 0;\r\n        let totalDays = 0;\r\n        let vacationDays = 0;\r\n\r\n        for (let user of this.users) {\r\n            let forecast: FcEntry = this.forecastService.forecasts.find((fc: FcEntry) => {\r\n                return fc.monthId === month.id && fc.userId === user.id\r\n            });\r\n\r\n            if (user.active) {\r\n                if (user.active.valueOf) {\r\n                    if (forecast) {\r\n                        if (forecast.isRelevant) {\r\n                            if (forecast.projectDays) {\r\n                                projectDays += forecast.projectDays;\r\n                            }\r\n                            if (forecast.vacationDays) {\r\n                                vacationDays += forecast.vacationDays;\r\n                            }\r\n                            if (forecast.totalDays) {\r\n                                totalDays += forecast.totalDays;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let arve = (projectDays) / (totalDays - vacationDays);\r\n        return (arve * 100).toFixed(2);\r\n    }\r\n\r\n    getTotalFTE(month: Month): string {\r\n        let fte = 0;\r\n\r\n        for (let user of this.users) {\r\n            let forecast: FcEntry = this.forecastService.forecasts.find((fc: FcEntry) => {\r\n                return fc.monthId === month.id && fc.userId === user.id\r\n            });\r\n\r\n            if (forecast) {\r\n                //if(forecast.isRelevant) {\r\n                fte += forecast.fte;\r\n                //}\r\n            }\r\n        }\r\n\r\n        return fte.toFixed(2);\r\n    }\r\n\r\n    getTeam(user: User): String {\r\n        if (user.id === -1) {\r\n            return \"\";\r\n        }\r\n\r\n        let team = user;\r\n\r\n        if (team === undefined) {\r\n            return \"-\";\r\n        }\r\n\r\n        let parentId = user.parentId;\r\n\r\n        if (parentId === undefined) {\r\n            return team.lastName + \", \" + team.firstName;\r\n        }\r\n\r\n        let parentUser = this.userService.getUser(parentId);\r\n        let parentRole = this.userService.getRole(parentUser.roleId);\r\n\r\n        if (parentUser !== undefined) {\r\n            team = parentUser;\r\n\r\n            while (parentUser !== undefined && parentRole !== undefined && (parentRole.shortcut === \"CSS\" || parentRole.shortcut === \"PDL\")) {\r\n                parentId = parentUser.parentId;\r\n\r\n                if (parentId === undefined) {\r\n                    return team.lastName + \", \" + team.firstName;\r\n                }\r\n\r\n                parentUser = this.userService.getUser(parentId);\r\n\r\n                if (parentUser !== undefined) {\r\n                    parentRole = this.userService.getRole(parentUser.roleId);\r\n                }\r\n\r\n                team = parentUser;\r\n            }\r\n        }\r\n\r\n        if (team === undefined) {\r\n            return \"-\";\r\n        }\r\n\r\n        return team.lastName + \", \" + team.firstName + \" (\" + parentRole.shortcut + \")\";\r\n    }\r\n\r\n    getProjectHelper(forecasts: FcEntry[]): ProjectHelper[] {\r\n\r\n        let projectHelpers: ProjectHelper[] = []\r\n        var check: boolean = false;\r\n        for (let fcEntry of forecasts) {\r\n            for (let project of fcEntry.projects) {\r\n\r\n                let helper = projectHelpers.find((helper: ProjectHelper) => {\r\n                    return helper.projectId === project.projectId;\r\n                });\r\n\r\n                if (helper) {\r\n                    helper.days += project.plannedProjectDays;\r\n                }\r\n                else {\r\n                    let projectTemp: Project = this.forecastService.projects.find((pro: Project) => {\r\n                        return pro.id === project.projectId\r\n                    });\r\n\r\n                    let projectHelperTemp: ProjectHelper = new ProjectHelper;\r\n                    projectHelperTemp.days = project.plannedProjectDays;\r\n                    projectHelperTemp.projectId = project.projectId;\r\n                    projectHelperTemp.projectCode = projectTemp.name.split('-')[0];\r\n                    projectHelpers.push(projectHelperTemp);\r\n                }\r\n            }\r\n        }\r\n        return projectHelpers;\r\n    }\r\n\r\n    getProjects(user: User, viewColumn: String): String {\r\n\r\n        const projectIds = []\r\n        if (user.id === -1) {\r\n            return \"\";\r\n        }\r\n\r\n        let forecasts: FcEntry[] = [];\r\n        let forecast: FcEntry;\r\n\r\n        for (let month of this.months) {\r\n            forecast = this.forecastService.forecasts.find((fc: FcEntry) => {\r\n                return fc.monthId === month.id && fc.userId === user.id\r\n            });\r\n\r\n            if (forecast) {\r\n                forecasts.push(forecast);\r\n            }\r\n            forecast = null;\r\n        }\r\n\r\n        if (forecast) {\r\n            forecasts.push(forecast);\r\n        }\r\n\r\n        let forecastHelpers = this.getProjectHelper(forecasts);\r\n\r\n        if (viewColumn === \"table\") {\r\n            return this.getProjectCode(forecastHelpers);\r\n        }\r\n        else {\r\n            return this.getProjectCodes(forecastHelpers);\r\n        }\r\n    }\r\n\r\n    getProjectCode(forecastHelpers: ProjectHelper[]): String {\r\n\r\n        if (forecastHelpers.length <= 0) {\r\n            return \"no project\";\r\n        }\r\n\r\n        forecastHelpers.sort(function (a, b) {\r\n            return a.days - b.days;\r\n        }).reverse();\r\n\r\n        return forecastHelpers[0].projectCode.toString();\r\n    }\r\n\r\n    getProjectCodes(forecastHelpers: ProjectHelper[]): String {\r\n\r\n        if (forecastHelpers.length <= 0) {\r\n            return \"no project\";\r\n        }\r\n\r\n        forecastHelpers.sort(function (a, b) {\r\n            return a.days - b.days;\r\n        }).reverse();\r\n\r\n        let returnString = \" \";\r\n\r\n        for (let helper of forecastHelpers) {\r\n            if (helper.days !== 0) {\r\n                returnString += helper.projectCode + \"\\n\";\r\n            }\r\n        }\r\n        return returnString;\r\n    }\r\n\r\n    initStaffing(): void {\r\n        this.projects = this.utilityService.getProjects();\r\n        this.columnsToDisplay = [];\r\n        this.columnsToDisplay.push('name');\r\n        this.columnsToDisplay.push('team');\r\n        this.columnsToDisplay.push(\"corp\");\r\n        this.columnsToDisplay.push(\"projects\");\r\n\r\n        for (let month of this.months) {\r\n            this.columnsToDisplay.push(month.name);\r\n        }\r\n\r\n        if (!this.users.find((u: User) => u.id === -1)) {\r\n            let user: User = new User();\r\n            user.id = -1;\r\n            user.firstName = \"\";\r\n            user.lastName = \"Total\";\r\n            user.globalId = -1;\r\n            user.fte = 0;\r\n            this.users.unshift(user);\r\n        }\r\n    }\r\n\r\n    exportCSV(): void {\r\n        this.pageState.showSpinner();\r\n\r\n        let lineEnding = \"\\r\\n\";\r\n        let header: string = \"Employee;Team;Corp Id;\" + this.months.map(x => x.name + \" ARVE;\" + x.name + \" FTE\").join(\";\") + lineEnding;\r\n\r\n        let body = \"\";\r\n\r\n        let teams = new Map<string, User[]>();\r\n\r\n        for (let u of this.users) {\r\n            if (u.id === -1) {\r\n                continue;\r\n            }\r\n\r\n            let team = this.getTeam(u);\r\n            let teamContent: User[] = teams.get(team.toString());\r\n\r\n            if (teamContent === undefined) {\r\n                teams = teams.set(team.toString(), [u]);\r\n            } else {\r\n                teamContent.push(u);\r\n                teams = teams.set(team.toString(), teamContent);\r\n            }\r\n        }\r\n\r\n        let teamNames = Array.from(teams.keys());\r\n\r\n        for (let team of teamNames) {\r\n            body += team + lineEnding;\r\n            body += header;\r\n            body += teams.get(team).map(u => u.lastName + \", \" + u.firstName + \";\" +\r\n                team + \";\" +\r\n                u.globalId.toString() + \";\" +\r\n                this.months.map(x => this.parseForCSV(this.getMonthARVEFromPerson(x, u), 100, 4, 4) + \";\" +\r\n                    this.parseForCSV(this.getMonthFTEFromPerson(x, u), 1, 0)).join(\";\")).join(lineEnding);\r\n            body += lineEnding + lineEnding;\r\n        }\r\n        //summary\r\n        body += \"Summary\" + lineEnding;\r\n        body += this.months.map(x => x.name + \" ARVE;\" + x.name + \" FTE\").join(\";\") + lineEnding;\r\n        body += this.months.map(x => this.getTotalARVE(x) + \";\" + this.getTotalFTE(x)).join(\";\") + lineEnding;\r\n\r\n        const data = body;\r\n        const blob: Blob = new Blob([data], { type: \"text/csv\" });\r\n        const filename: string = this.datePipe.transform(new Date(), \"yyyyMMdd\") + \"-AllOverview.csv\";\r\n\r\n        this.pageState.hideSpinner();\r\n\r\n        let navigator: any = window.navigator;\r\n        //For IE\r\n        if (navigator.msSaveOrOpenBlob) {\r\n            navigator.msSaveOrOpenBlob(blob, filename);\r\n        //For any other browser\r\n        } else {\r\n            const url: string = window.URL.createObjectURL(blob);\r\n\r\n            let a: HTMLAnchorElement = document.createElement(\"a\");\r\n            a.href = url;\r\n            a.download = filename;\r\n\r\n            document.body.appendChild(a);\r\n            a.click();\r\n            document.body.removeChild(a);\r\n            window.URL.revokeObjectURL(url);\r\n        }\r\n    }\r\n\r\n    parseForCSV(toParse: string, div: number, minPrecision: number = 0, maxPrecision: number = 2): string {\r\n        if (toParse == \"-\") {\r\n            return \"0\";\r\n        }\r\n\r\n        let n = parseFloat(toParse) / div;\r\n        return n.toLocaleString(\"de\", { minimumFractionDigits: minPrecision, maximumFractionDigits: maxPrecision}).replace(\".\", \"\");\r\n    }\r\n\r\n    getMonthFTEFromPerson(month: Month, user: User): string {\r\n        if (user.id === -1) {\r\n            return this.getTotalFTE(month);\r\n        }\r\n\r\n        let forecast: FcEntry = this.forecastService.forecasts.find((fc: FcEntry) => {\r\n            return fc.monthId === month.id && fc.userId === user.id\r\n        });\r\n\r\n        if (forecast) {\r\n            return forecast.fte.toString();\r\n        } else {\r\n            return user.fte.toString();\r\n        }\r\n    }\r\n\r\n    getMonthARVEFromPerson(month: Month, user: User): string {\r\n        if (user.id === -1) {\r\n            return this.getTotalARVE(month);\r\n        }\r\n\r\n        let forecast: FcEntry = this.forecastService.forecasts.find((fc: FcEntry) => {\r\n            return fc.monthId === month.id && fc.userId === user.id\r\n        });\r\n\r\n        if (forecast) {\r\n            return (forecast.arve * 100).toFixed(2);\r\n        } else {\r\n            return \"-\";\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 20
            },
            "properties": [
                {
                    "name": "days",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "projectCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "projectId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProjectRequest",
            "id": "class-ProjectRequest-c8215c0422127c2b1b7b87133b07c5a4",
            "file": "src/app/core/interfaces/projectRequest.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ProjectRequest {\r\n\r\n    comment: string;\r\n\r\n    projectCode: string;\r\n\r\n    projectName: string;\r\n\r\n    constructor() {\r\n\t\tthis.projectCode = '';\r\n        this.projectName = '';\r\n        this.comment = \"\";\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "properties": [
                {
                    "name": "comment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "projectCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "projectName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SavedMonth",
            "id": "class-SavedMonth-82ca6a3a00d660adf25471ff0d1adcdc",
            "file": "src/app/core/interfaces/savedMonth.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class SavedMonth {\r\n    /**\r\n     * unique system id\r\n     */\r\n    id?: number;\r\n  \r\n    /**\r\n     * Value for whether the month is submitted and saved.\r\n     */\r\n    locked?: boolean;\r\n  \r\n    /**\r\n     * constructor with default values\r\n     */\r\n    constructor() {\r\n      \r\n    }\r\n  }",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor with default values</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13,
                "rawdescription": "\n\nconstructor with default values\n"
            },
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>unique system id</p>\n",
                    "line": 8,
                    "rawdescription": "\n\nunique system id\n"
                },
                {
                    "name": "locked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Value for whether the month is submitted and saved.</p>\n",
                    "line": 13,
                    "rawdescription": "\n\nValue for whether the month is submitted and saved.\n"
                }
            ],
            "description": "<p>saved month data structure</p>\n",
            "rawdescription": "\n\nsaved month data structure\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SubCoDetails",
            "id": "class-SubCoDetails-66aa73f304c9b44b84b8d172a7b66a7d",
            "file": "src/app/core/interfaces/subCoDetails.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class SubCoDetails {\r\n    subcontractorId: number;\r\n    subcontractorTypeId: number;\r\n    subcontractorTypeName: string;\r\n    resourceName: string;\r\n    projectName: string;\r\n    projectId: number;\r\n    customer: string;\r\n    monthId: number;\r\n    forecastId: number;\r\n    manDay: number;\r\n    revenue: number;\r\n    costRate: number;\r\n    cor:number;\r\n    cost: number;\r\n    contribution: number;\r\n    lockState: string;\r\n    cp: number;\r\n    engagementManagerId: number;\r\n    probabilityId: number;\r\n    updated: boolean;\r\n\r\n  /**\r\n     * List of errors if validation was unsuccessful\r\n     */\r\n   errors?: string[];\r\n\r\n    /**\r\n     * if set to true, input fields in fc-entry will be validated instantly (otherwise only when \"Save\" is clicked)\r\n     */\r\n     instantValidation?: boolean;\r\n\r\n    constructor() {\r\n        this.subcontractorId = null;\r\n        this.subcontractorTypeId = null;\r\n        this.subcontractorTypeName = '';\r\n\t      this.resourceName = '';\t\r\n        this.projectName = '';\r\n        this.projectId = null;\r\n        this.customer = '';\r\n        this.monthId = null;\r\n        this.forecastId = null;\r\n        this.manDay = null;\r\n        this.revenue = null;\r\n        this.cor = null;\r\n        this.costRate = null;\r\n        this.cost = null;\r\n        this.contribution = null;\r\n        this.lockState = '';\r\n        this.cp = null;\r\n        this.engagementManagerId = null;\r\n        this.probabilityId = 3;\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 31
            },
            "properties": [
                {
                    "name": "contribution",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "cor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "cost",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "costRate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "cp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "customer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "engagementManagerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "<p>List of errors if validation was unsuccessful</p>\n",
                    "line": 26,
                    "rawdescription": "\n\nList of errors if validation was unsuccessful\n"
                },
                {
                    "name": "forecastId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "instantValidation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>if set to true, input fields in fc-entry will be validated instantly (otherwise only when &quot;Save&quot; is clicked)</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nif set to true, input fields in fc-entry will be validated instantly (otherwise only when \"Save\" is clicked)\n"
                },
                {
                    "name": "lockState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "manDay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "monthId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "probabilityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "projectId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "projectName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "resourceName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "revenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "subcontractorId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "subcontractorTypeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "subcontractorTypeName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "updated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SubCoDetailTotals",
            "id": "class-SubCoDetailTotals-79dfc43216abfb53d56bc32fae2f7487",
            "file": "src/app/core/interfaces/subCoDetailTotals.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { SubCoTotals } from \"./subCoTotals\";\r\n\r\nexport class SubCoDetailTotals{\r\n    monthId: number;\r\n    subcontractorTotals: SubCoTotals;\r\n \r\n    constructor(){\r\n        this.monthId = 0;\r\n        this.subcontractorTotals=null;    \r\n    }\r\n}\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 5
            },
            "properties": [
                {
                    "name": "monthId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "subcontractorTotals",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SubCoTotals",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SubCoFcIntExt",
            "id": "class-SubCoFcIntExt-b63f897ad8b6c30711986f5d5eede0a5",
            "file": "src/app/core/interfaces/subCoFcIntExt.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class SubCoFcIntExt {\r\n    resourceName: string;\r\n    projectCode: string;\r\n    projectName: string;\r\n    engagementManagerId: number;\r\n    engagementManagerName: string;\r\n    customer: string;\r\n    isEasternEurope: boolean;\r\n    manDay: number;\r\n    revenue: number;\r\n    cost: number;\r\n    contribution: number;\r\n    cp: number;\r\n    monthId: number;\r\n    subcontractorId: number;\r\n\r\n    constructor() {\r\n        this.resourceName = \"\";\r\n        this.projectName = \"\";\r\n        this.engagementManagerId = null;\r\n        this.engagementManagerName = \"\";\r\n        this.isEasternEurope = false;\r\n        this.customer = \"\";\r\n        this.revenue = 0;\r\n        this.cost = 0;\r\n        this.contribution = 0;\r\n        this.cp = 0;\r\n        this.manDay = 0;\r\n        this.monthId = 0;\r\n        this.subcontractorId = 0;\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "properties": [
                {
                    "name": "contribution",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "cost",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "cp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "customer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "engagementManagerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "engagementManagerName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "isEasternEurope",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "manDay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "monthId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "projectCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "projectName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "resourceName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "revenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "subcontractorId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SubCoFcOffshore",
            "id": "class-SubCoFcOffshore-73252e8948b160e1907139ee8e858406",
            "file": "src/app/core/interfaces/subCoFcOffshore.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class SubCoFcOffshore{\r\n    totalRevenue: number;\r\n    totalCost: number;\r\n    totalContribution: number;\r\n    totalCp: number;\r\n    projectName: string;\r\n    projectCode: string;\r\n    totalManDays: number;\r\n    engagementManagerName: string;\r\n    monthId: number;\r\n    subcontractorId: number;\r\n\r\n\r\n    constructor(){\r\n        this.totalRevenue = 0;\r\n        this.totalContribution=0;\r\n        this.totalCost = 0;\r\n        this.totalCp = 0;\r\n        this.projectCode= \"\";\r\n        this.projectName= \"\";\r\n        this.totalManDays= 0;\r\n        this.engagementManagerName = \"\";\r\n        this.monthId =0;\r\n        this.subcontractorId = 0;\r\n    }\r\n}\r\n\r\n\r\n\r\n   \r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "properties": [
                {
                    "name": "engagementManagerName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "monthId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "projectCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "projectName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "subcontractorId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "totalContribution",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "totalCost",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "totalCp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "totalManDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "totalRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SubCoPreview",
            "id": "class-SubCoPreview-6aedcb68f654a024e0003088a3d4e4d1",
            "file": "src/app/core/interfaces/subCoPreview.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class SubCoPreview {\r\n    subcontractorId: number;\r\n    subcontractorEmId: number;\r\n    subcontractorTypeId: number;\r\n    subcontractorTypeName: string;\r\n    resourceName: string;\r\n\r\n\r\n    constructor() {\r\n        this.subcontractorId = null;\r\n        this.subcontractorTypeId = null;\r\n        this.subcontractorEmId = null;\r\n        this.subcontractorTypeName = '';\r\n\t    this.resourceName = '';\t\t\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "properties": [
                {
                    "name": "resourceName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "subcontractorEmId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "subcontractorId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "subcontractorTypeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "subcontractorTypeName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SubCoTotals",
            "id": "class-SubCoTotals-3576f63d5fdbb55321ee47e2b4ef33e7",
            "file": "src/app/core/interfaces/subCoTotals.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class SubCoTotals{\r\n    totalRevenueInternal: number;\r\n    totalRevenueExternal: number;\r\n    totalRevenueOffshore: number;\r\n    totalCostInternal: number;\r\n    totalCostExternal: number;\r\n    totalCostOffshore: number;\r\n    averageFTEInternal: number;\r\n    averageFTEExternal: number;\r\n    averageFTEOffshore: number;\r\n    totalCPInternal: number;\r\n    totalCPExternal: number;\r\n    totalCPOffshore: number;\r\n\r\n\r\n\r\n    constructor(){\r\n        this.totalRevenueInternal = 0;\r\n        this.totalRevenueExternal=0;\r\n        this.totalRevenueOffshore = 0;\r\n        this.totalCostInternal = 0;\r\n        this.totalCostExternal = 0;\r\n        this.totalCostOffshore=0;\r\n        this.averageFTEInternal = 0;\r\n        this.averageFTEExternal = 0;\r\n        this.averageFTEOffshore = 0;\r\n        this.totalCPInternal = 0;\r\n        this.totalCPExternal = 0;\r\n        this.totalCPOffshore = 0;\r\n      \r\n    }\r\n}\r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "properties": [
                {
                    "name": "averageFTEExternal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "averageFTEInternal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "averageFTEOffshore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "totalCostExternal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "totalCostInternal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "totalCostOffshore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "totalCPExternal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "totalCPInternal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "totalCPOffshore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "totalRevenueExternal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "totalRevenueInternal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "totalRevenueOffshore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Suggestion",
            "id": "class-Suggestion-f24f373d2f4b1aa478790e0baba58fa0",
            "file": "src/app/core/interfaces/suggestion.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Suggestion {\r\n    projectId: number;\r\n    cor?: number;\r\n    probabilityId?: number;\r\n    externalRevenue?: boolean;\r\n    billable?: boolean;\r\n}",
            "properties": [
                {
                    "name": "billable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "cor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "externalRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "probabilityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "projectId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Summary",
            "id": "class-Summary-d47ee042d50c02e838c5a4f1a38ae44d",
            "file": "src/app/core/interfaces/exportCSV/summary.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Summary {\r\n\r\n  /**\r\n   * Total number of assigned project days (does not include vacation, training, BDD days)\r\n   */\r\n  projectDays: number;\r\n\r\n  /**\r\n   * total vacation days\r\n   */\r\n  vacationDays: number;\r\n\r\n  /**\r\n   * total training days\r\n   */\r\n  trainingDays: number;\r\n\r\n  /**\r\n   * total business development days\r\n   */\r\n  businessDevelopmentDays: number;\r\n\r\n  /**\r\n   * total billable days\r\n   */\r\n  billableDays: number;\r\n\r\n  /**\r\n   * total non-billable days\r\n   */\r\n  nonbillableDays: number;\r\n\r\n  /**\r\n   * toal number of possible working days per month (for all teammembers)\r\n   */\r\n  totalWorkingDays: number;\r\n\r\n  /**\r\n   * average arve per teammember\r\n   */\r\n  arve: number;\r\n\r\n  /**\r\n   * average urve per teammember\r\n   */\r\n  urve: number;\r\n\r\n  /**\r\n   * total return on sales for team\r\n   */\r\n  ros: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "arve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>average arve per teammember</p>\n",
                    "line": 44,
                    "rawdescription": "\n\naverage arve per teammember\n"
                },
                {
                    "name": "billableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>total billable days</p>\n",
                    "line": 29,
                    "rawdescription": "\n\ntotal billable days\n"
                },
                {
                    "name": "businessDevelopmentDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>total business development days</p>\n",
                    "line": 24,
                    "rawdescription": "\n\ntotal business development days\n"
                },
                {
                    "name": "nonbillableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>total non-billable days</p>\n",
                    "line": 34,
                    "rawdescription": "\n\ntotal non-billable days\n"
                },
                {
                    "name": "projectDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Total number of assigned project days (does not include vacation, training, BDD days)</p>\n",
                    "line": 9,
                    "rawdescription": "\n\nTotal number of assigned project days (does not include vacation, training, BDD days)\n"
                },
                {
                    "name": "ros",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>total return on sales for team</p>\n",
                    "line": 54,
                    "rawdescription": "\n\ntotal return on sales for team\n"
                },
                {
                    "name": "totalWorkingDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>toal number of possible working days per month (for all teammembers)</p>\n",
                    "line": 39,
                    "rawdescription": "\n\ntoal number of possible working days per month (for all teammembers)\n"
                },
                {
                    "name": "trainingDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>total training days</p>\n",
                    "line": 19,
                    "rawdescription": "\n\ntotal training days\n"
                },
                {
                    "name": "urve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>average urve per teammember</p>\n",
                    "line": 49,
                    "rawdescription": "\n\naverage urve per teammember\n"
                },
                {
                    "name": "vacationDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>total vacation days</p>\n",
                    "line": 14,
                    "rawdescription": "\n\ntotal vacation days\n"
                }
            ],
            "description": "<p>Entry summary structure for csv export</p>\n",
            "rawdescription": "\n\nEntry summary structure for csv export\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Team",
            "id": "class-Team-43115b3b5ba101534a1246e0d4d1250e",
            "file": "src/app/core/interfaces/team.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Team {\r\n  /**\r\n   * unique id\r\n   */\r\n  teamId: number;\r\n\r\n  /**\r\n   * teamlead id\r\n   */\r\n  teamLeadId: number;\r\n\r\n  /**\r\n   * team name\r\n   */\r\n  name: string;\r\n\r\n  parentTeamId?: number;\r\n  countryCode?: string;\r\n\r\n  /**\r\n   * new team constructor with default values\r\n   */\r\n  constructor() {\r\n    this.teamId = undefined;\r\n    this.name = '';\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>new team constructor with default values</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 21,
                "rawdescription": "\n\nnew team constructor with default values\n"
            },
            "properties": [
                {
                    "name": "countryCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>team name</p>\n",
                    "line": 18,
                    "rawdescription": "\n\nteam name\n"
                },
                {
                    "name": "parentTeamId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "teamId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>unique id</p>\n",
                    "line": 8,
                    "rawdescription": "\n\nunique id\n"
                },
                {
                    "name": "teamLeadId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>teamlead id</p>\n",
                    "line": 13,
                    "rawdescription": "\n\nteamlead id\n"
                }
            ],
            "description": "<p>team structure</p>\n",
            "rawdescription": "\n\nteam structure\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "User",
            "id": "class-User-1f9e0958be64a01b363d43f763bbe7b2",
            "file": "src/app/core/interfaces/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class User {\r\n    /**\r\n     * unique system id\r\n     */\r\n    id: number;\r\n\r\n    /**\r\n     * global capgemini id\r\n     */\r\n    globalId: number;\r\n    firstName: string;\r\n    lastName: string;\r\n    email: string;\r\n\r\n    /**\r\n     * password: only used for creating new user\r\n     */\r\n    password?: string;\r\n\r\n    /**\r\n     * role id: permissions are dependent on role\r\n     */\r\n    roleId: number;\r\n    permission: number;\r\n\r\n    /**\r\n     * parentId = id of teamlead\r\n     */\r\n    parentId: number;\r\n\r\n    /**\r\n     * gradeId = id of current position (e.g. Consultant)\r\n     */\r\n    gradeId?: number;\r\n\r\n    /**\r\n     * fte (full time equivalent): Working hours of employees per week. If 40 hours: fte = 1; if 30 hours: fte = 0.75, if 20 hours: fte = 0.50\r\n     */\r\n    fte: number;\r\n\r\n    /**\r\n     * inactive users cannot loggin anymore\r\n     */\r\n    active?: boolean;\r\n\r\n    /**\r\n     * has admin permissions\r\n     */\r\n    admin?: boolean;\r\n\r\n    /**\r\n     * true if user loggs in for first time or has not logged in for 2 months\r\n     */\r\n    showgetstarted?: boolean;\r\n\r\n    startDate?: string;\r\n\r\n    endDate?: string;\r\n\r\n    prodUnitCode? : string;\r\n\r\n    /**\r\n     * new user constructor with default values\r\n     */\r\n    constructor() {\r\n        this.startDate = null;\r\n        this.endDate = null;\r\n\t    this.globalId = null;\r\n\t\tthis.firstName = '';\r\n        this.lastName = '';\r\n        this.email = '';\r\n        this.password = '';\r\n        this.roleId = null;\r\n        this.parentId = null;\r\n        this.gradeId = null;\r\n        this.fte = 1;\r\n        this.admin = false;\r\n        this.active = true;\r\n        this.prodUnitCode = null;\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>new user constructor with default values</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 63,
                "rawdescription": "\n\nnew user constructor with default values\n"
            },
            "properties": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>inactive users cannot loggin anymore</p>\n",
                    "line": 47,
                    "rawdescription": "\n\ninactive users cannot loggin anymore\n"
                },
                {
                    "name": "admin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>has admin permissions</p>\n",
                    "line": 52,
                    "rawdescription": "\n\nhas admin permissions\n"
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "endDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "fte",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>fte (full time equivalent): Working hours of employees per week. If 40 hours: fte = 1; if 30 hours: fte = 0.75, if 20 hours: fte = 0.50</p>\n",
                    "line": 42,
                    "rawdescription": "\n\nfte (full time equivalent): Working hours of employees per week. If 40 hours: fte = 1; if 30 hours: fte = 0.75, if 20 hours: fte = 0.50\n"
                },
                {
                    "name": "globalId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>global capgemini id</p>\n",
                    "line": 13,
                    "rawdescription": "\n\nglobal capgemini id\n"
                },
                {
                    "name": "gradeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>gradeId = id of current position (e.g. Consultant)</p>\n",
                    "line": 37,
                    "rawdescription": "\n\ngradeId = id of current position (e.g. Consultant)\n"
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>unique system id</p>\n",
                    "line": 8,
                    "rawdescription": "\n\nunique system id\n"
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "parentId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>parentId = id of teamlead</p>\n",
                    "line": 32,
                    "rawdescription": "\n\nparentId = id of teamlead\n"
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>password: only used for creating new user</p>\n",
                    "line": 21,
                    "rawdescription": "\n\npassword: only used for creating new user\n"
                },
                {
                    "name": "permission",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "prodUnitCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "roleId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>role id: permissions are dependent on role</p>\n",
                    "line": 26,
                    "rawdescription": "\n\nrole id: permissions are dependent on role\n"
                },
                {
                    "name": "showgetstarted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>true if user loggs in for first time or has not logged in for 2 months</p>\n",
                    "line": 57,
                    "rawdescription": "\n\ntrue if user loggs in for first time or has not logged in for 2 months\n"
                },
                {
                    "name": "startDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 59
                }
            ],
            "description": "<p>user structure</p>\n",
            "rawdescription": "\n\nuser structure\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AddMonthDialog",
            "id": "component-AddMonthDialog-f0c7130b0221adb79792e4ea5dcfd582",
            "file": "src/app/admin/dialogs/add-month/add-month.dialog.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: DateAdapter, useClass: AppDateAdapter }"
                }
            ],
            "styleUrls": [
                "../../admin.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-month.dialog.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "line": 46,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<AddMonthDialog>",
                    "optional": false,
                    "line": 45,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "monthForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "<p>month form group for create + update</p>\n",
                    "line": 36,
                    "rawdescription": "\n\nmonth form group for create + update\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "chosenMonthHandler",
                    "args": [
                        {
                            "name": "normalizedDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "datepicker",
                            "type": "MatDatepicker<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets form value after datepicker update (when closed after month selection)\n",
                    "description": "<p>Sets form value after datepicker update (when closed after month selection)</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2199,
                                "end": 2213,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "normalizedDate"
                            },
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2193,
                                "end": 2198,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2227,
                                "end": 2237,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "datepicker"
                            },
                            "type": "MatDatepicker<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2221,
                                "end": 2226,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "datepickerClosed",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets form value after datepicker update\n",
                    "description": "<p>Sets form value after datepicker update</p>\n"
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalled on 'Cancel' click\n",
                    "description": "<p>Called on &#39;Cancel&#39; click</p>\n"
                },
                {
                    "name": "onSaveClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalled on 'Save' click\n",
                    "description": "<p>Called on &#39;Save&#39; click</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Month Dialog component for creating + updating months</p>\n",
            "rawdescription": "\n\nMonth Dialog component for creating + updating months\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, Injectable } from '@angular/core';\r\nimport { formatDate } from '@angular/common';\r\nimport { DateAdapter, NativeDateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material/core';\r\nimport { MatDatepicker } from '@angular/material/datepicker';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\r\n\r\n/**\r\n * Customized DateAdapter to show Date in the correct format\r\n */\r\n@Injectable()\r\nexport class AppDateAdapter extends NativeDateAdapter {\r\n  /**\r\n   * date format method\r\n   * @param date\r\n   * @param displayFormat\r\n   */\r\n  format(date: Date, displayFormat: Object): string {\r\n      return formatDate(date, 'MMMM yyyy', 'en');\r\n  }\r\n}\r\n\r\n/**\r\n * Month Dialog component for creating + updating months\r\n */\r\n@Component({\r\n  templateUrl: './add-month.dialog.html',\r\n  providers: [\r\n    {provide: DateAdapter, useClass: AppDateAdapter},\r\n  ],\r\n  styleUrls: ['../../admin.component.scss'],\r\n}) export class AddMonthDialog {\r\n  /**\r\n   * month form group for create + update\r\n   */\r\n  monthForm: FormGroup;\r\n\r\n  /**\r\n   * Initializes month formgroup\r\n   * @param dialogRef\r\n   * @param data\r\n   * @param fb\r\n   */\r\n\tconstructor(\r\n    public dialogRef: MatDialogRef<AddMonthDialog>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    private fb: FormBuilder,\r\n  ) {\r\n    this.monthForm = this.fb.group({\r\n      id: this.fb.control(data.month.id),\r\n      name: this.fb.control(data.month.name, Validators.required),\r\n      workingdays: this.fb.control(data.month.workingdays, [Validators.required, Validators.min(0), Validators.max(31)]),\r\n      time: this.fb.control(data.month.time, Validators.required),\r\n      active: this.fb.control((typeof data.month.active !== 'undefined') ? data.month.active : true),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Called on 'Cancel' click\r\n   */\r\n  onNoClick(): void {\r\n    this.dialogRef.close(false);\r\n  }\r\n\r\n  /**\r\n   * Called on 'Save' click\r\n   */\r\n  onSaveClick(): void {\r\n    this.dialogRef.close(this.monthForm.getRawValue());\r\n  }\r\n\r\n  /**\r\n   * Sets form value after datepicker update (when closed after month selection)\r\n   * @param normalizedDate\r\n   * @param datepicker\r\n   */\r\n  chosenMonthHandler(normalizedDate: Date, datepicker: MatDatepicker<any>): void {\r\n    this.monthForm.get('time').setValue(normalizedDate);\r\n    datepicker.close();\r\n  }\r\n\r\n  /**\r\n   * Sets form value after datepicker update\r\n   */\r\n  datepickerClosed(): void {\r\n    let date: Date = new Date(this.monthForm.get('time').value);\r\n    date.setDate(1);\r\n    this.monthForm.get('time').setValue(new Date((date.getTime() - (date.getTimezoneOffset() * 60000))).toISOString().slice(0, -5));\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../assets/styles/variables.scss';\r\n\r\n.mat-sidenav-container{\r\n\tbackground: transparent;\r\n\tmargin: 0 10px;\r\n}\r\n\r\n.mat-drawer {\r\n\tdisplay: none;\r\n\tbackground: transparent;\r\n\twidth: 50px;\r\n\tborder-right-width: 0px;\r\n}\r\n\r\n.nav-button-container {\r\n\tmargin: 4px 0;\r\n\r\n\t.mat-icon-button {\r\n\t\twidth: 50px;\r\n\t\theight: 50px;\r\n\t\tmargin-bottom: 10px;\r\n\t\tpadding: 0;\r\n\r\n\t\t&.active, &.active .mat-icon {\r\n\t\t\tcolor: map-get($font-colors, blue);\r\n\t\t}\r\n\t}\r\n\r\n\t.mat-icon {\r\n\t\twidth: 1em;\r\n\t\theight: 1em;\r\n\t\tline-height: 1rem;\r\n\t\tfont-size: 2rem;\r\n\t}\r\n}\r\n\r\n\r\ntd.mat-cell:first-of-type, td.mat-footer-cell:first-of-type, th.mat-header-cell:first-of-type {\r\n\tpadding-left: 0;\r\n}\r\n\r\ntd.mat-cell:last-of-type, td.mat-footer-cell:last-of-type, th.mat-header-cell:last-of-type {\r\n\tpadding-right: 0;\r\n}\r\n\r\n.action-button {\r\n\twidth: 50px;\r\n\ttext-align: center;\r\n}\r\n\r\n.flag-button {\r\n\twidth: 70px;\r\n\ttext-align: center;\r\n}\r\n\r\n.button-row {\r\n\tmargin: 50px;\r\n\r\n\t.mat-raised-button {\r\n\t\tposition: fixed;\r\n\t\tz-index: 100;\r\n\t\tbottom: 32px;\r\n\t\tright: 30px;\r\n\t\tbox-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\r\n\t}\r\n}\r\n\r\n.mat-form-field {\r\n\tmargin: 5px 0;\r\n}\r\n\r\ntr.mat-row.inactive td {\r\n\tcolor: map-get($font-colors, grey-label);\r\n\r\n\t.flag-inactive {\r\n\t\tbackground: map-get($font-colors, red);\r\n\t\tcolor: map-get($font-colors, white);\r\n\t\tpadding: 3px 6px;\r\n\t\tborder-radius: 4px;\r\n\t}\r\n}\r\n\r\n.mat-table tr.mat-row:last-child td {\r\n\tborder-bottom: 0;\r\n}",
                    "styleUrl": "../../admin.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Initializes month formgroup</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddMonthDialog>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "rawdescription": "\n\nInitializes month formgroup\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1193,
                            "end": 1202,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialogRef"
                        },
                        "type": "MatDialogRef<AddMonthDialog>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1187,
                            "end": 1192,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1216,
                            "end": 1220,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "data"
                        },
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1210,
                            "end": 1215,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1234,
                            "end": 1236,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "fb"
                        },
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1228,
                            "end": 1233,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "templateData": "<h2 mat-dialog-title>{{data.month.name ? data.month.name : 'New Month'}}</h2>\r\n<div class=\"dialog-content\" [formGroup]=\"monthForm\" >\r\n\r\n\t<mat-form-field appearance=\"outline\">\r\n\t\t<mat-label>Name</mat-label>\r\n\t\t<input type=\"text\" matInput formControlName=\"name\">\r\n\t</mat-form-field>\r\n\r\n\t<mat-form-field appearance=\"outline\">\r\n\t\t<mat-label>Working days</mat-label>\r\n\t\t<input type=\"number\" matInput formControlName=\"workingdays\">\r\n\t</mat-form-field>\r\n\r\n\t<mat-form-field>\r\n\t\t<input matInput [matDatepicker]=\"dp\" placeholder=\"Month\" formControlName=\"time\" disabled (click)=\"dp.open()\">\r\n\t\t<mat-datepicker-toggle matSuffix [for]=\"dp\"></mat-datepicker-toggle>\r\n\t\t<mat-datepicker #dp startView=\"year\" disabled=\"false\" (monthSelected)=\"chosenMonthHandler($event, dp)\" (closed)=\"datepickerClosed()\"></mat-datepicker>\r\n\t</mat-form-field>\r\n\r\n</div>\r\n<mat-dialog-actions>\r\n\t<button mat-button (click)=\"onNoClick()\">Cancel</button>\r\n\t<button mat-button (click)=\"onSaveClick()\" [disabled]=\"!monthForm.valid\">Save</button>\r\n</mat-dialog-actions>"
        },
        {
            "name": "AddProjectDialog",
            "id": "component-AddProjectDialog-997cc8ea3a22aa49ad173cadbaa98d4d",
            "file": "src/app/admin/dialogs/add-project/add-project.dialog.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./add-project.dialog.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "line": 26,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<AddProjectDialog>",
                    "optional": false,
                    "line": 25,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "projectForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "<p>project formgroup for create + update</p>\n",
                    "line": 15,
                    "rawdescription": "\n\nproject formgroup for create + update\n"
                },
                {
                    "name": "projectTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalled on 'Cancel' click\n",
                    "description": "<p>Called on &#39;Cancel&#39; click</p>\n"
                },
                {
                    "name": "onProjectTypeUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSaveClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalled on 'Save' Click\n",
                    "description": "<p>Called on &#39;Save&#39; Click</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Project Dialog component for creating + updating projects</p>\n",
            "rawdescription": "\n\nProject Dialog component for creating + updating projects\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { environment } from '../../../../environments/environment';\r\n\r\n/**\r\n * Project Dialog component for creating + updating projects\r\n */\r\n@Component({\r\n\ttemplateUrl: './add-project.dialog.html',\r\n}) export class AddProjectDialog {\r\n  /**\r\n   * project formgroup for create + update\r\n   */\r\n  projectForm: FormGroup;\r\n  projectTypes: any;\r\n\r\n  /**\r\n   * constructor to initialize project form group\r\n   * @param dialogRef\r\n   * @param data\r\n   * @param fb\r\n   */\r\n  constructor(\r\n    public dialogRef: MatDialogRef<AddProjectDialog>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    private fb: FormBuilder,\r\n  ) {\r\n    this.projectTypes = environment.projectTypes;\r\n\r\n    this.projectForm = this.fb.group({\r\n      id: this.fb.control(data.project.id),\r\n      code: this.fb.control(data.project.code),\r\n      name: this.fb.control(data.project.name, Validators.required),\r\n      mandatory: this.fb.control(data.project.mandatory, Validators.required),\r\n      billable: this.fb.control((typeof data.project.billable !== 'undefined' ? data.project.billable : true), Validators.required),\r\n      projectType: this.fb.control(data.project.projectType, Validators.required),\r\n      active: this.fb.control((typeof data.project.active !== 'undefined') ? data.project.active : true),\r\n    });\r\n\r\n    if (data.project.projectType === 4 || data.project.projectType === 5) {\r\n      this.projectForm.get('billable').disable();\r\n    }\r\n  }\r\n\r\n  onProjectTypeUpdate(): void {\r\n    if (this.projectForm.get('projectType').value === 4 || this.projectForm.get('projectType').value === 5) {\r\n      this.projectForm.get('billable').setValue(false);\r\n      this.projectForm.get('billable').disable();\r\n    } else {\r\n      this.projectForm.get('billable').enable();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called on 'Cancel' click\r\n   */\r\n  onNoClick(): void {\r\n    this.dialogRef.close(false);\r\n  }\r\n\r\n  /**\r\n   * Called on 'Save' Click\r\n   */\r\n  onSaveClick(): void {\r\n    this.dialogRef.close(this.projectForm.getRawValue());\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor to initialize project form group</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddProjectDialog>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "rawdescription": "\n\nconstructor to initialize project form group\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 613,
                            "end": 622,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialogRef"
                        },
                        "type": "MatDialogRef<AddProjectDialog>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 607,
                            "end": 612,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 636,
                            "end": 640,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "data"
                        },
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 630,
                            "end": 635,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 654,
                            "end": 656,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "fb"
                        },
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 648,
                            "end": 653,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "templateData": "<h2 mat-dialog-title>{{data.project.name ? data.project.name : 'New Project'}}</h2>\r\n<div class=\"dialog-content\" [formGroup]=\"projectForm\">\r\n\t<mat-form-field appearance=\"outline\">\r\n\t\t<mat-label>Code</mat-label>\r\n\t\t<input type=\"text\" matInput formControlName=\"code\">\r\n\t</mat-form-field>\r\n\r\n\t<mat-form-field appearance=\"outline\">\r\n\t\t<mat-label>Name</mat-label>\r\n\t\t<input type=\"text\" matInput formControlName=\"name\">\r\n\t</mat-form-field>\r\n\r\n\t<mat-form-field appearance=\"outline\">\r\n\t\t<mat-label>Is project mandatory?</mat-label>\r\n\t\t<mat-select name=\"project-mandatory\" formControlName=\"mandatory\">\r\n\t\t\t<mat-option value='N'>Not Mandatory</mat-option>\r\n\t\t\t<mat-option value='Y'>Mandatory</mat-option>\r\n\t\t</mat-select>\r\n\t</mat-form-field>\r\n\r\n\t<mat-form-field appearance=\"outline\">\r\n\t\t<mat-label>Project-Type</mat-label>\r\n\t\t<mat-select name=\"project-type\" formControlName=\"projectType\" (selectionChange)=\"onProjectTypeUpdate()\">\r\n\t\t\t<mat-option [value]='projectTypes.default'>Default</mat-option>\r\n\t\t\t<mat-option [value]='projectTypes.nonbillable'>Non-billable / No COR</mat-option>\r\n\t\t\t<mat-option [value]='projectTypes.businessdays'>Special Type - Business Development Days</mat-option>\r\n\t\t\t<mat-option [value]='projectTypes.trainingdays'>Special Type - Training</mat-option>\r\n\t\t\t<mat-option [value]='projectTypes.vacationdays'>Special Type - Vacation</mat-option>\r\n\t\t\t<mat-option [value]='projectTypes.benchdays'>Special Type - Bench-Time</mat-option>\r\n\t\t</mat-select>\r\n\t</mat-form-field>\r\n\r\n\t<mat-form-field appearance=\"outline\">\r\n\t\t<mat-label>Is project default billable?</mat-label>\r\n\t\t<mat-select name=\"project-billable\" formControlName=\"billable\">\r\n\t\t\t<mat-option [value]='true'>Billable</mat-option>\r\n\t\t\t<mat-option [value]='false'>Non-billable</mat-option>\r\n\t\t</mat-select>\r\n\t</mat-form-field>\r\n</div>\r\n<mat-dialog-actions>\r\n\t<button mat-button (click)=\"onNoClick()\">Cancel</button>\r\n\t<button mat-button (click)=\"onSaveClick()\" [disabled]=\"!projectForm.valid\">Save</button>\r\n</mat-dialog-actions>"
        },
        {
            "name": "AddSubcoDialog",
            "id": "component-AddSubcoDialog-5527d42aa42dfb48cb62035f77e53db3",
            "file": "src/app/admin/dialogs/add-subco/add-subco.dialog.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./add-subco.dialog.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-subco.dialog.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SubCoPreview",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<AddSubcoDialog>",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "subco",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SubCoPreview[]",
                    "optional": false,
                    "description": "<p>list of user (for teamlead select)</p>\n",
                    "line": 36,
                    "rawdescription": "\n\nlist of user (for teamlead select)\n"
                },
                {
                    "name": "subcoForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "<p>subco formgroup for create + update</p>\n",
                    "line": 21,
                    "rawdescription": "\n\nsubco formgroup for create + update\n"
                },
                {
                    "name": "subcoSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>subco list subscription</p>\n",
                    "line": 26,
                    "rawdescription": "\n\nsubco list subscription\n"
                },
                {
                    "name": "types",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SubCoType[]",
                    "optional": false,
                    "description": "<p>list of types (for type select)</p>\n",
                    "line": 41,
                    "rawdescription": "\n\nlist of types (for type select)\n"
                },
                {
                    "name": "typeSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>subco list subscription</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nsubco list subscription\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnsubscribe services when component gets destroyed\n",
                    "description": "<p>Unsubscribe services when component gets destroyed</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCancelClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalled on 'Cancel' click\n",
                    "description": "<p>Called on &#39;Cancel&#39; click</p>\n"
                },
                {
                    "name": "onSaveClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalled on 'Save' click\n",
                    "description": "<p>Called on &#39;Save&#39; click</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Inject, OnDestroy } from '@angular/core';\r\nimport { User } from \"../../../core/interfaces/user\";\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from \"@angular/material/dialog\";\r\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\r\nimport { SubCoPreview } from '../../../core/interfaces/subCoPreview';\r\nimport { Subscription } from 'rxjs';\r\nimport { SubCoService } from '../../../core/services/subCo.service';\r\nimport { SubCoType } from '../../../core/interfaces/subCoType';\r\n\r\n@Component({\r\n  templateUrl: './add-subco.dialog.html',\r\n  styleUrls: ['./add-subco.dialog.scss']\r\n})\r\nexport class AddSubcoDialog implements OnInit, OnDestroy {\r\n\r\n  //TODO: put here subco list\r\n  //users: Subco[];\r\n  /**\r\n    * subco formgroup for create + update\r\n    */\r\n  subcoForm: FormGroup;\r\n\r\n  /**\r\n    * subco list subscription\r\n    */\r\n  subcoSubscription: Subscription;\r\n\r\n  /**\r\n    * subco list subscription\r\n    */\r\n  typeSubscription: Subscription;\r\n\r\n  /**\r\n    * list of user (for teamlead select)\r\n   */\r\n  subco: SubCoPreview[];\r\n\r\n  /**\r\n     * list of types (for type select)\r\n     */\r\n   types: SubCoType[];\r\n\r\n  constructor(public dialogRef: MatDialogRef<AddSubcoDialog>,\r\n    @Inject(MAT_DIALOG_DATA) public data: SubCoPreview,\r\n    private subcoService: SubCoService,\r\n    private fb: FormBuilder) { \r\n\r\n      if (data.subcontractorId !== null) {\r\n        this.subcoForm = this.fb.group({\r\n          subcontractorId: fb.control(data.subcontractorId),\r\n          subcontractorTypeId: fb.control(data.subcontractorTypeId, Validators.required),\r\n          resourceName: fb.control(data.resourceName, Validators.required),\r\n          subcontractorEmId: fb.control(data.subcontractorEmId, Validators.required),\r\n        });\r\n      } else {\r\n        this.subcoForm = this.fb.group({\r\n          subcontractorTypeId: fb.control(data.subcontractorTypeId, Validators.required),\r\n          resourceName: fb.control(data.resourceName, Validators.required),\r\n          subcontractorEmId: fb.control(data.subcontractorEmId, Validators.required),\r\n        });\r\n      }\r\n    }\r\n\r\n  ngOnInit(): void {\r\n    this.subcoService.initializeAllSubCoPreviews();\r\n    this.subcoService.initializeTypes();\r\n\r\n    this.subcoSubscription = this.subcoService.allSubCoPreviews$\r\n        .subscribe((subco: SubCoPreview[]) => {\r\n          this.subco = subco;\r\n        });\r\n\r\n      this.typeSubscription = this.subcoService.types$\r\n        .subscribe((types: SubCoType[]) => {\r\n          this.types = types;     \r\n        }); \r\n  }\r\n\r\n  /**\r\n     * Called on 'Cancel' click\r\n     */\r\n   onCancelClick(): void {\r\n    this.dialogRef.close(false);\r\n  }\r\n\r\n  /**\r\n   * Called on 'Save' click\r\n   */\r\n  onSaveClick(): void {\r\n    this.dialogRef.close(this.subcoForm.getRawValue());\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe services when component gets destroyed\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.subcoSubscription.unsubscribe();\r\n    this.typeSubscription.unsubscribe();\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form-field-toggle {\r\n    margin: 10px;\r\n}",
                    "styleUrl": "./add-subco.dialog.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddSubcoDialog>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "SubCoPreview",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "subcoService",
                        "type": "SubCoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddSubcoDialog>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "SubCoPreview",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "subcoService",
                        "type": "SubCoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<h2 mat-dialog-title>Add Subcontractor</h2>\r\n<!--<form [formGroup]=\"userForm\" >-->\r\n<form [formGroup]=\"subcoForm\">\r\n  <div class=\"dialog-content\" >\r\n\r\n    <mat-form-field appearance=\"outline\">\r\n      <mat-label>Name</mat-label>\r\n        <input matInput formControlName=\"resourceName\" type=\"text\" required />\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\">\r\n      <mat-label>Engagement Manager Id</mat-label>\r\n        <input matInput formControlName=\"subcontractorEmId\" type=\"number\" required />\r\n    </mat-form-field>\r\n\r\n    <mat-form-field  appearance=\"outline\">\r\n      <mat-label>Choose a type</mat-label>   \r\n      <mat-select formControlName=\"subcontractorTypeId\" required>\r\n        <ng-container *ngFor=\"let t of types\">\r\n          <mat-option [value]=\"t.subcontractorTypeId\">{{t.subcontractorTypeName}}</mat-option>\r\n        </ng-container> \r\n      </mat-select>\r\n    </mat-form-field>\r\n\r\n  </div>\r\n  <mat-dialog-actions>\r\n    <button mat-button (click)=\"onCancelClick()\">Cancel</button>\r\n    <button mat-button (click)=\"onSaveClick()\" [disabled]=\"subcoForm.invalid\">Save</button>\r\n  </mat-dialog-actions>\r\n</form> \r\n"
        },
        {
            "name": "AddSubcoDialogEm",
            "id": "component-AddSubcoDialogEm-89bbfcd40cbc2e7220fcea7266195215",
            "file": "src/app/forecast/dialogs/add-subco-em/add-subco-em.dialog.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./add-subco-em.dialog.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-subco-em.dialog.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SubCoPreview",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<AddSubcoDialogEm>",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "subco",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SubCoPreview[]",
                    "optional": false,
                    "description": "<p>list of user (for teamlead select)</p>\n",
                    "line": 37,
                    "rawdescription": "\n\nlist of user (for teamlead select)\n"
                },
                {
                    "name": "subcoForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "<p>subco formgroup for create + update</p>\n",
                    "line": 22,
                    "rawdescription": "\n\nsubco formgroup for create + update\n"
                },
                {
                    "name": "subcoSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>subco list subscription</p>\n",
                    "line": 27,
                    "rawdescription": "\n\nsubco list subscription\n"
                },
                {
                    "name": "types",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SubCoType[]",
                    "optional": false,
                    "description": "<p>list of types (for type select)</p>\n",
                    "line": 42,
                    "rawdescription": "\n\nlist of types (for type select)\n"
                },
                {
                    "name": "typeSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>subco list subscription</p>\n",
                    "line": 32,
                    "rawdescription": "\n\nsubco list subscription\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnsubscribe services when component gets destroyed\n",
                    "description": "<p>Unsubscribe services when component gets destroyed</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCancelClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalled on 'Cancel' click\n",
                    "description": "<p>Called on &#39;Cancel&#39; click</p>\n"
                },
                {
                    "name": "onSaveClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalled on 'Save' click\n",
                    "description": "<p>Called on &#39;Save&#39; click</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Inject, OnDestroy } from '@angular/core';\r\nimport { User } from \"../../../core/interfaces/user\";\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from \"@angular/material/dialog\";\r\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\r\nimport { SubCoPreview } from '../../../core/interfaces/subCoPreview';\r\nimport { Subscription } from 'rxjs';\r\nimport { SubCoService } from '../../../core/services/subCo.service';\r\nimport { SubCoType } from '../../../core/interfaces/subCoType';\r\n\r\n@Component({\r\n  templateUrl: './add-subco-em.dialog.html',\r\n  styleUrls: ['./add-subco-em.dialog.scss']\r\n})\r\nexport class AddSubcoDialogEm implements OnInit, OnDestroy {\r\n\r\n\r\n  //TODO: put here subco list\r\n  //users: Subco[];\r\n  /**\r\n    * subco formgroup for create + update\r\n    */\r\n  subcoForm: FormGroup;\r\n\r\n  /**\r\n    * subco list subscription\r\n    */\r\n  subcoSubscription: Subscription;\r\n\r\n  /**\r\n    * subco list subscription\r\n    */\r\n  typeSubscription: Subscription;\r\n\r\n  /**\r\n    * list of user (for teamlead select)\r\n   */\r\n  subco: SubCoPreview[];\r\n\r\n  /**\r\n     * list of types (for type select)\r\n     */\r\n   types: SubCoType[];\r\n\r\n  constructor(public dialogRef: MatDialogRef<AddSubcoDialogEm>,\r\n    @Inject(MAT_DIALOG_DATA) public data: SubCoPreview,\r\n    private subcoService: SubCoService,\r\n    private fb: FormBuilder) { \r\n\r\n      if (data.subcontractorId !== null) {\r\n        this.subcoForm = this.fb.group({\r\n          subcontractorId: fb.control(data.subcontractorId),\r\n          subcontractorTypeId: fb.control(data.subcontractorTypeId, Validators.required),\r\n          resourceName: fb.control(data.resourceName, Validators.required),\r\n        });\r\n      } else {\r\n        this.subcoForm = this.fb.group({\r\n          subcontractorTypeId: fb.control(data.subcontractorTypeId, Validators.required),\r\n          resourceName: fb.control(data.resourceName, Validators.required),\r\n        });\r\n      }\r\n    }\r\n\r\n  ngOnInit(): void {\r\n    this.subcoService.initializeAllSubCoPreviews();\r\n    this.subcoService.initializeTypes();\r\n\r\n    this.subcoSubscription = this.subcoService.allSubCoPreviews$\r\n        .subscribe((subco: SubCoPreview[]) => {\r\n          this.subco = subco;\r\n        });\r\n\r\n      this.typeSubscription = this.subcoService.types$\r\n        .subscribe((types: SubCoType[]) => {\r\n          this.types = types;     \r\n        }); \r\n\r\n  }\r\n\r\n  /**\r\n     * Called on 'Cancel' click\r\n     */\r\n   onCancelClick(): void {\r\n    this.dialogRef.close(false);\r\n  }\r\n\r\n  /**\r\n   * Called on 'Save' click\r\n   */\r\n  onSaveClick(): void {\r\n    this.dialogRef.close(this.subcoForm.getRawValue());\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe services when component gets destroyed\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.subcoSubscription.unsubscribe();\r\n    this.typeSubscription.unsubscribe();\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form-field-toggle {\r\n    margin: 10px;\r\n}",
                    "styleUrl": "./add-subco-em.dialog.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddSubcoDialogEm>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "SubCoPreview",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "subcoService",
                        "type": "SubCoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddSubcoDialogEm>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "SubCoPreview",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "subcoService",
                        "type": "SubCoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<h2 mat-dialog-title>Add Subcontractor</h2>\r\n<!--<form [formGroup]=\"userForm\" >-->\r\n<form [formGroup]=\"subcoForm\">\r\n  <div class=\"dialog-content\" >\r\n\r\n    <mat-form-field appearance=\"outline\">\r\n      <mat-label>Name</mat-label>\r\n        <input matInput formControlName=\"resourceName\" type=\"text\" required />\r\n    </mat-form-field>\r\n\r\n    <mat-form-field  appearance=\"outline\">\r\n      <mat-label>Choose a type</mat-label>   \r\n      <mat-select formControlName=\"subcontractorTypeId\" required>\r\n        <ng-container *ngFor=\"let t of types\">\r\n          <mat-option [value]=\"t.subcontractorTypeId\">{{t.subcontractorTypeName}}</mat-option>\r\n        </ng-container> \r\n      </mat-select>\r\n    </mat-form-field>\r\n\r\n  </div>\r\n  <mat-dialog-actions>\r\n    <button mat-button (click)=\"onCancelClick()\">Cancel</button>\r\n    <button mat-button (click)=\"onSaveClick()\" [disabled]=\"subcoForm.invalid\">Save</button>\r\n  </mat-dialog-actions>\r\n</form> \r\n"
        },
        {
            "name": "AddTeamDialog",
            "id": "component-AddTeamDialog-a6d73bb70212e225dcfad3013755ec40",
            "file": "src/app/admin/dialogs/add-team/add-team.dialog.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./add-team.dialog.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "line": 25,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<AddTeamDialog>",
                    "optional": false,
                    "line": 24,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "teamForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "<p>project formgroup for create + update</p>\n",
                    "line": 15,
                    "rawdescription": "\n\nproject formgroup for create + update\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalled on 'Cancel' click\n",
                    "description": "<p>Called on &#39;Cancel&#39; click</p>\n"
                },
                {
                    "name": "onSaveClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalled on 'Save' Click\n",
                    "description": "<p>Called on &#39;Save&#39; Click</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Team Dialog component for creating + updating teams</p>\n",
            "rawdescription": "\n\nTeam Dialog component for creating + updating teams\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { environment } from '../../../../environments/environment';\r\n\r\n/**\r\n * Team Dialog component for creating + updating teams\r\n */\r\n@Component({\r\n\ttemplateUrl: './add-team.dialog.html',\r\n}) export class AddTeamDialog {\r\n  /**\r\n   * project formgroup for create + update\r\n   */\r\n  teamForm: FormGroup;\r\n\r\n  /**\r\n   * constructor to initialize project form group\r\n   * @param dialogRef\r\n   * @param data\r\n   * @param fb\r\n   */\r\n  constructor(\r\n    public dialogRef: MatDialogRef<AddTeamDialog>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    private fb: FormBuilder,\r\n  ) {\r\n\r\n    this.teamForm = this.fb.group({\r\n      teamId: this.fb.control(data.team.teamId),\r\n      teamLeadId: this.fb.control(data.team.teamLeadId),\r\n      name: this.fb.control(data.team.name, Validators.required),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Called on 'Cancel' click\r\n   */\r\n  onNoClick(): void {\r\n    this.dialogRef.close(false);\r\n  }\r\n\r\n  /**\r\n   * Called on 'Save' Click\r\n   */\r\n  onSaveClick(): void {\r\n    this.dialogRef.close(this.teamForm.getRawValue());\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor to initialize project form group</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddTeamDialog>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "rawdescription": "\n\nconstructor to initialize project form group\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 576,
                            "end": 585,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialogRef"
                        },
                        "type": "MatDialogRef<AddTeamDialog>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 570,
                            "end": 575,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 599,
                            "end": 603,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "data"
                        },
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 593,
                            "end": 598,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 617,
                            "end": 619,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "fb"
                        },
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 611,
                            "end": 616,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "templateData": "<h2 mat-dialog-title>{{data.team.name ? data.team.name : 'New Team'}}</h2>\r\n<div class=\"dialog-content\" [formGroup]=\"teamForm\">\r\n\t<mat-form-field appearance=\"outline\">\r\n\t\t<mat-label>Name</mat-label>\r\n\t\t<input type=\"text\" matInput formControlName=\"name\">\r\n\t</mat-form-field>\r\n\r\n\t<mat-form-field appearance=\"outline\">\r\n\t\t<mat-label>Teamlead</mat-label>\r\n\t\t<mat-select name=\"teamLeadId\" formControlName=\"teamLeadId\">\r\n\t\t\t<mat-option *ngFor=\"let u of data.user\" [value]=\"u.id\">{{u.lastName}}, {{u.firstName}}</mat-option>\r\n\t\t</mat-select>\r\n\t</mat-form-field>\r\n</div>\r\n<mat-dialog-actions>\r\n\t<button mat-button (click)=\"onNoClick()\">Cancel</button>\r\n\t<button mat-button (click)=\"onSaveClick()\" [disabled]=\"!teamForm.valid\">Save</button>\r\n</mat-dialog-actions>"
        },
        {
            "name": "AddUserDialog",
            "id": "component-AddUserDialog-7372c0111a8428cc9b35c4c1142f5f9b",
            "file": "src/app/admin/dialogs/add-user/add-user.dialog.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./add-user.dialog.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-user.dialog.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "line": 66,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<AddUserDialog>",
                    "optional": false,
                    "line": 65,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "grades",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Grade[]",
                    "optional": false,
                    "description": "<p>list of grades (for grade select)</p>\n",
                    "line": 53,
                    "rawdescription": "\n\nlist of grades (for grade select)\n"
                },
                {
                    "name": "gradeSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>grade list subscription</p>\n",
                    "line": 38,
                    "rawdescription": "\n\ngrade list subscription\n"
                },
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Role[]",
                    "optional": false,
                    "description": "<p>list of roles (for role select)</p>\n",
                    "line": 48,
                    "rawdescription": "\n\nlist of roles (for role select)\n"
                },
                {
                    "name": "roleSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>role list subscription</p>\n",
                    "line": 33,
                    "rawdescription": "\n\nrole list subscription\n"
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User[]",
                    "optional": false,
                    "description": "<p>list of user (for teamlead select)</p>\n",
                    "line": 43,
                    "rawdescription": "\n\nlist of user (for teamlead select)\n"
                },
                {
                    "name": "userForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "<p>user formgroup for create + update</p>\n",
                    "line": 23,
                    "rawdescription": "\n\nuser formgroup for create + update\n"
                },
                {
                    "name": "userSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>user list subscription</p>\n",
                    "line": 28,
                    "rawdescription": "\n\nuser list subscription\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "datepickerClosed",
                    "args": [
                        {
                            "name": "start",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "start",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTeamleads",
                    "args": [],
                    "optional": false,
                    "returnType": "User[]",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnsubscribe services when component gets destroyed\n",
                    "description": "<p>Unsubscribe services when component gets destroyed</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInitializes user + role subscriptions\n",
                    "description": "<p>Initializes user + role subscriptions</p>\n"
                },
                {
                    "name": "onCancelClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalled on 'Cancel' click\n",
                    "description": "<p>Called on &#39;Cancel&#39; click</p>\n"
                },
                {
                    "name": "onSaveClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalled on 'Save' click\n",
                    "description": "<p>Called on &#39;Save&#39; click</p>\n"
                },
                {
                    "name": "roleUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>user dialog component for creating + updating users</p>\n",
            "rawdescription": "\n\nuser dialog component for creating + updating users\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit, OnDestroy } from \"@angular/core\";\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from \"@angular/material/dialog\";\r\n\r\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\r\nimport { User } from \"../../../core/interfaces/user\";\r\nimport { UserService } from \"../../../core/services/user.service\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { Role } from \"../../../core/interfaces/role\";\r\nimport { Grade } from \"../../../core/interfaces/grade\";\r\nimport { environment } from \"../../../../environments/environment.prod\";\r\n\r\n/**\r\n * user dialog component for creating + updating users\r\n */\r\n@Component({\r\n    templateUrl: './add-user.dialog.html',\r\n    styleUrls: ['./add-user.dialog.scss'],\r\n})\r\nexport class AddUserDialog implements OnInit, OnDestroy {\r\n    /**\r\n     * user formgroup for create + update\r\n     */\r\n    userForm: FormGroup;\r\n\r\n    /**\r\n     * user list subscription\r\n     */\r\n    userSubscription: Subscription;\r\n\r\n    /**\r\n     * role list subscription\r\n     */\r\n    roleSubscription: Subscription;\r\n\r\n    /**\r\n     * grade list subscription\r\n     */\r\n    gradeSubscription: Subscription;\r\n\r\n    /**\r\n     * list of user (for teamlead select)\r\n     */\r\n    user: User[];\r\n\r\n    /**\r\n     * list of roles (for role select)\r\n     */\r\n    roles: Role[];\r\n\r\n    /**\r\n     * list of grades (for grade select)\r\n     */\r\n    grades: Grade[];\r\n\r\n    /**\r\n     * initializes user formgroup\r\n     * create user: without id, with password\r\n     * update user: with id, without password\r\n     * @param dialogRef\r\n     * @param data\r\n     * @param userService\r\n     * @param fb\r\n     */\r\n    constructor(\r\n        public dialogRef: MatDialogRef<AddUserDialog>,\r\n        @Inject(MAT_DIALOG_DATA) public data: User,\r\n        private userService: UserService,\r\n        private fb: FormBuilder,\r\n    ) {\r\n\r\n      if (typeof data.id !== 'undefined') {\r\n        this.userForm = this.fb.group({\r\n          id: fb.control(data.id),\r\n          globalId: fb.control(data.globalId, Validators.required),\r\n          firstName: fb.control(data.firstName, Validators.required),\r\n          lastName: fb.control(data.lastName, Validators.required),\r\n          email: fb.control(data.email, [\r\n            Validators.required,\r\n            Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$'), Validators.email,\r\n          ]),\r\n          fte: fb.control(data.fte, [Validators.required, Validators.max(1), Validators.min(0)]),\r\n          roleId: fb.control(data.roleId, Validators.required),\r\n          gradeId: fb.control(data.gradeId, Validators.required),\r\n          parentId: fb.control(data.parentId),\r\n          admin: fb.control(data.admin, Validators.required),\r\n          active: fb.control((typeof data.active !== 'undefined') ? data.active : true),\r\n          startDate: fb.control(data.startDate, Validators.required),\r\n          endDate: fb.control(data.endDate),\r\n        });\r\n      } else {\r\n        this.userForm = this.fb.group({\r\n          globalId: fb.control(data.globalId, Validators.required),\r\n          firstName: fb.control(data.firstName, Validators.required),\r\n          lastName: fb.control(data.lastName, Validators.required),\r\n          email: fb.control(data.email, [\r\n            Validators.required,\r\n            Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$'), Validators.email,\r\n          ]),\r\n          password: fb.control(data.password, Validators.required),\r\n          fte: fb.control(data.fte, [Validators.required, Validators.max(1), Validators.min(0)]),\r\n          roleId: fb.control(data.roleId, Validators.required),\r\n          gradeId: fb.control(data.gradeId, Validators.required),\r\n          parentId: fb.control(data.parentId),\r\n          admin: fb.control(data.admin, Validators.required),\r\n          active: fb.control((typeof data.active !== 'undefined') ? data.active : true),\r\n          startDate: fb.control(data.startDate, Validators.required),\r\n          endDate: fb.control(data.endDate),\r\n        });\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Initializes user + role subscriptions\r\n     */\r\n    ngOnInit(): void {\r\n      this.userSubscription = this.userService.allUsers$\r\n        .subscribe((user: User[]) => {\r\n          this.user = user;\r\n        });\r\n\r\n      this.roleSubscription = this.userService.roles$\r\n        .subscribe((roles: Role[]) => {\r\n          this.roles = roles;\r\n        });\r\n\r\n      this.gradeSubscription = this.userService.grades$\r\n        .subscribe((grades: Grade[]) => {\r\n          this.grades = grades;\r\n        });\r\n    }\r\n\r\n    getTeamleads(): User[] {\r\n      let role: Role = this.roles.find((r: Role) => r.roleId === this.userForm.value.roleId);\r\n      let permission: any = environment.roles.pdl;\r\n      if (role) {\r\n        permission = role.permissionType;\r\n      }\r\n      return this.user.filter((u: User) => this.roles.find((r: Role) => r.roleId === u.roleId).permissionType > permission || this.roles.find((r: Role) => r.roleId === u.roleId).roleId == 7);\r\n    }\r\n\r\n    roleUpdate(): void {\r\n      let role: Role = this.roles.find((r: Role) => r.roleId === this.userForm.value.roleId);\r\n\r\n      if (role && role.permissionType >= environment.roles.fc) {\r\n       this.userForm.get('admin').setValue(true);\r\n        this.userForm.get('admin').disable();\r\n      } else {\r\n        this.userForm.get('admin').enable();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Called on 'Cancel' click\r\n     */\r\n    onCancelClick(): void {\r\n      this.dialogRef.close(false);\r\n    }\r\n\r\n    /**\r\n     * Called on 'Save' click\r\n     */\r\n    onSaveClick(): void {\r\n      this.dialogRef.close(this.userForm.getRawValue());\r\n    }\r\n\r\n    /**\r\n     * Unsubscribe services when component gets destroyed\r\n     */\r\n    ngOnDestroy(): void {\r\n      this.userSubscription.unsubscribe();\r\n      this.roleSubscription.unsubscribe();\r\n      this.gradeSubscription.unsubscribe();\r\n    }\r\n\r\n    datepickerClosed(start: boolean): void {\r\n      if(start == true) {\r\n        let date: Date = new Date(this.userForm.get('startDate').value);\r\n        this.userForm.get('startDate').setValue(new Date((date.getTime() - (date.getTimezoneOffset() * 60000))).toISOString().slice(0, -5));\r\n      } else {\r\n        let date: Date = new Date(this.userForm.get('endDate').value);\r\n        this.userForm.get('endDate').setValue(new Date((date.getTime() - (date.getTimezoneOffset() * 60000))).toISOString().slice(0, -5));        \r\n      }\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form-field-toggle {\r\n  margin: 10px;\r\n}",
                    "styleUrl": "./add-user.dialog.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>initializes user formgroup\ncreate user: without id, with password\nupdate user: with id, without password</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddUserDialog>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "User",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 53,
                "rawdescription": "\n\ninitializes user formgroup\ncreate user: without id, with password\nupdate user: with id, without password\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1551,
                            "end": 1560,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialogRef"
                        },
                        "type": "MatDialogRef<AddUserDialog>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1545,
                            "end": 1550,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1576,
                            "end": 1580,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "data"
                        },
                        "type": "User",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1570,
                            "end": 1575,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1596,
                            "end": 1607,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "userService"
                        },
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1590,
                            "end": 1595,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1623,
                            "end": 1625,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "fb"
                        },
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1617,
                            "end": 1622,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<h2 mat-dialog-title>Add User</h2>\r\n<form [formGroup]=\"userForm\" >\r\n  <div class=\"dialog-content\" >\r\n    <mat-form-field appearance=\"outline\">\r\n      <mat-label>Capgemini Global ID</mat-label>\r\n      <input matInput formControlName=\"globalId\" type=\"number\" required/>\r\n    </mat-form-field>\r\n\r\n   <mat-form-field appearance=\"outline\">\r\n      <mat-label>Firstname</mat-label>\r\n      <input matInput formControlName=\"firstName\"  type=\"text\"  required/>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\">\r\n      <mat-label>Lastname</mat-label>\r\n      <input matInput formControlName=\"lastName\" type=\"text\"  required />\r\n    </mat-form-field>\r\n\r\n    <mat-form-field  appearance=\"outline\">\r\n      <mat-label>Email</mat-label>\r\n      <input formControlName=\"email\" matInput type=\"text\"  required />\r\n    </mat-form-field>\r\n\r\n    <mat-form-field *ngIf=\"!data.id\" appearance=\"outline\">\r\n      <mat-label>Password</mat-label>\r\n      <input formControlName=\"password\" matInput type=\"password\"  required />\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\">\r\n      <mat-label>FTE</mat-label>\r\n      <input formControlName=\"fte\"  matInput type=\"number\" min=\"0\" max=\"1\"  required />\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\">\r\n      <mat-label>Choose a Role</mat-label>\r\n      <mat-select formControlName=\"roleId\"  id=\"roleId\" required (selectionChange)=\"roleUpdate()\">\r\n        <ng-container *ngFor=\"let r of roles\">\r\n          <mat-option [value]=\"r.roleId\">{{r.name}}</mat-option>\r\n        </ng-container>\r\n      </mat-select>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\">\r\n      <mat-label>Choose a Grade</mat-label>\r\n      <mat-select formControlName=\"gradeId\"  id=\"gradeId\" required>\r\n        <ng-container *ngFor=\"let g of grades\">\r\n          <mat-option [value]=\"g.gradeId\">{{g.name}}</mat-option>\r\n        </ng-container>\r\n      </mat-select>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\">\r\n      <mat-label>Choose a Team</mat-label>\r\n      <mat-select formControlName=\"parentId\"  id=\"parentId\">\r\n        <mat-option [value]=\"null\">-</mat-option>\r\n        <ng-container *ngFor=\"let t of getTeamleads()\">\r\n          <mat-option *ngIf=\"t.id !== data.id\" [value]=\"t.id\">{{t.lastName}}, {{t.firstName}}</mat-option>\r\n        </ng-container>\r\n      </mat-select>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\">\r\n      <mat-label>Start Date</mat-label>\r\n      <input matInput [matDatepicker]=\"sd\" placeholder=\"Start Date\" formControlName=\"startDate\" (click)=\"sd.open()\" required>\r\n      <mat-datepicker #sd startView=\"year\" disabled=\"false\" (closed)=\"datepickerClosed(true)\"></mat-datepicker>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\">\r\n      <mat-label>End Date</mat-label>\r\n      <input matInput [matDatepicker]=\"ed\" placeholder=\"End Date\" formControlName=\"endDate\" (click)=\"ed.open()\">\r\n      <mat-datepicker #ed startView=\"year\" disabled=\"false\" (closed)=\"datepickerClosed(false)\"></mat-datepicker>\r\n    </mat-form-field>\r\n\r\n    <div class=\"form-field-toggle\">\r\n      <mat-slide-toggle formControlName=\"admin\" name=\"admin\" color=\"primary\">Administrator</mat-slide-toggle>\r\n    </div>\r\n  </div>\r\n  <mat-dialog-actions>\r\n    <button mat-button (click)=\"onCancelClick()\">Cancel</button>\r\n    <button mat-button (click)=\"onSaveClick()\" [disabled]=\"userForm.invalid\">Save</button>\r\n  </mat-dialog-actions>\r\n</form>"
        },
        {
            "name": "AdminComponent",
            "id": "component-AdminComponent-8362429719911c2278adeff0d17a4532",
            "file": "src/app/admin/admin.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "public-admin",
            "styleUrls": [
                "./admin.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./admin.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRedirects to specific page if it is defined in url\nInitializes utility data\n",
                    "description": "<p>Redirects to specific page if it is defined in url\nInitializes utility data</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Main admin component (called at /admin)</p>\n",
            "rawdescription": "\n\nMain admin component (called at /admin)\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { environment } from '../../environments/environment.prod';\r\n\r\n/**\r\n * Main admin component (called at /admin)\r\n */\r\n@Component({\r\n  selector: 'public-admin',\r\n  templateUrl: './admin.component.html',\r\n  styleUrls: ['./admin.component.scss'],\r\n})\r\nexport class AdminComponent implements OnInit {\r\n\r\n  /**\r\n   * Constructor for angular/router\r\n   * @param router\r\n   */\r\n  constructor(\r\n    private router: Router,\r\n  ) {}\r\n\r\n  /**\r\n   * Redirects to specific page if it is defined in url\r\n   * Initializes utility data\r\n   */\r\n  ngOnInit(): void {\r\n    this.router.navigate(['/' + environment.routes.admin]);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../assets/styles/variables.scss';\r\n\r\n.mat-sidenav-container{\r\n\tbackground: transparent;\r\n\tmargin: 0 10px;\r\n}\r\n\r\n.mat-drawer {\r\n\tdisplay: none;\r\n\tbackground: transparent;\r\n\twidth: 50px;\r\n\tborder-right-width: 0px;\r\n}\r\n\r\n.nav-button-container {\r\n\tmargin: 4px 0;\r\n\r\n\t.mat-icon-button {\r\n\t\twidth: 50px;\r\n\t\theight: 50px;\r\n\t\tmargin-bottom: 10px;\r\n\t\tpadding: 0;\r\n\r\n\t\t&.active, &.active .mat-icon {\r\n\t\t\tcolor: map-get($font-colors, blue);\r\n\t\t}\r\n\t}\r\n\r\n\t.mat-icon {\r\n\t\twidth: 1em;\r\n\t\theight: 1em;\r\n\t\tline-height: 1rem;\r\n\t\tfont-size: 2rem;\r\n\t}\r\n}\r\n\r\n\r\ntd.mat-cell:first-of-type, td.mat-footer-cell:first-of-type, th.mat-header-cell:first-of-type {\r\n\tpadding-left: 0;\r\n}\r\n\r\ntd.mat-cell:last-of-type, td.mat-footer-cell:last-of-type, th.mat-header-cell:last-of-type {\r\n\tpadding-right: 0;\r\n}\r\n\r\n.action-button {\r\n\twidth: 50px;\r\n\ttext-align: center;\r\n}\r\n\r\n.flag-button {\r\n\twidth: 70px;\r\n\ttext-align: center;\r\n}\r\n\r\n.button-row {\r\n\tmargin: 50px;\r\n\r\n\t.mat-raised-button {\r\n\t\tposition: fixed;\r\n\t\tz-index: 100;\r\n\t\tbottom: 32px;\r\n\t\tright: 30px;\r\n\t\tbox-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\r\n\t}\r\n}\r\n\r\n.mat-form-field {\r\n\tmargin: 5px 0;\r\n}\r\n\r\ntr.mat-row.inactive td {\r\n\tcolor: map-get($font-colors, grey-label);\r\n\r\n\t.flag-inactive {\r\n\t\tbackground: map-get($font-colors, red);\r\n\t\tcolor: map-get($font-colors, white);\r\n\t\tpadding: 3px 6px;\r\n\t\tborder-radius: 4px;\r\n\t}\r\n}\r\n\r\n.mat-table tr.mat-row:last-child td {\r\n\tborder-bottom: 0;\r\n}",
                    "styleUrl": "./admin.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Constructor for angular/router</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "rawdescription": "\n\nConstructor for angular/router\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 457,
                            "end": 463,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "router"
                        },
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 451,
                            "end": 456,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-header></app-header>\r\n\r\n<mat-sidenav-container>\r\n\r\n\t<mat-sidenav mode=\"side\" opened>\r\n\t\t<div class =\"nav-button-container\">\r\n\t\t\t<button mat-icon-button title=\"ForeCasts\" class=\"active\">\r\n\t\t\t\t\t<mat-icon [inline]=\"true\">date_range</mat-icon>\r\n\t\t\t</button>\r\n\r\n\t\t\t<button mat-icon-button title=\"Settings\">\r\n\t\t\t\t\t<mat-icon [inline]=\"true\">settings</mat-icon>\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t</mat-sidenav>\r\n\r\n\t<mat-sidenav-content>\r\n\t\t<div class=\"app-content admin\">\r\n\t\t\t<h1>Admin Dashboard</h1>\r\n\t\t\t<mat-tab-group>\r\n\t\t\t\t<mat-tab label=\"Users\">\r\n\t\t\t\t\t<app-admin-users></app-admin-users>\r\n\t\t\t\t</mat-tab>\r\n\t\t\t\t<mat-tab label=\"Practices\">\r\n\t\t\t\t\t<app-admin-teams></app-admin-teams>\r\n\t\t\t\t</mat-tab>\r\n\t\t\t\t<mat-tab label=\"Projects\">\r\n\t\t\t\t\t<app-admin-projects></app-admin-projects>\r\n\t\t\t\t</mat-tab>\r\n\t\t\t\t<mat-tab label=\"Months\">\r\n\t\t\t\t\t<app-admin-months></app-admin-months>\r\n\t\t\t\t</mat-tab>\r\n\t\t\t\t<mat-tab label=\"Subcos\">\r\n\t\t\t\t\t<app-admin-subcos></app-admin-subcos>\r\n\t\t\t\t</mat-tab>\r\n\t\t\t</mat-tab-group>\r\n\t\t</div>\r\n\t</mat-sidenav-content>\r\n\r\n</mat-sidenav-container>\r\n\r\n<app-footer></app-footer>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-b17da087f64e7df591f7bbfab1be2f39",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "public-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ninit method for app component\nregisters de as locale (for number views)\n",
                    "description": "<p>init method for app component\nregisters de as locale (for number views)</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>public root component of application</p>\n",
            "rawdescription": "\n\npublic root component of application\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { registerLocaleData } from '@angular/common';\r\nimport localeDe from '@angular/common/locales/de';\r\n/**\r\n * public root component of application\r\n */\r\n@Component({\r\n  selector: 'public-root',\r\n  templateUrl: './app.component.html',\r\n})\r\nexport class AppComponent implements OnInit {\r\n\r\n  /**\r\n   * init method for app component\r\n   * registers de as locale (for number views)\r\n   */\r\n  ngOnInit(): void {\r\n    registerLocaleData(localeDe, 'de');\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<router-outlet></router-outlet>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-44f2f1e1b3a1e0ebc1e0edafd90d05c0",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "What background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 747,
                            "end": 761,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 317,
                            "tagName": {
                                "pos": 748,
                                "end": 756,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "Button contents",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string"
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Is this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "How large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-button',\r\n  template: ` <button\r\n    type=\"button\"\r\n    (click)=\"onClick.emit($event)\"\r\n    [ngClass]=\"classes\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    {{ label }}\r\n  </button>`,\r\n  styleUrls: ['./button.css'],\r\n})\r\nexport default class ButtonComponent {\r\n  /**\r\n   * Is this the principal call to action on the page?\r\n   */\r\n  @Input()\r\n  primary = false;\r\n\r\n  /**\r\n   * What background color to use\r\n   */\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  /**\r\n   * How large should the button be?\r\n   */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  /**\r\n   * Optional click handler\r\n   */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\r\n\r\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-weight: 700;\r\n  border: 0;\r\n  border-radius: 3em;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  line-height: 1;\r\n}\r\n.storybook-button--primary {\r\n  color: white;\r\n  background-color: #1ea7fd;\r\n}\r\n.storybook-button--secondary {\r\n  color: #333;\r\n  background-color: transparent;\r\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\r\n}\r\n.storybook-button--small {\r\n  font-size: 12px;\r\n  padding: 10px 16px;\r\n}\r\n.storybook-button--medium {\r\n  font-size: 14px;\r\n  padding: 11px 20px;\r\n}\r\n.storybook-button--large {\r\n  font-size: 16px;\r\n  padding: 12px 24px;\r\n}\r\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ConfirmMessageDialog",
            "id": "component-ConfirmMessageDialog-5b8f8400558e0b3b63c499bfd48ebf53",
            "file": "src/app/admin/dialogs/confirm-message/confirm-message.dialog.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./confirm-message.dialog.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "line": 18,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<ConfirmMessageDialog>",
                    "optional": false,
                    "line": 17,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Component for Confirm Message Dialog</p>\n",
            "rawdescription": "\n\nComponent for Confirm Message Dialog\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from \"@angular/core\";\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from \"@angular/material/dialog\";\r\n\r\n/**\r\n * Component for Confirm Message Dialog\r\n */\r\n@Component({\r\n  templateUrl: \"./confirm-message.dialog.html\"\r\n})\r\nexport class ConfirmMessageDialog {\r\n  /**\r\n   * default constructor for confirmMessageDialog\r\n   * @param dialogRef\r\n   * @param data\r\n   */\r\n  constructor(\r\n    public dialogRef: MatDialogRef<ConfirmMessageDialog>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n  ) {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>default constructor for confirmMessageDialog</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ConfirmMessageDialog>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "rawdescription": "\n\ndefault constructor for confirmMessageDialog\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 353,
                            "end": 362,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialogRef"
                        },
                        "type": "MatDialogRef<ConfirmMessageDialog>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 347,
                            "end": 352,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 376,
                            "end": 380,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "data"
                        },
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 370,
                            "end": 375,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "templateData": "<h2 mat-dialog-title>{{data.message}}</h2>\r\n<mat-dialog-actions>\r\n  <button mat-button mat-dialog-close [mat-dialog-close]=\"false\">{{data.button.cancel}}</button>\r\n  <button mat-button [mat-dialog-close]=\"true\">{{data.button.submit}}</button>\r\n</mat-dialog-actions>"
        },
        {
            "name": "ConfirmMessageDialog",
            "id": "component-ConfirmMessageDialog-5b8f8400558e0b3b63c499bfd48ebf53-1",
            "file": "src/app/forecast/dialogs/confirm-message/confirm-message.dialog.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./confirm-message.dialog.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "line": 18,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<ConfirmMessageDialog>",
                    "optional": false,
                    "line": 17,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Component for Confirm Message Dialog</p>\n",
            "rawdescription": "\n\nComponent for Confirm Message Dialog\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from \"@angular/core\";\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from \"@angular/material/dialog\";\r\n\r\n/**\r\n * Component for Confirm Message Dialog\r\n */\r\n@Component({\r\n  templateUrl: \"./confirm-message.dialog.html\"\r\n})\r\nexport class ConfirmMessageDialog {\r\n  /**\r\n   * default constructor for confirmMessageDialog\r\n   * @param dialogRef\r\n   * @param data\r\n   */\r\n  constructor(\r\n    public dialogRef: MatDialogRef<ConfirmMessageDialog>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n  ) {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>default constructor for confirmMessageDialog</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ConfirmMessageDialog>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "rawdescription": "\n\ndefault constructor for confirmMessageDialog\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 353,
                            "end": 362,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialogRef"
                        },
                        "type": "MatDialogRef<ConfirmMessageDialog>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 347,
                            "end": 352,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 376,
                            "end": 380,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "data"
                        },
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 370,
                            "end": 375,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ConfirmMessageDialog-1",
            "templateData": "<h2 mat-dialog-title>{{data.message}}</h2>\r\n<mat-dialog-actions>\r\n  <button mat-button mat-dialog-close [mat-dialog-close]=\"false\">{{data.button.cancel}}</button>\r\n  <button mat-button [mat-dialog-close]=\"true\">{{data.button.submit}}</button>\r\n</mat-dialog-actions>"
        },
        {
            "name": "ExecutiveChartComponent",
            "id": "component-ExecutiveChartComponent-24b61e416c085ccde162ec5a5b7fc914",
            "file": "src/app/forecast/components/executive-chart/executive-chart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-executive-chart",
            "styleUrls": [
                "./executive-chart.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./executive-chart.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "arve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "arveUrveChart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "cor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "corChart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<ExecutiveChartComponent>",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "extRev",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "fte",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "intRev",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "monthLabels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "reports",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MonthlySummaryReport[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "revenueChart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "showComponent",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "summaryValuesArray",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SummaryValues[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "totalRev",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "urve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methodsClass": [
                {
                    "name": "average",
                    "args": [
                        {
                            "name": "numArray",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 269,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "numArray",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "exportCSV",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 277,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "numberToString",
                    "args": [
                        {
                            "name": "no",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 312,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "no",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 273,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "processTableData",
                    "args": [
                        {
                            "name": "reports",
                            "type": "MonthlySummaryReport[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "reports",
                            "type": "MonthlySummaryReport[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "total",
                    "args": [
                        {
                            "name": "numArray",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 263,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "numArray",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, Inject } from \"@angular/core\";\r\nimport { Chart } from \"chart.js\";\r\nimport {\r\n  MatDialogRef,\r\n  MAT_DIALOG_DATA\r\n} from \"@angular/material/dialog\";\r\nimport { ExecutiveForecastsService } from \"../../../core/services/forecasts/executive-forecasts.service\";\r\nimport { MonthlySummaryReport } from \"../../../core/interfaces/kpiData\";\r\nimport { PageStateService } from \"../../../core/shared/page-state.service\";\r\nimport { DatePipe } from '@angular/common';\r\n\r\n@Component({\r\n  selector: \"app-executive-chart\",\r\n  templateUrl: \"./executive-chart.component.html\",\r\n  styleUrls: [\"./executive-chart.component.scss\"]\r\n})\r\nexport class ExecutiveChartComponent implements OnInit {\r\n\r\n  showComponent: boolean = false;\r\n  \r\n  summaryValuesArray: SummaryValues[];\r\n  \r\n  reports: MonthlySummaryReport[];\r\n\r\n  monthLabels: string[];\r\n\r\n  /*\r\n   *ChartJs object which will render the ARVE/URVE chart\r\n   */\r\n  arveUrveChart;\r\n  /*\r\n   * ARVE set for total ARVE/month for the next 6 months\r\n   */\r\n  arve: number[];\r\n  /*\r\n   * URVE set for total URVE/month for the next 6 months\r\n   */\r\n  urve: number[];\r\n\r\n  /*\r\n   *ChartJs object which will render the COR chart\r\n   */\r\n  corChart;\r\n  /*\r\n   * COR set for total COR/month for the next 6 months\r\n   */\r\n  cor: number[];\r\n\r\n  /*\r\n   *ChartJs object which will render the Revenue chart\r\n   */\r\n  revenueChart;\r\n  /*\r\n   * Internal revenue set for internal revenue/month for the next 6 months\r\n   */\r\n  intRev: number[];\r\n  /*\r\n   * External revenue set for external revenue/month for the next 6 months\r\n   */\r\n  extRev: number[];\r\n  /*\r\n   * Total revenue set for total revenue/month for the next 6 months\r\n   */\r\n  totalRev: number[];\r\n\r\n  fte: number[];\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<ExecutiveChartComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    private executiveService: ExecutiveForecastsService,\r\n    private pageState: PageStateService,\r\n    private datePipe: DatePipe,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.reports = this.executiveService.getKpiData();\r\n    this.reports = this.reports.sort(function(a, b) { return a.monthId-b.monthId });\r\n    \r\n    /**initialize arve to empty set */\r\n    this.arve = [];\r\n    \r\n    /**initialize urve to empty set */\r\n    this.urve = [];\r\n    \r\n    /**initialize cor to empty set */\r\n    this.cor = [];\r\n    \r\n    /**initialize extRev to empty set */\r\n    this.extRev = [];\r\n    \r\n    /**initialize intRev to empty set */\r\n    this.intRev = [];\r\n    \r\n    /**initialize totalRev to empty set */\r\n    this.totalRev = [];\r\n\r\n    this.monthLabels = [];\r\n\r\n    this.fte = [];\r\n\r\n    if (this.reports.length > 0) {\r\n      this.processTableData(this.reports);\r\n      this.showComponent = true;    \r\n    }   \r\n  }\r\n\r\n  processTableData(reports: MonthlySummaryReport[]) : void {\r\n    for (let report of reports) {\r\n      this.arve.push(report.arve * 100);\r\n      this.urve.push(report.urve * 100);\r\n      this.cor.push(report.cor);\r\n      this.intRev.push(report.internalRevenue);\r\n      this.fte.push(report.fte);\r\n      this.extRev.push(report.externalRevenue);\r\n      this.totalRev.push(report.ros);\r\n      this.monthLabels.push(report.month.charAt(0).toUpperCase() + report.month.slice(1) + ' \\'' + (report.year % 100).toString());\r\n    }\r\n\r\n    this.arveUrveChart = new Chart(\"arve-urve\", {\r\n      type: \"bar\",\r\n      data: {\r\n        labels: this.monthLabels,\r\n        datasets: [\r\n          {\r\n            label: \"ARVE\",\r\n            backgroundColor: \"#95E616\",\r\n            data: this.arve\r\n          },\r\n          {\r\n            label: \"URVE\",\r\n            backgroundColor: \"#FF304C\",\r\n            data: this.urve\r\n          }\r\n        ]\r\n      },\r\n      options: {\r\n        legend: {\r\n          display: false\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              barPercentage: 0.7,\r\n              categoryPercentage: 0.5\r\n            }\r\n          ],\r\n          yAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              ticks: {\r\n                min: 0,\r\n                max: 100\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    });\r\n\r\n    this.corChart = new Chart(\"cor\", {\r\n      type: \"line\",\r\n      data: {\r\n        labels: this.monthLabels,\r\n        datasets: [\r\n          {\r\n            data: this.cor,\r\n            borderColor: \"#7e39ba\",\r\n            fill: false\r\n          }\r\n        ]\r\n      },\r\n      options: {\r\n        legend: {\r\n          display: false\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              barPercentage: 0.5,\r\n              categoryPercentage: 0.5\r\n            }\r\n          ],\r\n          yAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              ticks: {\r\n                min: 0\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    });\r\n\r\n    this.revenueChart = this.arveUrveChart = new Chart(\"revenue\", {\r\n      type: \"bar\",\r\n      data: {\r\n        labels: this.monthLabels,\r\n        datasets: [\r\n          {\r\n            label: \"INT\",\r\n            backgroundColor: \"#12abdb\",\r\n            data: this.intRev\r\n          },\r\n          {\r\n            label: \"EXT\",\r\n            backgroundColor: \"#0070ad\",\r\n            data: this.extRev\r\n          },\r\n          {\r\n            label: \"TOTAL\",\r\n            backgroundColor: \"#2b0a3d\",\r\n            data: this.totalRev\r\n          }\r\n        ]\r\n      },\r\n      options: {\r\n        legend: {\r\n          display: true\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              barPercentage: 0.7,\r\n              categoryPercentage: 0.5\r\n            }\r\n          ],\r\n          yAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              ticks: {\r\n                min: 0\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  total(numArray: number[]) {\r\n    return numArray.reduce(function(a, b) {\r\n      return a + b;\r\n    }, 0);\r\n  }\r\n\r\n  average(numArray: number[]) : number {\r\n    return this.total(numArray) / numArray.length;\r\n  }\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  exportCSV(): void {\r\n    this.pageState.showSpinner();\r\n    let lineEnding = \"\\r\\n\";\r\n    let header = \"KPI;\" + this.monthLabels.join(\";\") + lineEnding;\r\n    let body: string = \"ARVE;\" + this.arve.map(this.numberToString).join(\";\") + lineEnding + \r\n      \"URVE;\" + this.urve.map(this.numberToString).join(\";\") + lineEnding +\r\n      \"COR;\" + this.cor.map(this.numberToString).join(\";\") + lineEnding +\r\n      \"Int. Revenue;\" + this.intRev.map(this.numberToString).join(\";\") + lineEnding + \r\n      \"Ext. Revenue;\" + this.extRev.map(this.numberToString).join(\";\") + lineEnding +\r\n      \"Total Revenue;\" + this.totalRev.map(this.numberToString).join(\";\") + lineEnding +\r\n      \"FTE;\" + this.fte.map(this.numberToString).join(\";\") + lineEnding;\r\n    const data = header + body;\r\n    const blob: Blob = new Blob([data], { type: \"text/csv\" });\r\n    const filename: string = this.datePipe.transform(new Date(), \"yyyyMMdd\") + \"-KPIOverview.csv\";    \r\n    this.pageState.hideSpinner();\r\n\r\n    //For IE\r\n    let navigator: any = window.navigator;\r\n    if (navigator.msSaveOrOpenBlob) {\r\n      navigator.msSaveOrOpenBlob(blob, filename);\r\n    //For any other browser\r\n    } else {\r\n      const url: string = window.URL.createObjectURL(blob);\r\n\r\n      let a: HTMLAnchorElement = document.createElement(\"a\");\r\n      a.href = url;\r\n      a.download = filename;\r\n\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      document.body.removeChild(a);\r\n      window.URL.revokeObjectURL(url);\r\n    }\r\n  }\r\n\r\n  numberToString(no: number): string {\r\n    return no.toLocaleString(\"de\",  { minimumFractionDigits: 0, maximumFractionDigits: 2 } ).replace(\".\",\"\");\r\n  }\r\n}\r\n\r\nexport interface SummaryValues {\r\n  monthId: number;\r\n  probabilityId: number;\r\n  billableDays: number;\r\n  nonBillableDays: number;\r\n  vacationDays: number;\r\n  trainingDays: number;\r\n  businessDays: number;\r\n  benchDays: number;\r\n  workingDays: number;\r\n  fteCss: number;\r\n  cor: number;\r\n  arve: number;\r\n  fte: number;\r\n  urve: number;\r\n  ros: number;\r\n  external: number;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".w-100 {\r\n  width: 100%;\r\n}\r\n\r\n.w-50 {\r\n  width: 50%;\r\n}\r\n\r\n.h-100 {\r\n  height: 100%;\r\n}\r\n\r\n.p-16 {\r\n  padding: 16px;\r\n}\r\n\r\n.px-16 {\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n}\r\n\r\n.pt-5 {\r\n  padding-top: 5px;\r\n}\r\n.example-fill-remaining-space {\r\n  /* This fills the remaining space, by using flexbox. \r\n     Every toolbar row uses a flexbox row layout. */\r\n  flex: 1 1 auto;\r\n}\r\n\r\n.white {\r\n  color: #ffffff;\r\n}\r\n\r\n.fix {\r\n  display: flex;\r\n  color: #ffffff;\r\n  background-color: #0070ad;\r\n  height: 50px;\r\n  padding: 0px;\r\n  padding-left: 24px;\r\n  padding-right: 24px;\r\n  line-height: 3.3;\r\n}\r\n\r\n.fix .title {\r\n  color: #fff;\r\n  padding-left: 14px;\r\n}\r\n.stats-table-header {\r\n  font-family: \"Roboto\", sans-serif;\r\n  text-align: center;\r\n  padding: 12px;\r\n}\r\n\r\n.stats-table-header:first-of-type {\r\n  font-family: \"Roboto\", sans-serif;\r\n  text-align: left;\r\n  padding: 12px;\r\n}\r\n\r\n.stats-table-cell:first-of-type {\r\n  font-family: \"Roboto\", sans-serif;\r\n  text-align: left;\r\n  font-size: 12px;\r\n  line-height: 1.3em;\r\n  padding: 12px;\r\n}\r\n\r\n.stats-table-cell {\r\n  font-family: \"Roboto\", sans-serif;\r\n  text-align: center;\r\n  font-size: 12px;\r\n  line-height: 1.3em;\r\n  padding: 12px;\r\n}\r\n\r\n.border-collapse {\r\n  border-collapse: collapse;\r\n}\r\n\r\n.border-line {\r\n  border-bottom: 1px solid #e0e0e0;\r\n  border-collapse: separate;\r\n  border-spacing: 4px;\r\n}\r\n\r\n.color-grey {\r\n  color: grey;\r\n}\r\n\r\n.mat-stroked-button {\r\n\tmargin: 5px;\r\n\tmargin-left: 0;\r\n}\r\n\r\n.button-rows {\r\n\tdisplay: flex;\r\n\t.button-row {\r\n    width: 50%\r\n  }\r\n}",
                    "styleUrl": "./executive-chart.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ExecutiveChartComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 66,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ExecutiveChartComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "  <div\r\n    mat-dialog-title\r\n    class=\"fix\"\r\n    layout=\"row\"\r\n    layout-align=\"space-between center\"\r\n    style=\"margin-bottom: 0px; padding-bottom: 0;\"\r\n  >\r\n    <span>KPI Overview</span>\r\n\r\n    <!-- This fills the remaining space of the current row -->\r\n    <span class=\"example-fill-remaining-space\"></span>\r\n\r\n    <button mat-icon-button (click)=\"onNoClick()\">\r\n      <mat-icon class=\"white\">close</mat-icon>\r\n    </button>\r\n  </div>\r\n\r\n  <div mat-dialog-content>\r\n    <div layout=\"row\" layout-wrap *ngIf=\"showComponent\">\r\n      <div flex=\"100\" class=\"px-16 pt-5\">\r\n        Overview/Summary of the KPIs for the next 6 Months. COR is averaged in the\r\n        months over the days. ARVE/URVE and COR are averaged in the TOTAL Column\r\n        (i. e. the average over the 6 months).\r\n\r\n        <table class=\"border-collapse w-100 h-100\">\r\n          <thead class=\"border-line color-grey\">\r\n            <tr>\r\n              <td class=\"stats-table-header\">KPI</td>\r\n              <td *ngFor=\"let m of monthLabels\" class=\"stats-table-header\">\r\n                {{ m }}\r\n              </td>\r\n              <td class=\"stats-table-header\">TOTAL</td>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <!--ARVE -->\r\n            <tr class=\"border-line\">\r\n              <td class=\"stats-table-cell\">ARVE</td>\r\n              <td class=\"stats-table-cell\" *ngFor=\"let a of arve\">\r\n                {{ a.toFixed(2) | number: '1.0-2': 'de' }}\r\n              </td>\r\n              <td class=\"stats-table-cell\">{{ average(arve).toFixed(2) | number: '1.0-2': 'de'}}</td>\r\n            </tr>\r\n\r\n            <!--URVE -->\r\n            <tr class=\"border-line\">\r\n              <td class=\"stats-table-cell\">URVE</td>\r\n              <td class=\"stats-table-cell\" *ngFor=\"let u of urve\">\r\n                {{ u.toFixed(2) | number: '1.0-2': 'de' }}\r\n              </td>\r\n              <td class=\"stats-table-cell\">{{ average(urve).toFixed(2) | number: '1.0-2': 'de' }}</td>\r\n            </tr>\r\n\r\n            <!--COR -->\r\n            <tr class=\"border-line\">\r\n              <td class=\"stats-table-cell\">COR</td>\r\n              <td class=\"stats-table-cell\" *ngFor=\"let c of cor\">\r\n                {{ c.toFixed(2) | number: '1.0-2': 'de' }}\r\n              </td>\r\n              <td class=\"stats-table-cell\">{{ average(cor).toFixed(2) | number: '1.0-2': 'de' }}</td>\r\n            </tr>\r\n\r\n            <!--Internal Revenue -->\r\n            <tr class=\"border-line\">\r\n              <td class=\"stats-table-cell\">Int. Revenue</td>\r\n              <td class=\"stats-table-cell\" *ngFor=\"let i of intRev\">\r\n                {{ i.toFixed(2) | number: '1.0-2': 'de' }}\r\n              </td>\r\n              <td class=\"stats-table-cell\">{{ total(intRev).toFixed(2) | number: '1.0-2': 'de' }}</td>\r\n            </tr>\r\n\r\n            <!--External Revenue -->\r\n            <tr class=\"border-line\">\r\n              <td class=\"stats-table-cell\">Ext. Revenue</td>\r\n              <td class=\"stats-table-cell\" *ngFor=\"let e of extRev\">\r\n                {{ e.toFixed(2) | number: '1.0-2': 'de'}}\r\n              </td>\r\n              <td class=\"stats-table-cell\">{{ total(extRev).toFixed(2) | number: '1.0-2': 'de' }}</td>\r\n            </tr>\r\n\r\n            <!--Total Revenue -->\r\n            <tr class=\"border-line\">\r\n              <td class=\"stats-table-cell\">Total Revenue</td>\r\n              <td class=\"stats-table-cell\" *ngFor=\"let t of totalRev\">\r\n                {{ t.toFixed(2) | number: '1.0-2': 'de'}}\r\n              </td>\r\n              <td class=\"stats-table-cell\">{{ total(totalRev).toFixed(2) | number: '1.0-2': 'de' }}</td>\r\n            </tr>\r\n\r\n            <!--FTE -->\r\n            <tr class=\"border-line\">\r\n              <td class=\"stats-table-cell\">FTE</td>\r\n              <td class=\"stats-table-cell\" *ngFor=\"let f of fte\">\r\n                {{ f.toFixed(2) | number: '1.0-2': 'de'}}\r\n              </td>\r\n              <td class=\"stats-table-cell\">{{ total(fte).toFixed(2) | number: '1.0-2': 'de' }}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n\r\n    <br />\r\n    <br />\r\n\r\n    <div layout=\"row\" layout-wrap>\r\n      <div flex=\"33\" class=\"p-16\" top-margin=\"20px\">\r\n        <h3>\r\n          <span style=\"color: #95e616;\">ARVE</span> /\r\n          <span style=\"color: #ff304c;\">URVE</span>\r\n        </h3>\r\n        <canvas class=\"w-100\" id=\"arve-urve\"></canvas>\r\n      </div>\r\n      <div flex=\"33\" class=\"p-16\">\r\n        <h3>COR</h3>\r\n        <canvas class=\"w-100\" id=\"cor\"></canvas>\r\n      </div>\r\n      <div flex=\"33\" class=\"p-16\">\r\n        <h3>REVENUE</h3>\r\n        <canvas class=\"w-100\" id=\"revenue\"></canvas>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n\r\n  <div mat-dialog-actions\r\n    style=\"background-color: #0070ad; margin-bottom: 0px;\"\r\n    layout=\"row\" \r\n    layout-align=\"space-between center\"  \r\n    class=\"fix\" >\r\n        <button mat-stroked-button class=\"mat-primary-reversed\" class=\"button-rows\" color=\"primary\" style=\"background-color: white;\" (click)=\"exportCSV()\">\r\n          <mat-icon>insert_drive_file</mat-icon> Export CSV\r\n        </button>\r\n  </div>"
        },
        {
            "name": "ExecutiveChartPdlComponent",
            "id": "component-ExecutiveChartPdlComponent-e36e2aa0e03da5e2244e65d8a5a451de",
            "file": "src/app/forecast/components/executive-chart-pdl/executive-chart-pdl.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-executive-chart-pdl",
            "styleUrls": [
                "./executive-chart-pdl.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./executive-chart-pdl.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "arve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "arveUrveChart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "cor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "corChart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<ExecutiveChartPdlComponent>",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "extRev",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "fte",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "intRev",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "monthLabels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "reports",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MonthlySummaryReport[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "revenueChart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "showComponent",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "summaryValuesArray",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SummaryValues[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "totalRev",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "urve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methodsClass": [
                {
                    "name": "average",
                    "args": [
                        {
                            "name": "numArray",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 269,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "numArray",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "exportCSV",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 277,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "numberToString",
                    "args": [
                        {
                            "name": "no",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 312,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "no",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 273,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "processTableData",
                    "args": [
                        {
                            "name": "reports",
                            "type": "MonthlySummaryReport[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "reports",
                            "type": "MonthlySummaryReport[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "total",
                    "args": [
                        {
                            "name": "numArray",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 263,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "numArray",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, Inject } from \"@angular/core\";\r\nimport { Chart } from \"chart.js\";\r\nimport {\r\n  MatDialogRef,\r\n  MAT_DIALOG_DATA\r\n} from \"@angular/material/dialog\";\r\nimport { ExecutiveForecastsService } from \"../../../core/services/forecasts/executive-forecasts.service\";\r\nimport { MonthlySummaryReport } from \"../../../core/interfaces/kpiData\";\r\nimport { PageStateService } from \"../../../core/shared/page-state.service\";\r\nimport { DatePipe } from '@angular/common';\r\n\r\n@Component({\r\n  selector: \"app-executive-chart-pdl\",\r\n  templateUrl: \"./executive-chart-pdl.component.html\",\r\n  styleUrls: [\"./executive-chart-pdl.component.scss\"]\r\n})\r\nexport class ExecutiveChartPdlComponent implements OnInit {\r\n\r\n  showComponent: boolean = false;\r\n  \r\n  summaryValuesArray: SummaryValues[];\r\n  \r\n  reports: MonthlySummaryReport[];\r\n\r\n  monthLabels: string[];\r\n\r\n  /*\r\n   *ChartJs object which will render the ARVE/URVE chart\r\n   */\r\n  arveUrveChart;\r\n  /*\r\n   * ARVE set for total ARVE/month for the next 6 months\r\n   */\r\n  arve: number[];\r\n  /*\r\n   * URVE set for total URVE/month for the next 6 months\r\n   */\r\n  urve: number[];\r\n\r\n  /*\r\n   *ChartJs object which will render the COR chart\r\n   */\r\n  corChart;\r\n  /*\r\n   * COR set for total COR/month for the next 6 months\r\n   */\r\n  cor: number[];\r\n\r\n  /*\r\n   *ChartJs object which will render the Revenue chart\r\n   */\r\n  revenueChart;\r\n  /*\r\n   * Internal revenue set for internal revenue/month for the next 6 months\r\n   */\r\n  intRev: number[];\r\n  /*\r\n   * External revenue set for external revenue/month for the next 6 months\r\n   */\r\n  extRev: number[];\r\n  /*\r\n   * Total revenue set for total revenue/month for the next 6 months\r\n   */\r\n  totalRev: number[];\r\n\r\n  fte: number[];\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<ExecutiveChartPdlComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    private executiveService: ExecutiveForecastsService,\r\n    private pageState: PageStateService,\r\n    private datePipe: DatePipe,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.reports = this.executiveService.getKpiPDLData();\r\n    this.reports = this.reports.sort(function(a, b) { return a.monthId-b.monthId });\r\n    \r\n    /**initialize arve to empty set */\r\n    this.arve = [];\r\n    \r\n    /**initialize urve to empty set */\r\n    this.urve = [];\r\n    \r\n    /**initialize cor to empty set */\r\n    this.cor = [];\r\n    \r\n    /**initialize extRev to empty set */\r\n    this.extRev = [];\r\n    \r\n    /**initialize intRev to empty set */\r\n    this.intRev = [];\r\n    \r\n    /**initialize totalRev to empty set */\r\n    this.totalRev = [];\r\n\r\n    this.monthLabels = [];\r\n\r\n    this.fte = [];\r\n\r\n    if (this.reports.length > 0) {\r\n      this.processTableData(this.reports);\r\n      this.showComponent = true;    \r\n    }   \r\n  }\r\n\r\n  processTableData(reports: MonthlySummaryReport[]) : void {\r\n    for (let report of reports) {\r\n      this.arve.push(report.arve * 100);\r\n      this.urve.push(report.urve * 100);\r\n      this.cor.push(report.cor);\r\n      this.intRev.push(report.internalRevenue);\r\n      this.fte.push(report.fte);\r\n      this.extRev.push(report.externalRevenue);\r\n      this.totalRev.push(report.ros);\r\n      this.monthLabels.push(report.month.charAt(0).toUpperCase() + report.month.slice(1) + ' \\'' + (report.year % 100).toString());\r\n    }\r\n\r\n    this.arveUrveChart = new Chart(\"arve-urve\", {\r\n      type: \"bar\",\r\n      data: {\r\n        labels: this.monthLabels,\r\n        datasets: [\r\n          {\r\n            label: \"ARVE\",\r\n            backgroundColor: \"#95E616\",\r\n            data: this.arve\r\n          },\r\n          {\r\n            label: \"URVE\",\r\n            backgroundColor: \"#FF304C\",\r\n            data: this.urve\r\n          }\r\n        ]\r\n      },\r\n      options: {\r\n        legend: {\r\n          display: false\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              barPercentage: 0.7,\r\n              categoryPercentage: 0.5\r\n            }\r\n          ],\r\n          yAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              ticks: {\r\n                min: 0,\r\n                max: 100\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    });\r\n\r\n    this.corChart = new Chart(\"cor\", {\r\n      type: \"line\",\r\n      data: {\r\n        labels: this.monthLabels,\r\n        datasets: [\r\n          {\r\n            data: this.cor,\r\n            borderColor: \"#7e39ba\",\r\n            fill: false\r\n          }\r\n        ]\r\n      },\r\n      options: {\r\n        legend: {\r\n          display: false\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              barPercentage: 0.5,\r\n              categoryPercentage: 0.5\r\n            }\r\n          ],\r\n          yAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              ticks: {\r\n                min: 0\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    });\r\n\r\n    this.revenueChart = this.arveUrveChart = new Chart(\"revenue\", {\r\n      type: \"bar\",\r\n      data: {\r\n        labels: this.monthLabels,\r\n        datasets: [\r\n          {\r\n            label: \"INT\",\r\n            backgroundColor: \"#12abdb\",\r\n            data: this.intRev\r\n          },\r\n          {\r\n            label: \"EXT\",\r\n            backgroundColor: \"#0070ad\",\r\n            data: this.extRev\r\n          },\r\n          {\r\n            label: \"TOTAL\",\r\n            backgroundColor: \"#2b0a3d\",\r\n            data: this.totalRev\r\n          }\r\n        ]\r\n      },\r\n      options: {\r\n        legend: {\r\n          display: true\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              barPercentage: 0.7,\r\n              categoryPercentage: 0.5\r\n            }\r\n          ],\r\n          yAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              ticks: {\r\n                min: 0\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  total(numArray: number[]) {\r\n    return numArray.reduce(function(a, b) {\r\n      return a + b;\r\n    }, 0);\r\n  }\r\n\r\n  average(numArray: number[]) : number {\r\n    return this.total(numArray) / numArray.length;\r\n  }\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  exportCSV(): void {\r\n    this.pageState.showSpinner();\r\n    let lineEnding = \"\\r\\n\";\r\n    let header = \"KPI;\" + this.monthLabels.join(\";\") + lineEnding;\r\n    let body: string = \"ARVE;\" + this.arve.map(this.numberToString).join(\";\") + lineEnding + \r\n      \"URVE;\" + this.urve.map(this.numberToString).join(\";\") + lineEnding +\r\n      \"COR;\" + this.cor.map(this.numberToString).join(\";\") + lineEnding +\r\n      \"Int. Revenue;\" + this.intRev.map(this.numberToString).join(\";\") + lineEnding + \r\n      \"Ext. Revenue;\" + this.extRev.map(this.numberToString).join(\";\") + lineEnding +\r\n      \"Total Revenue;\" + this.totalRev.map(this.numberToString).join(\";\") + lineEnding +\r\n      \"FTE;\" + this.fte.map(this.numberToString).join(\";\") + lineEnding;\r\n    const data = header + body;\r\n    const blob: Blob = new Blob([data], { type: \"text/csv\" });\r\n    const filename: string = this.datePipe.transform(new Date(), \"yyyyMMdd\") + \"-KPIOverview.csv\";    \r\n    this.pageState.hideSpinner();\r\n\r\n    //For IE\r\n    let navigator: any = window.navigator;\r\n    if (navigator.msSaveOrOpenBlob) {\r\n      navigator.msSaveOrOpenBlob(blob, filename);\r\n    //For any other browser\r\n    } else {\r\n      const url: string = window.URL.createObjectURL(blob);\r\n\r\n      let a: HTMLAnchorElement = document.createElement(\"a\");\r\n      a.href = url;\r\n      a.download = filename;\r\n\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      document.body.removeChild(a);\r\n      window.URL.revokeObjectURL(url);\r\n    }\r\n  }\r\n\r\n  numberToString(no: number): string {\r\n    return no.toLocaleString(\"de\",  { minimumFractionDigits: 0, maximumFractionDigits: 2 } ).replace(\".\",\"\");\r\n  }\r\n}\r\n\r\nexport interface SummaryValues {\r\n  monthId: number;\r\n  probabilityId: number;\r\n  billableDays: number;\r\n  nonBillableDays: number;\r\n  vacationDays: number;\r\n  trainingDays: number;\r\n  businessDays: number;\r\n  benchDays: number;\r\n  workingDays: number;\r\n  fteCss: number;\r\n  cor: number;\r\n  arve: number;\r\n  fte: number;\r\n  urve: number;\r\n  ros: number;\r\n  external: number;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".w-100 {\r\n  width: 100%;\r\n}\r\n\r\n.w-50 {\r\n  width: 50%;\r\n}\r\n\r\n.h-100 {\r\n  height: 100%;\r\n}\r\n\r\n.p-16 {\r\n  padding: 16px;\r\n}\r\n\r\n.px-16 {\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n}\r\n\r\n.pt-5 {\r\n  padding-top: 5px;\r\n}\r\n.example-fill-remaining-space {\r\n  /* This fills the remaining space, by using flexbox. \r\n     Every toolbar row uses a flexbox row layout. */\r\n  flex: 1 1 auto;\r\n}\r\n\r\n.white {\r\n  color: #ffffff;\r\n}\r\n\r\n.fix {\r\n  display: flex;\r\n  color: #ffffff;\r\n  background-color: #0070ad;\r\n  height: 50px;\r\n  padding: 0px;\r\n  padding-left: 24px;\r\n  padding-right: 24px;\r\n  line-height: 3.3;\r\n}\r\n\r\n.fix .title {\r\n  color: #fff;\r\n  padding-left: 14px;\r\n}\r\n.stats-table-header {\r\n  font-family: \"Roboto\", sans-serif;\r\n  text-align: center;\r\n  padding: 12px;\r\n}\r\n\r\n.stats-table-header:first-of-type {\r\n  font-family: \"Roboto\", sans-serif;\r\n  text-align: left;\r\n  padding: 12px;\r\n}\r\n\r\n.stats-table-cell:first-of-type {\r\n  font-family: \"Roboto\", sans-serif;\r\n  text-align: left;\r\n  font-size: 12px;\r\n  line-height: 1.3em;\r\n  padding: 12px;\r\n}\r\n\r\n.stats-table-cell {\r\n  font-family: \"Roboto\", sans-serif;\r\n  text-align: center;\r\n  font-size: 12px;\r\n  line-height: 1.3em;\r\n  padding: 12px;\r\n}\r\n\r\n.border-collapse {\r\n  border-collapse: collapse;\r\n}\r\n\r\n.border-line {\r\n  border-bottom: 1px solid #e0e0e0;\r\n  border-collapse: separate;\r\n  border-spacing: 4px;\r\n}\r\n\r\n.color-grey {\r\n  color: grey;\r\n}\r\n\r\n.mat-stroked-button {\r\n\tmargin: 5px;\r\n\tmargin-left: 0;\r\n}\r\n\r\n.button-rows {\r\n\tdisplay: flex;\r\n\t.button-row {\r\n    width: 50%\r\n  }\r\n}",
                    "styleUrl": "./executive-chart-pdl.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ExecutiveChartPdlComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 66,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ExecutiveChartPdlComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\r\n  <div\r\n    mat-dialog-title\r\n    class=\"fix\"\r\n    layout=\"row\"\r\n    layout-align=\"space-between center\"\r\n    style=\"margin-bottom: 0px; padding-bottom: 0;\"\r\n  >\r\n    <span>KPI Overview PDL</span>\r\n\r\n    <!-- This fills the remaining space of the current row -->\r\n    <span class=\"example-fill-remaining-space\"></span>\r\n\r\n    <button mat-icon-button (click)=\"onNoClick()\">\r\n      <mat-icon class=\"white\">close</mat-icon>\r\n    </button>\r\n  </div>\r\n\r\n  <div mat-dialog-content>\r\n    <div layout=\"row\" layout-wrap *ngIf=\"showComponent\">\r\n      <div flex=\"100\" class=\"px-16 pt-5\">\r\n        Overview/Summary of the KPIs for the next 6 Months. COR is averaged in the\r\n        months over the days. ARVE/URVE and COR are averaged in the TOTAL Column\r\n        (i. e. the average over the 6 months).\r\n\r\n        <table class=\"border-collapse w-100 h-100\">\r\n          <thead class=\"border-line color-grey\">\r\n            <tr>\r\n              <td class=\"stats-table-header\">KPI</td>\r\n              <td *ngFor=\"let m of monthLabels\" class=\"stats-table-header\">\r\n                {{ m }}\r\n              </td>\r\n              <td class=\"stats-table-header\">TOTAL</td>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <!--ARVE -->\r\n            <tr class=\"border-line\">\r\n              <td class=\"stats-table-cell\">ARVE</td>\r\n              <td class=\"stats-table-cell\" *ngFor=\"let a of arve\">\r\n                {{ a.toFixed(2) | number: '1.0-2': 'de' }}\r\n              </td>\r\n              <td class=\"stats-table-cell\">{{ average(arve).toFixed(2) | number: '1.0-2': 'de'}}</td>\r\n            </tr>\r\n\r\n            <!--URVE -->\r\n            <tr class=\"border-line\">\r\n              <td class=\"stats-table-cell\">URVE</td>\r\n              <td class=\"stats-table-cell\" *ngFor=\"let u of urve\">\r\n                {{ u.toFixed(2) | number: '1.0-2': 'de' }}\r\n              </td>\r\n              <td class=\"stats-table-cell\">{{ average(urve).toFixed(2) | number: '1.0-2': 'de' }}</td>\r\n            </tr>\r\n\r\n            <!--COR -->\r\n            <tr class=\"border-line\">\r\n              <td class=\"stats-table-cell\">COR</td>\r\n              <td class=\"stats-table-cell\" *ngFor=\"let c of cor\">\r\n                {{ c.toFixed(2) | number: '1.0-2': 'de' }}\r\n              </td>\r\n              <td class=\"stats-table-cell\">{{ average(cor).toFixed(2) | number: '1.0-2': 'de' }}</td>\r\n            </tr>\r\n\r\n            <!--Internal Revenue -->\r\n            <tr class=\"border-line\">\r\n              <td class=\"stats-table-cell\">Int. Revenue</td>\r\n              <td class=\"stats-table-cell\" *ngFor=\"let i of intRev\">\r\n                {{ i.toFixed(2) | number: '1.0-2': 'de' }}\r\n              </td>\r\n              <td class=\"stats-table-cell\">{{ total(intRev).toFixed(2) | number: '1.0-2': 'de' }}</td>\r\n            </tr>\r\n\r\n            <!--External Revenue -->\r\n            <tr class=\"border-line\">\r\n              <td class=\"stats-table-cell\">Ext. Revenue</td>\r\n              <td class=\"stats-table-cell\" *ngFor=\"let e of extRev\">\r\n                {{ e.toFixed(2) | number: '1.0-2': 'de'}}\r\n              </td>\r\n              <td class=\"stats-table-cell\">{{ total(extRev).toFixed(2) | number: '1.0-2': 'de' }}</td>\r\n            </tr>\r\n\r\n            <!--Total Revenue -->\r\n            <tr class=\"border-line\">\r\n              <td class=\"stats-table-cell\">Total Revenue</td>\r\n              <td class=\"stats-table-cell\" *ngFor=\"let t of totalRev\">\r\n                {{ t.toFixed(2) | number: '1.0-2': 'de'}}\r\n              </td>\r\n              <td class=\"stats-table-cell\">{{ total(totalRev).toFixed(2) | number: '1.0-2': 'de' }}</td>\r\n            </tr>\r\n\r\n            <!--FTE -->\r\n            <tr class=\"border-line\">\r\n              <td class=\"stats-table-cell\">FTE</td>\r\n              <td class=\"stats-table-cell\" *ngFor=\"let f of fte\">\r\n                {{ f.toFixed(2) | number: '1.0-2': 'de'}}\r\n              </td>\r\n              <td class=\"stats-table-cell\">{{ total(fte).toFixed(2) | number: '1.0-2': 'de' }}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n\r\n    <br />\r\n    <br />\r\n\r\n    <div layout=\"row\" layout-wrap>\r\n      <div flex=\"33\" class=\"p-16\" top-margin=\"20px\">\r\n        <h3>\r\n          <span style=\"color: #95e616;\">ARVE</span> /\r\n          <span style=\"color: #ff304c;\">URVE</span>\r\n        </h3>\r\n        <canvas class=\"w-100\" id=\"arve-urve\"></canvas>\r\n      </div>\r\n      <div flex=\"33\" class=\"p-16\">\r\n        <h3>COR</h3>\r\n        <canvas class=\"w-100\" id=\"cor\"></canvas>\r\n      </div>\r\n      <div flex=\"33\" class=\"p-16\">\r\n        <h3>REVENUE</h3>\r\n        <canvas class=\"w-100\" id=\"revenue\"></canvas>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n\r\n  <div mat-dialog-actions\r\n    style=\"background-color: #0070ad; margin-bottom: 0px;\"\r\n    layout=\"row\" \r\n    layout-align=\"space-between center\"  \r\n    class=\"fix\" >\r\n        <button mat-stroked-button class=\"mat-primary-reversed\" class=\"button-rows\" color=\"primary\" style=\"background-color: white;\" (click)=\"exportCSV()\">\r\n          <mat-icon>insert_drive_file</mat-icon> Export CSV\r\n        </button>\r\n  </div>"
        },
        {
            "name": "ExecutiveChartPlComponent",
            "id": "component-ExecutiveChartPlComponent-a47bd418cfc9bf10a2b60bcf9fa003bd",
            "file": "src/app/forecast/components/executive-chart-pl/executive-chart-pl.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-executive-chart-pl",
            "styleUrls": [
                "./executive-chart-pl.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./executive-chart-pl.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "arve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "arveUrveChart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "cor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "corChart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<ExecutiveChartPlComponent>",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "extRev",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "fte",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "intRev",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "monthLabels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "reports",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MonthlySummaryReport[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "revenueChart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "showComponent",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "summaryValuesArray",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SummaryValues[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "totalRev",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "urve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methodsClass": [
                {
                    "name": "average",
                    "args": [
                        {
                            "name": "numArray",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 269,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "numArray",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "exportCSV",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 277,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "numberToString",
                    "args": [
                        {
                            "name": "no",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 312,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "no",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 273,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "processTableData",
                    "args": [
                        {
                            "name": "reports",
                            "type": "MonthlySummaryReport[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "reports",
                            "type": "MonthlySummaryReport[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "total",
                    "args": [
                        {
                            "name": "numArray",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 263,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "numArray",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, Inject } from \"@angular/core\";\r\nimport { Chart } from \"chart.js\";\r\nimport {\r\n  MatDialogRef,\r\n  MAT_DIALOG_DATA\r\n} from \"@angular/material/dialog\";\r\nimport { ExecutiveForecastsService } from \"../../../core/services/forecasts/executive-forecasts.service\";\r\nimport { MonthlySummaryReport } from \"../../../core/interfaces/kpiData\";\r\nimport { PageStateService } from \"../../../core/shared/page-state.service\";\r\nimport { DatePipe } from '@angular/common';\r\n\r\n@Component({\r\n  selector: \"app-executive-chart-pl\",\r\n  templateUrl: \"./executive-chart-pl.component.html\",\r\n  styleUrls: [\"./executive-chart-pl.component.scss\"]\r\n})\r\nexport class ExecutiveChartPlComponent implements OnInit {\r\n\r\n  showComponent: boolean = false;\r\n  \r\n  summaryValuesArray: SummaryValues[];\r\n  \r\n  reports: MonthlySummaryReport[];\r\n\r\n  monthLabels: string[];\r\n\r\n  /*\r\n   *ChartJs object which will render the ARVE/URVE chart\r\n   */\r\n  arveUrveChart;\r\n  /*\r\n   * ARVE set for total ARVE/month for the next 6 months\r\n   */\r\n  arve: number[];\r\n  /*\r\n   * URVE set for total URVE/month for the next 6 months\r\n   */\r\n  urve: number[];\r\n\r\n  /*\r\n   *ChartJs object which will render the COR chart\r\n   */\r\n  corChart;\r\n  /*\r\n   * COR set for total COR/month for the next 6 months\r\n   */\r\n  cor: number[];\r\n\r\n  /*\r\n   *ChartJs object which will render the Revenue chart\r\n   */\r\n  revenueChart;\r\n  /*\r\n   * Internal revenue set for internal revenue/month for the next 6 months\r\n   */\r\n  intRev: number[];\r\n  /*\r\n   * External revenue set for external revenue/month for the next 6 months\r\n   */\r\n  extRev: number[];\r\n  /*\r\n   * Total revenue set for total revenue/month for the next 6 months\r\n   */\r\n  totalRev: number[];\r\n\r\n  fte: number[];\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<ExecutiveChartPlComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    private executiveService: ExecutiveForecastsService,\r\n    private pageState: PageStateService,\r\n    private datePipe: DatePipe,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.reports = this.executiveService.getKpiDataPL();\r\n    this.reports = this.reports.sort(function(a, b) { return a.monthId-b.monthId });\r\n    \r\n    /**initialize arve to empty set */\r\n    this.arve = [];\r\n    \r\n    /**initialize urve to empty set */\r\n    this.urve = [];\r\n    \r\n    /**initialize cor to empty set */\r\n    this.cor = [];\r\n    \r\n    /**initialize extRev to empty set */\r\n    this.extRev = [];\r\n    \r\n    /**initialize intRev to empty set */\r\n    this.intRev = [];\r\n    \r\n    /**initialize totalRev to empty set */\r\n    this.totalRev = [];\r\n\r\n    this.monthLabels = [];\r\n\r\n    this.fte = [];\r\n\r\n    if (this.reports.length > 0) {\r\n      this.processTableData(this.reports);\r\n      this.showComponent = true;    \r\n    }   \r\n  }\r\n\r\n  processTableData(reports: MonthlySummaryReport[]) : void {\r\n    for (let report of reports) {\r\n      this.arve.push(report.arve * 100);\r\n      this.urve.push(report.urve * 100);\r\n      this.cor.push(report.cor);\r\n      this.intRev.push(report.internalRevenue);\r\n      this.fte.push(report.fte);\r\n      this.extRev.push(report.externalRevenue);\r\n      this.totalRev.push(report.ros);\r\n      this.monthLabels.push(report.month.charAt(0).toUpperCase() + report.month.slice(1) + ' \\'' + (report.year % 100).toString());\r\n    }\r\n\r\n    this.arveUrveChart = new Chart(\"arve-urve\", {\r\n      type: \"bar\",\r\n      data: {\r\n        labels: this.monthLabels,\r\n        datasets: [\r\n          {\r\n            label: \"ARVE\",\r\n            backgroundColor: \"#95E616\",\r\n            data: this.arve\r\n          },\r\n          {\r\n            label: \"URVE\",\r\n            backgroundColor: \"#FF304C\",\r\n            data: this.urve\r\n          }\r\n        ]\r\n      },\r\n      options: {\r\n        legend: {\r\n          display: false\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              barPercentage: 0.7,\r\n              categoryPercentage: 0.5\r\n            }\r\n          ],\r\n          yAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              ticks: {\r\n                min: 0,\r\n                max: 100\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    });\r\n\r\n    this.corChart = new Chart(\"cor\", {\r\n      type: \"line\",\r\n      data: {\r\n        labels: this.monthLabels,\r\n        datasets: [\r\n          {\r\n            data: this.cor,\r\n            borderColor: \"#7e39ba\",\r\n            fill: false\r\n          }\r\n        ]\r\n      },\r\n      options: {\r\n        legend: {\r\n          display: false\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              barPercentage: 0.5,\r\n              categoryPercentage: 0.5\r\n            }\r\n          ],\r\n          yAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              ticks: {\r\n                min: 0\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    });\r\n\r\n    this.revenueChart = this.arveUrveChart = new Chart(\"revenue\", {\r\n      type: \"bar\",\r\n      data: {\r\n        labels: this.monthLabels,\r\n        datasets: [\r\n          {\r\n            label: \"INT\",\r\n            backgroundColor: \"#12abdb\",\r\n            data: this.intRev\r\n          },\r\n          {\r\n            label: \"EXT\",\r\n            backgroundColor: \"#0070ad\",\r\n            data: this.extRev\r\n          },\r\n          {\r\n            label: \"TOTAL\",\r\n            backgroundColor: \"#2b0a3d\",\r\n            data: this.totalRev\r\n          }\r\n        ]\r\n      },\r\n      options: {\r\n        legend: {\r\n          display: true\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              barPercentage: 0.7,\r\n              categoryPercentage: 0.5\r\n            }\r\n          ],\r\n          yAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              ticks: {\r\n                min: 0\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  total(numArray: number[]) {\r\n    return numArray.reduce(function(a, b) {\r\n      return a + b;\r\n    }, 0);\r\n  }\r\n\r\n  average(numArray: number[]) : number {\r\n    return this.total(numArray) / numArray.length;\r\n  }\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  exportCSV(): void {\r\n    this.pageState.showSpinner();\r\n    let lineEnding = \"\\r\\n\";\r\n    let header = \"KPI;\" + this.monthLabels.join(\";\") + lineEnding;\r\n    let body: string = \"ARVE;\" + this.arve.map(this.numberToString).join(\";\") + lineEnding + \r\n      \"URVE;\" + this.urve.map(this.numberToString).join(\";\") + lineEnding +\r\n      \"COR;\" + this.cor.map(this.numberToString).join(\";\") + lineEnding +\r\n      \"Int. Revenue;\" + this.intRev.map(this.numberToString).join(\";\") + lineEnding + \r\n      \"Ext. Revenue;\" + this.extRev.map(this.numberToString).join(\";\") + lineEnding +\r\n      \"Total Revenue;\" + this.totalRev.map(this.numberToString).join(\";\") + lineEnding +\r\n      \"FTE;\" + this.fte.map(this.numberToString).join(\";\") + lineEnding;\r\n    const data = header + body;\r\n    const blob: Blob = new Blob([data], { type: \"text/csv\" });\r\n    const filename: string = this.datePipe.transform(new Date(), \"yyyyMMdd\") + \"-KPIOverview.csv\";    \r\n    this.pageState.hideSpinner();\r\n\r\n    //For IE\r\n    let navigator: any = window.navigator;\r\n    if (navigator.msSaveOrOpenBlob) {\r\n      navigator.msSaveOrOpenBlob(blob, filename);\r\n    //For any other browser\r\n    } else {\r\n      const url: string = window.URL.createObjectURL(blob);\r\n\r\n      let a: HTMLAnchorElement = document.createElement(\"a\");\r\n      a.href = url;\r\n      a.download = filename;\r\n\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      document.body.removeChild(a);\r\n      window.URL.revokeObjectURL(url);\r\n    }\r\n  }\r\n\r\n  numberToString(no: number): string {\r\n    return no.toLocaleString(\"de\",  { minimumFractionDigits: 0, maximumFractionDigits: 2 } ).replace(\".\",\"\");\r\n  }\r\n}\r\n\r\nexport interface SummaryValues {\r\n  monthId: number;\r\n  probabilityId: number;\r\n  billableDays: number;\r\n  nonBillableDays: number;\r\n  vacationDays: number;\r\n  trainingDays: number;\r\n  businessDays: number;\r\n  benchDays: number;\r\n  workingDays: number;\r\n  fteCss: number;\r\n  cor: number;\r\n  arve: number;\r\n  fte: number;\r\n  urve: number;\r\n  ros: number;\r\n  external: number;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".w-100 {\r\n  width: 100%;\r\n}\r\n\r\n.w-50 {\r\n  width: 50%;\r\n}\r\n\r\n.h-100 {\r\n  height: 100%;\r\n}\r\n\r\n.p-16 {\r\n  padding: 16px;\r\n}\r\n\r\n.px-16 {\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n}\r\n\r\n.pt-5 {\r\n  padding-top: 5px;\r\n}\r\n.example-fill-remaining-space {\r\n  /* This fills the remaining space, by using flexbox. \r\n     Every toolbar row uses a flexbox row layout. */\r\n  flex: 1 1 auto;\r\n}\r\n\r\n.white {\r\n  color: #ffffff;\r\n}\r\n\r\n.fix {\r\n  display: flex;\r\n  color: #ffffff;\r\n  background-color: #0070ad;\r\n  height: 50px;\r\n  padding: 0px;\r\n  padding-left: 24px;\r\n  padding-right: 24px;\r\n  line-height: 3.3;\r\n}\r\n\r\n.fix .title {\r\n  color: #fff;\r\n  padding-left: 14px;\r\n}\r\n.stats-table-header {\r\n  font-family: \"Roboto\", sans-serif;\r\n  text-align: center;\r\n  padding: 12px;\r\n}\r\n\r\n.stats-table-header:first-of-type {\r\n  font-family: \"Roboto\", sans-serif;\r\n  text-align: left;\r\n  padding: 12px;\r\n}\r\n\r\n.stats-table-cell:first-of-type {\r\n  font-family: \"Roboto\", sans-serif;\r\n  text-align: left;\r\n  font-size: 12px;\r\n  line-height: 1.3em;\r\n  padding: 12px;\r\n}\r\n\r\n.stats-table-cell {\r\n  font-family: \"Roboto\", sans-serif;\r\n  text-align: center;\r\n  font-size: 12px;\r\n  line-height: 1.3em;\r\n  padding: 12px;\r\n}\r\n\r\n.border-collapse {\r\n  border-collapse: collapse;\r\n}\r\n\r\n.border-line {\r\n  border-bottom: 1px solid #e0e0e0;\r\n  border-collapse: separate;\r\n  border-spacing: 4px;\r\n}\r\n\r\n.color-grey {\r\n  color: grey;\r\n}\r\n\r\n.mat-stroked-button {\r\n\tmargin: 5px;\r\n\tmargin-left: 0;\r\n}\r\n\r\n.button-rows {\r\n\tdisplay: flex;\r\n\t.button-row {\r\n    width: 50%\r\n  }\r\n}",
                    "styleUrl": "./executive-chart-pl.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ExecutiveChartPlComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 66,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ExecutiveChartPlComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\r\n  <div\r\n    mat-dialog-title\r\n    class=\"fix\"\r\n    layout=\"row\"\r\n    layout-align=\"space-between center\"\r\n    style=\"margin-bottom: 0px; padding-bottom: 0;\"\r\n  >\r\n    <span>KPI Overview PL</span>\r\n\r\n    <!-- This fills the remaining space of the current row -->\r\n    <span class=\"example-fill-remaining-space\"></span>\r\n\r\n    <button mat-icon-button (click)=\"onNoClick()\">\r\n      <mat-icon class=\"white\">close</mat-icon>\r\n    </button>\r\n  </div>\r\n\r\n  <div mat-dialog-content>\r\n    <div layout=\"row\" layout-wrap *ngIf=\"showComponent\">\r\n      <div flex=\"100\" class=\"px-16 pt-5\">\r\n        Overview/Summary of the KPIs for the next 6 Months. COR is averaged in the\r\n        months over the days. ARVE/URVE and COR are averaged in the TOTAL Column\r\n        (i. e. the average over the 6 months).\r\n\r\n        <table class=\"border-collapse w-100 h-100\">\r\n          <thead class=\"border-line color-grey\">\r\n            <tr>\r\n              <td class=\"stats-table-header\">KPI</td>\r\n              <td *ngFor=\"let m of monthLabels\" class=\"stats-table-header\">\r\n                {{ m }}\r\n              </td>\r\n              <td class=\"stats-table-header\">TOTAL</td>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <!--ARVE -->\r\n            <tr class=\"border-line\">\r\n              <td class=\"stats-table-cell\">ARVE</td>\r\n              <td class=\"stats-table-cell\" *ngFor=\"let a of arve\">\r\n                {{ a.toFixed(2) | number: '1.0-2': 'de' }}\r\n              </td>\r\n              <td class=\"stats-table-cell\">{{ average(arve).toFixed(2) | number: '1.0-2': 'de'}}</td>\r\n            </tr>\r\n\r\n            <!--URVE -->\r\n            <tr class=\"border-line\">\r\n              <td class=\"stats-table-cell\">URVE</td>\r\n              <td class=\"stats-table-cell\" *ngFor=\"let u of urve\">\r\n                {{ u.toFixed(2) | number: '1.0-2': 'de' }}\r\n              </td>\r\n              <td class=\"stats-table-cell\">{{ average(urve).toFixed(2) | number: '1.0-2': 'de' }}</td>\r\n            </tr>\r\n\r\n            <!--COR -->\r\n            <tr class=\"border-line\">\r\n              <td class=\"stats-table-cell\">COR</td>\r\n              <td class=\"stats-table-cell\" *ngFor=\"let c of cor\">\r\n                {{ c.toFixed(2) | number: '1.0-2': 'de' }}\r\n              </td>\r\n              <td class=\"stats-table-cell\">{{ average(cor).toFixed(2) | number: '1.0-2': 'de' }}</td>\r\n            </tr>\r\n\r\n            <!--Internal Revenue -->\r\n            <tr class=\"border-line\">\r\n              <td class=\"stats-table-cell\">Int. Revenue</td>\r\n              <td class=\"stats-table-cell\" *ngFor=\"let i of intRev\">\r\n                {{ i.toFixed(2) | number: '1.0-2': 'de' }}\r\n              </td>\r\n              <td class=\"stats-table-cell\">{{ total(intRev).toFixed(2) | number: '1.0-2': 'de' }}</td>\r\n            </tr>\r\n\r\n            <!--External Revenue -->\r\n            <tr class=\"border-line\">\r\n              <td class=\"stats-table-cell\">Ext. Revenue</td>\r\n              <td class=\"stats-table-cell\" *ngFor=\"let e of extRev\">\r\n                {{ e.toFixed(2) | number: '1.0-2': 'de'}}\r\n              </td>\r\n              <td class=\"stats-table-cell\">{{ total(extRev).toFixed(2) | number: '1.0-2': 'de' }}</td>\r\n            </tr>\r\n\r\n            <!--Total Revenue -->\r\n            <tr class=\"border-line\">\r\n              <td class=\"stats-table-cell\">Total Revenue</td>\r\n              <td class=\"stats-table-cell\" *ngFor=\"let t of totalRev\">\r\n                {{ t.toFixed(2) | number: '1.0-2': 'de'}}\r\n              </td>\r\n              <td class=\"stats-table-cell\">{{ total(totalRev).toFixed(2) | number: '1.0-2': 'de' }}</td>\r\n            </tr>\r\n\r\n            <!--FTE -->\r\n            <tr class=\"border-line\">\r\n              <td class=\"stats-table-cell\">FTE</td>\r\n              <td class=\"stats-table-cell\" *ngFor=\"let f of fte\">\r\n                {{ f.toFixed(2) | number: '1.0-2': 'de'}}\r\n              </td>\r\n              <td class=\"stats-table-cell\">{{ total(fte).toFixed(2) | number: '1.0-2': 'de' }}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n\r\n    <br />\r\n    <br />\r\n\r\n    <div layout=\"row\" layout-wrap>\r\n      <div flex=\"33\" class=\"p-16\" top-margin=\"20px\">\r\n        <h3>\r\n          <span style=\"color: #95e616;\">ARVE</span> /\r\n          <span style=\"color: #ff304c;\">URVE</span>\r\n        </h3>\r\n        <canvas class=\"w-100\" id=\"arve-urve\"></canvas>\r\n      </div>\r\n      <div flex=\"33\" class=\"p-16\">\r\n        <h3>COR</h3>\r\n        <canvas class=\"w-100\" id=\"cor\"></canvas>\r\n      </div>\r\n      <div flex=\"33\" class=\"p-16\">\r\n        <h3>REVENUE</h3>\r\n        <canvas class=\"w-100\" id=\"revenue\"></canvas>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n\r\n  <div mat-dialog-actions\r\n    style=\"background-color: #0070ad; margin-bottom: 0px;\"\r\n    layout=\"row\" \r\n    layout-align=\"space-between center\"  \r\n    class=\"fix\" >\r\n        <button mat-stroked-button class=\"mat-primary-reversed\" class=\"button-rows\" color=\"primary\" style=\"background-color: white;\" (click)=\"exportCSV()\">\r\n          <mat-icon>insert_drive_file</mat-icon> Export CSV\r\n        </button>\r\n  </div>"
        },
        {
            "name": "ExecutiveComponent",
            "id": "component-ExecutiveComponent-ff372b233ea274cfe7845d43958fa97f",
            "file": "src/app/forecast/pages/executive/executive.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-executive",
            "styleUrls": [
                "./executive.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./executive.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "availableMonths",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "<p>Available months array</p>\n",
                    "line": 40,
                    "rawdescription": "\n\nAvailable months array\n"
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "forecastrSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "months",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "<p>Selected months array</p>\n",
                    "line": 48,
                    "rawdescription": "\n\nSelected months array\n"
                },
                {
                    "name": "monthSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "period",
                    "defaultValue": "{ from: undefined, to: undefined }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Defines executive data view period (monthIDs)</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nDefines executive data view period (monthIDs)\n"
                },
                {
                    "name": "powerBiService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgxPowerBiService",
                    "optional": false,
                    "description": "<p>Implementation for powerbi service component</p>\n",
                    "line": 30,
                    "rawdescription": "\n\nImplementation for powerbi service component\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "downloadCSV",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalled for executive view summary data download\n",
                    "description": "<p>Called for executive view summary data download</p>\n"
                },
                {
                    "name": "downloadFile",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDownload csv file with team forecast data\n",
                    "description": "<p>Download csv file with team forecast data</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5096,
                                "end": 5100,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "data"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5090,
                                "end": 5095,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "initExecutiveView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInit method called when general forecastr data have been loaded successfully\n",
                    "description": "<p>Init method called when general forecastr data have been loaded successfully</p>\n"
                },
                {
                    "name": "isExecutive",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isMSLLevelRole",
                    "args": [
                        {
                            "name": "roleName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 219,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roleName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnsubscribes services when component gets destroyed\n",
                    "description": "<p>Unsubscribes services when component gets destroyed</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ninit method\n",
                    "description": "<p>init method</p>\n"
                },
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 202,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOpen dialog for executive chart",
                    "description": "<p>Open dialog for executive chart</p>\n"
                },
                {
                    "name": "powerBIReportEmbedded",
                    "args": [
                        {
                            "name": "$e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalled when powerbi report was successfully embedded\n",
                    "description": "<p>Called when powerbi report was successfully embedded</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2995,
                                "end": 2997,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "$e"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2989,
                                "end": 2994,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setDefaultPeriod",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the default period to current month until 6 months in the future\n",
                    "description": "<p>Sets the default period to current month until 6 months in the future</p>\n"
                },
                {
                    "name": "showPeriod",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReloads the values after period update\n",
                    "description": "<p>Reloads the values after period update</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Executive forecast-view component</p>\n",
            "rawdescription": "\n\nExecutive forecast-view component\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, Input } from \"@angular/core\";\r\nimport { MatDialog } from \"@angular/material/dialog\";\r\nimport { Month } from \"../../../core/interfaces/month\";\r\nimport { UtilitiesService } from \"../../../core/services/utilities.service\";\r\nimport { PageStateService } from \"../../../core/shared/page-state.service\";\r\nimport { ExecutiveForecastsService } from \"../../../core/services/forecasts/executive-forecasts.service\";\r\nimport { DatePipe } from \"@angular/common\";\r\nimport { NgxPowerBiService } from \"ngx-powerbi\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { AuthService } from \"../../../core/security/auth.service\";\r\nimport { environment } from \"../../../../environments/environment\";\r\nimport { ExecutiveChartComponent } from \"../../components/executive-chart/executive-chart.component\";\r\nimport { environment as env } from \"../../../../environments/environment\";\r\nimport { UserService } from \"../../../core/services/user.service\";\r\nimport { CalculationService } from \"../../../core/services/forecasts/calculation.service\";\r\n\r\n/**\r\n * Executive forecast-view component\r\n */\r\n@Component({\r\n  selector: \"app-executive\",\r\n  templateUrl: \"./executive.component.html\",\r\n  styleUrls: [\"./executive.component.scss\"],\r\n})\r\nexport class ExecutiveComponent implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * Implementation for powerbi service component\r\n   */\r\n  powerBiService: NgxPowerBiService;\r\n\r\n  /**\r\n   * Defines executive data view period (monthIDs)\r\n   */\r\n  period: any = { from: undefined, to: undefined };\r\n\r\n  /**\r\n   * Available months array\r\n   */\r\n  availableMonths: Month[] = [];\r\n\r\n  //@Input('hop')\r\n  //hop = false;\r\n\r\n  /**\r\n   * Selected months array\r\n   */\r\n  months: Month[] = [];\r\n  monthSubscription: Subscription;\r\n  forecastrSubscription: Subscription;\r\n\r\n  /**\r\n   * executive forecast-view component constructor\r\n   * @param datePipe\r\n   * @param authService\r\n   * @param utilitiesService\r\n   * @param pageState\r\n   * @param executiveService\r\n   */\r\n  constructor(\r\n    private datePipe: DatePipe,\r\n    private authService: AuthService,\r\n    private utilitiesService: UtilitiesService,\r\n    private pageState: PageStateService,\r\n    private executiveService: ExecutiveForecastsService,\r\n    private userService: UserService,\r\n    private calculationService: CalculationService,\r\n    public dialog: MatDialog\r\n  ) {\r\n    this.powerBiService = new NgxPowerBiService();\r\n  }\r\n\r\n  /**\r\n   * init method\r\n   */\r\n  ngOnInit(): void {\r\n    this.forecastrSubscription = this.pageState.forecastrReady$.subscribe(\r\n      (ready: boolean) => {\r\n        if (ready && this.authService.hasRole(environment.roles.msl)) {\r\n          this.initExecutiveView();\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Unsubscribes services when component gets destroyed\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.monthSubscription.unsubscribe();\r\n    this.forecastrSubscription.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * Called when powerbi report was successfully embedded\r\n   * @param $e\r\n   */\r\n  powerBIReportEmbedded($e): void {\r\n    console.log(\"report embedded\");\r\n  }\r\n\r\n  /**\r\n   * Init method called when general forecastr data have been loaded successfully\r\n   */\r\n  initExecutiveView(): void {\r\n    this.monthSubscription = this.utilitiesService.months$.subscribe(\r\n      (months: Month[]) => {\r\n        this.availableMonths = months;\r\n        this.setDefaultPeriod();\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Sets the default period to current month until 6 months in the future\r\n   */\r\n  setDefaultPeriod(): void {\r\n    let months: Month[] = this.utilitiesService.getMonths();\r\n\r\n    for (let i: number = 0; i < months.length; i++) {\r\n      if (\r\n        Date.parse(months[i].time) >\r\n        new Date().setMonth(new Date().getMonth() + 1) // -1 no prevois month\r\n      ) {\r\n        this.period.from = i;\r\n        this.period.to = i + 5;\r\n        this.showPeriod();\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reloads the values after period update\r\n   */\r\n  showPeriod(): void {\r\n    if (this.period.to < this.period.from) {\r\n      this.period.to = this.period.from;\r\n    }\r\n\r\n    this.pageState.showSpinner();\r\n    this.executiveService.resetSummaryValues();\r\n    this.months = this.utilitiesService\r\n      .getMonths()\r\n      .filter((m: Month) => m.id >= this.period.from && m.id <= this.period.to);\r\n    this.executiveService.initializeSummaryValues(\r\n      this.period.from,\r\n      this.period.to\r\n    );\r\n    this.calculationService.init(this.period.from, this.period.to);\r\n    this.executiveService.initalizeGraphicData(\r\n      this.period.from,\r\n      this.period.to\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Called for executive view summary data download\r\n   */\r\n  downloadCSV(): void {\r\n    this.pageState.showSpinner();\r\n\r\n    this.executiveService\r\n      .getCsvExportData(this.period.from, this.period.to)\r\n      .subscribe(\r\n        (data: any) => {\r\n          this.pageState.hideSpinner();\r\n          this.downloadFile(data);\r\n        },\r\n        () => this.pageState.hideSpinner()\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Download csv file with team forecast data\r\n   * @param data\r\n   */\r\n  downloadFile(data: any): void {\r\n    const blob: Blob = new Blob([data], { type: \"text/csv\" });\r\n    const filename: string =\r\n      this.datePipe.transform(new Date(), \"yyyyMMdd\") +\r\n      \"-Forecastsummary-Period.csv\";\r\n\r\n    let navigator: any = window.navigator;\r\n    if (navigator.msSaveOrOpenBlob) {\r\n      navigator.msSaveOrOpenBlob(blob, filename);\r\n    } else {\r\n      const url: string = window.URL.createObjectURL(blob);\r\n\r\n      let a: HTMLAnchorElement = document.createElement(\"a\");\r\n      a.href = url;\r\n      a.download = filename;\r\n\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      document.body.removeChild(a);\r\n      window.URL.revokeObjectURL(url);\r\n    }\r\n  }\r\n\r\n  /**Open dialog for executive chart */\r\n  openDialog(): void {\r\n    const dialogRef = this.dialog.open(ExecutiveChartComponent, {\r\n      height: \"90%\",\r\n      width: \"90%\",\r\n      panelClass: \"custom-dialog-container\",\r\n      data: {},\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((result) => {\r\n      console.log(\"The dialog was closed\");\r\n    });\r\n  }\r\n\r\n  isExecutive(): boolean {\r\n    return this.authService.hasRole(env.roles.msl);\r\n  }\r\n  \r\n  isMSLLevelRole(roleName: string): boolean {\r\n    if (!this.isExecutive()) {\r\n      return false;\r\n    }\r\n\r\n    let userId = this.authService.getUserId();\r\n\r\n    if (userId === undefined) {\r\n      return false;\r\n    }\r\n\r\n    let roleId = this.userService.getUser(userId).roleId;\r\n\r\n    if (roleId === undefined) {\r\n      return false;\r\n    }\r\n\r\n    let role = this.userService.getRole(roleId).shortcut;\r\n\r\n    if (role === undefined) {\r\n      return false;\r\n    }\r\n\r\n    return role === roleName;\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../assets/styles/variables.scss\";\r\n\r\n.role-header {\r\n  position: relative;\r\n  height: 37px;\r\n  margin: 0;\r\n\r\n  h1 {\r\n    line-height: 37px;\r\n    font-size: 1.8em;\r\n    margin: 0;\r\n  }\r\n\r\n  .mat-button-toggle-group {\r\n    background-color: map-get($font-colors, white);\r\n    font-size: 1.1em;\r\n    border-radius: 4px;\r\n  }\r\n\r\n  .mat-button-toggle {\r\n    background-color: map-get($font-colors, white);\r\n    color: map-get($font-colors, blue);\r\n    border-right: 1px solid #0070ad;\r\n    width: 120px;\r\n\r\n    .mat-icon {\r\n      color: map-get($font-colors, blue);\r\n    }\r\n\r\n    &:hover {\r\n      background-color: map-get($bg-colors, light);\r\n    }\r\n\r\n    &:last-child {\r\n      border: none;\r\n    }\r\n  }\r\n\r\n  .mat-button-toggle-checked,\r\n  .mat-button-toggle-checked .mat-icon {\r\n    background-color: map-get($font-colors, blue);\r\n    color: map-get($font-colors, white);\r\n\r\n    &:hover {\r\n      background-color: map-get($font-colors, blue);\r\n    }\r\n  }\r\n\r\n  .switch-role-toggle {\r\n    position: absolute;\r\n    right: 0;\r\n    top: 0;\r\n    height: 34px;\r\n    line-height: 34px;\r\n    border-radius: 0;\r\n  }\r\n}\r\n\r\n.executive-view-container {\r\n  margin-top: 30px;\r\n  padding: 0;\r\n  background: transparent;\r\n}\r\n\r\n.period-container {\r\n  width: 100%;\r\n}\r\n\r\n.period-component {\r\n  display: inline-flex;\r\n  margin: 0 5px;\r\n\r\n  &.mat-form-field {\r\n    width: 200px;\r\n  }\r\n  &.mat-raised-button {\r\n    margin-top: 4px;\r\n    bottom: 4px;\r\n  }\r\n  &:first-child {\r\n    margin-left: 0;\r\n  }\r\n}\r\n\r\n.period-download {\r\n  margin-top: 4px;\r\n  bottom: 4px;\r\n}\r\n\r\n.executive-btn {\r\n  margin-top: 4px;\r\n  right: 20px;\r\n  position: absolute;\r\n}\r\n\r\n.mat-icon {\r\n  font-size: 18px;\r\n  color: #fff !important;\r\n}\r\n\r\n.powerbi-report,\r\n.powerbi-report > div {\r\n  margin: 30px 0 10px;\r\n  border: 0;\r\n  width: 100%;\r\n  min-height: 500px;\r\n\r\n  box-shadow: 0 4px 8px 2px rgba(0, 0, 0, 0.06);\r\n}\r\n\r\n.w-100 {\r\n  position: relative;\r\n  left: -10px;\r\n  width: 100% !important;\r\n}\r\n.m-16p {\r\n  margin: 16px;\r\n}\r\n\r\n.m-0 {\r\n  margin: 0;\r\n}\r\n\r\n.m-0 {\r\n  margin: 0 !important;\r\n}\r\n\r\n.p-16p {\r\n  padding: 16px;\r\n}\r\n",
                    "styleUrl": "./executive.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>executive forecast-view component constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "calculationService",
                        "type": "CalculationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 50,
                "rawdescription": "\n\nexecutive forecast-view component constructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1869,
                            "end": 1877,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "datePipe"
                        },
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1863,
                            "end": 1868,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1891,
                            "end": 1902,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "authService"
                        },
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1885,
                            "end": 1890,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1916,
                            "end": 1932,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "utilitiesService"
                        },
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1910,
                            "end": 1915,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1946,
                            "end": 1955,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "pageState"
                        },
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1940,
                            "end": 1945,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1969,
                            "end": 1985,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "executiveService"
                        },
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1963,
                            "end": 1968,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "calculationService",
                        "type": "CalculationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"executive-container\">\r\n  <div class=\"period-container\">\r\n    \r\n    <mat-form-field class=\"period-component\" appearance=\"outline\">\r\n      <mat-label>Period Start Month</mat-label>\r\n      \r\n      <mat-select [(ngModel)]=\"period.from\">\r\n        <ng-container *ngFor=\"let r of availableMonths\">\r\n          <mat-option [value]=\"r.id\">{{ r.name }}</mat-option>\r\n        </ng-container>\r\n      </mat-select>\r\n    \r\n    </mat-form-field>\r\n    \r\n    <mat-form-field class=\"period-component\" appearance=\"outline\">\r\n      <mat-label>Period End Month</mat-label>\r\n      \r\n      <mat-select [(ngModel)]=\"period.to\">\r\n        <ng-container *ngFor=\"let r of availableMonths\">\r\n          <mat-option [value]=\"r.id\">{{ r.name }}</mat-option>\r\n        </ng-container>\r\n      </mat-select>\r\n    \r\n    </mat-form-field>\r\n    \r\n    <button class=\"period-component\" mat-raised-button color=\"primary\" (click)=\"showPeriod()\">\r\n      <mat-icon>search</mat-icon> Show Period\r\n    </button>\r\n<!--\r\n    <button class=\"period-download\" mat-raised-button color=\"primary\" (click)=\"downloadCSV()\">\r\n      <mat-icon>insert_drive_file</mat-icon> Export Period as CSV\r\n    </button>\r\n  -->\r\n    <button *ngIf=\"isMSLLevelRole('MSL')\" class=\"executive-btn\" mat-raised-button color=\"primary\" (click)=\"openDialog()\">\r\n      <mat-icon>insert_chart</mat-icon> KPI Overview\r\n    </button>\r\n  </div>\r\n\r\n  <div class=\"executive-view-container\">\r\n    <h3 *ngIf=\"months.length > 0\">\r\n      Period {{ months[0].name }} - {{ months[months.length - 1].name }}\r\n    </h3>\r\n    <mat-card class=\"w-100 m-0i\">\r\n      <app-executive-summary summary=\"period\"></app-executive-summary>\r\n    </mat-card>\r\n  </div>\r\n\r\n  <div class=\"executive-view-container\">\r\n    <app-executive-stats></app-executive-stats>\r\n  </div>\r\n\r\n  <!-- <div class=\"executive-view-container\">\r\n    <h3>Months</h3>\r\n    <mat-tab-group>\r\n      <mat-tab label= \"{{months[0].name}}\">\r\n      \r\n      </mat-tab>\r\n      <mat-tab *ngFor=\"let month of months\" label=\"{{ month.name }}\">\r\n        <ng-template matTabContent>\r\n          <app-executive-detail [month]=\"month\"></app-executive-detail>\r\n        </ng-template>\r\n      </mat-tab>\r\n    </mat-tab-group>\r\n  </div> -->\r\n  \r\n</div>"
        },
        {
            "name": "ExecutiveDetailComponent",
            "id": "component-ExecutiveDetailComponent-e0808e7aad65101f9a9570a822775702",
            "file": "src/app/forecast/components/executive-detail/executive-detail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-executive-detail",
            "styleUrls": [
                "./executive-detail.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./executive-detail.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "month",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "month (received as input)",
                    "description": "<p>month (received as input)</p>\n",
                    "line": 39,
                    "type": "Month"
                },
                {
                    "name": "months",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "Month[]"
                },
                {
                    "name": "switchState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "viewSwitch",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nviewSwitch saves if the PL of PDL View is shown as Output\n",
                    "description": "<p>viewSwitch saves if the PL of PDL View is shown as Output</p>\n",
                    "line": 45,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "line": 112,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "fcEntries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FcEntry[]",
                    "optional": false,
                    "description": "<p>list of all forecast entries for teamlead + month</p>\n",
                    "line": 61,
                    "rawdescription": "\n\nlist of all forecast entries for teamlead + month\n"
                },
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "forecasts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FcEntry[]",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "fte",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>sum all FTE</p>\n",
                    "line": 56,
                    "rawdescription": "\n\nsum all FTE\n"
                },
                {
                    "name": "loadingActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "projects",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Project[]",
                    "optional": false,
                    "description": "<p>project list</p>\n",
                    "line": 66,
                    "rawdescription": "\n\nproject list\n"
                },
                {
                    "name": "team",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User[]",
                    "optional": false,
                    "description": "<p>team member list</p>\n",
                    "line": 76,
                    "rawdescription": "\n\nteam member list\n"
                },
                {
                    "name": "teamleads",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "teamSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "totals",
                    "defaultValue": "{ \r\n    projectDays: 0, \r\n    billableDays: 0, \r\n    vacationDays: 0, \r\n    totalDays: 0,\r\n    ros: 0,\r\n    fte: 0,\r\n    corDays: 0\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 78
                }
            ],
            "methodsClass": [
                {
                    "name": "calcARVE",
                    "args": [
                        {
                            "name": "projectDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "vacationDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "totalDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 292,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "projectDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "vacationDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "totalDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calcURVE",
                    "args": [
                        {
                            "name": "billableDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "vacationDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "totalDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 301,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "billableDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "vacationDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "totalDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeView",
                    "args": [
                        {
                            "name": "status",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 390,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\nchanges the status of pl or pdl and sends it to parent\n",
                    "description": "<p>changes the status of pl or pdl and sends it to parent</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 11810,
                                "end": 11816,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "status"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 11804,
                                "end": 11809,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>changes the status of pl or pdl and sends it to parent</p>\n"
                        }
                    ]
                },
                {
                    "name": "clickOnEdit",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "firstName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lastName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 191,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "firstName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lastName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "exportCSV",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 467,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "forecastState",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 347,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getChildData",
                    "args": [
                        {
                            "name": "parentId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "MatTableDataSource<User>",
                    "typeParameters": [],
                    "line": 277,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "parentId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTeamValue",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 289,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturn value for given type (used for arve + urve + revenue + workingdays)\n",
                    "description": "<p>Return value for given type (used for arve + urve + revenue + workingdays)</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8412,
                                "end": 8416,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "originalKeywordKind": 149,
                                "escapedText": "type"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8406,
                                "end": 8411,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 8430,
                                "end": 8436,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "userId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8424,
                                "end": 8429,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getTotal",
                    "args": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 401,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUserValues",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 413,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "isEditPermitted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isParent",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parentId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 237,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parentId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isUserRelevantForMonth",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 256,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 397,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\n",
                    "description": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\n",
                    "description": ""
                },
                {
                    "name": "numberToString",
                    "args": [
                        {
                            "name": "no",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "precision",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 548,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "no",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "precision",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setLockState",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "role",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "messageSuccess",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "messageFail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 327,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "role",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "messageSuccess",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "messageFail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTeamleads",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submitAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 310,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "teamFilterUpdate",
                    "args": [
                        {
                            "name": "filter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unlockAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 366,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>teamlead summary component</p>\n",
            "rawdescription": "\n\nteamlead summary component\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, OnDestroy, Output, EventEmitter } from \"@angular/core\";\r\nimport { MatDialog, MatDialogRef } from \"@angular/material/dialog\";\r\nimport { MatSnackBar } from \"@angular/material/snack-bar\";\r\nimport { MatTableDataSource } from \"@angular/material/table\";\r\nimport { cloneDeep } from 'lodash';\r\n\r\nimport { UtilitiesService } from \"../../../core/services/utilities.service\";\r\nimport { ForecastService } from \"../../../core/services/forecasts/forecast.service\";\r\nimport { UserService } from \"../../../core/services/user.service\";\r\n\r\nimport { FcEntry } from \"../../../core/interfaces/fcEntry\";\r\nimport { Project } from \"../../../core/interfaces/project\";\r\nimport { Month } from \"../../../core/interfaces/month\";\r\nimport { User } from \"../../../core/interfaces/user\";\r\n\r\nimport { Subscription } from \"rxjs\";\r\nimport { ExecutiveForecastsService } from \"../../../core/services/forecasts/executive-forecasts.service\";\r\nimport { FcProject } from \"../../../core/interfaces/fcProject\";\r\nimport { FcEntryDetailDialogComponent } from \"./fc-entry-detail-dialog.component\";\r\nimport { ConfirmMessageDialog } from \"../../dialogs/confirm-message/confirm-message.dialog\";\r\nimport { TeamForecastService } from \"../../../core/services/forecasts/team-forecasts.service\";\r\nimport { PageStateService } from \"../../../core/shared/page-state.service\";\r\nimport { AuthService } from \"../../../core/security/auth.service\";\r\nimport { environment } from \"../../../../environments/environment\";\r\nimport { DatePipe } from \"@angular/common\";\r\n\r\n/**\r\n * teamlead summary component\r\n */\r\n@Component({\r\n  selector: \"app-executive-detail\",\r\n  templateUrl: \"./executive-detail.component.html\",\r\n  styleUrls: [\"./executive-detail.component.scss\"]\r\n})\r\nexport class ExecutiveDetailComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * month (received as input)\r\n   */\r\n  @Input('month') month: Month;\r\n  @Input('months') months: Month[];\r\n\r\n  /**\r\n   * viewSwitch saves if the PL of PDL View is shown as Output\r\n   */\r\n  @Output() viewSwitch = new EventEmitter<string>();\r\n\r\n  @Input('switchState') switchState: string;\r\n\r\n  forecasts: FcEntry[];\r\n\r\n  filter: string;\r\n\r\n  /**\r\n   * sum all FTE\r\n   */\r\n  fte: number;\r\n\r\n  /**\r\n   * list of all forecast entries for teamlead + month\r\n   */\r\n  fcEntries: FcEntry[];\r\n\r\n  /**\r\n   * project list\r\n   */\r\n  projects: Project[] = [];\r\n\r\n  /**\r\n   * months list\r\n   */\r\n  // months: Month[] = [];\r\n  \r\n  /**\r\n   * team member list\r\n   */\r\n  team: User[] = [];\r\n\r\n  userId: number;\r\n\r\n  teamleads: any[] = [];\r\n  \r\n  teamSubscription: Subscription;\r\n\r\n  loadingActive: boolean = false;\r\n\r\n  totals: any = { \r\n    projectDays: 0, \r\n    billableDays: 0, \r\n    vacationDays: 0, \r\n    totalDays: 0,\r\n    ros: 0,\r\n    fte: 0,\r\n    corDays: 0\r\n  };\r\n\r\n  /**\r\n   * constructor for teamlead-summary component\r\n   * @param datePipe\r\n   * @param dialog\r\n   * @param utilitiesService\r\n   * @param forecastService\r\n   * @param teamForecastService\r\n   * @param userService\r\n   * @param pageState\r\n   */\r\n  constructor(\r\n    private utilitiesService: UtilitiesService,\r\n    private forecastService: ForecastService,\r\n    private userService: UserService,\r\n    private executiveService: ExecutiveForecastsService,\r\n    private teamForecastService: TeamForecastService,\r\n    public dialog: MatDialog,\r\n    private snackBar: MatSnackBar,\r\n    private authService: AuthService,\r\n    private datePipe: DatePipe,\r\n    private pageState: PageStateService,\r\n  ) {\r\n    this.filter = 'pdl'; // 'pdl' or 'pl'\r\n    this.userId = this.authService.getUserId();\r\n    this.fte=0;\r\n    this.totals = { \r\n      projectDays: 0, \r\n      billableDays: 0, \r\n      vacationDays: 0, \r\n      totalDays: 0,\r\n      ros: 0,\r\n      fte: 0,\r\n      corDays: 0\r\n    };\r\n  }\r\n\r\n  /**\r\n   * \r\n   */\r\n  ngOnInit(): void {\r\n\r\n    if(this.switchState) {\r\n      this.filter = this.switchState;\r\n    }\r\n    \r\n    this.executiveService.initializeDetailValues(this.month.id);\r\n\r\n    this.utilitiesService.projects$.subscribe((projects: Project[]) => {\r\n      this.projects = projects;\r\n    });\r\n\r\n    this.forecastService.forecasts$.subscribe((forecasts: FcEntry[]) => {\r\n      this.fte=0;\r\n      this.totals = { \r\n        projectDays: 0, \r\n        billableDays: 0, \r\n        vacationDays: 0, \r\n        totalDays: 0,\r\n        ros: 0,\r\n        fte: 0,\r\n        corDays: 0\r\n      };\r\n      this.forecasts = forecasts.filter((fc: FcEntry) => fc.monthId === this.month.id);\r\n      this.getUserValues();\r\n      this.teamleads = this.executiveService.calculateTeamleadValues(this.filter, this.team);\r\n    });\r\n\r\n    this.teamSubscription = this.userService.allUsers$\r\n      .subscribe((team: User[]) => {\r\n        this.team = cloneDeep(team);\r\n\r\n        this.getUserValues();\r\n        this.teamleads = this.executiveService.calculateTeamleadValues(this.filter, this.team);\r\n      });\r\n    \r\n  }\r\n\r\n  teamFilterUpdate(filter: string): void {\r\n    this.filter = filter;\r\n    this.teamleads = this.executiveService.calculateTeamleadValues(this.filter, this.team);\r\n  }\r\n\r\n  setTeamleads(): void {\r\n    if (this.filter === 'pl') {\r\n      this.teamleads = this.team\r\n        .filter((u: User) => u.roleId === 1005)\r\n        .map((u: User) => u.id); // u.roleId === env.roles.pl\r\n    } else {\r\n      this.teamleads = this.team\r\n        .filter((u: User) => u.roleId === 1002 || u.roleId === 1005)\r\n        .map((u: User) => u.id); // u.roleId === env.roles.pdl || u.roleId === env.roles.pl\r\n    }\r\n  }\r\n\r\n\r\n  clickOnEdit(id: number, firstName: string, lastName: string) {\r\n    if(this.isEditPermitted())\r\n    {\r\n      this.loadingActive = true;\r\n      \r\n      let dialogRef: any = this.dialog.open(FcEntryDetailDialogComponent,{\r\n        height: 'auto',\r\n        width: 'auto',\r\n        //panelClass: 'getSartedStepper-no-padding-dialog',\r\n        //backdropClass: 'mat-dialog-container',\r\n        data:{\r\n          userId: id,\r\n          month: this.month,\r\n          months: this.months,\r\n          firstName: firstName,\r\n          lastName: lastName\r\n        },\r\n      });\r\n      dialogRef.afterOpened().subscribe(result => {\r\n        this.loadingActive = false;\r\n      });\r\n    }\r\n  }\r\n\r\n  isEditPermitted(): boolean {\r\n    let userId = this.authService.getUserId();\r\n\r\n    if (userId === undefined) {\r\n      return false;\r\n    }\r\n\r\n    let roleId = this.userService.getUser(userId).roleId;\r\n\r\n    if (roleId === undefined) {\r\n      return false;\r\n    }\r\n\r\n    let role = this.userService.getRole(roleId).shortcut;\r\n\r\n    if (role === undefined) {\r\n      return false;\r\n    }\r\n    \r\n    return role === 'HOP' || role === 'MSL';\r\n  }\r\n\r\n  isParent(user: User, parentId: number): boolean {\r\n    if (user.parentId === parentId || parentId === user.id) {\r\n      return true;\r\n\r\n    } else if (this.filter === 'pl') {\r\n      let parent: User = this.team.find((u: User) => u.id === user.parentId);\r\n      let Parantparent: User = this.team.find((u: User) => u.id === parentId);\r\n      if(Parantparent.permission === environment.roles.msl){\r\n        return false;\r\n      }\r\n      else if (parent && parent.parentId === parentId ) {\r\n        return true; \r\n      }\r\n\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  isUserRelevantForMonth(user: User, month: Month) : boolean {\r\n    if(user.endDate && user.startDate && month.time) {\r\n      var endMonth = new Date(user.endDate);\r\n      endMonth = new Date(endMonth.getFullYear(), endMonth.getMonth(), 1);\r\n      var startMonth = new Date(user.startDate);\r\n      startMonth = new Date(startMonth.getFullYear(), endMonth.getMonth(), 1);\r\n      var monthMonth = new Date(month.time);\r\n      monthMonth = new Date(monthMonth.getFullYear(), monthMonth.getMonth(), 1)\r\n      if(startMonth <= endMonth) {\r\n        if(monthMonth > endMonth) {\r\n          return false;\r\n        }\r\n      } else if(startMonth > endMonth) {\r\n        if(monthMonth <= startMonth && monthMonth >= endMonth) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  getChildData(parentId: number): MatTableDataSource<User> {\r\n    // let userDataArray: User[];\r\n    // userDataArray.push(this.team.find((u: User) => u.id === parentId));\r\n    // userDataArray.push();\r\n    return new MatTableDataSource<User>(this.team.filter((u: User) => this.isParent(u, parentId) && this.isUserRelevantForMonth(u, this.month)));\r\n  }\r\n\r\n  /**\r\n   * Return value for given type (used for arve + urve + revenue + workingdays)\r\n   * @param type\r\n   * @param userId\r\n   */\r\n  getTeamValue(type: string, userId: number): number {\r\n    return 0;\r\n  }\r\n  calcARVE( projectDays: number, vacationDays: number, totalDays : number): number{\r\n      if( ( projectDays / (totalDays - vacationDays) > 0)){\r\n        return (projectDays / (totalDays - vacationDays)) * 100;\r\n      }  \r\n      else {\r\n        return 0;\r\n      }\r\n  }\r\n\r\n  calcURVE(billableDays: number, vacationDays: number, totalDays : number): number{\r\n    if ( ( billableDays / (totalDays - vacationDays) > 0)){\r\n      return (billableDays / (totalDays - vacationDays)) * 100;\r\n    }\r\n    else {\r\n      return 0;\r\n    }\r\n  }\r\n  \r\n  submitAll(): void {\r\n    let dialogRef: MatDialogRef<ConfirmMessageDialog> = this.dialog.open(ConfirmMessageDialog, {\r\n      data: {\r\n        message: 'Are you sure you want to submit all forecasts?',\r\n        button: { cancel: 'No', submit: 'Yes' },\r\n      },\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((submit: boolean) => {\r\n      if (submit === true) {\r\n        this.pageState.showSpinner();\r\n        this.setLockState(true, this.userId ,'All forecast entries are successfully submitted.', 'Forecast entries could not be submitted. Please try again later.');\r\n      }\r\n      \r\n    });\r\n  }\r\n\r\n  setLockState(locked: boolean, role: number, messageSuccess: string, messageFail: string): void {\r\n    let level: number = 3;\r\n    \r\n\r\n    this.teamForecastService.setForecastsLockState(this.month.id, level, locked)\r\n      .then((forecasts: FcEntry[]) => {\r\n        if (forecasts) {\r\n          this.forecastService.addForecasts(forecasts, true);\r\n        } else {\r\n          this.forecastService.setTeamLockState(this.month.id, level, role); \r\n        }\r\n\r\n        this.snackBar.open(messageSuccess, 'OK', { duration: 10000, });\r\n        this.pageState.hideSpinner();\r\n      }).catch(() => {\r\n        this.snackBar.open(messageFail, 'OK', { duration: 10000, });\r\n        this.pageState.hideSpinner();\r\n      });\r\n  }\r\n\r\n  forecastState(type: string, userId: number): boolean  {\r\n    if (type === 'locked') {\r\n      return this.forecasts.find((fc: FcEntry) => fc.monthId == this.month.id && fc.userId == userId && fc.locked == -1) != undefined;\r\n    } else {\r\n      return true;\r\n    } \r\n    \r\n    //else {\r\n    //   return this.forecastService.checkForecastState(type, this.month.id, userId);\r\n    // }\r\n  }\r\n  // forecastState(type: string, userId: number): boolean | string {\r\n  //   if (type === 'locklevel') {\r\n  //     return this.userService.getRoleName(this.forecastService.getForecastLockLevel(this.month.id, userId));\r\n  //   } else {\r\n  //     return this.forecastService.checkForecastState(type, this.month.id, userId);\r\n  //   }\r\n  // }\r\n\r\n  unlockAll(): void {\r\n    let dialogRef: MatDialogRef<ConfirmMessageDialog> = this.dialog.open(ConfirmMessageDialog, {\r\n      data: {\r\n        message: 'Are you sure you want to unlock all forecasts?',\r\n        button: { cancel: 'No', submit: 'Yes' },\r\n      },\r\n    });\r\n    dialogRef.afterClosed().subscribe((submit: boolean) => {\r\n      if (submit === true) {\r\n        this.pageState.showSpinner();\r\n        for(let member of this.team) {\r\n          this.forecastService.unlockForecast(this.month.id, member.id);\r\n        }\r\n        //this.forecastService.unlockForecast(this.month.id, this.userId);\r\n        this.pageState.hideSpinner();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param status \r\n   * changes the status of pl or pdl and sends it to parent\r\n   */\r\n  changeView(status: string): void {\r\n    this.viewSwitch.emit(status);\r\n  }\r\n\r\n  /**\r\n   * \r\n   */\r\n  ngOnDestroy(): void {\r\n    this.teamSubscription.unsubscribe();\r\n  }\r\n\r\n  public getTotal(property: string): number {\r\n    if(property === 'ARVE') {\r\n      return this.calcARVE(this.totals.projectDays, this.totals.vacationDays, this.totals.totalDays);\r\n    } else if(property === 'URVE') {\r\n      return this.calcURVE(this.totals.billableDays, this.totals.vacationDays, this.totals.totalDays);\r\n    } else if(property === 'COR') {\r\n      return this.totals.ros / this.totals.corDays;\r\n    } else {\r\n      return 3;\r\n    }\r\n  }\r\n\r\n  private getUserValues(): void {\r\n    this.team.forEach((user: any) => {\r\n      const forecast: FcEntry = this.forecasts.find((fc: FcEntry) => fc.userId === user.id);\r\n\r\n      if (!forecast) {\r\n        user.projects = [];\r\n        user.projectDays = 0;\r\n        user.billableDays = 0;\r\n        user.vacationDays = 0;\r\n        user.totalDays = 0;\r\n        user.cor = 0;\r\n        user.ros = 0;\r\n        user.arve = 0;\r\n        user.urve = 0;\r\n        user.fte = 0;\r\n      } else {\r\n        user.projects = forecast.projects\r\n           ? forecast.projects\r\n             .filter((fcp: FcProject) => this.projects.find((p: Project) => (p.id === fcp.projectId && (p.projectType === 0 || p.projectType === 5))))\r\n             .map((fcp: FcProject) => this.projects.find(p => p.id === fcp.projectId).name)\r\n           : [];\r\n        user.projectDays = forecast.billableDays + forecast.nonbillableProjectDays;\r\n        user.billableDays = forecast.billableDays;\r\n        user.vacationDays = forecast.vacationDays;\r\n        user.totalDays = forecast.totalDays;\r\n        user.cor = forecast.cor ? forecast.cor : 0;\r\n        user.ros = forecast.ros ? forecast.ros : 0;\r\n        user.arve = (forecast.arve * 100).toFixed(0);\r\n        user.urve = (forecast.urve * 100).toFixed(0);\r\n        user.fte = forecast.fte ? forecast.fte : 0; // changed as it is not correct to add the users fte when the forecast fte is Null\r\n      }\r\n      this.fte += user.fte;\r\n\r\n      this.totals.fte += user.fte;\r\n      this.totals.ros += user.ros;\r\n\r\n      if (forecast) {\r\n        forecast.projects.forEach(fp => {\r\n          if( fp.billable && fp.cor !== 0) {\r\n            this.totals.corDays += fp.plannedProjectDays\r\n          }  \r\n        });\r\n      }\r\n      // forecast.projects.forEach((pe:FcProject) => { if( pe.billable && pe.plannedProjectDays !== 0)  this.totals.corDays += pe.plannedProjectDays} );\r\n\r\n      if(forecast && forecast.isRelevant) {\r\n        this.totals.projectDays += user.projectDays;\r\n        this.totals.vacationDays += user.vacationDays;\r\n        this.totals.totalDays += user.totalDays;\r\n        this.totals.billableDays += user.billableDays;\r\n      }\r\n    });\r\n  }\r\n\r\n  exportCSV(): void {\r\n    this.pageState.showSpinner();\r\n\r\n    let lineEnding = \"\\r\\n\";\r\n    let header: string = \"Month;\" + this.month.name + lineEnding\r\n      + \"Working Days;\" + this.month.workingdays + lineEnding\r\n      + \"Name;Global ID;Prod Unit Code;FTE;Paid Days;Project Days;Billable Days;Vacation Days;ARVE;URVE;Revenue;COR\"\r\n      + lineEnding;\r\n    \r\n    let body = \"\";\r\n\r\n    let totalPaidDays = 0;\r\n    let totalProjectDays = 0;\r\n    let totalBillableDays = 0;\r\n    let totalVacationDays = 0;\r\n    let totalROS = 0;\r\n    let totalFTE = 0;\r\n\r\n    this.team.forEach((user: any) => {\r\n      \r\n      let line = user.firstName + \" \" + user.lastName + \";\" //Name\r\n        + this.numberToString(user.globalId.toFixed(0)) + \";\" //Global ID\r\n        + user.prodUnitCode + \";\" //Production Unit COde\r\n        + this.numberToString(user.fte) + \";\" //FTE\r\n        + this.numberToString(user.fte * parseInt(this.month.workingdays)) + \";\" //Paid Days\r\n        + this.numberToString(user.projectDays) + \";\" //Project Days\r\n        + this.numberToString(user.billableDays) + \";\" //Billable Days\r\n        + this.numberToString(user.vacationDays) + \";\" //Vactaion Days\r\n        + this.numberToString(user.arve / 100, 4) + \";\" //ARVE\r\n        + this.numberToString(user.urve / 100, 4) + \";\" //URVE\r\n        + this.numberToString(user.ros) + \";\" //ROS\r\n        + this.numberToString(user.cor)  //COR\r\n        + lineEnding;\r\n      body = body + line;\r\n      totalPaidDays += user.fte * parseInt(this.month.workingdays);\r\n      totalProjectDays += user.projectDays;\r\n      totalBillableDays += user.billableDays;\r\n      totalVacationDays += user.vacationDays;\r\n      totalROS += user.ros;\r\n      totalFTE += user.fte\r\n    });\r\n\r\n    let summaryHeader = \"Summary;\" + this.month.name + lineEnding\r\n      + \"FTE;Paid Days;Project Days;Billable Days;Vacation Days;ARVE;URVE;Revenue;Weighted COR\" \r\n      + lineEnding;\r\n    let summaryLine = this.numberToString(this.totals.fte) + \";\" \r\n      + this.numberToString(this.totals.totalDays) + \";\" \r\n      + this.numberToString(this.totals.projectDays) + \";\" \r\n      + this.numberToString(this.totals.billableDays) + \";\" \r\n      + this.numberToString(this.totals.vacationDays) + \";\" \r\n      + this.numberToString((this.totals.projectDays) / (this.totals.totalDays - this.totals.vacationDays), 4) + \";\"\r\n      + this.numberToString(this.totals.billableDays / (this.totals.totalDays - this.totals.vacationDays), 4) + \";\"\r\n      + this.numberToString(this.totals.ros) + \";\"\r\n      + this.numberToString(this.totals.ros / this.totals.corDays)\r\n      + lineEnding;\r\n    \r\n    const data = header + body + lineEnding + lineEnding + summaryHeader + summaryLine;\r\n    const blob: Blob = new Blob([data], { type: \"text/csv\" });\r\n    const filename: string = this.datePipe.transform(new Date(), \"yyyyMMdd\") + \"-AllOverview.csv\";    \r\n\r\n    this.pageState.hideSpinner();\r\n\r\n    let navigator: any = window.navigator;\r\n    //For IE\r\n    if (navigator.msSaveOrOpenBlob) {\r\n      navigator.msSaveOrOpenBlob(blob, filename);\r\n    //For any other browser\r\n    } else {\r\n      const url: string = window.URL.createObjectURL(blob);\r\n\r\n      let a: HTMLAnchorElement = document.createElement(\"a\");\r\n      a.href = url;\r\n      a.download = filename;\r\n\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      document.body.removeChild(a);\r\n      window.URL.revokeObjectURL(url);\r\n    }\r\n  }\r\n\r\n  numberToString(no: number, precision: number = 2): string {\r\n    return no.toLocaleString(\"de\",  { minimumFractionDigits: 0, maximumFractionDigits: precision } ).replace(\".\",\"\");\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../assets/styles/variables.scss';\r\n\r\n.headermargin {\r\n  margin: 20px 0px 0px 20px;\r\n}\r\n\r\n.mat-button-toggle-group {\r\n  margin: 20px 30px 0;\r\n  background-color: map-get($font-colors, white);\r\n  font-size: 1.1em;\r\n  border-radius: 4px;\r\n}\r\n\r\n.mat-button-toggle {\r\n  background-color: map-get($font-colors, white);\r\n  color: map-get($font-colors, blue);\r\n  border-right: 1px solid #0070AD;\r\n  width: 150px;\r\n\r\n  .mat-icon {\r\n    color: map-get($font-colors, blue);\r\n  }\r\n\r\n  &:hover {\r\n    background-color: map-get($bg-colors, light);\r\n    \r\n  }\r\n\r\n  &:last-child {\r\n    border: none;\r\n  }\r\n}\r\n\r\n.mat-icon:hover {\r\n  cursor: pointer;\r\n}\r\n\r\n.mat-button-toggle-checked, .mat-button-toggle-checked .mat-icon {\r\n  background-color: map-get($font-colors, blue);\r\n  color: map-get($font-colors, white);\r\n\r\n  &:hover {\r\n    background-color: map-get($font-colors, blue);\r\n  }\r\n}\r\n\r\n.accordion-header {\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  padding: 15px 45px 15px 15px;\r\n  color: map-get($font-colors, black);\r\n  margin-right: 8px;\r\n  position: sticky;\r\n\r\n  div {\r\n    display: flex;\r\n    flex-grow: 1;\r\n    width: 0;\r\n    margin-right: 0;\r\n\r\n    &:first-child {\r\n      padding-left: 10px;\r\n    }\r\n\r\n    &:last-child {\r\n      flex-grow: 2;\r\n      text-align: center;\r\n    }\r\n\r\n    span {\r\n      flex: 1;\r\n      word-break: break-word;\r\n    }\r\n  }\r\n}\r\n\r\n.mat-expansion-panel {\r\n\tborder-radius: 0;\r\n\tmargin: 0;\r\n  \r\n  /**\r\n\t&.mat-expanded {\r\n\t\tmargin-top: 16px;\r\n\t\tmargin-bottom: 16px;\r\n  }\r\n  */\r\n\r\n  .mat-expansion-panel-header-description, .mat-expansion-panel-header-title {\r\n    font-size: 1.1rem;\r\n    line-height: 1.2rem;\r\n    width: 0;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n\r\n    .mat-cell {\r\n      font-size: 1.1rem;\r\n    }\r\n  }\r\n  \r\n  .mat-expansion-panel-header-description {\r\n    text-align: center; \r\n    flex-grow: 2;\r\n  }\r\n}\r\n\r\n.mat-table {\r\n  padding-right: 24px;\r\n  position: relative;\r\n\r\n  .edit-button {\r\n    position: absolute;\r\n    right: 30px;\r\n  }\r\n}\r\n\r\n.mat-cell, .mat-header-cell {\r\n  flex: 1;\r\n  color: map-get($font-colors, black);\r\n  width: 8.33%;\r\n  text-align: center;\r\n}\r\n\r\ntd.mat-cell:first-of-type, td.mat-footer-cell:first-of-type, th.mat-header-cell:first-of-type,\r\ntd.mat-cell:nth-of-type(2), td.mat-footer-cell:nth-of-type(2), th.mat-header-cell:nth-of-type(2) {\r\n\tpadding-left: 10px;\r\n  flex-grow: 4;\r\n  width: 16.66%;\r\n}\r\n\r\ntd.mat-cell:first-of-type, td.mat-footer-cell:first-of-type, th.mat-header-cell:first-of-type {\r\n  text-align: left;\r\n}\r\n\r\n.mat-icon {\r\n\tfont-size: 20px;\r\n\tline-height: 20px;\r\n\r\n\t&:hover {\r\n    color: map-get($font-colors, blue);\r\n\t}\r\n\r\n\t&.icon-edited, &.icon-edited:hover {\r\n\t\tcolor: map-get($font-colors, red);\r\n\t}\r\n}\r\n\r\n.mat-primary-reversed {\r\n\r\n  .align-right {\r\n    right: 0px;\r\n  }\r\n} \r\n\r\n.fte {\r\n  position: absolute;\r\n  right: 0;\r\n  display: inline;\r\n  .mat-icon{\r\n    position: relative;\r\n    margin: 5px;\r\n    margin-top: 20px;\r\n  }\r\n  span{\r\n    color: #00000061;\r\n    text-align: center;\r\n    padding-top: 0px;\r\n    padding: 10px;\r\n    text-align: center;\r\n  }\r\n}\r\nh3{\r\n  display: inline;\r\n  .mat-stroked-button {\r\n\t  margin: 5px;\r\n\t  margin-left: 0;\r\n  }\r\n}\r\n\r\n.button-rows {\r\n\tdisplay: flex;\r\n\t.button-row {\r\n    width: 50%\r\n  }\r\n}",
                    "styleUrl": "./executive-detail.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor for teamlead-summary component</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "teamForecastService",
                        "type": "TeamForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 94,
                "rawdescription": "\n\nconstructor for teamlead-summary component\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 2885,
                            "end": 2901,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "utilitiesService"
                        },
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2879,
                            "end": 2884,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 2915,
                            "end": 2930,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "forecastService"
                        },
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2909,
                            "end": 2914,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 2977,
                            "end": 2988,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "userService"
                        },
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2971,
                            "end": 2976,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 2944,
                            "end": 2963,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "teamForecastService"
                        },
                        "type": "TeamForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2938,
                            "end": 2943,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 2865,
                            "end": 2871,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialog"
                        },
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2859,
                            "end": 2864,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 2843,
                            "end": 2851,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "datePipe"
                        },
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2837,
                            "end": 2842,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 3002,
                            "end": 3011,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "pageState"
                        },
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2996,
                            "end": 3001,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div style=\"margin: 10px;\">\r\n\t<h3 class=\"headermargin\">Teams</h3>\r\n\t<div class=\"fte\" style=\"position: absolute; right: 0px;\">\r\n\t\t<span> FTE {{fte | number: '1.0-1': 'de'}} </span>\r\n\t</div>\r\n</div>\r\n<mat-button-toggle-group appearance=\"legacy\" aria-label=\"Role\" #group=\"matButtonToggleGroup\" [value]=\"filter\"\r\n\t(change)=\"teamFilterUpdate(group.value)\">\r\n\t<mat-button-toggle value=\"pl\" (click)=\"changeView('pl')\">\r\n\t\t<mat-icon>supervisor_account</mat-icon> PL Teams\r\n\t</mat-button-toggle>\r\n\t<mat-button-toggle value=\"pdl\" (click)=\"changeView('pdl')\">\r\n\t\t<mat-icon>supervisor_account</mat-icon> PDL Teams\r\n\t</mat-button-toggle>\r\n</mat-button-toggle-group>\r\n<button mat-stroked-button class=\"mat-primary-reversed\" (click)=\"submitAll()\"\r\n\tstyle=\"position: absolute; right: 220px; margin-right: 120px; margin: 20px;\">\r\n\t<mat-icon>lock</mat-icon> Submit all Forecasts\r\n</button>\r\n<button mat-stroked-button class=\"mat-primary-reversed\" (click)=\"unlockAll()\"\r\n\tstyle=\"position: absolute; right: 0px; margin-right: 30px; margin: 20px;\">\r\n\t<mat-icon>lock_open</mat-icon> Unlock all forecasts\r\n</button>\r\n\r\n\r\n<div layout=\"row\" layout-wrap *ngIf=\"teamleads.length > 0\">\r\n\t<div flex=\"100\">\r\n\t\t<div class=\"mat-row accordion-header\">\r\n\t\t\t<div>Name</div>\r\n\t\t\t<div>\r\n\t\t\t\t<span>Production Unit Code</span>\r\n\t\t\t\t<span>Project Days</span>\r\n\t\t\t\t<span>Billable Days</span>\r\n\t\t\t\t<span>Vacation Days</span>\r\n\t\t\t\t<span>Paid Days</span>\r\n\t\t\t\t<span>COR</span>\r\n\t\t\t\t<span>ROS</span>\r\n\t\t\t\t<span>ARVE</span>\r\n\t\t\t\t<span>URVE</span>\r\n\t\t\t\t<span>FTE</span>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<mat-accordion displayMode=\"flat\" multi>\r\n\t\t\t<mat-expansion-panel>\r\n\t\t\t\t<mat-expansion-panel-header>\r\n\t\t\t\t\t<mat-panel-title>Total</mat-panel-title>\r\n\t\t\t\t\t<mat-panel-description>\r\n\t\t\t\t\t\t<span class=\"mat-cell\"></span>\r\n\t\t\t\t\t\t<span class=\"mat-cell\">{{totals.projectDays | number:'1.0-2':'de'}}</span>\r\n\t\t\t\t\t\t<span class=\"mat-cell\">{{totals.billableDays | number:'1.0-2':'de'}}</span>\r\n\t\t\t\t\t\t<span class=\"mat-cell\">{{totals.vacationDays | number:'1.0-2':'de'}}</span>\r\n\t\t\t\t\t\t<span class=\"mat-cell\">{{totals.totalDays | number:'1.0-2':'de'}}</span>\r\n\t\t\t\t\t\t<span class=\"mat-cell\">&euro; {{getTotal('COR') | number:'1.0-2':'de'}}</span>\r\n\t\t\t\t\t\t<span class=\"mat-cell\">&euro; {{totals.ros | number:'1.0-2':'de'}}</span>\r\n\t\t\t\t\t\t<span class=\"mat-cell\">{{getTotal('ARVE') | number: '1.0-2': 'de'}}%</span>\r\n\t\t\t\t\t\t<span class=\"mat-cell\">{{getTotal('URVE') | number: '1.0-2': 'de'}}%</span>\r\n\t\t\t\t\t\t<span class=\"mat-cell\">{{totals.fte | number:'1.0-2':'de'}}</span>\r\n\t\t\t\t\t</mat-panel-description>\r\n\t\t\t\t</mat-expansion-panel-header>\r\n\t\t\t</mat-expansion-panel>\r\n\r\n\t\t\t<mat-expansion-panel *ngFor=\"let teamlead of teamleads; let i = index\">\r\n\t\t\t\t<mat-expansion-panel-header>\r\n\t\t\t\t\t<mat-panel-title>\r\n\t\t\t\t\t\t{{teamlead.name}}\r\n\t\t\t\t\t</mat-panel-title>\r\n\t\t\t\t\t<mat-panel-description>\r\n\t\t\t\t\t\t<span class=\"mat-cell\" >{{teamlead.prodUnitCode}}</span>\r\n\t\t\t\t\t\t<span class=\"mat-cell\">{{teamlead.projectDays | number: '1.0-1': 'de'}}</span>\r\n\t\t\t\t\t\t<span class=\"mat-cell\">{{teamlead.billableDays | number: '1.0-1': 'de'}}</span>\r\n\t\t\t\t\t\t<span class=\"mat-cell\">{{teamlead.vacationDays | number: '1.0-1': 'de'}}</span>\r\n\t\t\t\t\t\t<span class=\"mat-cell\">{{teamlead.totalDays | number: '1.0-1': 'de' }}</span>\r\n\t\t\t\t\t\t<span class=\"mat-cell\">&euro;\r\n\t\t\t\t\t\t\t{{teamlead.cor | number: '1.0-1': 'de' }}\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t<span class=\"mat-cell\">&euro;\r\n\t\t\t\t\t\t\t{{teamlead.ros | number:'1.0-2':'de' }}</span>\r\n\t\t\t\t\t\t<span class=\"mat-cell\">{{calcARVE(teamlead.projectDays,teamlead.vacationDays,teamlead.totalDays)\r\n\t\t\t\t\t\t\t| number: '1.0-2': 'de'}}%</span>\r\n\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\tclass=\"mat-cell\">{{calcURVE(teamlead.billableDays,teamlead.vacationDays,teamlead.totalDays)\r\n\t\t\t\t\t\t\t| number: '1.0-2': 'de'}}%</span>\r\n\t\t\t\t\t\t<span class=\"mat-cell\">{{teamlead.fte | number: '1.0-2': 'de'}}</span>\r\n\t\t\t\t\t</mat-panel-description>\r\n\t\t\t\t</mat-expansion-panel-header>\r\n\r\n\t\t\t\t<table mat-table [dataSource]=\"getChildData(teamlead.id)\" id=\"\">\r\n\t\t\t\t\t<ng-container matColumnDef=\"name\">\r\n\t\t\t\t\t\t<th mat-header-cell *matHeaderCellDef> Name </th>\r\n\t\t\t\t\t\t<td mat-cell *matCellDef=\"let user\"> {{user.firstName}} {{user.lastName}} </td>\r\n\t\t\t\t\t</ng-container>\r\n\r\n\t\t\t\t\t<ng-container matColumnDef=\"projects\">\r\n\t\t\t\t\t\t<th mat-header-cell *matHeaderCellDef> Projects </th>\r\n\t\t\t\t\t\t<td mat-cell *matCellDef=\"let user\">\r\n\t\t\t\t\t\t\t<ng-container *ngFor=\"let project of user.projects; let last = last\">\r\n\t\t\t\t\t\t\t\t{{project}}{{ last ? '': ', '}}\r\n\t\t\t\t\t\t\t</ng-container>\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t</ng-container>\r\n\r\n\t\t\t\t\t<ng-container matColumnDef=\"lockstate\">\r\n\t\t\t\t\t\t<th mat-header-cell *matHeaderCellDef> Lockstate </th>\r\n\t\t\t\t\t\t<td mat-cell *matCellDef=\"let user\">\r\n\t\t\t\t\t\t\t<mat-icon *ngIf=\"forecastState('locked', user.id)\" class=\"icon-locked\">lock</mat-icon>\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t</ng-container>\r\n\r\n\t\t\t\t\t<ng-container matColumnDef=\"globalId\">\r\n\t\t\t\t\t\t<th mat-header-cell *matHeaderCellDef> Global ID </th>\r\n\t\t\t\t\t\t<td mat-cell *matCellDef=\"let user\"> {{user.globalId}}</td>\r\n\t\t\t\t\t</ng-container>\r\n\r\n\t\t\t\t\t<ng-container matColumnDef=\"projectDays\">\r\n\t\t\t\t\t\t<th mat-header-cell *matHeaderCellDef> Project Days </th>\r\n\t\t\t\t\t\t<td mat-cell *matCellDef=\"let user\"> {{user.projectDays | number: '1.0-1':'de'}}</td>\r\n\t\t\t\t\t</ng-container>\r\n\r\n\t\t\t\t\t<ng-container matColumnDef=\"billableDays\">\r\n\t\t\t\t\t\t<th mat-header-cell *matHeaderCellDef> Billable Days </th>\r\n\t\t\t\t\t\t<td mat-cell *matCellDef=\"let user\"> {{user.billableDays | number: '1.0-1':'de'}}</td>\r\n\t\t\t\t\t</ng-container>\r\n\r\n\t\t\t\t\t<ng-container matColumnDef=\"vacationDays\">\r\n\t\t\t\t\t\t<th mat-header-cell *matHeaderCellDef> Vacation Days </th>\r\n\t\t\t\t\t\t<td mat-cell *matCellDef=\"let user\"> {{user.vacationDays | number: '1.0-1':'de'}}</td>\r\n\t\t\t\t\t</ng-container>\r\n\r\n\t\t\t\t\t<ng-container matColumnDef=\"totalDays\">\r\n\t\t\t\t\t\t<th mat-header-cell *matHeaderCellDef> Paid Days </th>\r\n\t\t\t\t\t\t<td mat-cell *matCellDef=\"let user\"> {{user.totalDays | number: '1.0-1':'de'}}</td>\r\n\t\t\t\t\t</ng-container>\r\n\r\n\t\t\t\t\t<ng-container matColumnDef=\"cor\">\r\n\t\t\t\t\t\t<th mat-header-cell *matHeaderCellDef> COR </th>\r\n\t\t\t\t\t\t<td mat-cell *matCellDef=\"let user\"> € {{user.cor | number:'1.0-2':'de'}} </td>\r\n\t\t\t\t\t</ng-container>\r\n\r\n\t\t\t\t\t<ng-container matColumnDef=\"ros\">\r\n\t\t\t\t\t\t<th mat-header-cell *matHeaderCellDef> ROS </th>\r\n\t\t\t\t\t\t<td mat-cell *matCellDef=\"let user\"> € {{user.ros | number:'1.0-2':'de'}} </td>\r\n\t\t\t\t\t</ng-container>\r\n\r\n\t\t\t\t\t<ng-container matColumnDef=\"arve\">\r\n\t\t\t\t\t\t<th mat-header-cell *matHeaderCellDef> ARVE </th>\r\n\t\t\t\t\t\t<td mat-cell *matCellDef=\"let user\"> {{user.arve | number: '1.0-2' : 'de'}}% </td>\r\n\t\t\t\t\t</ng-container>\r\n\r\n\t\t\t\t\t<ng-container matColumnDef=\"urve\">\r\n\t\t\t\t\t\t<th mat-header-cell *matHeaderCellDef> URVE </th>\r\n\t\t\t\t\t\t<td mat-cell *matCellDef=\"let user\"> {{user.urve | number: '1.0-2' : 'de'}}% </td>\r\n\t\t\t\t\t</ng-container>\r\n\t\t\t\t\t<ng-container matColumnDef=\"edit\">\r\n\t\t\t\t\t\t<th mat-header-cell *matHeaderCellDef class=\"action-button\"></th>\r\n\t\t\t\t\t\t<td mat-cell *matCellDef=\"let user\" class=\"action-button\"\r\n\t\t\t\t\t\t\t(click)=\"clickOnEdit(user.id, user.firstName, user.lastName)\">\r\n\t\t\t\t\t\t\t<mat-icon *ngIf=\"isEditPermitted()\" class=\"mat-icon-edit\">edit</mat-icon>\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t</ng-container>\r\n\t\t\t\t\t<tr mat-header-row\r\n\t\t\t\t\t\t*matHeaderRowDef=\"['name','lockstate','globalId' , 'projects', 'projectDays', 'billableDays', 'vacationDays', 'totalDays', 'cor', 'ros', 'arve', 'urve', 'edit']\">\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr mat-row\r\n\t\t\t\t\t\t*matRowDef=\"let row; columns: ['name', 'lockstate','globalId', 'projects', 'projectDays', 'billableDays', 'vacationDays', 'totalDays', 'cor', 'ros', 'arve', 'urve', 'edit'];\">\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</table>\r\n\t\t\t</mat-expansion-panel>\r\n\t\t</mat-accordion>\r\n\t</div>\r\n\r\n\t<div layout=\"row\" layout-wrap>\r\n\t\t<button mat-stroked-button class=\"mat-primary-reversed\" class=\"button-rows\" color=\"primary\"\r\n\t\t\t(click)=\"exportCSV()\">\r\n\t\t\t<mat-icon>insert_drive_file</mat-icon> Export CSV\r\n\t\t</button>\r\n\t</div>\r\n</div>"
        },
        {
            "name": "ExecutiveFcEntryComponent",
            "id": "component-ExecutiveFcEntryComponent-2101e8c819dcaa3a1c35722b07313ca1",
            "file": "src/app/forecast/dialogs/executive-fc-entry/executive-fc-entry.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-executive-fc-entry",
            "styleUrls": [
                "./executive-fc-entry.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./executive-fc-entry.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<ExecutiveFcEntryComponent>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit } from \"@angular/core\";\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material/dialog\";\r\n\r\n\r\n@Component({\r\n  selector: 'app-executive-fc-entry',\r\n  templateUrl: './executive-fc-entry.component.html',\r\n  styleUrls: ['./executive-fc-entry.component.scss']\r\n})\r\nexport class ExecutiveFcEntryComponent implements OnInit {\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<ExecutiveFcEntryComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".back{\r\n    background-color: #f1f5f8;\r\n    margin: 0px;\r\n    height: 100%;\r\n}",
                    "styleUrl": "./executive-fc-entry.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ExecutiveFcEntryComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ExecutiveFcEntryComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"back\">\r\n  <div >\r\n    <h1 class=\"title\">FAQ</h1>\r\n  </div>\r\n\r\n  <div class=\"content\">\r\n    <h1 class=\"title\">FAQ</h1>\r\n    <h1 class=\"title\">FAQ</h1>\r\n    <h1 class=\"title\">FAQ</h1>\r\n    <h1 class=\"title\">FAQ</h1>\r\n    <h1 class=\"title\">FAQ</h1>\r\n    <h1 class=\"title\">FAQ</h1>\r\n   \r\n  </div>\r\n</div>"
        },
        {
            "name": "ExecutiveStatsComponent",
            "id": "component-ExecutiveStatsComponent-ffadec2617e0f0bbe5cfedb0d8dec224",
            "file": "src/app/forecast/components/executive-stats/executive-stats.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-executive-stats",
            "styleUrls": [
                "./executive-stats.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./executive-stats.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "months",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Month[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "arve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "arveUrveChart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "billableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "cor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "corChart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "daysChart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "externalRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "firmDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "graphicData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GraphicSummaryReport[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "internalRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "namedLikelyDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "nonBillableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "probabilitiesChart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "revenueChart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "ros",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "selectedIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Number",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "teamLabels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "unnamedDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "urve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "workingDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "initCharts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, ElementRef } from \"@angular/core\";\r\nimport { Chart } from \"chart.js\";\r\nimport { Month } from \"../../../core/interfaces/month\";\r\nimport { ExecutiveForecastsService } from '../../../core/services/forecasts/executive-forecasts.service';\r\nimport { GraphicSummaryReport, GraphicSummaryProbabilityEntry, GraphicSummaryProjectTypeEntry } from '../../../core/interfaces/graphicData';\r\n@Component({\r\n  selector: \"app-executive-stats\",\r\n  templateUrl: \"./executive-stats.component.html\",\r\n  styleUrls: [\"./executive-stats.component.scss\"]\r\n})\r\nexport class ExecutiveStatsComponent implements OnInit {\r\n  @Input() months: Month[];\r\n\r\n  graphicData: GraphicSummaryReport[];\r\n\r\n  arve: number[];\r\n\r\n  urve: number[];\r\n\r\n  externalRevenue: number[];\r\n\r\n  ros: number[];\r\n\r\n  teamLabels: string[];\r\n\r\n  workingDays: number[];\r\n\r\n  namedLikelyDays: number[];\r\n\r\n  firmDays: number[];\r\n\r\n  unnamedDays: number[];\r\n  \r\n  nonBillableDays: number[];\r\n\r\n  billableDays: number[];\r\n\r\n  cor: number[];\r\n\r\n  internalRevenue: number[];\r\n\r\n  selectedIndex: Number = 0;\r\n  /*\r\n   *ChartJs object which will render the Teams chart\r\n   */\r\n  daysChart;\r\n  probabilitiesChart;\r\n  arveUrveChart;\r\n  corChart;\r\n  revenueChart;\r\n\r\n  constructor(\r\n    private elementRef: ElementRef,\r\n    private executiveService: ExecutiveForecastsService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.executiveService.graphicData$.subscribe((reports: GraphicSummaryReport[]) => {\r\n      this.graphicData = reports;\r\n      this.arve = [];\r\n      this.urve = [];\r\n      this.externalRevenue = [];\r\n      this.ros = [];\r\n      this.teamLabels = [];\r\n      this.workingDays = [];\r\n      this.namedLikelyDays = [];\r\n      this.firmDays = [];\r\n      this.unnamedDays = [];\r\n      this.nonBillableDays = [];\r\n      this.billableDays = [];\r\n      this.cor = [];\r\n      this.internalRevenue = [];\r\n\r\n      for (let report of reports) {\r\n        this.arve.push(report.arve * 100);\r\n        this.urve.push(report.urve * 100);\r\n        this.externalRevenue.push(report.externalRevenue);\r\n        this.ros.push(report.ros);\r\n        this.teamLabels.push(report.team);\r\n        this.workingDays.push(report.workingDays);\r\n\r\n        for(let entry of report.probabilities) {\r\n          if(entry.probability === 'Firm') {\r\n            this.firmDays.push(entry.days);\r\n          } else if(entry.probability === 'Named Likely') {\r\n            this.namedLikelyDays.push(entry.days);\r\n          } else if(entry.probability === \"Unnamed\") {\r\n            this.unnamedDays.push(entry.days);\r\n          }\r\n        }\r\n\r\n        for(let entry of report.projectTypes) {\r\n          if(entry.projectType === \"Non Billable\") {\r\n            this.nonBillableDays.push(entry.days);\r\n          } else if(entry.projectType === \"Billable\") {\r\n            this.billableDays.push(entry.days);\r\n          }\r\n        }\r\n\r\n        this.cor.push(report.cor);\r\n        this.internalRevenue.push(report.ros - report.externalRevenue);\r\n      }\r\n\r\n      this.initCharts();\r\n    });\r\n  }\r\n\r\n  initCharts() {\r\n    this.daysChart = new Chart(\"daysChart\", {\r\n      type: \"bar\",\r\n      data: {\r\n        labels: this.teamLabels,\r\n        datasets: [\r\n          {\r\n            label: \"Working Days\",\r\n            backgroundColor: \"#0ba7fb\",\r\n            data: this.workingDays\r\n          },\r\n          {\r\n            label: \"Billable Days\",\r\n            backgroundColor: \"#0070ad\",\r\n            data: this.billableDays\r\n          },\r\n          {\r\n            label: \"Non-Billable Days\",\r\n            backgroundColor: \"#004569\",\r\n            data: this.nonBillableDays\r\n          }\r\n        ]\r\n      },\r\n      dataset: {\r\n        barPercentage: 0.7,\r\n        categoryPercentage: 0.5\r\n      },\r\n      options: {\r\n        legend: {\r\n          display: true,\r\n          position: \"top\"\r\n        },\r\n        title:{\r\n          display: true,\r\n          text: \"Amount of Days grouped by Type\",\r\n          fontSize: 18\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              scaleLabel:  {\r\n                display: true,\r\n                labelString: \"Teams/Practices\",\r\n                fontSize: 18\r\n              }\r\n            }\r\n          ],\r\n          yAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              ticks: {\r\n                min: 0\r\n              },\r\n              scaleLabel:  {\r\n                display: true,\r\n                labelString: \"Amount of Days\",\r\n                fontSize: 18\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    });\r\n    this.probabilitiesChart = new Chart(\"probabilitiesChart\", {\r\n      type: \"bar\",\r\n      data: {\r\n        labels: this.teamLabels,\r\n        datasets: [\r\n          {\r\n            label: \"Firm\",\r\n            backgroundColor: \"#0ba7fb\",\r\n            data: this.firmDays\r\n          },\r\n          {\r\n            label: \"Unnamed\",\r\n            backgroundColor: \"#0070ad\",\r\n            data: this.unnamedDays\r\n          },\r\n          {\r\n            label: \"Named Likely\",\r\n            backgroundColor: \"#004569\",\r\n            data: this.namedLikelyDays\r\n          }\r\n        ]\r\n      },\r\n      dataset: {\r\n        barPercentage: 0.7,\r\n        categoryPercentage: 0.5\r\n      },\r\n      options: {\r\n        legend: {\r\n          display: true,\r\n          position: \"top\"\r\n        },\r\n        title:{\r\n          display: true,\r\n          text: \"Amount of forecasted days by Teams grouped by Probability\",\r\n          fontSize: 18\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              scaleLabel:  {\r\n                display: true,\r\n                labelString: \"Teams/Practices\",\r\n                fontSize: 18\r\n              }\r\n            }\r\n          ],\r\n          yAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              ticks: {\r\n                min: 0\r\n              },\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: \"Amount of Days\",\r\n                fontSize: 18\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    });\r\n    this.arveUrveChart = new Chart(\"arveUrveChart\", {\r\n      type: \"bar\",\r\n      data: {\r\n        labels: this.teamLabels,\r\n        datasets: [\r\n          {\r\n            label: \"ARVE\",\r\n            backgroundColor: \"#0ba7fb\",\r\n            data: this.arve\r\n          },\r\n          {\r\n            label: \"URVE\",\r\n            backgroundColor: \"#004569\",\r\n            data: this.urve\r\n          }\r\n        ]\r\n      },\r\n      dataset: {\r\n        barPercentage: 0.7,\r\n        categoryPercentage: 0.5\r\n      },\r\n      options: {\r\n        legend: {\r\n          display: true,\r\n          position: \"top\"\r\n        },\r\n        title:{\r\n          display: true,\r\n          text: \"ARVE/URVE Average for Teams during Period in %\",\r\n          fontSize: 18\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              scaleLabel:  {\r\n                display: true,\r\n                labelString: \"Teams/Practices\",\r\n                fontSize: 18\r\n              }\r\n            }\r\n          ],\r\n          yAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              ticks: {\r\n                min: 0,\r\n                max: 100\r\n              },\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: \"ARVE/URVE Average in %\",\r\n                fontSize: 18\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    });\r\n    this.revenueChart = new Chart(\"revenueChart\", {\r\n      type: \"bar\",\r\n      data: {\r\n        labels: this.teamLabels,\r\n        datasets: [\r\n          {\r\n            label: \"ROS\",\r\n            backgroundColor: \"#0ba7fb\",\r\n            data: this.ros\r\n          },\r\n          {\r\n            label: \"Internal\",\r\n            backgroundColor: \"#0070ad\",\r\n            data: this.internalRevenue\r\n          },\r\n          {\r\n            label: \"External\",\r\n            backgroundColor: \"#004569\",\r\n            data: this.externalRevenue\r\n          }\r\n        ]\r\n      },\r\n      dataset: {\r\n        barPercentage: 0.7,\r\n        categoryPercentage: 0.5\r\n      },\r\n      options: {\r\n        legend: {\r\n          display: true,\r\n          position: \"top\"\r\n        },\r\n        title:{\r\n          display: true,\r\n          text: \"Revenue in € grouped by type of Revenue\",\r\n          fontSize: 18\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              scaleLabel:  {\r\n                display: true,\r\n                labelString: \"Teams/Practices\",\r\n                fontSize: 18\r\n              }\r\n            }\r\n          ],\r\n          yAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              ticks: {\r\n                min: 0\r\n              },\r\n              scaleLabel:  {\r\n                display: true,\r\n                labelString: \"Revenue in €\",\r\n                fontSize: 18\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    });\r\n    this.corChart = new Chart(\"corChart\", {\r\n      type: \"bar\",\r\n      data: {\r\n        labels: this.teamLabels,\r\n        datasets: [\r\n          {\r\n            label: \"COR\",\r\n            backgroundColor: \"#0070ad\",\r\n            data: this.cor\r\n          }\r\n        ]\r\n      },\r\n      dataset: {\r\n        barPercentage: 0.7,\r\n        categoryPercentage: 0.5\r\n      },\r\n      options: {\r\n        legend: {\r\n          display: true,\r\n          position: \"top\"\r\n        },\r\n        title:{\r\n          display: true,\r\n          text: \"COR in € averaged by billable Days\",\r\n          fontSize: 18\r\n        },\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n            }\r\n          ],\r\n          yAxes: [\r\n            {\r\n              display: true,\r\n              gridLines: {\r\n                display: false\r\n              },\r\n              ticks: {\r\n                min: 0\r\n              },\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: \"Average of COR (averaged over Billable Days)\",\r\n                fontSize: 18\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".w-100 {\r\n  width: 100%;\r\n}\r\n\r\n.w-50 {\r\n  width: 50%;\r\n}\r\n.custom-dimension {\r\n  height: 80% !important;\r\n  width: 100% !important;\r\n  margin: 0 auto;\r\n}\r\n\r\n.chart-dimension {\r\n  padding-top: 25px;\r\n  height: 80% !important;\r\n  width: 80% !important;\r\n  margin: 0 auto;\r\n}\r\n.h-100 {\r\n  height: 100%;\r\n}\r\n\r\n.h-80vh {\r\n  max-height: 80vh;\r\n}\r\n.p-16 {\r\n  padding: 16px;\r\n}\r\n\r\n.p-8 {\r\n  padding: 8px;\r\n}\r\n\r\n.p-32 {\r\n  padding: 32px;\r\n}\r\n\r\n.pt-16 {\r\n  padding-top: 16px;\r\n}\r\n\r\n.m-0 {\r\n  margin: 0;\r\n}\r\n\r\n.bg-white {\r\n  background: #ffffff;\r\n}\r\n.float-left {\r\n  float: left;\r\n}\r\n",
                    "styleUrl": "./executive-stats.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"custom-dimension\">\r\n  <mat-tab-group headerPosition=\"above\" class=\"m-0\" #chartTabs>\r\n    <mat-tab label=\"Days\"> </mat-tab>\r\n    <mat-tab label=\"Probabilities\"> </mat-tab>\r\n    <mat-tab label=\"ARVE/URVE\"> </mat-tab>\r\n    <mat-tab label=\"COR\"> </mat-tab>\r\n    <mat-tab label=\"Revenue\"> </mat-tab>\r\n  </mat-tab-group>\r\n  \r\n  <div class=\"bg-white h-80vh p-16 \" [hidden]=\"chartTabs.selectedIndex !== 0\">\r\n    <canvas id=\"daysChart\" class=\"chart-dimension\"></canvas>\r\n  </div>\r\n\r\n  <div class=\"bg-white h-80vh p-16 \" [hidden]=\"chartTabs.selectedIndex !== 1\">\r\n    <canvas id=\"probabilitiesChart\" class=\"chart-dimension\"></canvas>\r\n  </div>\r\n\r\n  <div class=\"bg-white h-80vh p-16 \" [hidden]=\"chartTabs.selectedIndex !== 2\">\r\n    <canvas id=\"arveUrveChart\" class=\"chart-dimension\"></canvas>\r\n  </div>\r\n\r\n  <div class=\"bg-white h-80vh p-16 \" [hidden]=\"chartTabs.selectedIndex !== 3\">\r\n    <canvas id=\"corChart\" class=\"chart-dimension\"></canvas>\r\n  </div>\r\n  \r\n  <div class=\"bg-white h-80vh p-16 \" [hidden]=\"chartTabs.selectedIndex !== 4\">\r\n    <canvas id=\"revenueChart\" class=\"chart-dimension\"></canvas>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ExecutiveSummaryComponent",
            "id": "component-ExecutiveSummaryComponent-e140403c9fc2222a100fadf86fe41ef3",
            "file": "src/app/forecast/components/executive-summary/executive-summary.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-executive-summary",
            "styleUrls": [
                "./executive-summary.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./executive-summary.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "summary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "displayedColumns",
                    "defaultValue": "[\r\n    \"probabilityId\",\r\n    \"total\",\r\n    \"billableDays\",\r\n    \"vacationDays\",\r\n    \"workingDays\",\r\n    \"cor\",\r\n    \"ros\",\r\n    \"ext\",\r\n    \"int\",\r\n    \"arve\",\r\n    \"urve\"\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "loaded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "probabilitySource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTableDataSource<ProbabilityRecord>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "probabilitySummary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProbabilitySummary",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "exportCSV",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "numberToString",
                    "args": [
                        {
                            "name": "no",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "no",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, ChangeDetectorRef } from '@angular/core';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { PageStateService } from '../../../core/shared/page-state.service';\r\n\r\nimport { CalculationService } from \"../../../core/services/forecasts/calculation.service\";\r\nimport { ProbabilitySummary } from \"../../../core/interfaces/probabilitySummary\";\r\nimport { ProbabilityRecord } from \"../../../core/interfaces/probabilityRecord\";\r\nimport { DatePipe } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-executive-summary',\r\n  templateUrl: './executive-summary.component.html',\r\n  styleUrls: ['./executive-summary.component.scss']\r\n})\r\nexport class ExecutiveSummaryComponent implements OnInit {\r\n  @Input('summary') summary: any;\r\n\r\n  loaded = false;\r\n\r\n  probabilitySummary: ProbabilitySummary;\r\n  \r\n  probabilitySource: MatTableDataSource<ProbabilityRecord>;\r\n\r\n  displayedColumns: string[] = [\r\n    \"probabilityId\",\r\n    \"total\",\r\n    \"billableDays\",\r\n    \"vacationDays\",\r\n    \"workingDays\",\r\n    \"cor\",\r\n    \"ros\",\r\n    \"ext\",\r\n    \"int\",\r\n    \"arve\",\r\n    \"urve\"\r\n  ];\r\n\r\n  constructor(\r\n    private pageState: PageStateService,\r\n    private changeDetectorRefs: ChangeDetectorRef,\r\n    private calculationService: CalculationService,\r\n    private datePipe: DatePipe,\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.calculationService.probabilitySummary$.subscribe((summ: ProbabilitySummary) => {\r\n      if(!this.loaded) {\r\n        this.loaded = true;\r\n      } else {\r\n        this.probabilitySummary = summ;\r\n        this.probabilitySource = new MatTableDataSource(summ.probabilites);\r\n        this.changeDetectorRefs.detectChanges();\r\n        setTimeout(() => {\r\n          this.pageState.hideSpinner();\r\n        }, 500);\r\n      }\r\n    });\r\n  }\r\n\r\n  exportCSV(): void {\r\n    this.pageState.showSpinner();\r\n    let lineEnding = \"\\r\\n\";\r\n\r\n    let header = \"KPI;\" + this.probabilitySummary.probabilites.map(x => x.name).join(\";\") + \";Total\" + lineEnding;\r\n    let body = \"ARVE;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.arve)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.arve) + lineEnding\r\n      + \"URVE;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.urve)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.urve) + lineEnding\r\n      + \"ROS;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.revenue)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.revenue) + lineEnding\r\n      + \"Int. Revenue;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.internalRevenue)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.internalRevenue) + lineEnding\r\n      + \"Ext. Revenue;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.externalRevenue)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.externalRevenue) + lineEnding\r\n      + \"COR;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.cor)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.cor) + lineEnding\r\n      + \"Paid Days;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.paidDays)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.paidDays) + lineEnding\r\n      + \"Vacation Days;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.vacationDays)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.vacationDays) + lineEnding\r\n      + \"Billable Days;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.billableDays)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.billableDays) + lineEnding\r\n      + \"Project Days;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.billableDays + x.nonBillableDays)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.nonBillableDays + this.probabilitySummary.billableDays) + lineEnding;\r\n\r\n    const data = header + body;\r\n    const blob: Blob = new Blob([data], { type: \"text/csv\" });\r\n    const filename: string = this.datePipe.transform(new Date(), \"yyyyMMdd\") + \"-SummaryProbabilities.csv\";    \r\n    this.pageState.hideSpinner();\r\n\r\n    let navigator: any = window.navigator;\r\n    //For IE\r\n    if (navigator.msSaveOrOpenBlob) {\r\n      navigator.msSaveOrOpenBlob(blob, filename);\r\n    //For any other browser\r\n    } else {\r\n      const url: string = window.URL.createObjectURL(blob);\r\n\r\n      let a: HTMLAnchorElement = document.createElement(\"a\");\r\n      a.href = url;\r\n      a.download = filename;\r\n\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      document.body.removeChild(a);\r\n      window.URL.revokeObjectURL(url);\r\n    }\r\n  }\r\n\r\n  numberToString(no: number): string {\r\n    return no.toLocaleString(\"de\",  { minimumFractionDigits: 0, maximumFractionDigits: 2 } ).replace(\".\",\"\");\r\n  }\r\n}\r\n\r\nexport interface PeriodicElement {\r\n  name: string;\r\n  firm: number;\r\n  weight: number;\r\n  symbol: string;\r\n}\r\n\r\nexport interface SummaryValues {\r\n  monthId: number;\r\n  probabilityId: number;\r\n  billableDays: number;\r\n  nonBillableDays: number;\r\n  vacationDays: number;\r\n  trainingDays: number;\r\n  businessDays: number;\r\n  benchDays: number;\r\n  workingDays: number;\r\n  fteCss: number;\r\n  cor: number;\r\n  arve: number;\r\n  urve: number;\r\n  ros: number;\r\n  external: number;\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n.mat-row td.mat-cell, .mat-header-row th.mat-header-cell {\r\n  text-align: end;\r\n  width: 100px;\r\n\r\n  &:first-child {\r\n    text-align: center;\r\n    padding-left: 24px;\r\n  }\r\n}\r\n\r\ntd.mat-cell:first-of-type, td.mat-footer-cell:first-of-type, th.mat-header-cell:first-of-type {\r\n  padding-left: 0px !important;\r\n}\r\n\r\n.mat-stroked-button {\r\n\tmargin: 5px;\r\n\tmargin-left: 0;\r\n}\r\n\r\n.button-rows {\r\n\tdisplay: flex;\r\n\t.button-row {\r\n    width: 50%\r\n  }\r\n}\r\n\r\n.mat-cell, .mat-footer-cell {\r\n  display:flex !important;\r\n  justify-content:flex-end!important;\r\n}\r\n\r\n.mat-header-cell {\r\n  justify-content: flex-end;\r\n}\r\n\r\n",
                    "styleUrl": "./executive-summary.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "changeDetectorRefs",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "calculationService",
                        "type": "CalculationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "changeDetectorRefs",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "calculationService",
                        "type": "CalculationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"\">\r\n  <table mat-table [dataSource]=\"probabilitySource\">\r\n    <ng-container class=\"first\" cdkColumnDef=\"probabilityId\" >\r\n      <mat-header-cell *cdkHeaderCellDef> Probability </mat-header-cell>\r\n      <mat-cell *cdkCellDef=\"let element\"> {{element.name}} </mat-cell>\r\n      <mat-footer-cell *cdkFooterCellDef>Total</mat-footer-cell>\r\n    </ng-container>\r\n    <ng-container cdkColumnDef=\"total\" layout-align=\"end center\" >\r\n      <mat-header-cell *cdkHeaderCellDef> Project Days </mat-header-cell>\r\n      <mat-cell *cdkCellDef=\"let element\"> {{element.billableDays + element.nonBillableDays | number:'1.0-0':'de'}} </mat-cell>\r\n      <mat-footer-cell *cdkFooterCellDef>{{probabilitySummary.billableDays + probabilitySummary.nonBillableDays | number:'1.0-0':'de'}}</mat-footer-cell>\r\n    </ng-container>\r\n    <ng-container cdkColumnDef=\"billableDays\" >\r\n      <mat-header-cell *cdkHeaderCellDef> Billable  Days </mat-header-cell>\r\n      <mat-cell *cdkCellDef=\"let element\"> {{element.billableDays | number:'1.0-0':'de'}} </mat-cell>\r\n      <mat-footer-cell *cdkFooterCellDef>{{probabilitySummary.billableDays | number:'1.0-0':'de'}}</mat-footer-cell>\r\n    </ng-container>\r\n    <ng-container cdkColumnDef=\"vacationDays\" >\r\n      <mat-header-cell *cdkHeaderCellDef> Vacation days </mat-header-cell>\r\n      <mat-cell *cdkCellDef=\"let element\"> {{element.vacationDays | number:'1.0-0':'de'}} </mat-cell>\r\n      <mat-footer-cell *cdkFooterCellDef>{{probabilitySummary.vacationDays | number:'1.0-0':'de'}}</mat-footer-cell>\r\n    </ng-container>\r\n    <ng-container cdkColumnDef=\"workingDays\" >\r\n      <mat-header-cell *cdkHeaderCellDef> Paid Days </mat-header-cell>\r\n      <mat-cell *cdkCellDef=\"let element\"> {{element.paidDays | number:'1.0-0':'de'}} </mat-cell>\r\n      <mat-footer-cell *cdkFooterCellDef>{{probabilitySummary.paidDays | number:'1.0-0':'de'}}</mat-footer-cell>\r\n    </ng-container>\r\n    <ng-container cdkColumnDef=\"cor\" >\r\n      <mat-header-cell *cdkHeaderCellDef> COR </mat-header-cell>\r\n      <mat-cell *cdkCellDef=\"let element\"> € {{element.cor | number:'1.2-2':'de'}} </mat-cell>\r\n      <mat-footer-cell *cdkFooterCellDef> € {{probabilitySummary.cor | number:'1.2-2':'de'}}</mat-footer-cell>\r\n    </ng-container>\r\n\r\n    <ng-container cdkColumnDef=\"ros\" >\r\n      <mat-header-cell *cdkHeaderCellDef> ROS </mat-header-cell>\r\n      <mat-cell *cdkCellDef=\"let element\"> € {{element.revenue | number:'1.2-2':'de'}} </mat-cell>\r\n      <mat-footer-cell *cdkFooterCellDef> € {{probabilitySummary.revenue | number:'1.2-2':'de'}}</mat-footer-cell>\r\n    </ng-container>\r\n\r\n    <ng-container cdkColumnDef=\"int\" >\r\n      <mat-header-cell *cdkHeaderCellDef> Int. R. </mat-header-cell>\r\n      <mat-cell *cdkCellDef=\"let element\"> € {{element.internalRevenue | number:'1.2-2':'de'}} </mat-cell>\r\n      <mat-footer-cell *cdkFooterCellDef> € {{probabilitySummary.internalRevenue | number:'1.2-2':'de'}}</mat-footer-cell>\r\n    </ng-container>\r\n    <ng-container cdkColumnDef=\"ext\" >\r\n      <mat-header-cell *cdkHeaderCellDef> Ext. R. </mat-header-cell>\r\n      <mat-cell *cdkCellDef=\"let element\"> € {{element.externalRevenue | number:'1.2-2':'de'}} </mat-cell>\r\n      <mat-footer-cell *cdkFooterCellDef> € {{probabilitySummary.externalRevenue | number:'1.2-2':'de'}}</mat-footer-cell>\r\n    </ng-container>\r\n\r\n    \r\n    <ng-container cdkColumnDef=\"arve\" >\r\n      <mat-header-cell *cdkHeaderCellDef> ARVE </mat-header-cell>\r\n      <mat-cell *cdkCellDef=\"let element\"> {{element.arve * 100 | number: '1.1-1':'de'}}% </mat-cell>\r\n      <mat-footer-cell *cdkFooterCellDef> {{probabilitySummary.arve * 100 | number: '1.1-1':'de'}}% </mat-footer-cell>\r\n    </ng-container>\r\n    <ng-container cdkColumnDef=\"urve\" >\r\n      <mat-header-cell *cdkHeaderCellDef> URVE </mat-header-cell>\r\n      <mat-cell *cdkCellDef=\"let element\"> {{element.urve * 100 | number: '1.1-1':'de'}}% </mat-cell>\r\n      <mat-footer-cell *cdkFooterCellDef>{{probabilitySummary.urve * 100 | number: '1.1-1':'de'}}% </mat-footer-cell>\r\n    </ng-container>\r\n\r\n    <mat-header-row *cdkHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n    <mat-row *cdkRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n    <mat-footer-row *cdkFooterRowDef=\"displayedColumns\"></mat-footer-row>\r\n  </table>\r\n\r\n  <div layout=\"row\" layout-wrap>\r\n    <button mat-stroked-button class=\"mat-primary-reversed\" class=\"button-rows\" color=\"primary\" (click)=\"exportCSV()\">\r\n      <mat-icon>insert_drive_file</mat-icon> Export CSV\r\n    </button>\r\n  </div>\r\n</div>"
        },
        {
            "name": "ExportCsvDialog",
            "id": "component-ExportCsvDialog-2cca558c9f5f11e9990f9593d0b4bf17",
            "file": "src/app/forecast/dialogs/export-csv/export-csv.dialog.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./export-csv.dialog.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./export-csv.dialog.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "allMonths",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "<p>ids of months which should be exported in csv\ndefault: id of current month</p>\n",
                    "line": 21,
                    "rawdescription": "\n\nids of months which should be exported in csv\ndefault: id of current month\n"
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "line": 31,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "months",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "<p>month list</p>\n",
                    "line": 15,
                    "rawdescription": "\n\nmonth list\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "checkAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks/unchecks all months when allMonths checkbox is used\n",
                    "description": "<p>Checks/unchecks all months when allMonths checkbox is used</p>\n"
                },
                {
                    "name": "checkMonth",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nupdates allMonths checkbox if individual month is selected/deselected\n",
                    "description": "<p>updates allMonths checkbox if individual month is selected/deselected</p>\n"
                },
                {
                    "name": "getExportMonths",
                    "args": [],
                    "optional": false,
                    "returnType": "number[]",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns IDs of selected months\n",
                    "description": "<p>returns IDs of selected months</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Component for CSV-Export Dialog</p>\n",
            "rawdescription": "\n\nComponent for CSV-Export Dialog\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from \"@angular/core\";\r\nimport { Month } from \"../../../core/interfaces/month\";\r\nimport { MAT_DIALOG_DATA } from \"@angular/material/dialog\";\r\n\r\n/**\r\n * Component for CSV-Export Dialog\r\n */\r\n@Component({\r\n  templateUrl: './export-csv.dialog.html',\r\n  styleUrls: [\"./export-csv.dialog.scss\"]\r\n}) export class ExportCsvDialog {\r\n  /**\r\n   * month list\r\n   */\r\n  months: Month[];\r\n\r\n  /**\r\n   * ids of months which should be exported in csv\r\n   * default: id of current month\r\n   */\r\n  allMonths: {\r\n    checked: boolean,\r\n    indeterminate: boolean,\r\n  };\r\n\r\n  /**\r\n   * initializes global variables\r\n   * @param data\r\n   */\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n  ) {\r\n    this.allMonths = { checked: false, indeterminate: false };\r\n    this.months = data.months;\r\n  }\r\n\r\n  /**\r\n   * updates allMonths checkbox if individual month is selected/deselected\r\n   */\r\n  checkMonth(): void {\r\n    if (this.months.filter((m: Month) => m.checked).length === this.months.length) {\r\n\t    this.allMonths = { checked: true, indeterminate: false };\r\n    } else if (this.months.filter((m: Month) => m.checked).length > 0) {\r\n      this.allMonths = { checked: false, indeterminate: true };\r\n    } else {\r\n      this.allMonths = { checked: false, indeterminate: false };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks/unchecks all months when allMonths checkbox is used\r\n   */\r\n  checkAll(): void {\r\n    if (this.allMonths.checked) {\r\n      this.months.forEach((m: Month) => { m.checked = true; });\r\n    } else {\r\n      this.months.forEach((m: Month) => { m.checked = false; });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * returns IDs of selected months\r\n   */\r\n  getExportMonths(): number[] {\r\n    return this.months.filter((m: Month) => m.checked).map((m: Month) => m.id);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-checkbox {\r\n\tdisplay: block;\r\n\tpadding: 0 10px;\r\n\tline-height: 46px;\r\n\tborder-bottom: 1px solid rgba(0,0,0,0.06);\r\n\r\n\t&:last-child {\r\n\t\tborder-bottom: none;\r\n\t}\r\n\r\n\t&.all {\r\n\t\tfont-weight: bold;\r\n\t\tborder-color: rgba(0, 0, 0, 0.5);\r\n\t}\r\n\r\n\t.mat-checkbox-layout {\r\n\t\theight: 46px;\r\n\t}\r\n}\r\n\r\n.checkbox-section {\r\n\tmax-height: 50vh;\r\n\toverflow: auto;\r\n}",
                    "styleUrl": "./export-csv.dialog.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>initializes global variables</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "rawdescription": "\n\ninitializes global variables\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 638,
                            "end": 642,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "data"
                        },
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 632,
                            "end": 637,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "templateData": "<h2 mat-dialog-title>CSV Export</h2>\r\n\r\n<mat-checkbox class=\"all\" color=\"primary\" [(ngModel)]=\"allMonths.checked\" [(indeterminate)]=\"allMonths.indeterminate\" (change)=\"checkAll()\">All Months</mat-checkbox>\r\n<div class=\"checkbox-section\">\r\n\t<mat-checkbox *ngFor=\"let month of months\" color=\"primary\" [(ngModel)]=\"month.checked\" (change)=\"checkMonth()\">{{ month.time | date: 'MMMM yyyy' }}</mat-checkbox>\r\n</div>\r\n\r\n<mat-dialog-actions>\r\n\t<button mat-button mat-dialog-close [mat-dialog-close]=\"false\">Cancel</button>\r\n\t<button mat-button [mat-dialog-close]=\"getExportMonths()\" [disabled]=\"getExportMonths().length == 0\">Export</button>\r\n</mat-dialog-actions>"
        },
        {
            "name": "FaqModalComponent",
            "id": "component-FaqModalComponent-0886ed254f2d070acfd3cf8546dfd7f9",
            "file": "src/app/layout/faq-modal/faq-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-faq-modal",
            "styleUrls": [
                "./faq-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./faq-modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<FaqModalComponent>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "fd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { faqData } from './faqData';\r\n@Component({\r\n  selector: 'app-faq-modal',\r\n  templateUrl: './faq-modal.component.html',\r\n  styleUrls: ['./faq-modal.component.scss']\r\n})\r\nexport class FaqModalComponent implements OnInit {\r\n\r\n  fd: any [];\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<FaqModalComponent>,\r\n     ) { }\r\n\r\n  ngOnInit() {\r\n    this.fd = faqData\r\n  }\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".back{\r\n    background-color: #f1f5f8;\r\n    margin: 0px;\r\n    height: 100%;\r\n}\r\n\r\nh1 {\r\n    color: #ffff;\r\n    margin-block-start: 0em;\r\n    margin-block-end: 0em;\r\n    padding: 15px;\r\n}\r\n\r\n.mat-icon-close {\r\n    float: right;\r\n    margin: 8px;\r\n    mat-icon {\r\n        color: #ffff;\r\n    }\r\n}\r\n\r\nh3 {\r\n    color: #0070ad;\r\n    margin-top: 20px;\r\n}\r\n\r\n.title {\r\n    font-weight: 700;\r\n}\r\n\r\n.content {\r\n    height: 90%;\r\n    margin: 0;\r\n    max-height: 85vh;\r\n\r\n}\r\n\r\n.fix {\r\n    background-color: #0070ad;\r\n    height: 10%;\r\n    padding: 0px;\r\n}\r\n\r\n.mat-expansion-panel-header-title{\r\n    color: rgba(0,0,0,0.75);\r\n}\r\n\r\n.panel-content {\r\n    margin-left: 10px;\r\n    color: rgba(0,0,0,0.60);\r\n\r\n}\r\n\r\nimg {\r\n    max-width: 50vw;\r\n}\r\n.ff {\r\n    max-width: 50vw;\r\n}\r\n\r\n.image {\r\n    max-width: 50vw;\r\n}",
                    "styleUrl": "./faq-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<FaqModalComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<FaqModalComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card class=\"back\">\r\n  <div class=\"fix\" layout=\"row\">\r\n    <h1 class=\"title\">FAQ</h1>\r\n    <span flex></span>\r\n    <button mat-icon-button (click)=\"onNoClick()\" title=\"Close FAQ\" class=\"mat-icon-close\">\r\n      <mat-icon>clear</mat-icon>\r\n    </button>\r\n  </div>\r\n\r\n  <div class=\"content\">\r\n     \r\n    <mat-accordion displayMode=\"flat\" multi>\r\n      <mat-expansion-panel *ngFor=\"let item of fd;\">\r\n        <mat-expansion-panel-header>\r\n          <mat-panel-title>\r\n              <div [innerHTML]=\"item.question\"></div>\r\n          </mat-panel-title>\r\n        </mat-expansion-panel-header>\r\n\r\n        <div [innerHTML]=\"item.answer | safeHtml\" class=\"panel-content\">\r\n           \r\n        </div>\r\n      </mat-expansion-panel>\r\n    </mat-accordion>\r\n  </div>\r\n</mat-card>\r\n"
        },
        {
            "name": "FcEntryComponent",
            "id": "component-FcEntryComponent-569d3e6be521802834efe6d212686a3e",
            "file": "src/app/forecast/components/fc-entry/fc-entry.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-fc-entry",
            "styleUrls": [
                "./fc-entry.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./fc-entry.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "month",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "selected month (received as input)",
                    "description": "<p>selected month (received as input)</p>\n",
                    "line": 40,
                    "type": "Month"
                },
                {
                    "name": "singleView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "singleView: true in 'individual'-view, false in 'teamlead'-view",
                    "description": "<p>singleView: true in &#39;individual&#39;-view, false in &#39;teamlead&#39;-view</p>\n",
                    "line": 45,
                    "type": "boolean"
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "userId (received as input)",
                    "description": "<p>userId (received as input)</p>\n",
                    "line": 35,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "foreCastEmptyEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nevent to subscribe to if there is no forecast for the current user and month\n",
                    "description": "<p>event to subscribe to if there is no forecast for the current user and month</p>\n",
                    "line": 50,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "availableProjects",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Project[]",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "benchtime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "fcLoaded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "fcSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "fiveTenFifteen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "forecast",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FcEntry",
                    "optional": false,
                    "description": "<p>Contains the newest version of forecast</p>\n",
                    "line": 55,
                    "rawdescription": "\n\nContains the newest version of forecast\n"
                },
                {
                    "name": "fteSliderValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "grades",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Grade[]",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "hasProjectInputFocus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "hundredPercent",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "isCorValueBiggerThanZero",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "isProjectInputValid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "lastEditor",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>string that includes name + date of last edit</p>\n",
                    "line": 61,
                    "rawdescription": "\n\nstring that includes name + date of last edit\n"
                },
                {
                    "name": "loadingActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "monthRangeHundredPercent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "addProjectToForecast",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 229,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds a new project.\nSets the cursor focus at the beginning of the newly added project.\n",
                    "description": "<p>Adds a new project.\nSets the cursor focus at the beginning of the newly added project.</p>\n",
                    "jsdoctags": []
                },
                {
                    "name": "addProjectToForecastFiveTenFifteen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 259,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "addProjectToForecastHundredPercent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 244,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "copyData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 355,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fcIsLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 333,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTest is forecast is locked for logged-in user\n",
                    "description": "<p>Test is forecast is locked for logged-in user</p>\n"
                },
                {
                    "name": "fcLockedBySub",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 340,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fteSliderValueUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 278,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fteValue",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 288,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUpdatedValue",
                    "args": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 273,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasLeadRole",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 315,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTest if user fulfills certain role criteria\n",
                    "description": "<p>Test if user fulfills certain role criteria</p>\n"
                },
                {
                    "name": "hasMSLRole",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 319,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hasUnlockPermission",
                    "args": [
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 323,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isUserFullTime",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 306,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 366,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalled if there are changes to input fields\n",
                    "description": "<p>Called if there are changes to input fields</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 12069,
                                "end": 12076,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 12063,
                                "end": 12068,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>an dict of changes. Value at Key is undefined if there are no chagnes.</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnsubscribe services when component gets destroyed\n",
                    "description": "<p>Unsubscribe services when component gets destroyed</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInitializes forecast entry component.\n",
                    "description": "<p>Initializes forecast entry component.</p>\n"
                },
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 346,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reloadCurrentPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 219,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveForecast",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 197,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSaves forecast\n",
                    "description": "<p>Saves forecast</p>\n"
                },
                {
                    "name": "settingsUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 284,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submitForecast",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 208,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSubmits forecast (save + \"locked: true\")\n",
                    "description": "<p>Submits forecast (save + &quot;locked: true&quot;)</p>\n"
                },
                {
                    "name": "subscribeForcasts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "totalDays",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 298,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalculates the total number of days for projects.\n",
                    "description": "<p>Calculates the total number of days for projects.</p>\n"
                },
                {
                    "name": "unlockForecast",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnlock a forecast\n",
                    "description": "<p>Unlock a forecast</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>forecast-entry component</p>\n",
            "rawdescription": "\n\nforecast-entry component\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, OnChanges, OnDestroy, SimpleChanges, Output, EventEmitter } from '@angular/core';\r\nimport { formatDate } from '@angular/common';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\n\r\nimport { ForecastService } from '../../../core/services/forecasts/forecast.service';\r\nimport { UtilitiesService } from '../../../core/services/utilities.service';\r\n\r\nimport { FcEntry } from '../../../core/interfaces/fcEntry';\r\nimport { Month } from '../../../core/interfaces/month';\r\nimport { Project } from '../../../core/interfaces/project';\r\nimport { Subscription } from 'rxjs';\r\nimport { FcProject } from '../../../core/interfaces/fcProject';\r\nimport { UserService } from '../../../core/services/user.service';\r\nimport { Grade } from '../../../core/interfaces/grade';\r\nimport { AuthService } from '../../../core/security/auth.service';\r\nimport { environment as env } from '../../../../environments/environment';\r\nimport { ConfirmMessageDialog } from '../../dialogs/confirm-message/confirm-message.dialog';\r\nimport { DataSharingService } from '../../../core/shared/data-sharing.service';\r\nimport { ExecutiveForecastsService } from '../../../core/services/forecasts/executive-forecasts.service';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\n\r\n/**\r\n * forecast-entry component\r\n */\r\n@Component({\r\n  selector: 'app-fc-entry',\r\n  templateUrl: './fc-entry.component.html',\r\n  styleUrls: ['./fc-entry.component.scss'],\r\n})\r\nexport class FcEntryComponent implements OnInit, OnDestroy, OnChanges {\r\n  /**\r\n   * userId (received as input)\r\n   */\r\n  @Input('userId') userId: number;\r\n\r\n  /**\r\n   * selected month (received as input)\r\n   */\r\n  @Input('month') month: Month;\r\n\r\n  /**\r\n   * singleView: true in 'individual'-view, false in 'teamlead'-view\r\n   */\r\n  @Input('singleView') singleView: boolean;\r\n\r\n  /**\r\n   * event to subscribe to if there is no forecast for the current user and month\r\n   */\r\n  @Output() foreCastEmptyEvent = new EventEmitter();\r\n\r\n  /**\r\n   * Contains the newest version of forecast\r\n   */\r\n  forecast: FcEntry;\r\n  availableProjects: Project[] = [];\r\n\r\n  /**\r\n   * string that includes name + date of last edit\r\n   */\r\n  lastEditor: string = '';\r\n  grades: Grade[] = [];\r\n  fteSliderValue: number;\r\n  fcLoaded: boolean = false;\r\n  fcSubscription: Subscription;\r\n  loadingActive: boolean = false;\r\n  hundredPercent: boolean = false;\r\n  fiveTenFifteen: boolean = false;\r\n  monthRangeHundredPercent: number;\r\n\r\n  hasProjectInputFocus: boolean;\r\n  isProjectInputValid: boolean;\r\n  isCorValueBiggerThanZero: boolean;\r\n  benchtime: number;\r\n\r\n  /**\r\n   * forecast-entry component constructor\r\n   * @param utilitiesService\r\n   * @param forecastService\r\n   */\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private utilitiesService: UtilitiesService,\r\n    private forecastService: ForecastService,\r\n    private executiveService: ExecutiveForecastsService,\r\n    private userService: UserService,\r\n    private authService: AuthService,\r\n    private dataSharingService: DataSharingService,\r\n    private snackBar: MatSnackBar\r\n  ) { }\r\n\r\n  /**\r\n   * Initializes forecast entry component.\r\n   */\r\n  ngOnInit(): void {\r\n    if (!this.singleView) {\r\n      this.fcLoaded = true;\r\n      this.loadingActive = true;\r\n    }\r\n\r\n    //only subscribe to forecasts if there is none\r\n    //since changing of months in handeled in the ngOnChanges function\r\n   // if (!this.forecast)\r\n      this.subscribeForcasts();\r\n\r\n    this.grades = this.userService.getGrades();\r\n    this.availableProjects = this.utilitiesService.getProjects();\r\n\r\n    this.dataSharingService.hasProjectInputFocus().subscribe(hasFocus => this.hasProjectInputFocus = hasFocus);\r\n    this.dataSharingService.isProjectInputValid().subscribe(isValid => this.isProjectInputValid = isValid);\r\n    this.dataSharingService.isCorValueBiggerThanZero().subscribe(isBigger => this.isCorValueBiggerThanZero = isBigger);\r\n  }\r\n\r\n  // ngOnUpdate(): void {\r\n  //   this.subscribeForcasts();\r\n  // }\r\n\r\n  \r\n  subscribeForcasts(): void {\r\n    this.fcSubscription = this.forecastService.forecasts$\r\n      .subscribe((forecasts: FcEntry[]) => {\r\n        this.forecast = forecasts.find((fc: FcEntry) => fc.monthId === this.month.id && fc.userId === this.userId);\r\n        if (!this.forecast) {\r\n          this.forecastService.loadForecast(this.userId, this.month.id).then((res: any) => {\r\n            if (!res.showDialog || !res.suggestedData || !this.singleView) {\r\n              return;\r\n            }\r\n            /**\r\n             * For the next release in the future, the copy data functionality will be added\r\n             */\r\n\r\n            if (res.suggestedData.projects.length > 0 || res.suggestedData.fte !== this.forecast.fte || res.suggestedData.gradeId !== this.forecast.gradeId) {\r\n              let dialogRef: MatDialogRef<ConfirmMessageDialog> = this.dialog.open(ConfirmMessageDialog, {\r\n                data: {\r\n                  message: 'Copy data from last month submitted?',\r\n                  button: { cancel: 'No', submit: 'Yes' },\r\n                },\r\n              });\r\n\r\n              dialogRef.afterClosed().subscribe((add: boolean) => {\r\n                if (add === true) {\r\n                  this.forecastService.addProjectsToForecast(this.userId, this.month.id, res.suggestedData);\r\n                }\r\n              });\r\n            }\r\n          });\r\n\r\n        } else {\r\n          this.fcLoaded = true;\r\n          this.loadingActive = false;\r\n\r\n          if (typeof this.forecast.fte !== 'undefined') { // switched because forecast fte should be taken primary from saved/submitted forcast\r\n            this.fteSliderValue = this.forecast.fte * 100;\r\n          }\r\n          else if (typeof this.userService.getUser(this.userId).fte !== 'undefined') {\r\n            this.fteSliderValue = this.userService.getUser(this.userId).fte * 100;\r\n            this.forecast.fte = this.userService.getUser(this.userId).fte;\r\n          }\r\n          else {\r\n            this.fteSliderValue = 100;\r\n          }\r\n          if (this.forecast.history && this.forecast.history.length > 0 && this.forecast.history[0].createdAt) {\r\n            let date: string = formatDate(this.forecast.history[0].createdAt, 'dd.MM.yyyy', 'en');\r\n            this.lastEditor = 'Last updated from ' + this.forecast.history[0].changedBy + ', ' + date;\r\n          } else {\r\n            let date: string = formatDate(this.forecast.createdAt, 'dd.MM.yyyy', 'en');\r\n            this.lastEditor = 'Last updated from ' + this.forecast.changedBy + ', ' + date;\r\n          }\r\n\r\n          if (typeof this.forecast.gradeId === 'undefined') {\r\n            this.forecast.gradeId = this.userService.getUser(this.userId).gradeId;\r\n          }\r\n\r\n        }\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe services when component gets destroyed\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.fcSubscription.unsubscribe();\r\n    if (this.forecastService.checkForecastState('edited', this.month.id, this.userId)) {\r\n      if (!(this.totalDays() > this.forecast.totalDays)) {\r\n\r\n        this.saveForecast();\r\n      } else {\r\n        this.snackBar.open('Forecast cannot be saved due to one or more invalid data fields.', 'OK', { duration: 5000, });\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Saves forecast\r\n   */\r\n  saveForecast(): void {\r\n    // let trainingDays: FcProject = this.forecast.projects\r\n    // .find((p: FcProject) => (p.projectType === env.projectTypes.trainingdays+1));\r\n    this.forecastService.saveForecast(this.month.id, this.userId, false);\r\n    if(this.singleView && (this.forecast.isHundredPercent || this.forecast.isFiveTenFifteen))\r\n    this.reloadCurrentPage();\r\n  }\r\n\r\n  /**\r\n   * Submits forecast (save + \"locked: true\")\r\n   */\r\n  submitForecast(): void {\r\n    this.forecastService.saveForecast(this.month.id, this.userId, true);\r\n  }\r\n\r\n  /**\r\n   * Unlock a forecast\r\n   */\r\n  unlockForecast(): void {\r\n    this.forecastService.unlockForecast(this.month.id, this.userId);\r\n  }\r\n   \r\n  reloadCurrentPage(): void{\r\n    window.location.reload();\r\n  }\r\n  /**\r\n   * Adds a new project.\r\n   * Sets the cursor focus at the beginning of the newly added project.\r\n   * @param id\r\n   * @param days\r\n   * @param probabilityId\r\n   */\r\n  addProjectToForecast(): void {\r\n    this.forecastService.addProject(\r\n      this.month.id,\r\n      this.userId,\r\n      new FcProject(),\r\n    );\r\n\r\n    // Sets the focus to newly added project\r\n    setTimeout(() => {\r\n      const el: any = document.querySelector('#project-' + this.month.id + '-' + (this.forecast.projects.length - 1));\r\n      el.querySelector('.mat-input-element').focus();\r\n    }, 100);\r\n  }\r\n\r\n \r\n  addProjectToForecastHundredPercent(): void {\r\n    // temp range - get value from datepicker when implemented\r\n    this.hundredPercent = true;\r\n    this.forecastService.addProject(\r\n      this.month.id,\r\n      this.userId,\r\n      new FcProject(),\r\n    );\r\n\r\n    // Sets the focus to newly added project\r\n    setTimeout(() => {\r\n      const el: any = document.querySelector('#project-' + this.month.id + '-' + (this.forecast.projects.length - 1));\r\n      el.querySelector('.mat-input-element').focus();\r\n    }, 100);\r\n  }\r\n  addProjectToForecastFiveTenFifteen(): void {\r\n    this.fiveTenFifteen = true\r\n    this.forecastService.addProject(\r\n      this.month.id,\r\n      this.userId,\r\n      new FcProject(),\r\n    );\r\n    // Sets the focus to newly added project\r\n    setTimeout(() => {\r\n      const el: any = document.querySelector('#project-' + this.month.id + '-' + (this.forecast.projects.length - 1));\r\n      el.querySelector('.mat-input-element').focus();\r\n    }, 100);\r\n  }\r\n\r\n  getUpdatedValue($event){\r\n    this.hundredPercent = $event; \r\n    this.fiveTenFifteen = $event;  \r\n  }\r\n\r\n  fteSliderValueUpdate(): void {\r\n\r\n    this.forecast.fte = parseFloat((this.fteSliderValue / 100).toFixed(3));\r\n    this.forecastService.setForecast(this.forecast, false, true);\r\n  }\r\n\r\n  settingsUpdate(): void {\r\n    this.forecastService.setForecast(this.forecast, false, true);\r\n  }\r\n\r\n  fteValue(): any {\r\n    if (typeof this.forecast.fte !== 'undefined') {\r\n      return Math.round(this.forecast.fte * 1000) / 10;\r\n    }\r\n    return 100;\r\n  }\r\n\r\n  /**\r\n   * Calculates the total number of days for projects.\r\n   */\r\n  totalDays(): number {\r\n    this.benchtime  =  this.forecast.projects\r\n    .find((p: FcProject) => (p.projectId === 317))\r\n    .plannedProjectDays;\r\n    \r\n    return (this.forecast.billableDays + this.forecast.nonbillableDays) -  this.benchtime;\r\n  }\r\n\r\n  isUserFullTime(): boolean {\r\n    if(this.forecast.fte == 1)\r\n    return true;\r\n    else\r\n    return false;\r\n  }\r\n  /**\r\n   * Test if user fulfills certain role criteria\r\n   */\r\n  hasLeadRole(): boolean {\r\n    return this.authService.hasRole(env.roles.pdl);\r\n  }\r\n\r\n  hasMSLRole(): boolean {\r\n    return this.authService.hasRole(env.roles.msl);\r\n  }\r\n\r\n  hasUnlockPermission(level: number): boolean {\r\n    if (this.authService.hasRole(level) || this.forecast.locked < this.authService.getRoleId()) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Test is forecast is locked for logged-in user\r\n   */\r\n  fcIsLocked(): boolean {\r\n    if (this.forecast && this.forecast.locked >= this.authService.getRoleId()) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  fcLockedBySub(): boolean {\r\n    if (this.forecast && this.forecast.locked >= 0 && this.forecast.locked < this.authService.getRoleId()) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  openDialog(): void {\r\n    let dialogRef: MatDialogRef<ConfirmMessageDialog> = this.dialog.open(ConfirmMessageDialog, {\r\n      width: '250px',\r\n      data: {\r\n        message: 'Copy data from last submitted month?',\r\n        button: { cancel: 'No', submit: 'Yes' },\r\n      },\r\n    });\r\n  }\r\n  copyData(): void {\r\n    this.forecastService.loadForecast(this.userId, this.month.id).then((res: any) => {\r\n      this.forecastService.addProjectsToForecast(this.userId, this.month.id, res.suggestedData);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Called if there are changes to input fields\r\n   * @param changes an dict of changes. Value at Key is undefined if there are no chagnes.\r\n   */\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    //If there are changes to the current month BUT its not the first time this chagnes happen\r\n    if (changes['month'] && !changes['month'].isFirstChange()) {\r\n      this.loadingActive = true;\r\n      this.fcLoaded = false;\r\n      this.fcSubscription.unsubscribe();\r\n      this.fcSubscription = this.forecastService.forecasts$.subscribe((forecasts: FcEntry[]) => {\r\n        this.forecast = forecasts.find((fc: FcEntry) => fc.monthId === this.month.id && fc.userId === this.userId);\r\n      });\r\n      //init the new month to be retrivable by the forecast service subscription\r\n      this.executiveService.initializeDetailValues(this.month.id).then(() => {\r\n        //when the data is initialized\r\n        //this should be nearly the same time the subscription received it's value\r\n        this.loadingActive = false;\r\n        this.fcLoaded = true;\r\n        //Since the subscription should already have fired this forecast should only be undefined if there is no forecast\r\n        if (!this.forecast) {\r\n          this.forecast = undefined;\r\n          this.foreCastEmptyEvent.emit();\r\n          this.snackBar.open('There is no forceast for this user and ' + this.month.name, 'Ok', { duration: 10000, });\r\n        }\r\n      });\r\n    }\r\n\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../assets/styles/variables.scss';\r\n\r\n.loading-overlay {\r\n\tposition: absolute;\r\n\tdisplay: block;\r\n\ttop: 0;\r\n\tleft: 0;\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\tz-index: 900;\r\n\tbackground: rgba(255,255,255,0.5);\r\n\topacity: 1;\r\n\r\n\t&.hide {\r\n\t\tdisplay: none;\r\n\t}\r\n}\r\n\r\n.spinner-container {\r\n\tdisplay: none;\r\n\tposition: absolute;\r\n\ttop: 50%;\r\n\tleft: 50%;\r\n\ttransform: translate(-50%, -50%);\r\n\tz-index: 1000;\r\n  \r\n\t&.active {\r\n\t  display: block;\r\n\t}\r\n  }\r\n\r\n.button-row {\r\n\tmargin: 10px 5px 20px;\r\n\r\n\tbutton.align-right {\r\n\t\tfloat: right;\r\n\t\tmargin-left: 5px;\r\n\t}\r\n}\r\n\r\n\r\n\r\n.settings-row {\r\n\tmargin-top: 25px;\r\n\tfont-size: $font-size;\r\n\r\n\t&.teamview {\r\n\t\tmargin-top: 0;\r\n\t}\r\n\t\r\n\t> div {\r\n\t\tpadding: 0 25px;\r\n\t\tborder-right: 1px solid rgba(0,0,0,0.12);\r\n\r\n\t\t&:first-child {\r\n\t\t\tpadding-left: 5px;\r\n\t\t}\r\n\r\n\t\t&:last-child {\r\n\t\t\tpadding-right: 5px;\r\n\t\t\tborder-right: none;\r\n\t\t}\r\n\t}\r\n\r\n\t.mat-slide-toggle {\r\n\t\theight: 100%;\r\n\t\tline-height: 1.2em;\r\n\t\ttext-align: center;\r\n\t}\r\n}\r\n\r\n.project-list.height-fix{\r\n\theight: 200px;\r\n\toverflow: auto;\r\n}\r\n.mat-divider {\r\n\tmargin: 15px 0;\r\n}\r\n\r\n.slider {\r\n\twidth: 85%;\r\n}\r\n\r\n.slider-text {\r\n\tdisplay: inline-block;\r\n\ttext-align: center;\r\n\twidth: 15%;\r\n}",
                    "styleUrl": "./fc-entry.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>forecast-entry component constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataSharingService",
                        "type": "DataSharingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 74,
                "rawdescription": "\n\nforecast-entry component constructor\n",
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 2675,
                            "end": 2691,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "utilitiesService"
                        },
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2669,
                            "end": 2674,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 2705,
                            "end": 2720,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "forecastService"
                        },
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2699,
                            "end": 2704,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataSharingService",
                        "type": "DataSharingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "OnChanges"
            ],
            "templateData": "<div class=\"loading-overlay\" [ngClass]=\"{'hide': fcLoaded}\"></div>\r\n\r\n<div class=\"spinner-container\" [ngClass]=\"{'active': loadingActive}\">\r\n    <mat-progress-spinner class=\"progress-spinner\" color=\"primary\" mode=\"indeterminate\"></mat-progress-spinner>\r\n</div>\r\n\r\n<div class=\"settings-row\" [ngClass]=\"{'teamview': !singleView}\" layout=\"row\" layout-fill>\r\n  <div flex=\"40\">\r\n    <mat-form-field appearance=\"outline\">\r\n      <mat-label>Grade</mat-label>\r\n      <mat-select placeholder=\"Grade\" [(ngModel)]=\"forecast.gradeId\" [disabled]=\"fcIsLocked() || !hasLeadRole() \"  (selectionChange)=\"settingsUpdate()\">\r\n        <mat-option *ngFor=\"let g of grades\" [value]=\"g.gradeId\">{{g.name}}</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n  </div>\r\n\r\n  <div flex=\"60\" class=\"padding\" layout-fill>\r\n    <mat-slider thumbLabel color=\"primary\" min=\"0\" max=\"100\" step=\"2.5\" [(ngModel)]=\"fteSliderValue\" (change)=\"fteSliderValueUpdate()\" class=\"slider\" [disabled]=\"fcIsLocked()\"></mat-slider>\r\n    <span class=\"slider-text\">{{fteValue()}}% FTE</span>\r\n  </div>\r\n\r\n  <div flex=\"20\" *ngIf=\"hasLeadRole()\">\r\n    <mat-slide-toggle [(ngModel)]=\"forecast.isRelevant\" color=\"primary\" [disabled]=\"fcIsLocked()\" (change)=\"settingsUpdate()\">ARVE / URVE Relevance</mat-slide-toggle>\r\n  </div>\r\n</div>\r\n\r\n<mat-divider></mat-divider>\r\n\r\n<div class=\"project-list\" [ngClass]=\"{'height-fix': !singleView && hasMSLRole()}\">\r\n    <app-fc-project *ngFor=\"let project of forecast.projects; let index = index\" [forecast]=\"forecast\" [project]=\"project\" [monthId]=\"month.id\" [userId]=\"userId\" [index]=\"index\" [lastEditor]=\"lastEditor\" [(hundredPercent)]=\"hundredPercent\" [(fiveTenFifteen)]=\"fiveTenFifteen\"  (valueUpdate)=\"getUpdatedValue($event)\"></app-fc-project>\r\n</div>\r\n\r\n<div class=\"multi-view-box\" *ngIf=\"!singleView\">\r\n  <mat-form-field appearance=\"outline\">\r\n    <mat-label>Comments</mat-label>\r\n    <textarea matInput [(ngModel)]=\"forecast.comment\" name=\"comment\" placeholder=\"Leave a comment\" maxLength=\"500\"\r\n      [disabled]=\"fcIsLocked()\" cdkTextareaAutosize #autosize=\"cdkTextareaAutosize\" cdkAutosizeMinRows=\"3\"\r\n      cdkAutosizeMaxRows=\"6\"></textarea>\r\n  </mat-form-field>\r\n\r\n  <div class=\"summary-warning error\" *ngIf=\"totalDays() > (forecast.totalDays | number: '1.0-2')\">\r\n    <mat-icon class=\"icon\">error</mat-icon>\r\n    It is not possible to assign more than <strong>{{forecast.totalDays | number: '1.0-2': 'de'}} days</strong> for this month!<br>\r\n    No more than <strong>{{benchtime}} days </strong>  can be subtract from bench time.<br>\r\n  \tThere are currently <strong>{{((forecast.totalDays - (forecast.billableDays + forecast.nonbillableDays - benchtime)))*-1| number: '1.0-2': 'de'}} days</strong> too much.\r\n  </div>\r\n</div>\r\n\r\n<div class=\"button-row\">\r\n  <button mat-raised-button *ngIf=\"availableProjects.length > forecast.projects.length && !fcIsLocked()\"\r\n    color=\"primary\" (click)=\"addProjectToForecast()\">\r\n    <mat-icon>playlist_add</mat-icon> Add Project\r\n  </button>\r\n  <button mat-raised-button *ngIf=\"availableProjects.length > forecast.projects.length && !fcIsLocked() && singleView\"\r\n    color=\"primary\" (click)=\"addProjectToForecastHundredPercent()\">\r\n    <mat-icon>playlist_add</mat-icon> Add Project 100%\r\n  </button>\r\n  <button mat-raised-button *ngIf=\"availableProjects.length > forecast.projects.length && !fcIsLocked()  && singleView && isUserFullTime()\"\r\n    color=\"primary\" (click)=\"addProjectToForecastFiveTenFifteen()\">\r\n    <mat-icon>playlist_add</mat-icon> Add Project 5-10-15\r\n  </button>\r\n  <button mat-stroked-button *ngIf=\"singleView && !fcIsLocked()\" class=\"mat-primary-reversed align-right\"\r\n  (click)=\"copyData()\">\r\n    <mat-icon>content_copy</mat-icon> Copy Data\r\n  </button>\r\n  \r\n  <button mat-stroked-button *ngIf=\"!singleView && !fcIsLocked()\" class=\"mat-primary-reversed align-right\"\r\n    (click)=\"submitForecast()\" [disabled]=\"totalDays() > forecast.totalDays  || hasProjectInputFocus || !isProjectInputValid || !isCorValueBiggerThanZero\">\r\n    <mat-icon>lock</mat-icon> Submit\r\n  </button>\r\n\r\n  <button mat-stroked-button *ngIf=\"!singleView && !fcIsLocked()\" class=\"mat-primary-reversed align-right\"\r\n    (click)=\"saveForecast()\" [disabled]=\"totalDays() > forecast.totalDays  || hasProjectInputFocus || !isProjectInputValid || !isCorValueBiggerThanZero\">\r\n    <mat-icon>save</mat-icon> Save\r\n  </button>\r\n\r\n  <button mat-stroked-button *ngIf=\"!singleView && fcIsLocked() && hasUnlockPermission(2)\" class=\"mat-primary-reversed align-right\"\r\n    (click)=\"unlockForecast()\">\r\n    <mat-icon>lock_open</mat-icon> Unlock\r\n  </button>\r\n\r\n  <button mat-stroked-button *ngIf=\"!singleView && !fcIsLocked()\" class=\"mat-primary-reversed align-right\" [disabled]=\"!fcLockedBySub()\"\r\n    (click)=\"unlockForecast()\">\r\n    <mat-icon>lock_open</mat-icon> Unlock for User\r\n  </button>\r\n</div>"
        },
        {
            "name": "FcEntryDetailDialogComponent",
            "id": "component-FcEntryDetailDialogComponent-176d920c59cb2768d9a2edf0a3510767",
            "file": "src/app/forecast/components/executive-detail/fc-entry-detail-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-fc-entry-detail-dialog",
            "styleUrls": [
                "./fc-entry-detail-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./fc-entry-detail-dialog.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cancelButtonText",
                    "defaultValue": "\"Done\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "currentMonthId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "month",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "monthName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "months",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "nextMonthDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "previousMonthDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "isNextPrevDisabled",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "nextMonth",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onConfirmClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "previousMonth",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Inject } from '@angular/core';\r\nimport { VERSION } from '@angular/material/core';\r\nimport { MatDialogRef, MatDialog, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Month } from '../../../core/interfaces/month';\r\n\r\n@Component({\r\n  selector: 'app-fc-entry-detail-dialog',\r\n  templateUrl: './fc-entry-detail-dialog.html',\r\n  styleUrls: [\"./fc-entry-detail-dialog.component.scss\"]\r\n})\r\nexport class FcEntryDetailDialogComponent {\r\n  userId: number;\r\n  month: Month;\r\n  months: Month[];\r\n  cancelButtonText = \"Done\";\r\n  lastName: string;\r\n  firstName: string;\r\n  monthName: string;\r\n\r\n  currentMonthId: number;\r\n\r\n  previousMonthDisabled: boolean;\r\n  nextMonthDisabled: boolean;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private data: any,\r\n    private dialogRef: MatDialogRef<FcEntryDetailDialogComponent>) {\r\n      this.nextMonthDisabled = true;\r\n      this.previousMonthDisabled = true;\r\n      if (data) {\r\n        this.userId = data.userId;\r\n        this.month = data.month;\r\n        this.currentMonthId = data.month.id;\r\n        this.months = data.months;\r\n        this.monthName = data.month.name;\r\n        this.firstName = data.firstName;\r\n        this.lastName = data.lastName;\r\n      }\r\n\r\n      this.isNextPrevDisabled();\r\n  }\r\n\r\n  onConfirmClick(): void {\r\n    this.dialogRef.close(true);\r\n  }\r\n\r\n  previousMonth() :void{\r\n    if(this.currentMonthId - 1 >= this.months[0].id){\r\n      this.currentMonthId -= 1;\r\n      this.month = this.months.find(m => m.id == this.currentMonthId);\r\n      this.monthName = this.month.name;\r\n    }\r\n    this.isNextPrevDisabled();\r\n  }\r\n\r\n  nextMonth() :void{\r\n    if(this.currentMonthId + 1 <= this.months[this.months.length -1].id){\r\n      this.currentMonthId += 1;\r\n      this.month = this.months.find(m => m.id == this.currentMonthId);\r\n      this.monthName = this.month.name;\r\n    }\r\n    this.isNextPrevDisabled();\r\n  }\r\n\r\n  isNextPrevDisabled() : void{\r\n    if(this.currentMonthId + 1 <= this.months[this.months.length -1].id){\r\n      this.nextMonthDisabled = false;\r\n    }else{\r\n      this.nextMonthDisabled = true;\r\n    }\r\n    if(this.currentMonthId - 1 >= this.months[0].id){\r\n      this.previousMonthDisabled = false;\r\n    }else{\r\n      this.previousMonthDisabled = true;\r\n    }\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-dialog-content, .tab-container, .mat-dialog-container {\r\n    overflow: hidden;\r\n}\r\n\r\n.button-row {\r\n\tmargin: 10px 5px 20px;\r\n\r\n\tbutton.align-right {\r\n\t\tfloat: right;\r\n\t\tmargin-left: 5px;\r\n\t}\r\n}",
                    "styleUrl": "./fc-entry-detail-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<FcEntryDetailDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<FcEntryDetailDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h3>{{this.monthName}}</h3>\r\n<h2 mat-dialog-title>{{this.lastName}}, {{this.firstName}}</h2>\r\n<mat-dialog-content>\r\n    <app-fc-entry class=\"tab-container\" [userId]=\"userId\" [singleView]=\"false\" [month]=\"month\" (foreCastEmptyEvent)=\"previousMonth()\"></app-fc-entry>\r\n</mat-dialog-content>\r\n<div class=\"button-row\">\r\n    <button mat-stroked-button class=\"mat-primary-reversed\" [disabled]=\"previousMonthDisabled\"\r\n      (click)=\"previousMonth()\">\r\n      <mat-icon>chevron_left</mat-icon> Previous Month\r\n    </button>\r\n    <button mat-stroked-button class=\"mat-primary-reversed align-right\" [disabled]=\"nextMonthDisabled\"\r\n      (click)=\"nextMonth()\">\r\n      Next Month <mat-icon>chevron_right</mat-icon>\r\n    </button>\r\n  </div>\r\n<!-- <mat-dialog-actions>\r\n\t<button mat-raised-button color=\"primary\" mat-dialog-close tabindex=\"-1\">Done</button>\r\n</mat-dialog-actions> -->\r\n"
        },
        {
            "name": "FcEntrySummaryComponent",
            "id": "component-FcEntrySummaryComponent-f8cb0ad707d55dadf72c5196ce064970",
            "file": "src/app/forecast/components/fc-entry-summary/fc-entry-summary.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-fc-entry-summary",
            "styleUrls": [
                "./fc-entry-summary.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./fc-entry-summary.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "month",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "month (received as input)",
                    "description": "<p>month (received as input)</p>\n",
                    "line": 38,
                    "type": "Month"
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "userId (received as input)",
                    "description": "<p>userId (received as input)</p>\n",
                    "line": 33,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "benchtime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "line": 72,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "fcProjectsDS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTableDataSource<FcProject>",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "fcSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "forecast",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FcEntry",
                    "optional": false,
                    "description": "<p>Contains the newest version of forecast</p>\n",
                    "line": 43,
                    "rawdescription": "\n\nContains the newest version of forecast\n"
                },
                {
                    "name": "hasProjectInputFocus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "isCorValueBiggerThanZero",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "isProjectInputValid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "projects",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Project[]",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "projectSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "remainingDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "summaryData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTableDataSource<any>",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 59
                }
            ],
            "methodsClass": [
                {
                    "name": "commentUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalls comment-update in forecast-service.\n",
                    "description": "<p>Calls comment-update in forecast-service.</p>\n"
                },
                {
                    "name": "errorMessage",
                    "args": [
                        {
                            "name": "hasProjectInputFocus",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isProjectInputValid",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isCorValueBiggerThanZero",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 233,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "hasProjectInputFocus",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isProjectInputValid",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isCorValueBiggerThanZero",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fcIsLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 227,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTest is forecast is locked for logged-in user\n",
                    "description": "<p>Test is forecast is locked for logged-in user</p>\n"
                },
                {
                    "name": "hasLeadRole",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 213,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns whether the logged in user has a lead role\n",
                    "description": "<p>Returns whether the logged in user has a lead role</p>\n"
                },
                {
                    "name": "hasPracticeLeadRole",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 220,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns whether the logged in user has a practice lead role\n",
                    "description": "<p>Returns whether the logged in user has a practice lead role</p>\n"
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnsubscribe services when component gets destroyed\n",
                    "description": "<p>Unsubscribe services when component gets destroyed</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInitializes the entry-summary component.\n",
                    "description": "<p>Initializes the entry-summary component.</p>\n"
                },
                {
                    "name": "percentageValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalculates the percentage value\n",
                    "description": "<p>Calculates the percentage value</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7041,
                                "end": 7046,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "value"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7035,
                                "end": 7040,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "projectName",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 203,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns the project name to a given id.\n",
                    "description": "<p>Returns the project name to a given id.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7221,
                                "end": 7223,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7215,
                                "end": 7220,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "reloadCurrentPage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveForecast",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalls save forecast in forecast-service.\n",
                    "description": "<p>Calls save forecast in forecast-service.</p>\n"
                },
                {
                    "name": "showVacationWarning",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 256,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submitForecast",
                    "args": [
                        {
                            "name": "remainDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSubmits forecast (save + lock)\n",
                    "description": "<p>Submits forecast (save + lock)</p>\n",
                    "jsdoctags": [
                        {
                            "name": "remainDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "totalDays",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 248,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalculates the total number of days for projects.\n",
                    "description": "<p>Calculates the total number of days for projects.</p>\n"
                },
                {
                    "name": "unlockForecast",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnlock a forecast\n",
                    "description": "<p>Unlock a forecast</p>\n"
                },
                {
                    "name": "uploadSavedForecast",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>forecast-entry individual summary component</p>\n",
            "rawdescription": "\n\nforecast-entry individual summary component\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, OnDestroy } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatDialog, MatDialogRef } from \"@angular/material/dialog\";\r\n\r\nimport { FcProject } from '../../../core/interfaces/fcProject';\r\nimport { Month } from '../../../core/interfaces/month';\r\n\r\nimport { ForecastService } from '../../../core/services/forecasts/forecast.service';\r\nimport { UtilitiesService } from '../../../core/services/utilities.service';\r\nimport { Project } from '../../../core/interfaces/project';\r\nimport { FcEntry } from '../../../core/interfaces/fcEntry';\r\nimport { Subscription } from 'rxjs';\r\nimport { AuthService } from '../../../core/security/auth.service';\r\nimport { environment as env } from '../../../../environments/environment';\r\nimport { DataSharingService } from '../../../core/shared/data-sharing.service';\r\nimport { SummaryDataProject, SummaryData } from '../../../core/interfaces/summaryData';\r\nimport { User } from '../../../core/interfaces/user';\r\nimport { FcEntrySummaryVacationWarningComponent } from './vacation-warning/fc-entry-summary-vacation-warning.component';\r\nimport { FcEntrySummaryRemDaysWarningComponent } from './remdays-warning/fc-entry-summary-remdays-warning.component';\r\n/**\r\n * forecast-entry individual summary component\r\n */\r\n@Component({\r\n  selector: 'app-fc-entry-summary',\r\n  templateUrl: './fc-entry-summary.component.html',\r\n  styleUrls: ['./fc-entry-summary.component.scss'],\r\n})\r\nexport class FcEntrySummaryComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * userId (received as input)\r\n   */\r\n  @Input('userId') userId: number;\r\n\r\n  /**\r\n   * month (received as input)\r\n   */\r\n  @Input('month') month: Month;\r\n\r\n  /**\r\n   * Contains the newest version of forecast\r\n   */\r\n  forecast: FcEntry;\r\n\r\n  projects: Project[];\r\n\r\n  fcProjectsDS: MatTableDataSource<FcProject>;\r\n  fcSubscription: Subscription;\r\n  projectSubscription: Subscription;\r\n\r\n  hasProjectInputFocus: boolean;\r\n  isProjectInputValid: boolean;\r\n  isCorValueBiggerThanZero: boolean;\r\n\r\n  remainingDays: number;\r\n\r\n  summaryData: MatTableDataSource<any>;\r\n\r\n  user: User;\r\n  benchtime: number;\r\n\r\n  /**\r\n   * forecast-entry summary constructor\r\n   * @param dialog\r\n   */\r\n  constructor(\r\n    private utilitiesService: UtilitiesService,\r\n    private forecastService: ForecastService,\r\n    private authService: AuthService,\r\n    private dataSharingService: DataSharingService,\r\n    private snackBar: MatSnackBar,\r\n    public dialog: MatDialog\r\n  ) { \r\n    \r\n  }\r\n\r\n  /**\r\n   * Initializes the entry-summary component.\r\n   */\r\n  ngOnInit(): void {\r\n    \r\n\r\n    this.fcSubscription = this.forecastService.forecasts$\r\n      .subscribe((forecasts: FcEntry[]) => {\r\n        this.forecast = forecasts.find((fc: FcEntry) => fc.monthId === this.month.id && fc.userId === this.userId);\r\n        if (this.forecast) {\r\n          this.fcProjectsDS = new MatTableDataSource(this.forecast.projects.filter((p: FcProject) => typeof p.projectId !== 'undefined'));\r\n          this.summaryData = new MatTableDataSource(\r\n            [\r\n              {title: \"Expected working days\", days: (this.forecast.totalDays)},\r\n              {title: \"Billable days\", days: (this.forecast.billableDays)},\r\n              {title: \"Non-billable days\", days: (this.forecast.nonbillableDays)},\r\n              {title: \"Total forecasted days\", days: (this.forecast.billableDays + this.forecast.nonbillableDays)},\r\n              {title: \"Remaining days to forecast\", days: (this.forecast.totalDays - (this.forecast.billableDays + this.forecast.nonbillableDays))},\r\n            ]\r\n          );\r\n        }\r\n      });\r\n\r\n    this.projectSubscription = this.utilitiesService.projects$\r\n      .subscribe((projects: Project[]) => {\r\n        this.projects = projects;\r\n      });\r\n\r\n    this.dataSharingService.hasProjectInputFocus().subscribe(hasFocus => this.hasProjectInputFocus = hasFocus);\r\n    this.dataSharingService.isProjectInputValid().subscribe(isValid => this.isProjectInputValid = isValid);\r\n    this.dataSharingService.isCorValueBiggerThanZero().subscribe(isBigger => this.isCorValueBiggerThanZero = isBigger);\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe services when component gets destroyed\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.fcSubscription.unsubscribe();\r\n    this.projectSubscription.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * Calls comment-update in forecast-service.\r\n   */\r\n  commentUpdate(): void {\r\n    this.forecastService.setForecastComment(this.month.id, this.userId, this.forecast.comment);\r\n  }\r\n\r\n  /**\r\n   * Calls save forecast in forecast-service.\r\n   */\r\n   saveForecast(): void {\r\n    let vacationProject = this.projects.find(p => p.name === \"0IDVAC793 - Austria Vacation\");\r\n    let vacationForecast = this.forecast.projects.find(p => p.projectId === vacationProject.id);\r\n    let benchProject = this.projects.find(p => p.name === \"100528772 - Bench Time_non-client_APPS\");\r\n    let benchForecast = this.forecast.projects.find(p => p.projectId === benchProject.id);\r\n    var remDays =  this.forecast.totalDays - (this.forecast.billableDays + this.forecast.nonbillableDays);\r\n\r\n    if(vacationForecast.plannedProjectDays <= 0 || benchForecast.plannedProjectDays <= 0){\r\n      if(vacationForecast.plannedProjectDays <= 0){\r\n      this.showVacationWarning().then(result=>{\r\n        if(result){\r\n          this.uploadSavedForecast();\r\n        }\r\n      });      \r\n      } \r\n    }\r\n    else{\r\n      this.uploadSavedForecast();\r\n    }\r\n  }\r\n\r\n  uploadSavedForecast() {\r\n    for(var i = 0; i < this.forecast.projects.length; i++) {\r\n      if(this.forecast.projects[i].mandatory == \"N\" && this.forecast.projects[i].plannedProjectDays <= 0) {\r\n        this.snackBar.open(\"You can't forecast 0 days for non-mandatory projects!\", 'OK', { duration: 10000, });\r\n        return;\r\n      }\r\n    }\r\n    \r\n    this.forecastService.saveForecast(this.month.id, this.userId);\r\n    if ((navigator.userAgent.indexOf(\"Firefox\") > -1)) window.location.reload();\r\n    if(this.forecast.isHundredPercent || this.forecast.isFiveTenFifteen)\r\n    this.reloadCurrentPage();\r\n  }\r\n\r\n\r\n  /**\r\n   * Submits forecast (save + lock)\r\n   */\r\n  submitForecast(remainDays: number): void {\r\n    for(var i = 0; i < this.forecast.projects.length; i++) {\r\n      if(this.forecast.projects[i].mandatory == \"N\" && this.forecast.projects[i].plannedProjectDays <= 0) {\r\n        this.snackBar.open(\"You can't forecast 0 days for non-mandatory projects!\", 'OK', { duration: 10000, });\r\n        return;\r\n      }\r\n    }\r\n\r\n    this.remainingDays = remainDays;\r\n    this.forecastService.saveForecast(this.month.id, this.userId, true);\r\n    if ((navigator.userAgent.indexOf(\"Firefox\") > -1)) window.location.reload();\r\n  }\r\n\r\n   \r\n  reloadCurrentPage(): void{\r\n    window.location.reload();\r\n  }\r\n  /**\r\n   * Unlock a forecast\r\n   */\r\n  unlockForecast(): void {\r\n    this.forecastService.unlockForecast(this.month.id, this.userId);\r\n  }\r\n\r\n  /**\r\n   * Calculates the percentage value\r\n   * @param value\r\n   */\r\n  percentageValue(value: number): number {\r\n    return parseFloat((value * 100).toFixed(0));\r\n  }\r\n\r\n  /**\r\n   * Returns the project name to a given id.\r\n   * @param id\r\n   */\r\n  projectName(id: number): string | undefined {\r\n    if (id === 0) {\r\n      return 'Non billable days';\r\n    }\r\n    return this.projects.find((p: Project) => p.id === id) ? this.projects.find((p: Project) => p.id === id).name : undefined;\r\n  }\r\n\r\n  /**\r\n   * Returns whether the logged in user has a lead role\r\n   */\r\n  hasLeadRole(): boolean {\r\n    return this.authService.hasRole(env.roles.pdl);\r\n  }\r\n\r\n  /**\r\n   * Returns whether the logged in user has a practice lead role\r\n   */\r\n  hasPracticeLeadRole(): boolean {\r\n    return this.authService.hasRole(env.roles.pl);\r\n  }\r\n\r\n  /**\r\n   * Test is forecast is locked for logged-in user\r\n   */\r\n  fcIsLocked(): boolean {\r\n    if (this.forecast && this.forecast.locked >= this.authService.getRoleId()) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  errorMessage(hasProjectInputFocus: boolean, isProjectInputValid: boolean,isCorValueBiggerThanZero: boolean): string{\r\n    if(hasProjectInputFocus) {\r\n     return \"Please choose a project\";\r\n   } \r\n    else if (isProjectInputValid) {\r\n      return \"Required fields missing (e.g. days, probability) \"\r\n    }\r\n    else {\r\n      return \"\"\r\n    }\r\n  }\r\n\r\n /**\r\n   * Calculates the total number of days for projects.\r\n   */\r\n  totalDays(): number {\r\n    this.benchtime  =  this.forecast.projects\r\n    .find((p: FcProject) => (p.projectId === 317))\r\n    .plannedProjectDays;\r\n\r\n  return (this.forecast.billableDays + this.forecast.nonbillableDays) - this.benchtime;\r\n  }\r\n\r\n  showVacationWarning(): Promise<boolean> {\r\n    let dialogRef: any = this.dialog.open(FcEntrySummaryVacationWarningComponent,{\r\n      height: 'auto',\r\n      width: 'auto'\r\n    });\r\n    return dialogRef.afterClosed().toPromise();\r\n  }\r\n  // showRemDaysWarning(): Promise<boolean> {\r\n  //   let dialogRef: any = this.dialog.open(FcEntrySummaryRemDaysWarningComponent,{\r\n  //     height: 'auto',\r\n  //     width: 'auto'\r\n  //   });\r\n  //   return dialogRef.afterClosed().toPromise();\r\n  // }\r\n}\r\n\r\n\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../assets/styles/variables.scss';\r\n\r\n.mat-raised-button.mat-primary, .mat-stroked-button.mat-primary-reversed {\r\n\tmargin-left: 5px;\r\n\r\n\t&:first-child {\r\n\t\tmargin-left: 0;\r\n\t}\r\n}\r\n\r\n\r\n\r\n.card-section.days {\r\n\tdisplay: flex;\r\n\t\r\n\t.summary-table {\r\n\t\tflex: auto;\r\n\t\tpadding: 12px;\r\n\r\n\t\t.column-days{\r\n\t\t\tpadding-top: 8px;\r\n\t\t\tpadding-left: 12px;\r\n\r\n\t\t\t.note {\r\n\t\t\t\tcolor: map-get($font-colors, blue);\r\n\t\t\t\tfont-weight: bolder;\r\n\t\t\t\tfont-size: 12px;\r\n\t\t\t}\r\n\t\t\t.remaining {\r\n\t\t\t\tfont-weight: bolder;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n.mat-divider{\r\n\tborder-top-width: 1px;\r\n\tborder-top-style: dashed;\r\n\tborder-top-color: black;\r\n  }\r\n\r\n.mat-error{\r\n\tpadding: 10px;\r\n}  ",
                    "styleUrl": "./fc-entry-summary.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>forecast-entry summary constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataSharingService",
                        "type": "DataSharingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 60,
                "rawdescription": "\n\nforecast-entry summary constructor\n",
                "jsdoctags": [
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataSharingService",
                        "type": "DataSharingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 2284,
                            "end": 2290,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialog"
                        },
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2278,
                            "end": 2283,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<mat-card class=\"summary-box individual\">\r\n\t<mat-card-title>\r\n\t\tSummary {{month.name}}\r\n\t</mat-card-title>\r\n\r\n\t<mat-card-content>\r\n\t\t<div class=\"card-section days\">\r\n\t\t\t<table mat-table [dataSource]=\"summaryData\">\r\n\t\t\t\t<ng-container matColumnDef=\"title\">\r\n\t\t\t\t\t<th mat-header-cell *matHeaderCellDef>Name</th>\r\n\t\t\t\t\t<td mat-cell *matCellDef=\"let element\">{{ element.title }} </td>\r\n\t\t\t\t\t<!-- <td mat-footer-cell *matFooterCellDef>\r\n\t\t\t\t\t\t<span class=\"remaining\">Expected days</span>\r\n\t\t\t\t\t</td> -->\r\n\t\t\t\t</ng-container>\r\n\t\t\t\t<ng-container matColumnDef=\"days\">\r\n\t\t\t\t\t<th mat-header-cell *matHeaderCellDef>Days</th>\r\n\t\t\t\t\t<td mat-cell *matCellDef=\"let element\">{{ element.days | number: '1.0-2':'de' }}</td>\r\n\t\t\t\t\t<!-- <td mat-footer-cell *matFooterCellDef>\r\n\t\t\t\t\t\t<span class=\"remaining\">(forecast.totalDays - (forecast.billableDays + forecast.nonbillableDays))</span>\r\n\t\t\t\t\t</td> -->\r\n\t\t\t\t</ng-container>\r\n\t\t\t\t<tr mat-header-row *matHeaderRowDef=\"['title', 'days']\"></tr>\r\n\t\t\t\t<tr mat-row *matRowDef=\"let row; columns: ['title', 'days']\"></tr>\r\n\t\t\t\t<!-- <tr mat-footer-row *matFooterRowDef=\"['title', 'days']\"></tr> -->\r\n\t\t\t</table>\r\n\t\t</div>\r\n\r\n\t\t<div>\r\n\t\t\t<mat-form-field appearance=\"outline\">\r\n\t\t\t<mat-label>Comments</mat-label>\r\n\t\t\t<textarea matInput [(ngModel)]=\"forecast.comment\" (blur)=\"commentUpdate()\" name=\"comment\" [disabled]=\"fcIsLocked()\" maxLength=\"500\"\r\n\t\t\t\tcdkTextareaAutosize #autosize=\"cdkTextareaAutosize\" cdkAutosizeMinRows=\"4\" cdkAutosizeMaxRows=\"6\" placeholder=\"Leave a comment\"></textarea>\r\n\t\t\t</mat-form-field>\r\n\t\t</div>\r\n\r\n\t\t<div class=\"card-section\">\r\n\t\t\t<mat-chip-list>\r\n\t\t\t\t<mat-chip><mat-icon>timeline</mat-icon>ARVE {{percentageValue(forecast.arve)}}%</mat-chip>\r\n\t\t\t\t<mat-chip><mat-icon>timeline</mat-icon>URVE {{percentageValue(forecast.urve)}}%</mat-chip>\r\n\t\t\t</mat-chip-list>\r\n\t\t</div>\r\n\t\t<br>\r\n\t\t<br>\r\n\t\t<div class=\"card-section\" *ngIf=\"fcIsLocked()\">\r\n\t\t\t<div class=\"summary-warning\">\r\n\t\t\t\t<mat-icon class=\"icon\">check_circle</mat-icon>\r\n\t\t\t\t<strong>Your forecast has been successfully submitted. </strong>\r\n\t\t\t\t<ng-container *ngIf=\"!hasLeadRole()\">Ask your team lead if you have to make further changes.</ng-container>\r\n\t\t\t\t<ng-container *ngIf=\"remainingDays > 0\"> \r\n\t\t\t\t\t{{remainingDays}} remaining days have been added to 100528772 - Bench Time_non-client_APPS automatically.\r\n\t\t\t\t</ng-container>\r\n\t\t\t</div>\r\n\r\n\t\t\t<button mat-stroked-button *ngIf=\"hasPracticeLeadRole() && fcIsLocked()\" class=\"mat-primary-reversed align-right\"\r\n\t\t\t\t(click)=\"unlockForecast()\" [disabled]=\"(forecast.billableDays + forecast.nonbillableDays) > forecast.totalDays\">\r\n\t\t\t\t<mat-icon>lock_open</mat-icon> Unlock\r\n\t\t\t</button>\r\n\t\t</div>\r\n\r\n\t\t<button mat-stroked-button class=\"mat-primary-reversed\" \r\n\t\t\t*ngIf=\"!fcIsLocked()\" (click)=\"saveForecast()\" [disabled]=\"totalDays() > forecast.totalDays  || hasProjectInputFocus || !isProjectInputValid || !isCorValueBiggerThanZero\">\r\n\t\t\t<mat-icon>save</mat-icon> Save\r\n\t\t</button>\r\n\r\n\t\t<button mat-stroked-button class=\"mat-primary-reversed align-right\"\r\n\t\t\t*ngIf=\"!fcIsLocked()\" (click)=\"submitForecast(forecast.totalDays - (forecast.billableDays + forecast.nonbillableDays))\" [disabled]=\"totalDays() > forecast.totalDays || hasProjectInputFocus || !isProjectInputValid || !isCorValueBiggerThanZero\">\r\n\t\t\t<mat-icon>lock</mat-icon> Submit\r\n\t\t</button>\r\n\t\t\r\n\t\t<div *ngIf=\"((forecast.billableDays + forecast.nonbillableDays) > forecast.totalDays) || hasProjectInputFocus || !isProjectInputValid || !isCorValueBiggerThanZero\">\r\n\t\t\t<ng-container>\r\n\t\t\t  <mat-error >{{errorMessage(hasProjectInputFocus,!isProjectInputValid,!isCorValueBiggerThanZero)}}</mat-error>\r\n\t\t\t</ng-container>\r\n\t\t  </div>\r\n\r\n\t\t<div class=\"card-section button-row\" *ngIf=\"!fcIsLocked()\">\r\n\t\t\t<div class=\"summary-warning error\" *ngIf=\"totalDays() > (forecast.totalDays | number: '1.0-2') \">\r\n\t\t\t\t<mat-icon class=\"icon\">warning</mat-icon>\r\n\t\t\t\tIt is not possible to assign more than <strong>{{forecast.totalDays | number: '1.0-2': 'de'}} days</strong> for this month!<br>\r\n\t\t\t\tNo more than <strong>{{benchtime}} days </strong>  can be subtract from bench time.<br>\r\n\t\t\t\tThere are currently <strong>{{((forecast.totalDays - (forecast.billableDays + forecast.nonbillableDays - benchtime)))*-1| number: '1.0-2': 'de'}} days</strong> too much.\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t</mat-card-content>\r\n</mat-card>"
        },
        {
            "name": "FcEntrySummaryRemDaysWarningComponent",
            "id": "component-FcEntrySummaryRemDaysWarningComponent-a63bb57e4c48111dd030ec5325f730a6",
            "file": "src/app/forecast/components/fc-entry-summary/remdays-warning/fc-entry-summary-remdays-warning.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-fc-entry-summary-remdays-warning",
            "styleUrls": [
                "./fc-entry-summary-remdays-warning.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./fc-entry-summary-remdays-warning.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MatDialog, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\n\r\n\r\n@Component({\r\n  selector: 'app-fc-entry-summary-remdays-warning',\r\n  templateUrl: './fc-entry-summary-remdays-warning.html',\r\n  styleUrls: [\"./fc-entry-summary-remdays-warning.component.scss\"]\r\n})\r\nexport class FcEntrySummaryRemDaysWarningComponent {\r\n\r\n  /**\r\n   * default constructor for confirmMessageDialog\r\n   * @param dialogRef\r\n   * */\r\n  constructor( \r\n    private dialogRef: MatDialogRef<FcEntrySummaryRemDaysWarningComponent>) {\r\n    }  \r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-dialog-content, .tab-container, .mat-dialog-container {\r\n    overflow: hidden;\r\n}",
                    "styleUrl": "./fc-entry-summary-remdays-warning.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>default constructor for confirmMessageDialog</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<FcEntrySummaryRemDaysWarningComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "rawdescription": "\n\ndefault constructor for confirmMessageDialog\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 474,
                            "end": 483,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialogRef"
                        },
                        "type": "MatDialogRef<FcEntrySummaryRemDaysWarningComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 468,
                            "end": 473,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "templateData": "<title  mat-dialog-title>Remaining days-Warning</title>\r\n<mat-dialog-content class=\"content\" style=\"font-size: small;\">\r\n        You still have got remaining days to forecast. <br/>\r\n        Are you sure you want to proceeed?\r\n</mat-dialog-content>\r\n<mat-dialog-actions>\r\n    <button mat-raised-button class=\"mat-primary\" mat-dialog-close cdkFocusInitial [mat-dialog-close]=\"false\">Go Back</button>\r\n    <button mat-stroked-button class=\"mat-primary-reversed align-right\"mat-button [mat-dialog-close]=\"true\">Proceed</button>\r\n</mat-dialog-actions>"
        },
        {
            "name": "FcEntrySummaryVacationWarningComponent",
            "id": "component-FcEntrySummaryVacationWarningComponent-befb9dfd158503da9808af8b41760608",
            "file": "src/app/forecast/components/fc-entry-summary/vacation-warning/fc-entry-summary-vacation-warning.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-fc-entry-summary-vacation-warning",
            "styleUrls": [
                "./fc-entry-summary-vacation-warning.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./fc-entry-summary-vacation-warning.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MatDialog, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\n\r\n\r\n@Component({\r\n  selector: 'app-fc-entry-summary-vacation-warning',\r\n  templateUrl: './fc-entry-summary-vacation-warning.html',\r\n  styleUrls: [\"./fc-entry-summary-vacation-warning.component.scss\"]\r\n})\r\nexport class FcEntrySummaryVacationWarningComponent {\r\n\r\n  /**\r\n   * default constructor for confirmMessageDialog\r\n   * @param dialogRef\r\n   * */\r\n  constructor( \r\n    private dialogRef: MatDialogRef<FcEntrySummaryVacationWarningComponent>) {\r\n    }  \r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-dialog-content, .tab-container, .mat-dialog-container {\r\n    overflow: hidden;\r\n}",
                    "styleUrl": "./fc-entry-summary-vacation-warning.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>default constructor for confirmMessageDialog</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<FcEntrySummaryVacationWarningComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "rawdescription": "\n\ndefault constructor for confirmMessageDialog\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 478,
                            "end": 487,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialogRef"
                        },
                        "type": "MatDialogRef<FcEntrySummaryVacationWarningComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 472,
                            "end": 477,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "templateData": "<title  mat-dialog-title>Vacation-Warning</title>\r\n<mat-dialog-content class=\"content\" style=\"font-size: small;\">\r\n        Your vacation days are set to <strong>0</strong>. <br/>\r\n        Are you sure you want to proceeed?\r\n</mat-dialog-content>\r\n<mat-dialog-actions>\r\n    <button mat-raised-button class=\"mat-primary\" mat-dialog-close cdkFocusInitial [mat-dialog-close]=\"false\">Go Back</button>\r\n    <button mat-stroked-button class=\"mat-primary-reversed align-right\"mat-button [mat-dialog-close]=\"true\">Proceed</button>\r\n</mat-dialog-actions>"
        },
        {
            "name": "FcProjectComponent",
            "id": "component-FcProjectComponent-f158769d781ef2118347c3e46e6d9273",
            "file": "src/app/forecast/components/fc-project/fc-project.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-fc-project",
            "styleUrls": [
                "./fc-project.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./fc-project.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "fiveTenFifteen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean"
                },
                {
                    "name": "forecast",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "FcEntry"
                },
                {
                    "name": "hundredPercent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean"
                },
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "number"
                },
                {
                    "name": "lastEditor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string"
                },
                {
                    "name": "monthId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "number"
                },
                {
                    "name": "project",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "FcProject"
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "valueUpdate",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "availableProbabilities",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Probability[]",
                    "optional": false,
                    "description": "<p>list of all probabilities</p>\n",
                    "line": 40,
                    "rawdescription": "\n\nlist of all probabilities\n"
                },
                {
                    "name": "availableProjects",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Project[]",
                    "optional": false,
                    "description": "<p>list of all projects</p>\n",
                    "line": 45,
                    "rawdescription": "\n\nlist of all projects\n"
                },
                {
                    "name": "filteredProjects",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Project[]",
                    "optional": false,
                    "description": "<p>list of filtered projects</p>\n",
                    "line": 50,
                    "rawdescription": "\n\nlist of filtered projects\n"
                },
                {
                    "name": "projectControl",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "<p>projectcontrol attribute for angular material autocomplete</p>\n",
                    "line": 55,
                    "rawdescription": "\n\nprojectcontrol attribute for angular material autocomplete\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "applyFilter",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\napply filter method for material autocomplete to only show filtered values\n",
                    "description": "<p>apply filter method for material autocomplete to only show filtered values</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3363,
                                "end": 3368,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "value"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3357,
                                "end": 3362,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "callDataUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 201,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPasses updated data to the summary\n",
                    "description": "<p>Passes updated data to the summary</p>\n"
                },
                {
                    "name": "checkCORValueBiggerThanZero",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 393,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearProjectId",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemoves projectId when Autocomplete panel is opened\n",
                    "description": "<p>Removes projectId when Autocomplete panel is opened</p>\n"
                },
                {
                    "name": "displayProjectName",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndisplay project name by id method for material autocomplete\n",
                    "description": "<p>display project name by id method for material autocomplete</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4670,
                                "end": 4679,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "projectId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 4664,
                                "end": 4669,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "fcIsLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 434,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTest is forecast is locked for logged-in user\n",
                    "description": "<p>Test is forecast is locked for logged-in user</p>\n"
                },
                {
                    "name": "hasCORValue",
                    "args": [
                        {
                            "name": "cor",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 385,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTests if a COR value has already been entered\n",
                    "description": "<p>Tests if a COR value has already been entered</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 11527,
                                "end": 11530,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "cor"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 11521,
                                "end": 11526,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "hasLeadRole",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 373,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns whether the logged in user has a lead role\n",
                    "description": "<p>Returns whether the logged in user has a lead role</p>\n"
                },
                {
                    "name": "hasPLRole",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 377,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "history",
                    "args": [
                        {
                            "name": "attribute",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | boolean",
                    "typeParameters": [],
                    "line": 293,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoads the history data of a specific forecast\n\n",
                    "description": "<p>Loads the history data of a specific forecast</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8943,
                                "end": 8952,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "attribute"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8937,
                                "end": 8942,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 8966,
                                "end": 8971,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8960,
                                "end": 8965,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "isFixedInternal",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 423,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTests if a project is automatically set as internal\n",
                    "description": "<p>Tests if a project is automatically set as internal</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 12554,
                                "end": 12563,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "projectId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 12548,
                                "end": 12553,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "isMandatory",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 411,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTests if a project is mandatory\n",
                    "description": "<p>Tests if a project is mandatory</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 12264,
                                "end": 12273,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "projectId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 12258,
                                "end": 12263,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInitializes forecast entry component.\n",
                    "description": "<p>Initializes forecast entry component.</p>\n"
                },
                {
                    "name": "onProjectDaysBlur",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onProjectInputBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onProjectInputFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "projectName",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 363,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns the name of a project.\n",
                    "description": "<p>Returns the name of a project.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 11016,
                                "end": 11018,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 11010,
                                "end": 11015,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "removeProjectFromForecast",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemoves a project from the forecast.\n",
                    "description": "<p>Removes a project from the forecast.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5264,
                                "end": 5269,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5258,
                                "end": 5263,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setFiveTenFifteenToProject",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 259,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setHundredPercentToProject",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 241,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setProjectInputValidness",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "switchBillable",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 277,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toErrorClass",
                    "args": [
                        {
                            "name": "errtext",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 445,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTurns an error test into a css class\n",
                    "description": "<p>Turns an error test into a css class</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 13059,
                                "end": 13066,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "errtext"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 13053,
                                "end": 13058,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>the text of the error</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "validateProjects",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>forecast-entry component</p>\n",
            "rawdescription": "\n\nforecast-entry component\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, ViewChild, EventEmitter, ElementRef } from \"@angular/core\";\r\nimport { MatDialog, MatDialogRef } from \"@angular/material/dialog\";\r\n\r\nimport { ForecastService } from \"../../../core/services/forecasts/forecast.service\";\r\nimport { UtilitiesService } from \"../../../core/services/utilities.service\";\r\n\r\nimport { FcEntry } from \"../../../core/interfaces/fcEntry\";\r\nimport { FcProject } from \"../../../core/interfaces/fcProject\";\r\nimport { Project } from \"../../../core/interfaces/project\";\r\nimport { Probability } from \"../../../core/interfaces/probability\";\r\nimport { AuthService } from \"../../../core/security/auth.service\";\r\nimport { FormBuilder, Validators, FormControl } from \"@angular/forms\";\r\nimport { environment as env } from \"../../../../environments/environment\";\r\nimport { ConfirmMessageDialog } from \"../../dialogs/confirm-message/confirm-message.dialog\";\r\nimport { ProjectRequestDialog } from \"../../dialogs/add-project/project-request.dialog\";\r\nimport { DataSharingService } from \"../../../core/shared/data-sharing.service\";\r\n\r\n/**\r\n * forecast-entry component\r\n */\r\n@Component({\r\n  selector: \"app-fc-project\",\r\n  templateUrl: \"./fc-project.component.html\",\r\n  styleUrls: [\"./fc-project.component.scss\"],\r\n})\r\nexport class FcProjectComponent implements OnInit {\r\n  @Input(\"forecast\") forecast: FcEntry;\r\n  @Input(\"project\") project: FcProject;\r\n  @Input(\"index\") i: number;\r\n  @Input(\"monthId\") monthId: number;\r\n  @Input(\"userId\") userId: number;\r\n  @Input(\"lastEditor\") lastEditor: string;\r\n  @Input(\"hundredPercent\") hundredPercent: boolean;\r\n  @Output() valueUpdate = new EventEmitter<boolean>();\r\n  @Input(\"fiveTenFifteen\") fiveTenFifteen: boolean;\r\n\r\n  /**\r\n   * list of all probabilities\r\n   */\r\n  availableProbabilities: Probability[] = [];\r\n\r\n  /**\r\n   * list of all projects\r\n   */\r\n  availableProjects: Project[] = [];\r\n\r\n  /**\r\n   * list of filtered projects\r\n   */\r\n  filteredProjects: Project[] = [];\r\n\r\n  /**\r\n   * projectcontrol attribute for angular material autocomplete\r\n   */\r\n  projectControl: FormControl = new FormControl();\r\n\r\n  /**\r\n   * forecast-entry component constructor\r\n   * @param dialog\r\n   * @param fb\r\n   * @param authService\r\n   * @param utilitiesService\r\n   * @param forecastService\r\n   */\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private fb: FormBuilder,\r\n    private authService: AuthService,\r\n    private utilitiesService: UtilitiesService,\r\n    private forecastService: ForecastService,\r\n    private dataSharingService: DataSharingService\r\n  ) { }\r\n\r\n  /**\r\n   * Initializes forecast entry component.\r\n   */\r\n  ngOnInit(): void {\r\n    this.projectControl = this.fb.control(\r\n      {\r\n        value: this.project.projectId,\r\n        disabled:\r\n          this.forecast.locked >= this.authService.getRoleId() ? true : false,\r\n      },\r\n      Validators.required\r\n    );\r\n    this.availableProjects = this.utilitiesService.getProjects();\r\n    this.filteredProjects = this.availableProjects.filter(\r\n      (p: Project) => p.active === true\r\n    );\r\n    this.availableProbabilities = this.utilitiesService.getProbabilities();\r\n\r\n    this.dataSharingService.setProjectInputValid(true);\r\n    this.validateProjects();\r\n    this.checkCORValueBiggerThanZero();\r\n  }\r\n\r\n  /**\r\n   * apply filter method for material autocomplete to only show filtered values\r\n   * @param value\r\n   */\r\n  applyFilter(value: string): void {\r\n    const filteredValue: string = value.toLowerCase();\r\n    this.filteredProjects = this.availableProjects.filter(\r\n      (p: Project) =>\r\n        p.active === true && p.name.toLowerCase().includes(filteredValue)\r\n    );\r\n  }\r\n\r\n  onProjectInputFocus(): void {\r\n    this.dataSharingService.setProjectInputFocus(true);\r\n  }\r\n\r\n  onProjectInputBlur(): void {\r\n    this.dataSharingService.setProjectInputFocus(false);\r\n\r\n    if (this.filteredProjects.length === 1) {\r\n      this.projectControl.setValue(this.filteredProjects[0].id);\r\n    }\r\n    this.validateProjects();\r\n    //this.callDataUpdate();\r\n  }\r\n\r\n  validateProjects(): void {\r\n    if (!this.project.projectId) {\r\n      for (let p of this.availableProjects) {\r\n        if (p.id === this.projectControl.value) {\r\n          this.project.projectId = p.id;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.forecastService.validateProjects(this.forecast);\r\n    this.setProjectInputValidness();\r\n    this.checkCORValueBiggerThanZero();\r\n  }\r\n\r\n  onProjectDaysBlur(event: any): void {\r\n    if (event.target.value === \"\") {\r\n      this.project.plannedProjectDays = 0;\r\n    }\r\n    this.validateProjects();\r\n  }\r\n\r\n  /**\r\n   * display project name by id method for material autocomplete\r\n   * @param projectId\r\n   */\r\n  displayProjectName(projectId?: number): string {\r\n    return projectId ? this.projectName(projectId) : \"\";\r\n  }\r\n\r\n  setProjectInputValidness(): void {\r\n    if (this.forecast.projects) {\r\n      this.dataSharingService.setProjectInputValid(true);\r\n      this.dataSharingService.setCorValueBiggerThanZero(true);\r\n\r\n      for (let p of this.forecast.projects) {\r\n        if (p.errors.length > 0) {\r\n          this.dataSharingService.setProjectInputValid(false);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes a project from the forecast.\r\n   * @param index\r\n   */\r\n  removeProjectFromForecast(index: number): void {\r\n    let dialogRef: MatDialogRef<ConfirmMessageDialog> = this.dialog.open(\r\n      ConfirmMessageDialog,\r\n      {\r\n        data: {\r\n          message:\r\n            \"Are you sure you want to remove this project from the forecast?\",\r\n          button: { cancel: \"Cancel\", submit: \"Remove\" },\r\n        },\r\n      }\r\n    );\r\n\r\n    dialogRef.afterClosed().subscribe((remove: boolean) => {\r\n      if (remove === true) {\r\n        this.forecastService.removeProject(this.monthId, this.userId, index);\r\n        this.setProjectInputValidness();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Removes projectId when Autocomplete panel is opened\r\n   */\r\n  clearProjectId(): void {\r\n    this.project.projectId = undefined;\r\n  }\r\n\r\n  /**\r\n   * Passes updated data to the summary\r\n   */\r\n  callDataUpdate(): void {\r\n\r\n    if (this.project.projectId !== this.projectControl.value) {\r\n      this.project.projectId =\r\n        this.projectControl.value === \"\"\r\n          ? undefined\r\n          : this.projectControl.value;\r\n\r\n      let project: Project = this.availableProjects.find(\r\n        (p: Project) => p.id === this.project.projectId\r\n      );\r\n      this.project.projectId = project === undefined ? undefined : project.id;\r\n\r\n      this.project.billable =\r\n        project && typeof project.billable !== \"undefined\"\r\n          ? project.billable\r\n          : true;\r\n      if (project && project.projectType >= 1 && project.projectType <= 5) {\r\n        this.project.cor = 0;\r\n        this.project.externalRevenue = false;\r\n      }\r\n     // this.forecast.rangeHundredPercent = 0;\r\n\r\n      if (this.hundredPercent) {\r\n        this.setHundredPercentToProject()\r\n        this.forecast.isHundredPercent = true;\r\n        this.forecast.isFiveTenFifteen = false;   \r\n        this.valueUpdate.emit(this.hundredPercent = false);\r\n      }\r\n       if (this.fiveTenFifteen) {\r\n        this.setFiveTenFifteenToProject()\r\n        this.forecast.isFiveTenFifteen = true;\r\n        this.forecast.isHundredPercent = false;\r\n       this.valueUpdate.emit(this.fiveTenFifteen = false);\r\n      }\r\n    }\r\n    this.forecastService.setForecast(this.forecast, false, true);\r\n    this.validateProjects();\r\n  }\r\n\r\n  setHundredPercentToProject(): void {\r\n    var tempProjects = this.forecast.projects.filter(project => project.mandatory == 'Y' || project.projectId == this.project.projectId);\r\n    tempProjects.forEach(function (entry) {\r\n\r\n      entry.probabilityId = 1\r\n      if (entry.projectId == 317) {\r\n        entry.plannedProjectDays = 1\r\n      }\r\n      else {\r\n        entry.plannedProjectDays = 0\r\n      }\r\n    })\r\n    this.forecast.projects = tempProjects;\r\n    this.project.plannedProjectDays = this.forecast.totalDays - 1;\r\n    this.project.probabilityId = 1;\r\n\r\n  }\r\n\r\n  setFiveTenFifteenToProject(): void {\r\n\r\n    var tempProjects = this.forecast.projects.filter(project => project.mandatory == 'Y' || project.projectId == this.project.projectId);\r\n   var benchdays = this.forecast.totalDays -5;\r\n    tempProjects.forEach(function (entry) {\r\n      entry.probabilityId = 1\r\n      if (entry.projectId == 317) {\r\n        entry.plannedProjectDays = benchdays;\r\n      }\r\n      else {\r\n        entry.plannedProjectDays = 0\r\n      }\r\n    })\r\n    this.forecast.projects = tempProjects;\r\n    this.project.plannedProjectDays = 5;\r\n    this.project.probabilityId = 1;\r\n\r\n  }\r\n  switchBillable(): string {\r\n    if (this.project.billable) {\r\n      if (this.project.billable.valueOf()) {\r\n        return \"Switch to Non-Billable\";\r\n      }\r\n    }\r\n\r\n    return \"Switch to Billable\";\r\n  }\r\n\r\n  /**\r\n   * Loads the history data of a specific forecast\r\n   *\r\n   * @param attribute\r\n   * @param index\r\n   */\r\n  history(attribute: string, index: number): string | boolean {\r\n    if (\r\n      this.forecast.history &&\r\n      this.forecast.history.length > 0 &&\r\n      this.forecast.history[0].projects.length > index\r\n    ) {\r\n      if (\r\n        attribute === \"days\" &&\r\n        this.forecast.history[0].projects[index].plannedProjectDays\r\n      ) {\r\n        return (\r\n          this.lastEditor +\r\n          \": \" +\r\n          this.forecast.history[0].projects[index].plannedProjectDays +\r\n          \" days\"\r\n        );\r\n      } else if (\r\n        attribute === \"cor\" &&\r\n        this.forecast.history[0].projects[index].cor\r\n      ) {\r\n        return (\r\n          this.lastEditor +\r\n          \": € \" +\r\n          this.forecast.history[0].projects[index].cor\r\n        );\r\n      } else if (attribute === \"probabilityId\") {\r\n        return (\r\n          this.lastEditor +\r\n          \": \" +\r\n          this.availableProbabilities.find(\r\n            (p: Probability) =>\r\n              p.id === this.forecast.history[0].projects[index].probabilityId\r\n          ).name\r\n        );\r\n      }\r\n    } else if (this.forecast.createdAt && this.forecast.changedBy) {\r\n      if (\r\n        attribute === \"days\" &&\r\n        this.forecast.projects[index].plannedProjectDays\r\n      ) {\r\n        return (\r\n          this.lastEditor +\r\n          \": \" +\r\n          this.forecast.projects[index].plannedProjectDays +\r\n          \" days\"\r\n        );\r\n      } else if (attribute === \"cor\" && this.forecast.projects[index].cor) {\r\n        return this.lastEditor + \": € \" + this.forecast.projects[index].cor;\r\n      } else if (\r\n        attribute === \"probabilityId\" &&\r\n        this.forecast.projects[index].probabilityId\r\n      ) {\r\n        return (\r\n          this.lastEditor +\r\n          \": \" +\r\n          this.availableProbabilities.find(\r\n            (p: Probability) =>\r\n              p.id === this.forecast.projects[index].probabilityId\r\n          ).name\r\n        );\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Returns the name of a project.\r\n   * @param id\r\n   */\r\n  projectName(id: number): string {\r\n    let project: Project = this.availableProjects.find(\r\n      (p: Project) => p.id === id\r\n    );\r\n    return project ? project.name : \"\";\r\n  }\r\n\r\n  /**\r\n   * Returns whether the logged in user has a lead role\r\n   */\r\n  hasLeadRole(): boolean {\r\n    return this.authService.hasRole(env.roles.pdl);\r\n  }\r\n\r\n  hasPLRole(): boolean {\r\n    return this.authService.hasRole(env.roles.pl);\r\n  }\r\n\r\n  /**\r\n   * Tests if a COR value has already been entered\r\n   * @param cor\r\n   */\r\n  hasCORValue(cor: number): boolean {\r\n    if (typeof cor !== \"undefined\") {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  checkCORValueBiggerThanZero(): void {\r\n    if (this.project.billable && this.hasLeadRole()) {\r\n      if (this.project.cor > 0) {\r\n        this.dataSharingService.setCorValueBiggerThanZero(true);\r\n      } else {\r\n        this.dataSharingService.setCorValueBiggerThanZero(false);\r\n      }\r\n    } else if (!this.project.billable && this.hasLeadRole()) {\r\n      this.dataSharingService.setCorValueBiggerThanZero(true);\r\n    } else if (!this.hasLeadRole()) {\r\n      this.dataSharingService.setCorValueBiggerThanZero(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tests if a project is mandatory\r\n   * @param projectId\r\n   */\r\n  isMandatory(projectId: number): boolean {\r\n    return this.availableProjects.find(\r\n      (p: Project) => p.mandatory === \"Y\" && p.id === projectId\r\n    )\r\n      ? true\r\n      : false;\r\n  }\r\n\r\n  /**\r\n   * Tests if a project is automatically set as internal\r\n   * @param projectId\r\n   */\r\n  isFixedInternal(projectId: number): boolean {\r\n    return this.availableProjects.find(\r\n      (p: Project) => p.projectType > 0 && p.id === projectId\r\n    )\r\n      ? true\r\n      : false;\r\n  }\r\n\r\n  /**\r\n   * Test is forecast is locked for logged-in user\r\n   */\r\n  fcIsLocked(): boolean {\r\n    if (this.forecast && this.forecast.locked >= this.authService.getRoleId()) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Turns an error test into a css class\r\n   * @param errtext - the text of the error\r\n   */\r\n  toErrorClass(errtext): string {\r\n    let result = errtext.toLowerCase().split(\".\").join(\"\");\r\n    return result.replace(/\\s/gi, \"-\");\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../assets/styles/variables.scss\";\r\n\r\n.tab-container {\r\n  display: flow-root;\r\n}\r\n.project-container {\r\n  margin: 0;\r\n  margin-right: 40px;\r\n  border: 0;\r\n\r\n  .project {\r\n    min-height: 60px;\r\n    padding: 0;\r\n\r\n    .project-form {\r\n      padding-right: 50px;\r\n    }\r\n\r\n    .project-element {\r\n      padding: 0 5px;\r\n      padding-top: 1.1em;\r\n\r\n      &:first-child {\r\n        padding-left: 0;\r\n      }\r\n    }\r\n\r\n    .delete-entry {\r\n      position: absolute;\r\n      margin: 0;\r\n      top: 36px;\r\n      right: -37px;\r\n\r\n      transform: translate(0, -50%);\r\n\r\n      .mat-icon {\r\n        position: absolute;\r\n        top: 50%;\r\n        right: 50%;\r\n        width: auto;\r\n        height: auto;\r\n        font-size: 20px;\r\n        margin-top: -12px;\r\n        margin-right: -10px;\r\n\r\n        &.icon--delete {\r\n          font-size: 26px;\r\n          margin-right: -13px;\r\n        }\r\n\r\n        &.icon--block {\r\n          font-size: 30px;\r\n          margin-right: -15px;\r\n        }\r\n      }\r\n\r\n      &[disabled] .mat-icon {\r\n        color: map-get($font-colors, grey-super-light) !important;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nmat-error.no-probability-defined {\r\n  text-align: end !important;\r\n}\r\n\r\n.request-project-btn {\r\n  background-color: #0070ad;\r\n  color: #ffffff;\r\n  font-weight: bold;\r\n  margin: 5px;\r\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\r\n  border-radius: 3px;\r\n}\r\n\r\n.request-project-btn:hover {\r\n  background: #42a5f5;\r\n}\r\n\r\n.mat-error {\r\n  padding: 2px 5px;\r\n}\r\n\r\n.mat-option {\r\n  height: 40px;\r\n  line-height: 40px;\r\n  font-size: $font-size;\r\n}\r\n\r\n.multi-view-box {\r\n  padding: 10px 5px 0;\r\n}\r\n\r\n.mat-form-field-wrapper {\r\n  padding-bottom: 0;\r\n\r\n  &.mat-form-field-appearance-outline {\r\n    margin: 0;\r\n    margin-right: 20px;\r\n  }\r\n}\r\n\r\n.mat-form-field-outline {\r\n  margin: 0;\r\n  margin-right: 20px;\r\n}\r\n\r\n.mat-button-toggle-group {\r\n  margin: 0.25em 0;\r\n  width: 100%;\r\n  height: 38px;\r\n  border-radius: 0;\r\n\r\n  .mat-button-toggle {\r\n    width: 33.33%;\r\n    white-space: normal;\r\n  }\r\n}\r\n\r\n.mat-form-field .mat-slide-toggle {\r\n  padding: 1px 0 0 1px;\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  background-color: map-get($font-colors, white);\r\n  z-index: 10;\r\n}\r\n\r\n.form-element.mat-slide-toggle {\r\n  height: 45px;\r\n  margin: 0.25em 0;\r\n}\r\n\r\n.mat-form-field-clone {\r\n  display: flex;\r\n  width: 100%;\r\n  margin: 0.25em 0;\r\n\r\n  input {\r\n    width: 100%;\r\n    border-radius: 0;\r\n    border: 1px solid map-get($border-colors, light);\r\n    font-family: inherit;\r\n    font-size: 1rem;\r\n    line-height: 1.2em;\r\n    padding: 1.2em 0.5em 0.8em;\r\n    color: map-get($font-colors, grey-light);\r\n    background-color: transparent;\r\n  }\r\n\r\n  .label {\r\n    position: absolute;\r\n    top: 12px;\r\n    font-size: 0.75rem;\r\n    line-height: 11px;\r\n    color: map-get($font-colors, grey-light);\r\n    margin-left: 5px;\r\n    padding: 0 5px;\r\n    background: map-get($font-colors, white);\r\n  }\r\n\r\n  &.not-locked {\r\n    input {\r\n      color: map-get($font-colors, black);\r\n      border-color: map-get($border-colors, medium);\r\n    }\r\n\r\n    .label {\r\n      color: map-get($font-colors, grey-label);\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./fc-project.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>forecast-entry component constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataSharingService",
                        "type": "DataSharingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 55,
                "rawdescription": "\n\nforecast-entry component constructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 2165,
                            "end": 2171,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialog"
                        },
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2159,
                            "end": 2164,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 2185,
                            "end": 2187,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "fb"
                        },
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2179,
                            "end": 2184,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 2201,
                            "end": 2212,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "authService"
                        },
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2195,
                            "end": 2200,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 2226,
                            "end": 2242,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "utilitiesService"
                        },
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2220,
                            "end": 2225,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 2256,
                            "end": 2271,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "forecastService"
                        },
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2250,
                            "end": 2255,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "dataSharingService",
                        "type": "DataSharingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form class=\"project-form\">\r\n  <mat-card class=\"project-container\" id=\"project-{{ monthId }}-{{ i }}\">\r\n    <mat-card-content class=\"project\">\r\n      <div layout=\"row\" layout-fill>\r\n        <div [attr.flex]=\"hasLeadRole() ? 35 : 50\" class=\"project-element\">\r\n          <ng-container *ngIf=\"!isMandatory(project.projectId)\">\r\n            <mat-form-field\r\n              appearance=\"outline\"\r\n              class=\"no-padding\"\r\n              id=\"projectId-{{ monthId }}-{{ i }}\"\r\n            >\r\n              <input\r\n                type=\"text\"\r\n                onClick=\"this.select()\"\r\n                (focus)=\"onProjectInputFocus()\"\r\n                (blur)=\"onProjectInputBlur()\"\r\n                placeholder=\"Project\"\r\n                matInput\r\n                [formControl]=\"projectControl\"\r\n                [matAutocomplete]=\"auto\"\r\n                (ngModelChange)=\"applyFilter($event)\"\r\n                required\r\n              />\r\n              <mat-label>Project</mat-label>\r\n            </mat-form-field>\r\n            <mat-autocomplete\r\n              #auto=\"matAutocomplete\"\r\n              autoActiveFirstOption\r\n              [displayWith]=\"displayProjectName.bind(this)\"\r\n              (opened)=\"clearProjectId()\"\r\n              (closed)=\"callDataUpdate()\"\r\n            >\r\n              <ng-container *ngFor=\"let p of filteredProjects\">\r\n                <mat-option *ngIf=\"!isMandatory(p.id)\" [value]=\"p.id\">{{\r\n                  p.name\r\n                }}</mat-option>\r\n              </ng-container>\r\n\r\n            </mat-autocomplete>\r\n          </ng-container>\r\n\r\n          <div\r\n            class=\"mat-form-field-clone\"\r\n            [ngClass]=\"{ 'not-locked': !fcIsLocked() }\"\r\n            *ngIf=\"isMandatory(project.projectId)\"\r\n          >\r\n            <input\r\n              type=\"text\"\r\n              disabled\r\n              value=\"{{ projectName(project.projectId) }}\"\r\n            />\r\n            <span class=\"label\">Default Project</span>\r\n          </div>\r\n        </div>\r\n\r\n        <div flex=\"15\" class=\"project-element\">\r\n          <mat-form-field appearance=\"outline\">\r\n            <mat-label>{{\r\n              project.billable ? \"Days (Billable)\" : \"Days (Non-Billable)\"\r\n            }}</mat-label>\r\n\r\n            <input\r\n              type=\"number\"\r\n              onClick=\"this.select()\"\r\n              matInput\r\n              name=\"plannedProjectDays-{{ monthId }}-{{ i }}\"\r\n              [(ngModel)]=\"project.plannedProjectDays\"\r\n              required\r\n              min=\"0\"\r\n              (ngModelChange)=\"callDataUpdate()\"\r\n              [disabled]=\"fcIsLocked()\"\r\n              (blur)=\"onProjectDaysBlur($event)\"\r\n              #projectDaysInput\r\n              matTooltip=\"{{ history('days', i) }}\"\r\n              matTooltipPosition=\"above\"\r\n              matTooltipDisabled=\"{{ !history('days', i) }}\"\r\n            />\r\n            <mat-slide-toggle\r\n              color=\"primary\"\r\n              name=\"billable-{{ monthId }}-{{ i }}\"\r\n              *ngIf=\"!isFixedInternal(project.projectId)\"\r\n              [(ngModel)]=\"project.billable\"\r\n              (change)=\"callDataUpdate()\"\r\n              [disabled]=\"fcIsLocked()\"\r\n              matTooltip=\"{{ switchBillable() }}\"\r\n              matTooltipPostition=\"above\"\r\n              matTooltipDisabled=\"{{ fcIsLocked() }}\"\r\n            >\r\n            </mat-slide-toggle>\r\n          </mat-form-field>\r\n        </div>\r\n        <div flex=\"15\" class=\"project-element\" *ngIf=\"!isFixedInternal(project.projectId)\">\r\n          <mat-form-field appearance=\"outline\">\r\n            <mat-label>{{\r\n              \"Range for 100%\"\r\n            }}</mat-label>\r\n            <mat-select [(value)]=\"forecast.rangeHundredPercent\"   (closed)=\"callDataUpdate()\">\r\n              <mat-option>None</mat-option>\r\n              <mat-option value=\"1\">for the next 1 month</mat-option>\r\n              <mat-option value=\"2\">for the next 2 months</mat-option>\r\n              <mat-option value=\"3\">for the next 3 months</mat-option>\r\n              <mat-option value=\"4\">for the next 4 months</mat-option>\r\n              <mat-option value=\"5\">for the next 5 months</mat-option>\r\n              <mat-option value=\"6\">for the next 6 months</mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n        </div>\r\n        <div\r\n          flex=\"15\"\r\n          *ngIf=\"hasLeadRole() || hasPLRole()\"\r\n          class=\"project-element\"\r\n        >\r\n          <mat-form-field\r\n            appearance=\"outline\"\r\n            matTooltip=\"{{ history('cor', i) }}\"\r\n            matTooltipPosition=\"above\"\r\n            matTooltipDisabled=\"{{ !history('cor', i) }}\"\r\n          >\r\n            <mat-label>{{\r\n              hasCORValue(project.cor)\r\n                ? project.externalRevenue\r\n                  ? \"COR (External Revenue)\"\r\n                  : \"COR (Internal Revenue)\"\r\n                : \"COR\"\r\n            }}</mat-label>\r\n\r\n            <input\r\n              matInput\r\n              type=\"number\"\r\n              onClick=\"this.select()\"\r\n              name=\"cor-{{ monthId }}-{{ i }}\"\r\n              [(ngModel)]=\"project.cor\"\r\n              [disabled]=\"\r\n                isFixedInternal(project.projectId) ||\r\n                fcIsLocked() ||\r\n                !project.billable\r\n              \"\r\n              required\r\n              min=\"1\"\r\n              (ngModelChange)=\"callDataUpdate()\"\r\n            />\r\n            <mat-slide-toggle\r\n              color=\"primary\"\r\n              name=\"revenue-{{ monthId }}-{{ i }}\"\r\n              *ngIf=\"!isFixedInternal(project.projectId)\"\r\n              [(ngModel)]=\"project.externalRevenue\"\r\n              (change)=\"callDataUpdate()\"\r\n              [disabled]=\"fcIsLocked() || !project.billable\"\r\n            >\r\n            </mat-slide-toggle>\r\n          </mat-form-field>\r\n        </div>\r\n\r\n        <div flex=\"35\" class=\"project-element\">\r\n          <mat-button-toggle-group\r\n            name=\"probabilityId-{{ monthId }}-{{ i }}\"\r\n            [(ngModel)]=\"project.probabilityId\"\r\n            required\r\n            (ngModelChange)=\"callDataUpdate()\"\r\n            [disabled]=\"fcIsLocked()\"\r\n            matTooltip=\"{{ history('probabilityId', i) }}\"\r\n            matTooltipPosition=\"above\"\r\n            matTooltipDisabled=\"{{ !history('probabilityId', i) }}\"\r\n          >\r\n            <mat-button-toggle\r\n              *ngFor=\"let p of availableProbabilities\"\r\n              [value]=\"p.id\"\r\n              >{{ p.name }}</mat-button-toggle\r\n            >\r\n          </mat-button-toggle-group>\r\n        </div>\r\n\r\n        <button\r\n          mat-icon-button\r\n          type=\"button\"\r\n          class=\"delete-entry\"\r\n          [disabled]=\"isMandatory(project.projectId) || fcIsLocked()\"\r\n          (click)=\"removeProjectFromForecast(i)\"\r\n        >\r\n          <mat-icon\r\n            [ngClass]=\"{\r\n              'icon--delete': !(isMandatory(project.projectId) || fcIsLocked())\r\n            }\"\r\n            >delete</mat-icon\r\n          >\r\n          <mat-icon\r\n            *ngIf=\"isMandatory(project.projectId) || fcIsLocked()\"\r\n            class=\"icon--block\"\r\n            >block</mat-icon\r\n          >\r\n        </button>\r\n      </div>\r\n    </mat-card-content>\r\n  </mat-card>\r\n\r\n  <div *ngIf=\"project.errors\">\r\n    <ng-container *ngFor=\"let error of project.errors\">\r\n      <mat-error [ngClass]=\"toErrorClass(error)\">{{ error }}</mat-error>\r\n    </ng-container>\r\n  </div>\r\n</form>\r\n"
        },
        {
            "name": "FeedBackDialogComponent",
            "id": "component-FeedBackDialogComponent-d7c0a54e2faabed50c22a9c768b1d627",
            "file": "src/app/layout/dialogs/feedback/feedback-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-feedback-dialog",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./feedback-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "line": 32,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<FeedBackDialogComponent>",
                    "optional": false,
                    "line": 28,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "projectCode",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "projectComment",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "projectName",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openEmail",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Component for Feedback Dialog</p>\n",
            "rawdescription": "\n\nComponent for Feedback Dialog\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from \"@angular/core\";\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from \"@angular/material/dialog\";\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BusinessOperationsService } from '../../../core/shared/business-operations.service';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ProjectRequest } from \"../../../core/interfaces/projectRequest\";\r\n/**\r\n * Component for Feedback Dialog\r\n */\r\n@Component({\r\n  selector: 'app-feedback-dialog',\r\n  templateUrl: \"./feedback-dialog.component.html\"\r\n})\r\nexport class FeedBackDialogComponent {\r\n  \r\n  projectCode:String = \"\";\r\n\r\n  projectName:String = \"\";\r\n\r\n  projectComment:String = \"\";\r\n  \r\n  /**\r\n   * default constructor for addProjectDialog\r\n   * @param dialogRef\r\n   * @param data\r\n   */\r\n  constructor(\r\n    public dialogRef: MatDialogRef<FeedBackDialogComponent>,\r\n    private http: HttpClient,\r\n    private snackBar: MatSnackBar,\r\n    private BO: BusinessOperationsService,\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n  ) {\r\n    this.projectCode = data.code;\r\n    this.projectName = data.name;\r\n    this.projectComment = data.comment;\r\n\r\n  }\r\n\r\n  public openEmail() {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>default constructor for addProjectDialog</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<FeedBackDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "rawdescription": "\n\ndefault constructor for addProjectDialog\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 763,
                            "end": 772,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialogRef"
                        },
                        "type": "MatDialogRef<FeedBackDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 757,
                            "end": 762,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 786,
                            "end": 790,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "data"
                        },
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 780,
                            "end": 785,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "templateData": "<h2 mat-dialog-title>Project Request</h2>\r\n<mat-dialog-content>Send a e-mail with following project code and name.</mat-dialog-content>\r\n<br>\r\n<mat-form-field>\r\n  <input matInput placeholder=\"project code\" [(ngModel)]=\"data.code\">\r\n</mat-form-field>\r\n<mat-form-field>\r\n  <input matInput placeholder=\"project name\" [(ngModel)]=\"data.name\">\r\n</mat-form-field>\r\n<mat-form-field>\r\n<textarea matInput [(ngModel)]=\"data.comment\"  name=\"comment\"  maxLength=\"200\"\r\n        cdkTextareaAutosize #autosize=\"cdkTextareaAutosize\" cdkAutosizeMinRows=\"2\" cdkAutosizeMaxRows=\"6\" placeholder=\"leave a comment\"></textarea>\r\n</mat-form-field>\r\n<mat-dialog-actions>\r\n  <button mat-button  mat-dialog-close cdkFocusInitial [mat-dialog-close]=\"false\">cancel</button>\r\n  <!-- The mat-dialog-close directive optionally accepts a value as a result for the dialog. -->\r\n  <button mat-button [mat-dialog-close]=\"true\" (click)=\"openEmail()\">submit </button>\r\n</mat-dialog-actions>\r\n"
        },
        {
            "name": "FinancialControllerComponent",
            "id": "component-FinancialControllerComponent-06cba4d7e655a84da5982ef7d9b7d786",
            "file": "src/app/forecast/pages/financial-controller/financial-controller.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-financial-controller",
            "styleUrls": [
                "./financial-controller.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./financial-controller.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "financial",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FinancialControllerSummaryAPPS[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "financialSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "months",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "monthSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "porbabilitySummarySubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "probabilitySummaries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | ProbabilitySummary>",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "initFinancialView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnsubscribes services when component gets destroyed\n",
                    "description": "<p>Unsubscribes services when component gets destroyed</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ninit method\n",
                    "description": "<p>init method</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, Input } from \"@angular/core\";\r\nimport { Subscription } from 'rxjs';\r\nimport { ExecutiveForecastsService } from '../../../core/services/forecasts/executive-forecasts.service';\r\nimport { PageStateService } from '../../../core/shared/page-state.service';\r\nimport { FinancialControllerSummaryAPPS } from \"../../../core/interfaces/financialAppsSummary\";\r\nimport { Month } from '../../../core/interfaces/month';\r\nimport { UtilitiesService } from \"../../../core/services/utilities.service\";\r\nimport { CalculationService } from \"../../../core/services/forecasts/calculation.service\";\r\nimport { ProbabilitySummary } from \"../../../core/interfaces/probabilitySummary\";\r\n\r\n@Component({\r\n  selector: \"app-financial-controller\",\r\n  templateUrl: \"./financial-controller.component.html\",\r\n  styleUrls: [\"./financial-controller.component.scss\"],\r\n})\r\nexport class FinancialControllerComponent implements OnInit, OnDestroy {\r\n\r\n  financial: FinancialControllerSummaryAPPS[] = [];\r\n\r\n  probabilitySummaries: Map<number, ProbabilitySummary>;\r\n\r\n  months: Month[];\r\n\r\n  financialSubscription: Subscription;\r\n\r\n  porbabilitySummarySubscription: Subscription;\r\n\r\n  monthSubscription: Subscription;\r\n\r\n  constructor(\r\n    private executiveService: ExecutiveForecastsService,\r\n\t\tprivate pageState: PageStateService,\r\n    private utilitiesService: UtilitiesService,\r\n    private calculationService: CalculationService\r\n  ) {\r\n  }\r\n\r\n  /**\r\n   * init method\r\n   */\r\n  ngOnInit(): void {\r\n    this.pageState.forecastrReady$.subscribe((ready: boolean) => {\r\n\t\t\tif (ready) {\r\n\t\t\t\tthis.initFinancialView();\r\n\t\t\t}\r\n\t\t});\r\n  }\r\n\r\n  initFinancialView(): void {\r\n    this.financialSubscription = this.executiveService.financialData$.subscribe((financialData: FinancialControllerSummaryAPPS[]) => {\r\n      this.financial = financialData;\r\n    });\r\n\r\n    this.porbabilitySummarySubscription = this.calculationService.probabilitySummaryPerMonth$.subscribe((probabilitySummaries: Map<number,ProbabilitySummary>) =>{\r\n      this.probabilitySummaries = probabilitySummaries;\r\n    })\r\n\r\n    this.monthSubscription = this.utilitiesService.months$.subscribe((months: Month[]) => {\r\n      this.months = months.filter((m: Month) => m.active === true);\r\n      var today = new Date();\r\n      var todayMonth = new Date(today.getFullYear(), today.getMonth() + 1, 1);\r\n      this.months = this.months.filter((m: Month) => new Date(m.time) >= todayMonth);\r\n\r\n      if (this.months.length > 6) {\r\n        this.months = this.months.slice(0, 6);\r\n      }\r\n\r\n      if(this.months !== undefined && this.months.length > 0) {\r\n        this.calculationService.init(this.months[0].id, this.months[this.months.length - 1].id);\r\n        this.executiveService.initializeFinancialData(this.months[0].id, this.months[this.months.length - 1].id).then(() => {\r\n          this.pageState.hideSpinner();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Unsubscribes services when component gets destroyed\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.financialSubscription.unsubscribe();\r\n    this.monthSubscription.unsubscribe();\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./financial-controller.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "calculationService",
                        "type": "CalculationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "calculationService",
                        "type": "CalculationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"financial-controller-view\">\r\n  <div class=\"financial-controller-view-container\">\r\n      <app-financial-controller-overview *ngIf=\"months && financial\" [financial]=\"financial\" [probabilitySummaries]=\"probabilitySummaries\" [months]=\"months\"></app-financial-controller-overview>\r\n  </div>\r\n</div>"
        },
        {
            "name": "FinancialControllerOverviewComponent",
            "id": "component-FinancialControllerOverviewComponent-2068162ea7285aefef84d6125420e393",
            "file": "src/app/forecast/components/financial-controller-overview/financial-controller-overview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-financial-controller-overview",
            "styleUrls": [
                "./financial-controller-overview.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./financial-controller-overview.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "financial",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "FinancialControllerSummaryAPPS[]"
                },
                {
                    "name": "months",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "Month[]"
                },
                {
                    "name": "probabilitySummaries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "Map<number | ProbabilitySummary>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "columnsToDisplay",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String[]",
                    "optional": false,
                    "description": "<p>columns which are displaye</p>\n",
                    "line": 46,
                    "rawdescription": "\n\ncolumns which are displaye\n"
                },
                {
                    "name": "columnsToDisplay2",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String[]",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "grades",
                    "defaultValue": "[\r\n    \"S\",\r\n    \"A\",\r\n    \"B\",\r\n    \"C\",\r\n    \"D\",\r\n    \"E\",\r\n    \"F\"\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "kpis",
                    "defaultValue": "[\r\n    \"ROS\",\r\n    \"ROSint\",\r\n    \"ROSext\",\r\n    \"avgVacation\",\r\n    \"ftecss\",\r\n    \"urve\",\r\n    \"arve\",\r\n    \"cor\",\r\n    \"btu\",\r\n    \"pror\",\r\n    \"arvi\",\r\n    \"urvi\",\r\n    \"expectedRevenue\",\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "disable",
                    "args": [
                        {
                            "name": "name",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "exportCSV",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 246,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getGradeNumberFromGrade",
                    "args": [
                        {
                            "name": "grade",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "grade",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initFinancialData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "mapGradeToValue",
                    "args": [
                        {
                            "name": "grade",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "kpi",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "grade",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "kpi",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapKpiToName",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapKpiToUnit",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapKpiToValue",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 282,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "numberToString",
                    "args": [
                        {
                            "name": "no",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 277,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "no",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openPanel",
                    "args": [
                        {
                            "name": "name",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showToggle",
                    "args": [
                        {
                            "name": "name",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, Input } from \"@angular/core\";\r\n\r\nimport { Month } from \"../../../core/interfaces/month\";\r\nimport { FinancialControllerSummaryAPPS } from \"../../../core/interfaces/financialAppsSummary\";\r\nimport { DatePipe } from \"@angular/common\";\r\nimport { ProbabilitySummary } from \"../../../core/interfaces/probabilitySummary\";\r\n\r\n@Component({\r\n  selector: 'app-financial-controller-overview',\r\n  templateUrl: './financial-controller-overview.component.html',\r\n  styleUrls: ['./financial-controller-overview.component.scss'],\r\n})\r\nexport class FinancialControllerOverviewComponent implements OnInit, OnDestroy {\r\n\r\n  kpis: string[] = [\r\n    \"ROS\",\r\n    \"ROSint\",\r\n    \"ROSext\",\r\n    \"avgVacation\",\r\n    \"ftecss\",\r\n    \"urve\",\r\n    \"arve\",\r\n    \"cor\",\r\n    \"btu\",\r\n    \"pror\",\r\n    \"arvi\",\r\n    \"urvi\",\r\n    \"expectedRevenue\",\r\n  ];\r\n\r\n  grades: string[] = [\r\n    \"S\",\r\n    \"A\",\r\n    \"B\",\r\n    \"C\",\r\n    \"D\",\r\n    \"E\",\r\n    \"F\"\r\n  ];\r\n\r\n  @Input('months') months: Month[];\r\n\r\n  /**\r\n    * columns which are displaye\r\n   */\r\n  columnsToDisplay: String[] = [];\r\n  columnsToDisplay2: String[] = [];\r\n\r\n  @Input(\"financial\") financialData: FinancialControllerSummaryAPPS[];\r\n  @Input(\"probabilitySummaries\") probabilitySummaries: Map<number,ProbabilitySummary>;\r\n\r\n  \r\n\r\n  constructor(\r\n    private datePipe: DatePipe,\r\n  ) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.initFinancialData();\r\n  }\r\n\r\n  initFinancialData(): void {\r\n    this.columnsToDisplay.push('kpi');\r\n    for (let month of this.months) {\r\n      this.columnsToDisplay.push(month.name);\r\n      this.columnsToDisplay2.push(month.name);\r\n     \r\n    }\r\n  }\r\n\r\n  showToggle(name: any) : boolean{\r\n    if(name === 'ftecss' || name === 'avgVacation'){\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  openPanel(name: any): boolean {\r\n    if(name !== 'ftecss' && name !== 'avgVacation'){\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  disable(name: any): boolean {\r\n    if(name === 'ftecss' || name === 'avgVacation'){\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  mapKpiToUnit(name: string): string {\r\n    switch (name) {\r\n      case \"arve\":\r\n        return \"%\";\r\n      case \"arvi\":\r\n        return \"%\";\r\n      case \"expectedRevenue\":\r\n        return \"\";\r\n      case \"avgVacation\":\r\n        return \"Days\";\r\n      case \"cor\":\r\n        return \"€\";\r\n      case \"btu\":\r\n        return \"\";\r\n      case \"avgVacation\":\r\n        return \"Days\";\r\n      case \"ftecss\":\r\n        return \"FTE\";\r\n      case \"pror\":\r\n        return \"%\";\r\n      case \"ROS\":\r\n        return \"€\";\r\n      case \"ROSint\":\r\n        return \"€\";\r\n      case \"ROSext\":\r\n        return \"€\";\r\n      case \"urve\":\r\n        return \"%\";\r\n      case \"urvi\":\r\n        return \"%\";\r\n      default:\r\n        return undefined;\r\n    }\r\n  }\r\n\r\n  \r\n  getGradeNumberFromGrade(grade:string) : number{\r\n    switch(grade){\r\n      case 'S':\r\n        return 1;\r\n      case 'A':\r\n        return 2;\r\n      case 'B':\r\n        return 3;\r\n      case 'C':\r\n        return 4;\r\n      case 'D':\r\n        return 5;\r\n      case 'E':\r\n        return 6;\r\n      case 'F':\r\n        return 7;\r\n    }\r\n  }\r\n\r\n  mapGradeToValue(grade: string, monthId: number, kpi:string): number {\r\n    if(!this.probabilitySummaries.has(monthId))\r\n    { \r\n      return 0;\r\n    }\r\n    let gradeNumber = this.getGradeNumberFromGrade(grade);\r\n\r\n    if(kpi === \"avgVacation\"){\r\n      if(!this.probabilitySummaries.get(monthId).avgVacationDaysPerGrade.has(gradeNumber))\r\n      {\r\n        return 0;\r\n      }\r\n      return this.probabilitySummaries.get(monthId).avgVacationDaysPerGrade.get(gradeNumber).average;\r\n    }\r\n   \r\n    if(kpi === \"ftecss\")\r\n    {\r\n      if(!this.probabilitySummaries.get(monthId).avgFTEPerGrade.has(gradeNumber))\r\n      {\r\n        return 0;\r\n      }\r\n      return this.probabilitySummaries.get(monthId).avgFTEPerGrade.get(gradeNumber).average;\r\n    }\r\n    \r\n    return 0;\r\n  }\r\n\r\n\r\n  mapKpiToValue(name: string, monthId: number): number {\r\n    let entry = this.financialData.find((value: FinancialControllerSummaryAPPS) => value.monthId == monthId);\r\n\r\n    if (entry === undefined || !this.probabilitySummaries.has(monthId)) {\r\n      return 0;\r\n    }\r\n    switch (name) {\r\n      case \"arve\":\r\n        return  this.probabilitySummaries.get(monthId).arve * 100;\r\n      case \"arvi\":\r\n        return entry.arvi;\r\n      case \"expectedRevenue\":\r\n        return entry.expectedRevenue;\r\n      case \"cor\":\r\n        return this.probabilitySummaries.get(monthId).cor;\r\n      case \"btu\":\r\n        return entry.btu;\r\n      case \"avgVacation\":\r\n        return entry.avgVacation;\r\n      case \"ftecss\":\r\n        return entry.fte;\r\n      case \"pror\":\r\n        return entry.pror;\r\n      case \"ROS\":\r\n        return this.probabilitySummaries.get(monthId).revenue;\r\n      case \"ROSint\":\r\n        return this.probabilitySummaries.get(monthId).internalRevenue;\r\n      case \"ROSext\":\r\n        return this.probabilitySummaries.get(monthId).externalRevenue;\r\n      case \"urve\":\r\n        return this.probabilitySummaries.get(monthId).urve *100;\r\n      case \"urvi\":\r\n        return entry.urvi;\r\n      default:\r\n        return undefined;\r\n    }\r\n  }\r\n\r\n  mapKpiToName(name: string): string {\r\n    switch (name) {\r\n      case \"arve\":\r\n        return \"ARVE\";\r\n      case \"arvi\":\r\n        return \"ARVI\";\r\n      case \"expectedRevenue\":\r\n        return \"Expected Revenue\";\r\n      case \"cor\":\r\n        return \"COR\";\r\n      case \"btu\":\r\n        return \"BTU\";\r\n      case \"avgVacation\":\r\n        return \"Average Vacation Days\";\r\n      case \"ftecss\":\r\n        return \"FTE\";\r\n      case \"pror\":\r\n        return \"PROR\";\r\n      case \"ROS\":\r\n        return \"ROS\";\r\n      case \"ROSint\":\r\n        return \"ROS internal\";\r\n      case \"ROSext\":\r\n        return \"ROS external\";\r\n      case \"urve\":\r\n        return \"URVE\";\r\n      case \"urvi\":\r\n        return \"URVI\";\r\n      default:\r\n        return undefined;\r\n    }\r\n  }\r\n  exportCSV(): void {\r\n    const header = \"KPI;\" + this.months.map((month: Month) => { return month.name }).join(\";\") + \"\\r\\n\";\r\n    const rows = this.kpis.map((kpi: string) => {\r\n      return this.mapKpiToName(kpi) + \";\" + this.months.map((month: Month) => {\r\n        return this.numberToString(this.mapKpiToValue(kpi, month.id));\r\n      }).join(\";\");\r\n    }).join(\"\\r\\n\");\r\n\r\n    const data = header + rows;\r\n\r\n    const blob: Blob = new Blob([data], { type: \"text/csv\" });\r\n    const filename: string = this.datePipe.transform(new Date(), \"yyyyMMdd\") + \"-KPISummary.csv\";\r\n\r\n    let navigator: any = window.navigator;\r\n    //For IE\r\n    if (navigator.msSaveOrOpenBlob) {\r\n      navigator.msSaveOrOpenBlob(blob, filename);\r\n    //For any other browser\r\n    } else {\r\n      const url: string = window.URL.createObjectURL(blob);\r\n\r\n      let a: HTMLAnchorElement = document.createElement(\"a\");\r\n      a.href = url;\r\n      a.download = filename;\r\n\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      document.body.removeChild(a);\r\n      window.URL.revokeObjectURL(url);\r\n    }\r\n  }\r\n  numberToString(no: number): string {\r\n    return no.toLocaleString(\"de\",  { minimumFractionDigits: 0, maximumFractionDigits: 2 } ).replace(\".\",\"\");\r\n  }\r\n\r\n\r\n  ngOnDestroy(): void {\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../assets/styles/variables.scss';\r\n\r\n.goodUt {\r\n  color:  green;\r\n}\r\n\r\n.medUt {  \r\n  color: orange;\r\n}\r\n\r\n.badUt {\r\n  color: red;\r\n}\r\n\r\n.accordion-header {\r\n    display: flex;\r\n    flex: 1;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    margin-right: 24px !important; \r\n    font-weight: bold;\r\n    padding: 15px 0px 15px 15px;\r\n    font-size: 1.1rem;\r\n    color: map-get($font-colors, black);\r\n    margin-right: 8px;\r\n    position: sticky;\r\n  \r\n    div {\r\n      display: flex;\r\n      flex-grow: 1;\r\n      width: 0;\r\n      margin-right: 0;\r\n  \r\n      &:first-child {\r\n        padding-left: 10px;\r\n      }\r\n  \r\n      &:not(:first-child) {\r\n        flex-grow: 2;\r\n        margin-left: auto; \r\n        margin-right: 0px; \r\n        flex-grow: unset; \r\n        width: 10%;\r\n        text-align: center;\r\n      }\r\n\r\n      div{\r\n        padding-left: 0px !important;\r\n      }\r\n  \r\n      span {\r\n        flex: 1;\r\n        text-align: center;\r\n        word-break: break-word;\r\n      }\r\n    }\r\n  }\r\n\r\n  .second-header {\r\n    width: 100%;\r\n}\r\n\r\n.executive-btn {\r\n    float: right;\r\n    position: relative;\r\n}\r\n\r\n.mat-icon {\r\n    font-size: 18px;\r\n    color: #fff !important;\r\n}\r\n\r\n\r\n.mat-expansion-panel {\r\n\tborder-radius: 0;\r\n\tmargin: 0;\r\n  \r\n  /**\r\n\t&.mat-expanded {\r\n\t\tmargin-top: 16px;\r\n\t\tmargin-bottom: 16px;\r\n  }\r\n  */\r\n\r\n  .mat-expansion-panel-header-description, .mat-expansion-panel-header-title {\r\n    font-size: 1.1rem;\r\n    line-height: 1.2rem;\r\n    width: 0;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n    color: black;\r\n\r\n    .mat-cell {\r\n      font-size: 1.1rem;\r\n    }\r\n  }\r\n  \r\n  .mat-expansion-panel-header-description {\r\n    text-align: center; \r\n    flex-grow: 2;\r\n  }\r\n}\r\n\r\n.mat-table {\r\n  margin-right: 24px;\r\n  position: relative;\r\n\r\n  .edit-button {\r\n    position: absolute;\r\n    right: 30px;\r\n  }\r\n}\r\n\r\n.mat-cell, .mat-header-cell {\r\n  flex: 1;\r\n  color: map-get($font-colors, black);\r\n  // width: 8.33%;\r\n  text-align: center;\r\n}\r\n\r\ntd.mat-cell:first-of-type, td.mat-footer-cell:first-of-type, th.mat-header-cell:first-of-type,\r\ntd.mat-cell:nth-of-type(2), td.mat-footer-cell:nth-of-type(2), th.mat-header-cell:nth-of-type(2) {\r\n\tpadding-left: 0px;\r\n  padding-right: 0px;\r\n  flex-grow: 4;\r\n  // width: 16.66%;\r\n}\r\n\r\ntd.mat-cell:first-of-type, td.mat-footer-cell:first-of-type, th.mat-header-cell:first-of-type {\r\n  text-align: left;\r\n}\r\n\r\n.mat-icon {\r\n\tfont-size: 20px;\r\n\tline-height: 20px;\r\n\r\n\t&:hover {\r\n    color: map-get($font-colors, blue);\r\n\t}\r\n\r\n\t&.icon-edited, &.icon-edited:hover {\r\n\t\tcolor: map-get($font-colors, red);\r\n\t}\r\n}\r\n\r\n.mat-primary-reversed {\r\n\r\n  .align-right {\r\n    right: 0px;\r\n  }\r\n} \r\n\r\n.fte {\r\n  position: absolute;\r\n  right: 0;\r\n  display: inline;\r\n  .mat-icon{\r\n    position: relative;\r\n    margin: 5px;\r\n    margin-top: 20px;\r\n  }\r\n  span{\r\n    color: #00000061;\r\n    text-align: center;\r\n    padding-top: 0px;\r\n    padding: 10px;\r\n    text-align: center;\r\n  }\r\n}\r\nh3{\r\n  display: inline;\r\n  .mat-stroked-button {\r\n\t  margin: 5px;\r\n\t  margin-left: 0;\r\n  }\r\n}\r\n\r\n.button-rows {\r\n\tdisplay: flex;\r\n\t.button-row {\r\n    width: 50%\r\n  }\r\n}\r\n\r\n.table-container{\r\n  background-color: white;\r\n   margin-block-start: 40px;\r\n}\r\n\r\n.grade-content{\r\n  width: 10% ; \r\n  margin-left: auto; \r\n  margin-right: 0px; \r\n  flex-grow: unset;\r\n}",
                    "styleUrl": "./financial-controller-overview.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"second-header\">\r\n    <h1>\r\n        KPI Overview\r\n\r\n        <button class=\"executive-btn\" mat-raised-button color=\"primary\" (click)=\"exportCSV()\">\r\n            <mat-icon>insert_chart</mat-icon> Download CSV\r\n        </button>\r\n    </h1>\r\n</div>\r\n\r\n<div layout=\"row\" layout-wrap class=\"table-container\">\r\n\t<div flex=\"100\">\r\n\t\t<div class=\"mat-row accordion-header\">\r\n            <div>\r\n                KPI\r\n            </div>\r\n\t\t\t<div *ngFor=\"let c of columnsToDisplay2; let index=index;\">\r\n                <div>\r\n                    <span>{{ columnsToDisplay2[index] }}</span>\r\n                </div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n        <mat-divider></mat-divider>\r\n\t\t<mat-accordion displayMode=\"flat\" multi>\r\n            <mat-expansion-panel #panelH *ngFor=\"let kpi of kpis; let i = index\" [hideToggle]=\"showToggle(kpis[i])\" (opened)=\"openPanel(kpis[i])\" [disabled]=\"disable(kpis[i])\">\r\n                <mat-expansion-panel-header >\r\n                    <mat-panel-title>\r\n                        {{mapKpiToName(kpis[i])}}\r\n                    </mat-panel-title>\r\n                    <mat-panel-description *ngFor=\"let month of months\" style=\"margin-left: auto; margin-right: 0px; flex-grow: unset; width: 10%;\">\r\n                        <span class=\"mat-cell\">{{mapKpiToValue(kpis[i], month.id) | number: '1.0-2'}} {{mapKpiToUnit(kpis[i])}}</span>\r\n                    </mat-panel-description>\r\n                </mat-expansion-panel-header>\r\n\r\n                <table mat-table [dataSource]=\"grades\" style=\"margin-right: 0px; padding-right: 0px;\" id=\"\">\r\n                    <ng-container matColumnDef=\"kpi\">\r\n                        <th mat-header-cell *matHeaderCellDef>Grade</th>\r\n                        <td mat-cell *matCellDef=\"let element\">{{element}}</td>\r\n                    </ng-container>\r\n                    <ng-container matColumnDef=\"{{month.name}}\" *ngFor=\"let month of months\">\r\n                        <th mat-header-cell *matHeaderCellDef>{{month.name}}</th>\r\n                        <td mat-cell class=\"grade-content\" *matCellDef=\"let element\">{{mapGradeToValue(element, month.id, kpi) | number: '1.0-2'}} {{mapKpiToUnit(kpi)}}</td>\r\n                    </ng-container>\r\n                    <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\r\n                    <tr mat-row  *matRowDef=\"let row; columns: columnsToDisplay\"></tr>\r\n                </table>\r\n            </mat-expansion-panel>\r\n        </mat-accordion>\r\n    </div>\r\n</div>\r\n"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-ed3984a14d9ff54b90c161a12b2e3f49",
            "file": "src/app/layout/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer",
            "styleUrls": [
                "./footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>footer component</p>\n",
            "rawdescription": "\n\nfooter component\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n/**\r\n * footer component\r\n */\r\n@Component({\r\n  selector: 'app-footer',\r\n  templateUrl: './footer.component.html',\r\n  styleUrls: ['./footer.component.scss'],\r\n})\r\nexport class FooterComponent {\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./footer.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": ""
        },
        {
            "name": "ForecastComponent",
            "id": "component-ForecastComponent-1ed0348087c8cefe56cc22bb3c4910db",
            "file": "src/app/forecast/forecast.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "public-forecast",
            "styleUrls": [
                "./forecast.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./forecast.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dashboardMonths",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "<p>Selected months array</p>\n",
                    "line": 68,
                    "rawdescription": "\n\nSelected months array\n"
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "error",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "<p>Error list</p>\n",
                    "line": 53,
                    "rawdescription": "\n\nError list\n"
                },
                {
                    "name": "openRequests",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "<p>List of all open requests</p>\n",
                    "line": 48,
                    "rawdescription": "\n\nList of all open requests\n"
                },
                {
                    "name": "page",
                    "defaultValue": "\"individual\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>contains string of currently active page</p>\n",
                    "line": 43,
                    "rawdescription": "\n\ncontains string of currently active page\n"
                },
                {
                    "name": "spinnerActive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>spinner state variable</p>\n",
                    "line": 58,
                    "rawdescription": "\n\nspinner state variable\n"
                },
                {
                    "name": "spinnerSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>Spinner subscription</p>\n",
                    "line": 63,
                    "rawdescription": "\n\nSpinner subscription\n"
                },
                {
                    "name": "summary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SummaryValues[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methodsClass": [
                {
                    "name": "checkRequests",
                    "args": [
                        {
                            "name": "req",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 441,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if init-request are open\nIf not: sets forecastr ready + hides spinner\n",
                    "description": "<p>Check if init-request are open\nIf not: sets forecastr ready + hides spinner</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 12042,
                                "end": 12045,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "req"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 12036,
                                "end": 12041,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getMSLPage",
                    "args": [
                        {
                            "name": "roleId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 248,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roleId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPage",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 232,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPageFromParams",
                    "args": [
                        {
                            "name": "params",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 268,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goToPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 301,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpens other page\n",
                    "description": "<p>Opens other page</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8405,
                                "end": 8409,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "page"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8399,
                                "end": 8404,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "hasLeadRole",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 336,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hasMSLLevelRole",
                    "args": [
                        {
                            "name": "roleNameExpected",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "roleNameActual",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 332,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roleNameExpected",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "roleNameActual",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isEm",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 340,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isEmAndHasNoLeadRole",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 344,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isExecutive",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 352,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isFinancialController",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 356,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isMSLLevelRole",
                    "args": [
                        {
                            "name": "roleName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 306,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roleName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isPractice",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 348,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "mslHasPractice",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 219,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnsubscribes services when component gets destroyed\n",
                    "description": "<p>Unsubscribes services when component gets destroyed</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRedirects to specific page if it is defined in url\nInitializes utility data\n",
                    "description": "<p>Redirects to specific page if it is defined in url\nInitializes utility data</p>\n"
                },
                {
                    "name": "openDashboard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 361,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOpen dialog for executive chart",
                    "description": "<p>Open dialog for executive chart</p>\n"
                },
                {
                    "name": "openDashboardSubco",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 422,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOpen dialog for subco executive chart",
                    "description": "<p>Open dialog for subco executive chart</p>\n"
                },
                {
                    "name": "openPowerBiDashboard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 404,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOpen dialog for executive chart",
                    "description": "<p>Open dialog for executive chart</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>forecast component</p>\n",
            "rawdescription": "\n\nforecast component\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  OnInit,\r\n  OnDestroy,\r\n} from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { AuthService } from \"../core/security/auth.service\";\r\nimport { UtilitiesService } from \"../core/services/utilities.service\";\r\nimport { PageStateService } from \"../core/shared/page-state.service\";\r\nimport { UserService } from \"../core/services/user.service\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { MatDialog } from \"@angular/material/dialog\";\r\nimport { environment as env } from \"../../environments/environment\";\r\nimport { MatSnackBar } from \"@angular/material/snack-bar\";\r\nimport {\r\n  ExecutiveForecastsService,\r\n  SummaryValues,\r\n} from \"../core/services/forecasts/executive-forecasts.service\";\r\nimport { ExecutiveChartComponent } from \"./components/executive-chart/executive-chart.component\";\r\nimport { ExecutiveChartPdlComponent } from \"./components/executive-chart-pdl/executive-chart-pdl.component\";\r\nimport { ExecutiveChartPlComponent } from \"./components/executive-chart-pl/executive-chart-pl.component\";\r\nimport { SubcoExecutiveChartComponent } from \"./components/subco-executive-chart/subco-executive-chart.component\";\r\nimport { Month } from \"../core/interfaces/month\";\r\nimport { TeamService } from \"../core/services/admin/team.service\";\r\nimport { TeamUserService } from \"../core/services/forecasts/team-user.service\";\r\nimport { Team } from \"../core/interfaces/team\";\r\nimport { PowerBi } from \"./components/power-bi/power-bi.component\";\r\n\r\n/**\r\n * forecast component\r\n */\r\n@Component({\r\n  selector: \"public-forecast\",\r\n  templateUrl: \"./forecast.component.html\",\r\n  styleUrls: [\"./forecast.component.scss\"],\r\n})\r\nexport class ForecastComponent implements OnInit, OnDestroy {\r\n  summary: SummaryValues[];\r\n\r\n  /**\r\n   * contains string of currently active page\r\n   */\r\n  page: string = \"individual\";\r\n\r\n  /**\r\n   * List of all open requests\r\n   */\r\n  openRequests: string[] = [];\r\n\r\n  /**\r\n   * Error list\r\n   */\r\n  error: string[] = [];\r\n\r\n  /**\r\n   * spinner state variable\r\n   */\r\n  spinnerActive: boolean;\r\n\r\n  /**\r\n   * Spinner subscription\r\n   */\r\n  spinnerSubscription: Subscription;\r\n\r\n  /**\r\n   * Selected months array\r\n   */\r\n  dashboardMonths: Month[] = [];\r\n\r\n  /**\r\n   * forecast-component constructor\r\n   * @param router\r\n   * @param snackBar\r\n   * @param authService\r\n   * @param userService\r\n   * @param utilitiesService\r\n   * @param pageState\r\n   */\r\n  constructor(\r\n    public dialog: MatDialog,\r\n    private router: Router,\r\n    private snackBar: MatSnackBar,\r\n    private authService: AuthService,\r\n    private userService: UserService,\r\n    private utilitiesService: UtilitiesService,\r\n    private pageState: PageStateService,\r\n    private executiveService: ExecutiveForecastsService,\r\n    private teamService: TeamUserService,\r\n  ) {\r\n    this.spinnerActive = true;\r\n  }\r\n\r\n  /**\r\n   * Redirects to specific page if it is defined in url\r\n   * Initializes utility data\r\n   */\r\n  ngOnInit(): void {\r\n    this.openRequests = [\r\n      \"months\",\r\n      \"projects\",\r\n      \"probabilities\",\r\n      \"user\",\r\n      \"grades\",\r\n      \"roles\",\r\n      \"users\",\r\n      \"kpi\",\r\n      \"teams\",\r\n    ];\r\n\r\n    this.utilitiesService\r\n      .initMonths()\r\n      .then(() => {\r\n        this.checkRequests(\"months\");\r\n      })\r\n      .catch(() => {\r\n        this.error.push(\"Error loading months.\");\r\n        this.checkRequests(\"months\");\r\n      });\r\n\r\n    this.utilitiesService\r\n      .initProjects()\r\n      .then(() => {\r\n        this.checkRequests(\"projects\");\r\n      })\r\n      .catch(() => {\r\n        this.error.push(\"Error loading projects.\");\r\n        this.checkRequests(\"projects\");\r\n      });\r\n\r\n    this.utilitiesService\r\n      .initProbabilities()\r\n      .then(() => {\r\n        this.checkRequests(\"probabilities\");\r\n      })\r\n      .catch(() => {\r\n        this.error.push(\"Error loading probabilities.\");\r\n        this.checkRequests(\"probabilities\");\r\n      });\r\n\r\n    this.userService\r\n      .initializeGrades()\r\n      .then(() => {\r\n        this.checkRequests(\"grades\");\r\n      })\r\n      .catch(() => {\r\n        this.error.push(\"Error loading grades.\");\r\n        this.checkRequests(\"grades\");\r\n      });\r\n\r\n    this.userService\r\n      .initUser()\r\n      .then(() => {\r\n        this.checkRequests(\"user\")\r\n      }).catch(() => {\r\n        this.error.push(\"Error loading user.\");\r\n        this.checkRequests(\"user\");\r\n      });\r\n\r\n    this.userService\r\n      .initializeRoles()\r\n      .then(() => {\r\n        this.checkRequests(\"roles\");\r\n      }).catch(() => {\r\n        this.error.push(\"Error loading roles.\");\r\n      });\r\n\r\n    if (this.authService.hasRole(env.roles.msl)) {\r\n      this.userService.initializeAllUser().then(() => {\r\n        this.checkRequests(\"users\");\r\n        \r\n        this.teamService.initializeTeams().then(() => {\r\n          this.checkRequests(\"teams\");\r\n        }).catch(() => {\r\n          this.error.push(\"Error loading all Teams.\");\r\n          this.checkRequests(\"teams\");\r\n        })\r\n      }).catch(() => {\r\n        this.error.push(\"Error loading all Users.\");\r\n        this.checkRequests(\"users\");\r\n        this.checkRequests(\"teams\");\r\n      })\r\n    } else {\r\n      this.checkRequests(\"users\");\r\n      this.checkRequests(\"teams\");\r\n    }\r\n\r\n    if (this.authService.getRoleId() == env.roles.pdl){\r\n      this.executiveService.initializeKpiValuesPDL(this.authService.getUserId()).then(() => {\r\n        this.checkRequests(\"kpi\");\r\n      })\r\n    }\r\n    if (this.authService.getRoleId() == env.roles.pl){\r\n      this.executiveService.initializeKpiValuesPL(this.authService.getUserId()).then(() => {\r\n        this.checkRequests(\"kpi\");\r\n      })\r\n    }\r\n    if (this.authService.hasRole(env.roles.msl)) {\r\n      this.executiveService.initializeKpiValues().then(() => {\r\n        this.checkRequests(\"kpi\");\r\n      })\r\n    } else {\r\n      this.checkRequests(\"kpi\");\r\n    }\r\n\r\n    this.spinnerSubscription = this.pageState.spinner$.subscribe(\r\n      (spinner: boolean) => {\r\n        this.spinnerActive = spinner;\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Unsubscribes services when component gets destroyed\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.spinnerSubscription.unsubscribe();\r\n  }\r\n\r\n  mslHasPractice(): boolean {\r\n    if(!this.isExecutive()) {\r\n      return false;\r\n    }\r\n    \r\n    if(this.teamService.getPrTeams() !== undefined || this.teamService.getPrTeams().length !== 0) {\r\n      let ts = this.teamService.getPrTeams().filter((t: Team) => t.teamLeadId === this.authService.getUserId());\r\n      return ts.length > 0;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getPage(): string {\r\n    let page = \"\";\r\n\r\n    if (this.isFinancialController()) {\r\n      page = \"financial-controller\";\r\n    } else if (this.isExecutive()) {\r\n      let roleId = this.userService.getUser(this.authService.getUserId()).roleId;\r\n      page = this.getMSLPage(roleId);\r\n    } else {\r\n      let params: string[] = this.router.url.substr(1).split(\"/\");\r\n      page = this.getPageFromParams(params);\r\n    }\r\n\r\n    return page\r\n  }\r\n\r\n  getMSLPage(roleId: number): string {\r\n    if (roleId !== undefined) {\r\n      let roleName = this.userService.getRole(roleId).shortcut;\r\n\r\n      if (this.hasMSLLevelRole(\"HOP\", roleName)) {\r\n        return \"head-of-practices\";\r\n      }\r\n\r\n      if (this.hasMSLLevelRole(\"SM\", roleName)) {\r\n        return \"staffing\";\r\n      }\r\n\r\n      if(this.hasMSLLevelRole(\"SMCSS\", roleName)) {\r\n        return \"staffing\";\r\n      }\r\n    }\r\n\r\n    return \"executive\";\r\n  }\r\n\r\n  getPageFromParams(params: string[]): string {\r\n    if (params.length >= 2) {\r\n      if (params[1] === \"team\") {\r\n        return \"team\";\r\n      } else if (params[1] === \"practice\") {\r\n        return \"practice\";\r\n      } else if (params[1] === \"staffing\") {\r\n        return \"staffing\";\r\n      } else if (params[1] === \"head-of-practices\") {\r\n        return \"head-of-practices\";\r\n      } else if (params[1] === \"executive\") {\r\n        return \"executive\";\r\n      } else if (params[1] === \"practices\") {\r\n        return \"practices\";\r\n      } else if (params[1] === \"financial-controller\") {\r\n        return \"financial-controller\";\r\n      } else if (params[1] === \"subcos\") {\r\n        return \"subcos\";\r\n      } else if (params[1] === \"subcos-exectuive\") {\r\n        return \"subcos-exectuive\";\r\n      }\r\n      else {\r\n        return \"individual\";\r\n      }\r\n    } else {\r\n      return \"individual\";\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Opens other page\r\n   * @param page\r\n   */\r\n  goToPage(page: string): void {\r\n      this.page = page;\r\n      this.router.navigate([\"/forecast/\" + page + \"/active\"]);\r\n  }\r\n\r\n  isMSLLevelRole(roleName: string): boolean {\r\n    if (!this.isExecutive()) {\r\n      return false;\r\n    }\r\n\r\n    let userId = this.authService.getUserId();\r\n\r\n    if (userId === undefined) {\r\n      return false;\r\n    }\r\n\r\n    let roleId = this.userService.getUser(userId).roleId;\r\n\r\n    if (roleId === undefined) {\r\n      return false;\r\n    }\r\n\r\n    let role = this.userService.getRole(roleId).shortcut;\r\n\r\n    if (role === undefined) {\r\n      return false;\r\n    }\r\n\r\n    return role === roleName;\r\n  }\r\n\r\n  hasMSLLevelRole(roleNameExpected: string, roleNameActual: string): boolean {\r\n    return this.isExecutive() && roleNameActual !== undefined && roleNameActual === roleNameExpected;\r\n  }\r\n\r\n  hasLeadRole(): boolean {\r\n    return this.authService.hasRole(env.roles.pdl);\r\n  }\r\n\r\n  isEm(): boolean {\r\n    return this.authService.isEngagementManager();\r\n  }\r\n\r\n  isEmAndHasNoLeadRole(): boolean {\r\n    return this.authService.isEngagementManager() && !this.authService.hasRole(env.roles.pdl);\r\n  }\r\n\r\n  isPractice(): boolean {\r\n    return this.authService.hasRole(env.roles.pl);\r\n  }\r\n\r\n  isExecutive(): boolean {\r\n    return this.authService.hasRole(env.roles.msl);\r\n  }\r\n\r\n  isFinancialController(): boolean {\r\n    return this.authService.hasRole(env.roles.fc);\r\n  }\r\n\r\n  /**Open dialog for executive chart */\r\n  openDashboard(): void {\r\n\r\n    if (this.authService.getRoleId() == env.roles.pdl){\r\n \r\n      const dialogRef = this.dialog.open(ExecutiveChartPdlComponent, {\r\n        height: \"90%\",\r\n        width: \"90%\",\r\n        panelClass: \"custom-dialog-container\",\r\n        data: {},\r\n      });\r\n\r\n      dialogRef.afterClosed().subscribe((result) => {\r\n        console.log(\"The dialog was closed\");\r\n      });\r\n     \r\n    }\r\n    if (this.authService.getRoleId() == env.roles.pl){\r\n\r\n      const dialogRef = this.dialog.open(ExecutiveChartPlComponent, {\r\n        height: \"90%\",\r\n        width: \"90%\",\r\n        panelClass: \"custom-dialog-container\",\r\n        data: {},\r\n      });\r\n\r\n      dialogRef.afterClosed().subscribe((result) => {\r\n        console.log(\"The dialog was closed\");\r\n      });\r\n    }\r\n    if (this.authService.hasRole(env.roles.msl)) {\r\n      const dialogRef = this.dialog.open(ExecutiveChartComponent, {\r\n        width: \"90%\",\r\n        panelClass: \"custom-dialog-container\",\r\n        data: {},\r\n      });\r\n\r\n      dialogRef.afterClosed().subscribe((result) => {\r\n        console.log(\"The dialog was closed\");\r\n      });\r\n    }\r\n  }\r\n\r\n    /**Open dialog for executive chart */\r\n    openPowerBiDashboard(): void {\r\n      if (this.authService.hasRole(env.roles.pdl)) {\r\n        const dialogRef = this.dialog.open(PowerBi, {\r\n          width: \"960px\",\r\n          height: \"568px\",\r\n          panelClass: \"custom-dialog-container\",\r\n          data: {},\r\n        });\r\n  \r\n        dialogRef.afterClosed().subscribe((result) => {\r\n          console.log(\"The dialog was closed\");\r\n        });\r\n      }\r\n    }\r\n\r\n\r\n\r\n  /**Open dialog for subco executive chart */\r\n  openDashboardSubco(): void {\r\n    if (this.authService.hasRole(env.roles.pdl)) {\r\n      const dialogRef = this.dialog.open(SubcoExecutiveChartComponent, {\r\n        height: \"90%\",\r\n        width: \"90%\",\r\n        panelClass: \"custom-dialog-container\",\r\n        data: {},\r\n      });\r\n\r\n      dialogRef.afterClosed().subscribe((result) => {\r\n        console.log(\"The dialog was closed\");\r\n      });\r\n    }\r\n  }\r\n  /**\r\n   * Check if init-request are open\r\n   * If not: sets forecastr ready + hides spinner\r\n   * @param req\r\n   */\r\n  private checkRequests(req: string): void {\r\n    this.openRequests = this.openRequests.filter((r: string) => r !== req);\r\n\r\n    if (this.openRequests.length === 0) {\r\n\r\n      if (this.error.length) {\r\n        this.error.forEach((e: string) => {\r\n          this.snackBar.open(e, \"OK\", { duration: 30000 });\r\n        });\r\n      } else {\r\n        this.pageState.setForecastrReady();\r\n\r\n        if (this.page !== \"executive\" && this.page !== \"head-of-practices\" && this.page !== \"staffing\" && this.page !== \"financial-controller\") {\r\n          this.pageState.hideSpinner();\r\n        }\r\n      }\r\n\r\n      this.goToPage(this.getPage());\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../assets/styles/variables.scss\";\r\n\r\n.role-header {\r\n  position: relative;\r\n  height: 37px;\r\n  margin: 20px 0px 30px 0px;\r\n\r\n  h1 {\r\n    line-height: 37px;\r\n    font-size: 1.8em;\r\n    margin: 0;\r\n  }\r\n\r\n  .mat-button-toggle-group {\r\n    background-color: map-get($font-colors, white);\r\n    font-size: 1.1em;\r\n    border-radius: 4px;\r\n  }\r\n\r\n  .mat-button-toggle {\r\n    background-color: map-get($font-colors, white);\r\n    color: map-get($font-colors, blue);\r\n    border-right: 1px solid #0070ad;\r\n    width: 120px;\r\n\r\n    .mat-icon {\r\n      color: map-get($font-colors, blue);\r\n    }\r\n\r\n    &:hover {\r\n      background-color: map-get($bg-colors, light);\r\n    }\r\n\r\n    &:last-child {\r\n      border: none;\r\n    }\r\n  }\r\n\r\n  .mat-button-toggle-checked,\r\n  .mat-button-toggle-checked .mat-icon {\r\n    background-color: map-get($font-colors, blue);\r\n    color: map-get($font-colors, white);\r\n\r\n    &:hover {\r\n      background-color: map-get($font-colors, blue);\r\n    }\r\n  }\r\n\r\n  .switch-role-toggle {\r\n    position: absolute;\r\n    right: 0px;\r\n    top: 0;\r\n    height: 34px;\r\n    line-height: 34px;\r\n    border-radius: 0;\r\n  }\r\n\r\n  .dashboard-button {\r\n    position: absolute  ;\r\n    width: 180px;\r\n    top: 0;\r\n    height: 34px;\r\n    line-height: 34px;\r\n    border-radius: 20px;\r\n    background-color: map-get($font-colors, blue);\r\n    color: map-get($font-colors, white);\r\n    box-shadow: 0px 1px 5px grey;\r\n\r\n    .mat-icon {\r\n      color: map-get($font-colors, white);\r\n    }\r\n  }\r\n\r\n  .ms-dashboard-button {\r\n    width: 180px;\r\n    top: 0;\r\n    height: 34px;\r\n    line-height: 34px;\r\n    border-radius: 20px;\r\n    background-color: map-get($font-colors, blue);\r\n    color: map-get($font-colors, white);\r\n    box-shadow: 0px 1px 5px grey;\r\n\r\n    .mat-icon {\r\n      color: map-get($font-colors, white);\r\n    }\r\n  }\r\n\r\n  .practice-dashboard {\r\n    right: 375px;\r\n  }\r\n\r\n  .pdl-dashboard {\r\n    right: 250px;\r\n  }\r\n\r\n  .power-bi-practice-dashboard {\r\n    right: 575px;\r\n  }\r\n\r\n  .practice-em-dashboard {\r\n    right: 500px;\r\n  }\r\n\r\n  .pdl-em-dashboard {\r\n    right: 375px;\r\n  }\r\n  .subco-totals-dashboard {\r\n    width: 220px;\r\n    height: 36px;\r\n    line-height: 36px;\r\n  }\r\n  .subco-totals-ms-dashboard {\r\n    left: 15px;\r\n  }\r\n  .power-bi-pdl-dashboard {\r\n    right: 450px;\r\n  }\r\n\r\n  .power-bi-ms-dashboard {\r\n    left: 30px;\r\n  }\r\n  .power-bi-mscss-dashboard {\r\n    left: 15px;\r\n  }\r\n\r\n  .sm-hop-button-toggle-group {\r\n    right: 0px;\r\n  }\r\n\r\n  .sm-hop-button-toggle {\r\n    width: 140px;\r\n  }\r\n}\r\n\r\n.progress-spinner-overlay {\r\n  display:  none;\r\n  position: fixed;\r\n  bottom: 0;\r\n  right: 0;\r\n  z-index: 10000;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: map-get($font-colors, white);\r\n  opacity: 0.5;\r\n\r\n  \r\n  &.active {\r\n\t\tdisplay: block;\r\n\t}\r\n\r\n  &.hide {\r\n\t\tdisplay: none;\r\n\t}\r\n}\r\n.progress-spinner {\r\n\ttop: 50%;\r\n\tleft: 50%;\r\n  z-index: 11000;\r\n\ttransform: translate(-50%, -50%);\r\n}\r\n\r\n.mat-sidenav-container {\r\n  min-width: 700px;\r\n  background: transparent;\r\n  margin: 0 10px;\r\n}\r\n\r\n.mat-drawer {\r\n  display: none;\r\n  background: transparent;\r\n  width: 50px;\r\n  border-right-width: 0px;\r\n}\r\n\r\n.nav-button-container {\r\n  margin: 4px 0;\r\n\r\n  .mat-icon-button {\r\n    width: 50px;\r\n    height: 50px;\r\n    margin-bottom: 10px;\r\n    padding: 0;\r\n\r\n    &.active,\r\n    &.active .mat-icon {\r\n      color: map-get($font-colors, blue);\r\n    }\r\n  }\r\n\r\n  .mat-icon {\r\n    width: 1em;\r\n    height: 1em;\r\n    line-height: 1em;\r\n    font-size: 2em;\r\n  }\r\n}\r\n",
                    "styleUrl": "./forecast.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>forecast-component constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "teamService",
                        "type": "TeamUserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 68,
                "rawdescription": "\n\nforecast-component constructor\n",
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 2270,
                            "end": 2276,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "router"
                        },
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2264,
                            "end": 2269,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 2290,
                            "end": 2298,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "snackBar"
                        },
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2284,
                            "end": 2289,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 2312,
                            "end": 2323,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "authService"
                        },
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2306,
                            "end": 2311,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 2337,
                            "end": 2348,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "userService"
                        },
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2331,
                            "end": 2336,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 2362,
                            "end": 2378,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "utilitiesService"
                        },
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2356,
                            "end": 2361,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 2392,
                            "end": 2401,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "pageState"
                        },
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2386,
                            "end": 2391,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "teamService",
                        "type": "TeamUserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"progress-spinner-overlay\" [ngClass]=\"{ active: spinnerActive }\">\r\n  <mat-progress-spinner class=\"progress-spinner\" color=\"primary\" mode=\"indeterminate\"></mat-progress-spinner>\r\n</div>\r\n\r\n<app-header></app-header>\r\n\r\n<mat-sidenav-container>\r\n  <mat-sidenav mode=\"side\" opened>\r\n    <div class=\"nav-button-container\">\r\n      <button mat-icon-button title=\"ForeCasts\" class=\"active\">\r\n        <mat-icon [inline]=\"true\">date_range</mat-icon>\r\n      </button>\r\n\r\n      <button mat-icon-button title=\"Settings\">\r\n        <mat-icon [inline]=\"true\">settings</mat-icon>\r\n      </button>\r\n    </div>\r\n  </mat-sidenav>\r\n\r\n  <mat-sidenav-content>\r\n    <div class=\"app-content\">\r\n\r\n\r\n      <div *ngIf=\"!isExecutive()\" class=\"role-header\">\r\n        <h1>Monthly Forecast</h1>\r\n\r\n        <div *ngIf=\"hasLeadRole()\">\r\n          <button *ngIf=\"isPractice() && !isEm()\" mat-raised-button class=\"dashboard-button practice-dashboard\"\r\n            (click)=\"openDashboard()\">\r\n            <mat-icon>insert_chart</mat-icon> KPI Overview\r\n          </button>\r\n          <button *ngIf=\"!isPractice() && !isEm()\" mat-raised-button class=\"dashboard-button pdl-dashboard\"\r\n            (click)=\"openDashboard()\">\r\n            <mat-icon>insert_chart</mat-icon> KPI Overview\r\n          </button>\r\n          <button *ngIf=\"isPractice() && isEm()\" mat-raised-button class=\"dashboard-button practice-em-dashboard\"\r\n          (click)=\"openDashboard()\">\r\n          <mat-icon>insert_chart</mat-icon> KPI Overview\r\n          </button>        \r\n          <button *ngIf=\"!isPractice() && isEm()\" mat-raised-button class=\"dashboard-button pdl-em-dashboard\"\r\n            (click)=\"openDashboard()\">\r\n            <mat-icon>insert_chart</mat-icon> KPI Overview\r\n          </button>\r\n          <button *ngIf=\"isPractice()\" mat-raised-button color=\"primary\" class=\"dashboard-button power-bi-practice-dashboard\"\r\n           (click)=\"openPowerBiDashboard()\">\r\n            <mat-icon>insert_chart</mat-icon> Power Bi\r\n          </button>\r\n          <button *ngIf=\"!isPractice()\" mat-raised-button color=\"primary\" class=\"dashboard-button power-bi-pdl-dashboard\"\r\n          (click)=\"openPowerBiDashboard()\">\r\n           <mat-icon>insert_chart</mat-icon> Power Bi\r\n         </button>\r\n        </div>\r\n\r\n\r\n\r\n        <div class=\"switch-role-toggle\" *ngIf=\"hasLeadRole()\">\r\n      \r\n          <mat-button-toggle-group appearance=\"legacy\" aria-label=\"Role\" #group=\"matButtonToggleGroup\" [value]=\"page\"\r\n            (change)=\"goToPage(group.value)\">\r\n          \r\n            <mat-button-toggle value=\"individual\">\r\n              <mat-icon>person</mat-icon> Me\r\n            </mat-button-toggle>\r\n            <mat-button-toggle value=\"team\">\r\n              <mat-icon>supervisor_account</mat-icon> Team\r\n            </mat-button-toggle>\r\n            <mat-button-toggle value=\"practice\" *ngIf=\"isPractice()\">\r\n              <mat-icon>supervisor_account</mat-icon> Practice\r\n            </mat-button-toggle>\r\n            <mat-button-toggle value=\"subcos\" *ngIf=\"isEm()\">\r\n              <mat-icon>supervisor_account</mat-icon> Subcos\r\n            </mat-button-toggle>\r\n          </mat-button-toggle-group>\r\n       \r\n        </div>\r\n\r\n        <div class=\"switch-role-toggle\" *ngIf=\"isEmAndHasNoLeadRole()\">\r\n          <mat-button-toggle-group appearance=\"legacy\" aria-label=\"Role\" #group=\"matButtonToggleGroup\" [value]=\"page\"\r\n            (change)=\"goToPage(group.value)\">\r\n\r\n            <mat-button-toggle value=\"individual\">\r\n              <mat-icon>person</mat-icon> Me\r\n            </mat-button-toggle>\r\n            <mat-button-toggle value=\"subcos\" *ngIf=\"isEm()\">\r\n              <mat-icon>supervisor_account</mat-icon> Subcos\r\n            </mat-button-toggle>\r\n          </mat-button-toggle-group>\r\n        </div>\r\n      </div>\r\n\r\n      <div *ngIf=\"isMSLLevelRole('HOP') || isMSLLevelRole('SM') || isMSLLevelRole('SMCSS')\" class=\"role-header\">\r\n        <button mat-raised-button color=\"primary\" (click)=\"openDashboard()\" class=\"ms-dashboard-button\">\r\n          <mat-icon>insert_chart</mat-icon> KPI Overview\r\n        </button>\r\n        <button mat-raised-button  *ngIf=\"isMSLLevelRole('HOP') || isFinancialController() \" class=\"ms-dashboard-button subco-totals-dashboard subco-totals-ms-dashboard\"\r\n        (click)=\"openDashboardSubco()\">\r\n          <mat-icon>insert_chart</mat-icon> Subco Totals Overview\r\n        </button>\r\n        <button *ngIf=\"!isMSLLevelRole('SM')\" [ngClass]=\"{'power-bi-ms-dashboard': isMSLLevelRole('HOP'), 'power-bi-mscss-dashboard' : isMSLLevelRole('SMCSS') }\" mat-raised-button color=\"primary\" class=\"ms-dashboard-button\" (click)=\"openPowerBiDashboard()\">\r\n         <mat-icon>insert_chart</mat-icon> Power Bi\r\n        </button>  \r\n        <div class=\"switch-role-toggle\" *ngIf=\"hasLeadRole()\">\r\n          <mat-button-toggle-group class=\"sm-hop-button-toggle-group\" appearance=\"legacy\" aria-label=\"Role\"\r\n            #group=\"matButtonToggleGroup\" [value]=\"page\" (change)=\"goToPage(group.value)\">\r\n            <mat-button-toggle *ngIf=\"isMSLLevelRole('SM') || isMSLLevelRole('SMCSS') || isMSLLevelRole('HOP')\"\r\n              class=\"sm-hop-button-toggle\" value=\"practices\">\r\n              <mat-icon>supervisor_account</mat-icon> Practices\r\n            </mat-button-toggle>\r\n            <mat-button-toggle *ngIf=\"isMSLLevelRole('HOP')\" class=\"sm-hop-button-toggle\" value=\"head-of-practices\">\r\n              <mat-icon>grid_on</mat-icon> Overview\r\n            </mat-button-toggle>\r\n            <mat-button-toggle class=\"sm-hop-button-toggle\" value=\"subcos-executive\">\r\n              <mat-icon>supervisor_account</mat-icon> Subcos\r\n            </mat-button-toggle>\r\n            <mat-button-toggle *ngIf=\"isMSLLevelRole('HOP') || isMSLLevelRole('SM')\" class=\"sm-hop-button-toggle\" value=\"individual\">\r\n              <mat-icon>person</mat-icon> Me\r\n            </mat-button-toggle>\r\n            <mat-button-toggle *ngIf=\"mslHasPractice()\" class=\"sm-hop-button-toggle\" value=\"practice\">\r\n              <mat-icon>supervisor_account</mat-icon> Practice\r\n            </mat-button-toggle>\r\n            <mat-button-toggle *ngIf=\"isMSLLevelRole('SM') || isMSLLevelRole('SMCSS')\" class=\"sm-hop-button-toggle\"\r\n              value=\"staffing\">\r\n              <mat-icon>grid_on</mat-icon> Overview\r\n            </mat-button-toggle>\r\n            <mat-button-toggle *ngIf=\"isMSLLevelRole('SMCSS')\" class=\"sm-hop-button-toggle\" value=\"individual\">\r\n              <mat-icon>person</mat-icon> Me\r\n            </mat-button-toggle>\r\n          </mat-button-toggle-group>\r\n        </div>\r\n      </div>\r\n\r\n      <div *ngIf=\"isFinancialController()\" class=\"role-header\">\r\n        <div class=\"switch-role-toggle\">\r\n          <mat-button-toggle-group class=\"sm-hop-button-toggle-group\" appearance=\"legacy\" aria-label=\"Role\"\r\n            #group=\"matButtonToggleGroup\" [value]=\"page\" (change)=\"goToPage(group.value)\">\r\n            <mat-button-toggle class=\"sm-hop-button-toggle\" value=\"financial-controller\">\r\n              <mat-icon>grid_on</mat-icon> Overview\r\n            </mat-button-toggle>\r\n            <mat-button-toggle class=\"sm-hop-button-toggle\" value=\"practices\">\r\n              <mat-icon>supervisor_account</mat-icon> Practices\r\n            </mat-button-toggle>\r\n            <mat-button-toggle class=\"sm-hop-button-toggle\" value=\"subcos-executive\">\r\n              <mat-icon>supervisor_account</mat-icon> Subcos\r\n            </mat-button-toggle>\r\n          </mat-button-toggle-group>\r\n        </div>\r\n      </div>\r\n\r\n      <div *ngIf=\"isMSLLevelRole('MSL')\" class=\"role-header\">\r\n        <h1>Forecast Summary</h1>\r\n      </div>\r\n      <router-outlet></router-outlet>\r\n    </div>\r\n  </mat-sidenav-content>\r\n</mat-sidenav-container>\r\n\r\n<app-footer></app-footer>"
        },
        {
            "name": "GetStarted",
            "id": "component-GetStarted-8809bceb75b2e865c390d303b84a8ef2",
            "file": "src/app/layout/getStartedModal/get-started.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./get-started.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./get-started.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "line": 30,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<GetStarted>",
                    "optional": false,
                    "line": 29,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "tutorialData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "<p>data variable for all dialog steps</p>\n",
                    "line": 20,
                    "rawdescription": "\n\ndata variable for all dialog steps\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncheck if is pdl or normal user\n",
                    "description": "<p>check if is pdl or normal user</p>\n"
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nclose the getStarted\n",
                    "description": "<p>close the getStarted</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Component to show get-started dialog</p>\n",
            "rawdescription": "\n\nComponent to show get-started dialog\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit } from \"@angular/core\";\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material/dialog\";\r\nimport { AuthService } from \"../../core/security/auth.service\";\r\n\r\nimport { getStartedData } from \"./getStartedData\";\r\nimport { environment as env } from '../../../environments/environment';\r\n\r\n/**\r\n * Component to show get-started dialog\r\n */\r\n@Component({\r\n    templateUrl: './get-started.html',\r\n    styleUrls: ['./get-started.scss'],\r\n}) \r\nexport class GetStarted implements OnInit {\r\n    \r\n    /**\r\n     * data variable for all dialog steps\r\n     */\r\n    tutorialData: any[];\r\n\r\n    /**\r\n     * getstarted component constructor\r\n     * @param dialogRef\r\n     * @param data\r\n     * @param auth\r\n     */\r\n    constructor(\r\n        public dialogRef: MatDialogRef<GetStarted>,\r\n        @Inject(MAT_DIALOG_DATA) public data: any,\r\n        private auth: AuthService,\r\n    ) {}\r\n\r\n    /**\r\n     * check if is pdl or normal user\r\n     */\r\n    ngOnInit(): void {\r\n        if (this.auth.hasRole(env.roles.pl)) {\r\n            this.tutorialData = getStartedData.pl;\r\n        } else if(this.auth.hasRole(env.roles.pdl)) {\r\n            this.tutorialData = getStartedData.pdl;\r\n        } else {\r\n            this.tutorialData = getStartedData.css;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * close the getStarted\r\n     */\r\n    onNoClick(): void {\r\n        this.dialogRef.close();\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".image {\r\n  max-width: 85%;\r\n  min-width: 70%;\r\n  height: auto;\r\n  box-shadow: 0px 0px 6px 2px rgba(241, 245, 248, 0.7);\r\n}\r\n\r\n.imageContainer {\r\n  display: flex;\r\n  align-items: center;\r\n  \r\n  justify-content: center;\r\n}\r\n.example-card {\r\n}\r\n\r\n.button-container {\r\n  justify-content: flex-end;\r\n  display: flex;\r\n  align-items: flex-end;\r\n}\r\n\r\n.green-text {\r\n  color: #95e616;\r\n}\r\n\r\n.content-news{\r\n  padding: 20px;\r\n  background-color: #95E616;\r\n  color: white;\r\n}\r\n\r\n.content {\r\n  padding: 20px;\r\n  background-color: #0070ad;\r\n  color: white;\r\n}\r\n\r\n.mat-horizontal-content-container {\r\n  padding: 0px;\r\n  background-color: rebeccapurple;\r\n}\r\n\r\n.title {\r\n  margin-top: 0;\r\n}\r\n\r\n.close-button {\r\n  margin-left: 2px;\r\n}",
                    "styleUrl": "./get-started.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>getstarted component constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<GetStarted>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "rawdescription": "\n\ngetstarted component constructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 683,
                            "end": 692,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialogRef"
                        },
                        "type": "MatDialogRef<GetStarted>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 677,
                            "end": 682,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 708,
                            "end": 712,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "data"
                        },
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 702,
                            "end": 707,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 728,
                            "end": 732,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "auth"
                        },
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 722,
                            "end": 727,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- <p>What's your favorite animal?</p> -->\r\n\r\n<mat-horizontal-stepper labelPosition=\"bottom\" class=\"getSartedStepper\" linear>\r\n  <ng-template matStepperIcon=\"number\" let-index=\"index\">\r\n    {{index}}\r\n  </ng-template>\r\n  <ng-template matStepperIcon=\"edit\" let-index=\"index\">\r\n    {{index}}\r\n  </ng-template>\r\n\r\n  <mat-step *ngFor=\"let item of tutorialData; let last = last\" [stepControl]=\"false\">\r\n    <div layout=\"column\">\r\n      <div flex=\"80\" class=\"imageContainer\">\r\n        <img class=\"image\" src=\"{{ 'assets/img/steps/Step_'}}{{item.image}}\" alt=\"Step 1\">\r\n      </div>\r\n      \r\n      <div layout=\"row\" [ngClass]=\"{'content-news' : item.news, 'content': !item.news}\" flex=\"20\">\r\n        <div flex=\"70\">\r\n          <h1 class=\"title\">{{item.title}}</h1>\r\n          <div [innerHTML]=\"item.html\"></div>\r\n        </div>\r\n\r\n        <div class=\"button-container\" flex=\"30\">\r\n          <button *ngIf=\"!last\" mat-stroked-button class=\"mat-primary-reversed next-button\" matStepperNext>Next</button>\r\n          <button *ngIf=\"!last\" mat-stroked-button class=\"mat-primary-reversed close-button\" (click)=\"onNoClick()\">Close</button>\r\n          <button *ngIf=\"last\" mat-stroked-button class=\"mat-primary-reversed\" (click)=\"onNoClick()\">\r\n            <span class=\"green-text\">Start</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </mat-step>\r\n</mat-horizontal-stepper>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-c349aa42f2121da4b5737d60a50fa413",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-header',\r\n  template: `<header>\r\n    <div class=\"wrapper\">\r\n      <div>\r\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\r\n              fill=\"#FFF\"\r\n            />\r\n            <path\r\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\r\n              fill=\"#555AB9\"\r\n            />\r\n            <path\r\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\r\n              fill=\"#91BAF8\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        <h1>Acme</h1>\r\n      </div>\r\n      <div>\r\n        <storybook-button\r\n          *ngIf=\"user\"\r\n          size=\"small\"\r\n          (onClick)=\"onLogout.emit($event)\"\r\n          label=\"Log out\"\r\n        ></storybook-button>\r\n        <storybook-button\r\n          *ngIf=\"!user\"\r\n          size=\"small\"\r\n          (onClick)=\"onLogin.emit($event)\"\r\n          label=\"Log in\"\r\n        ></storybook-button>\r\n        <storybook-button\r\n          *ngIf=\"!user\"\r\n          primary\r\n          size=\"small\"\r\n          (onClick)=\"onCreateAccount.emit($event)\"\r\n          label=\"Sign up\"\r\n        ></storybook-button>\r\n      </div>\r\n    </div>\r\n  </header>`,\r\n  styleUrls: ['./header.css'],\r\n})\r\nexport default class HeaderComponent {\r\n  @Input()\r\n  user: unknown = null;\r\n\r\n  @Output()\r\n  onLogin = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onLogout = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onCreateAccount = new EventEmitter<Event>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n  padding: 15px 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\nsvg {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\nh1 {\r\n  font-weight: 900;\r\n  font-size: 20px;\r\n  line-height: 1;\r\n  margin: 6px 0 6px 10px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\nbutton + button {\r\n  margin-left: 10px;\r\n}\r\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-bed6aa7172736be18a4973a34738b108-1",
            "file": "src/app/layout/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dialog2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dialog3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Role[]",
                    "optional": false,
                    "description": "<p>Possible roles</p>\n",
                    "line": 34,
                    "rawdescription": "\n\nPossible roles\n"
                },
                {
                    "name": "roleSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "supportedBrowser",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "<p>Logged in user</p>\n",
                    "line": 28,
                    "rawdescription": "\n\nLogged in user\n"
                },
                {
                    "name": "userSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "getRole",
                    "args": [],
                    "optional": false,
                    "returnType": "string | boolean",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns user role description\n",
                    "description": "<p>returns user role description</p>\n"
                },
                {
                    "name": "isAdmin",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns whether the logged in user has admin permissions\n",
                    "description": "<p>Returns whether the logged in user has admin permissions</p>\n"
                },
                {
                    "name": "isLogged",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns if user is logged in.\nOtherwise: false\n",
                    "description": "<p>Returns if user is logged in.\nOtherwise: false</p>\n"
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalls logout\n",
                    "description": "<p>Calls logout</p>\n"
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnsubscribe services when component gets destroyed\n",
                    "description": "<p>Unsubscribe services when component gets destroyed</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInits user variable at header init\n",
                    "description": "<p>Inits user variable at header init</p>\n"
                },
                {
                    "name": "openFAQ",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nopen Modal with showcase\n",
                    "description": "<p>open Modal with showcase</p>\n"
                },
                {
                    "name": "openOrganization",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nopen Modal with enterprise structure\n",
                    "description": "<p>open Modal with enterprise structure</p>\n"
                },
                {
                    "name": "openStepper",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nopen Modal with showcase\n",
                    "description": "<p>open Modal with showcase</p>\n"
                },
                {
                    "name": "sendMail",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nsend EMail to admin\n",
                    "description": "<p>send EMail to admin</p>\n"
                },
                {
                    "name": "showHome",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>header component</p>\n",
            "rawdescription": "\n\nheader component\n",
            "type": "component",
            "sourceCode": "import { Router } from \"@angular/router\";\r\nimport { Component, OnInit, OnDestroy } from \"@angular/core\";\r\nimport { AuthService } from \"../../core/security/auth.service\";\r\nimport { LoginService } from \"../../core/security/login.service\";\r\nimport { UserService } from \"../../core/services/user.service\";\r\nimport { User } from \"../../core/interfaces/user\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { MatDialog } from \"@angular/material/dialog\";\r\nimport { GetStarted } from \"../getStartedModal/get-started.component\";\r\nimport { FaqModalComponent } from \"../faq-modal/faq-modal.component\";\r\nimport { environment as env } from \"../../../environments/environment\";\r\nimport { Role } from \"../../core/interfaces/role\";\r\nimport { DeviceDetectorService } from \"ngx-device-detector\";\r\nimport { OrganizationDialogComponent } from \"../organizationModal/organization-dialog.component\";\r\n\r\n/**\r\n * header component\r\n */\r\n@Component({\r\n  selector: \"app-header\",\r\n  templateUrl: \"./header.component.html\",\r\n  styleUrls: [\"./header.component.scss\"],\r\n})\r\nexport class HeaderComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * Logged in user\r\n   */\r\n  user: User;\r\n  userSubscription: Subscription;\r\n\r\n  /**\r\n   * Possible roles\r\n   */\r\n  roles: Role[];\r\n  roleSubscription: Subscription;\r\n\r\n  supportedBrowser: boolean = false;\r\n\r\n  /**\r\n   * header component constructor\r\n   */\r\n  constructor(\r\n    public dialog: MatDialog,\r\n    public dialog2: MatDialog,\r\n    public dialog3: MatDialog,\r\n    public router: Router,\r\n    private auth: AuthService,\r\n    private loginService: LoginService,\r\n    private userService: UserService,\r\n    private deviceService: DeviceDetectorService\r\n  ) {}\r\n\r\n  /**\r\n   * Inits user variable at header init\r\n   */\r\n  ngOnInit(): void {\r\n    this.userSubscription = this.userService.user$.subscribe((user: User) => {\r\n      this.user = user;\r\n    });\r\n\r\n    this.roleSubscription = this.userService.roles$.subscribe(\r\n      (roles: Role[]) => {\r\n        this.roles = roles;\r\n      }\r\n    );\r\n    if (this.auth.showGetStarted()) {\r\n      this.openStepper();\r\n    }\r\n\r\n    if (\r\n      this.deviceService.browser === \"Chrome\" ||\r\n      this.deviceService.browser.toLowerCase().indexOf('edge') > -1 ||\r\n      this.deviceService.browser === \"Firefox\"\r\n    ) {\r\n      this.supportedBrowser = true;\r\n    }\r\n  }\r\n\r\n  showHome(): void {\r\n    let params: string[] = this.router.url.substr(1).split(\"/\");\r\n    console.log(params);\r\n    if (params.length >= 1 && params[0] === \"forecast\") {\r\n      return;\r\n    } else {\r\n      this.router.navigate([\"/forecast\"]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe services when component gets destroyed\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.userSubscription.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * returns user role description\r\n   */\r\n  getRole(): string | boolean {\r\n    if (this.roles.find((r: Role) => r.roleId === this.user.roleId)) {\r\n      return this.roles.find((r: Role) => r.roleId === this.user.roleId).name;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Returns whether the logged in user has admin permissions\r\n   */\r\n  isAdmin(): boolean {\r\n    if (this.auth.hasRole(env.roles.admin)) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Returns if user is logged in.\r\n   * Otherwise: false\r\n   */\r\n  isLogged(): boolean {\r\n    return this.auth.isLogged() || false;\r\n  }\r\n\r\n  /**\r\n   * Calls logout\r\n   */\r\n  logout(): void {\r\n    this.loginService.logout();\r\n  }\r\n\r\n  /**\r\n   * open Modal with showcase\r\n   */\r\n  openStepper(): void {\r\n    let dialogRef: any = this.dialog.open(GetStarted, {\r\n      height: \"auto\",\r\n      width: \"60vw\",\r\n      panelClass: \"getSartedStepper-no-padding-dialog\",\r\n      //backdropClass: 'mat-dialog-container',\r\n      data: {},\r\n    });\r\n  }\r\n\r\n  /**\r\n   * open Modal with showcase\r\n   */\r\n  openFAQ(): void {\r\n    this.dialog2.open(FaqModalComponent, {\r\n      height: \"auto\",\r\n      width: \"60vw\",\r\n      panelClass: \"getSartedStepper-no-padding-dialog\",\r\n      //backdropClass: 'mat-dialog-container',\r\n      data: {},\r\n    });\r\n  }\r\n\r\n  /**\r\n   * open Modal with enterprise structure\r\n   */\r\n  openOrganization(): void {\r\n    this.dialog3.open(OrganizationDialogComponent, {\r\n      height: \"auto\",\r\n      width: \"80vw\",\r\n      panelClass: \"getSartedStepper-no-padding-dialog\",\r\n      data: {},\r\n    });\r\n  }\r\n\r\n  /**\r\n   * send EMail to admin\r\n   */\r\n  sendMail(): void {\r\n    var mail = \"mailto:forecastrteam.at@capgemini.com\";\r\n    window.open(mail);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../assets/styles/variables.scss';\r\n\r\n.mat-toolbar .mat-icon-button {\r\n  margin: 0 3px;\r\n\r\n  &:last-child {\r\n    margin-right: 0;\r\n  }\r\n}\r\n\r\n.browser-info {\r\n  text-align: left;\r\n  background-color: map-get($bg-colors, warning);\r\n  color: map-get($font-colors,black);\r\n  font-size: 0.9rem;\r\n  padding-left: 4px;\r\n  padding-right: 4px;\r\n  padding-top: 4px;\r\n}\r\n\r\n.title {\r\n  display: flex;\r\n  cursor: pointer;\r\n  font-size: 1.2rem;\r\n  font-weight: 700;\r\n  line-height: 26px;\r\n\r\n  .logo {\r\n    height: 36px;\r\n    padding: 12px 0;\r\n    margin-right: 10px;\r\n  }\r\n\r\n  span {\r\n    padding: 12px 0;\r\n  }\r\n}\r\n\r\n.user {\r\n  font-size: 1.1rem;\r\n  color: map-get($font-colors, grey);\r\n  padding: 0 10px;\r\n}\r\n\r\n\r\n.mat-dialog-container {\r\n  padding: 0px;\r\n  background-color: rebeccapurple;\r\n}",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>header component constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog2",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog3",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "deviceService",
                        "type": "DeviceDetectorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "rawdescription": "\n\nheader component constructor\n",
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog2",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog3",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deviceService",
                        "type": "DeviceDetectorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<mat-toolbar color=\"primary\">\r\n  <mat-toolbar-row>\r\n    <span class=\"title\" routerLink=\"showHome()\" aria-label=\"Home\">\r\n      <img class=\"logo\" src=\"{{'assets/img/cap_logo_p.png'}}\">\r\n     \r\n    </span>\r\n    <span class=\"browser-info\" *ngIf=\"!supportedBrowser\"><mat-icon class=\"icon\">feedback</mat-icon>Browser information: In order to get the best results from Capgemini Forecastr, it's recommended to use Google Chrome or Microsoft Edge.</span>\r\n    <span flex></span>\r\n    <span class=\"user\">{{user.firstName}} {{user.lastName}} <ng-container *ngIf=\"getRole()\">({{getRole()}})</ng-container></span>\r\n\r\n    <button mat-icon-button *ngIf=\"isAdmin()\" routerLink=\"/admin\" title=\"Admin Dashboard\">\r\n      <mat-icon>settings</mat-icon>\r\n    </button>\r\n    <button mat-icon-button *ngIf=\"isLogged()\" (click)=\"openStepper()\" title=\"Info\">\r\n      <mat-icon>import_contacts</mat-icon>\r\n    </button>\r\n    <button mat-icon-button *ngIf=\"isLogged()\" (click)=\"openFAQ()\" title=\"FAQ\">\r\n      <mat-icon>live_help</mat-icon>\r\n    </button>\r\n    <button mat-icon-button *ngIf=\"isLogged()\" (click)=\"sendMail()\" title=\"Feedback\">\r\n        <mat-icon>chat</mat-icon>\r\n    </button>\r\n    <button mat-icon-button *ngIf=\"isLogged()\" (click)=\"openOrganization()\" title=\"Enterprise Structure\">\r\n      <mat-icon>domain</mat-icon>\r\n    </button>    \r\n    <button mat-icon-button *ngIf=\"isLogged()\" (click)=\"logout()\" title=\"Logout\">\r\n      <mat-icon>exit_to_app</mat-icon>\r\n    </button>\r\n  </mat-toolbar-row>\r\n</mat-toolbar>"
        },
        {
            "name": "HeadOfPracticesComponent",
            "id": "component-HeadOfPracticesComponent-5bf7ba530b5b37c509583d076886be47",
            "file": "src/app/forecast/pages/head-of-practices/head-of-practices.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-head-of-practices",
            "styleUrls": [
                "../../forecast.component.scss",
                "./head-of-practices.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./head-of-practices.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from \"@angular/core\";\r\nimport { Subscription } from 'rxjs';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { PageStateService } from '../../../core/shared/page-state.service';\r\nimport { environment as env } from \"../../../../environments/environment.prod\";\r\nimport { Location } from '@angular/common';\r\n\r\n@Component({\r\n    selector: \"app-head-of-practices\",\r\n    templateUrl: \"./head-of-practices.component.html\",\r\n    styleUrls: [\"../../forecast.component.scss\", \"./head-of-practices.component.scss\"],\r\n  })\r\nexport class HeadOfPracticesComponent implements OnInit, OnDestroy { \r\n\r\n    constructor(\r\n\t) {\r\n    }\r\n\r\n\tngOnInit(): void {\r\n\t}\r\n\r\n\tngOnDestroy(): void {\r\n\t}\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../assets/styles/variables.scss\";\r\n\r\n.role-header {\r\n  position: relative;\r\n  height: 37px;\r\n  margin: 20px 0px 30px 0px;\r\n\r\n  h1 {\r\n    line-height: 37px;\r\n    font-size: 1.8em;\r\n    margin: 0;\r\n  }\r\n\r\n  .mat-button-toggle-group {\r\n    background-color: map-get($font-colors, white);\r\n    font-size: 1.1em;\r\n    border-radius: 4px;\r\n  }\r\n\r\n  .mat-button-toggle {\r\n    background-color: map-get($font-colors, white);\r\n    color: map-get($font-colors, blue);\r\n    border-right: 1px solid #0070ad;\r\n    width: 120px;\r\n\r\n    .mat-icon {\r\n      color: map-get($font-colors, blue);\r\n    }\r\n\r\n    &:hover {\r\n      background-color: map-get($bg-colors, light);\r\n    }\r\n\r\n    &:last-child {\r\n      border: none;\r\n    }\r\n  }\r\n\r\n  .mat-button-toggle-checked,\r\n  .mat-button-toggle-checked .mat-icon {\r\n    background-color: map-get($font-colors, blue);\r\n    color: map-get($font-colors, white);\r\n\r\n    &:hover {\r\n      background-color: map-get($font-colors, blue);\r\n    }\r\n  }\r\n\r\n  .switch-role-toggle {\r\n    position: absolute;\r\n    right: 0px;\r\n    top: 0;\r\n    height: 34px;\r\n    line-height: 34px;\r\n    border-radius: 0;\r\n  }\r\n\r\n  .dashboard-button {\r\n    position: absolute  ;\r\n    width: 180px;\r\n    top: 0;\r\n    height: 34px;\r\n    line-height: 34px;\r\n    border-radius: 20px;\r\n    background-color: map-get($font-colors, blue);\r\n    color: map-get($font-colors, white);\r\n    box-shadow: 0px 1px 5px grey;\r\n\r\n    .mat-icon {\r\n      color: map-get($font-colors, white);\r\n    }\r\n  }\r\n\r\n  .ms-dashboard-button {\r\n    width: 180px;\r\n    top: 0;\r\n    height: 34px;\r\n    line-height: 34px;\r\n    border-radius: 20px;\r\n    background-color: map-get($font-colors, blue);\r\n    color: map-get($font-colors, white);\r\n    box-shadow: 0px 1px 5px grey;\r\n\r\n    .mat-icon {\r\n      color: map-get($font-colors, white);\r\n    }\r\n  }\r\n\r\n  .practice-dashboard {\r\n    right: 375px;\r\n  }\r\n\r\n  .pdl-dashboard {\r\n    right: 250px;\r\n  }\r\n\r\n  .power-bi-practice-dashboard {\r\n    right: 575px;\r\n  }\r\n\r\n  .practice-em-dashboard {\r\n    right: 500px;\r\n  }\r\n\r\n  .pdl-em-dashboard {\r\n    right: 375px;\r\n  }\r\n  .subco-totals-dashboard {\r\n    width: 220px;\r\n    height: 36px;\r\n    line-height: 36px;\r\n  }\r\n  .subco-totals-ms-dashboard {\r\n    left: 15px;\r\n  }\r\n  .power-bi-pdl-dashboard {\r\n    right: 450px;\r\n  }\r\n\r\n  .power-bi-ms-dashboard {\r\n    left: 30px;\r\n  }\r\n  .power-bi-mscss-dashboard {\r\n    left: 15px;\r\n  }\r\n\r\n  .sm-hop-button-toggle-group {\r\n    right: 0px;\r\n  }\r\n\r\n  .sm-hop-button-toggle {\r\n    width: 140px;\r\n  }\r\n}\r\n\r\n.progress-spinner-overlay {\r\n  display:  none;\r\n  position: fixed;\r\n  bottom: 0;\r\n  right: 0;\r\n  z-index: 10000;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: map-get($font-colors, white);\r\n  opacity: 0.5;\r\n\r\n  \r\n  &.active {\r\n\t\tdisplay: block;\r\n\t}\r\n\r\n  &.hide {\r\n\t\tdisplay: none;\r\n\t}\r\n}\r\n.progress-spinner {\r\n\ttop: 50%;\r\n\tleft: 50%;\r\n  z-index: 11000;\r\n\ttransform: translate(-50%, -50%);\r\n}\r\n\r\n.mat-sidenav-container {\r\n  min-width: 700px;\r\n  background: transparent;\r\n  margin: 0 10px;\r\n}\r\n\r\n.mat-drawer {\r\n  display: none;\r\n  background: transparent;\r\n  width: 50px;\r\n  border-right-width: 0px;\r\n}\r\n\r\n.nav-button-container {\r\n  margin: 4px 0;\r\n\r\n  .mat-icon-button {\r\n    width: 50px;\r\n    height: 50px;\r\n    margin-bottom: 10px;\r\n    padding: 0;\r\n\r\n    &.active,\r\n    &.active .mat-icon {\r\n      color: map-get($font-colors, blue);\r\n    }\r\n  }\r\n\r\n  .mat-icon {\r\n    width: 1em;\r\n    height: 1em;\r\n    line-height: 1em;\r\n    font-size: 2em;\r\n  }\r\n}\r\n",
                    "styleUrl": "../../forecast.component.scss"
                },
                {
                    "data": "@import \"../../../../assets/styles/variables.scss\";\r\n\r\n.role-header {\r\n  position: relative;\r\n  height: 37px;\r\n  margin: 0;\r\n\r\n  h1 {\r\n    line-height: 37px;\r\n    font-size: 1.8em;\r\n    margin: 0;\r\n  }\r\n\r\n  .mat-button-toggle-group {\r\n    background-color: map-get($font-colors, white);\r\n    font-size: 1.1em;\r\n    border-radius: 4px;\r\n  }\r\n\r\n  .mat-button-toggle {\r\n    background-color: map-get($font-colors, white);\r\n    color: map-get($font-colors, blue);\r\n    border-right: 1px solid #0070ad;\r\n    width: 120px;\r\n\r\n    .mat-icon {\r\n      color: map-get($font-colors, blue);\r\n    }\r\n\r\n    &:hover {\r\n      background-color: map-get($bg-colors, light);\r\n    }\r\n\r\n    &:last-child {\r\n      border: none;\r\n    }\r\n  }\r\n\r\n  .mat-button-toggle-checked,\r\n  .mat-button-toggle-checked .mat-icon {\r\n    background-color: map-get($font-colors, blue);\r\n    color: map-get($font-colors, white);\r\n\r\n    &:hover {\r\n      background-color: map-get($font-colors, blue);\r\n    }\r\n  }\r\n\r\n  .switch-role-toggle {\r\n    position: absolute;\r\n    right: 0;\r\n    top: 0;\r\n    height: 34px;\r\n    line-height: 34px;\r\n    border-radius: 0;\r\n  }\r\n}\r\n\r\n.executive-view-container {\r\n  margin-top: 30px;\r\n  padding: 0;\r\n  background: transparent;\r\n}\r\n\r\n.period-container {\r\n  width: 100%;\r\n}\r\n\r\n.period-component {\r\n  display: inline-flex;\r\n  margin: 0 5px;\r\n\r\n  &.mat-form-field {\r\n    width: 200px;\r\n  }\r\n  &.mat-raised-button {\r\n    margin-top: 4px;\r\n    bottom: 4px;\r\n  }\r\n  &:first-child {\r\n    margin-left: 0;\r\n  }\r\n}\r\n\r\n.period-download {\r\n  margin-top: 4px;\r\n  bottom: 4px;\r\n}\r\n\r\n.executive-btn {\r\n  margin-top: 4px;\r\n  right: 20px;\r\n  position: absolute;\r\n}\r\n\r\n.mat-icon {\r\n  font-size: 18px;\r\n  color: #fff !important;\r\n}\r\n\r\n.powerbi-report,\r\n.powerbi-report > div {\r\n  margin: 30px 0 10px;\r\n  border: 0;\r\n  width: 100%;\r\n  min-height: 500px;\r\n\r\n  box-shadow: 0 4px 8px 2px rgba(0, 0, 0, 0.06);\r\n}\r\n\r\n.m-16p {\r\n  margin: 16px;\r\n}\r\n\r\n.m-0 {\r\n  margin: 0;\r\n}\r\n\r\n.p-16p {\r\n  padding: 16px;\r\n}\r\n",
                    "styleUrl": "./head-of-practices.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-executive></app-executive>"
        },
        {
            "name": "IndividualComponent",
            "id": "component-IndividualComponent-a6b08e57c63ded5c6852d241c1174bd4",
            "file": "src/app/forecast/pages/individual/individual.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-individual",
            "styleUrls": [
                "./individual.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./individual.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeMonth",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>index of currently selected tab (= month)</p>\n",
                    "line": 37,
                    "rawdescription": "\n\nindex of currently selected tab (= month)\n"
                },
                {
                    "name": "months",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "monthSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>id of currently logged-in user (received from auth-service)</p>\n",
                    "line": 28,
                    "rawdescription": "\n\nid of currently logged-in user (received from auth-service)\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "forecastState",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initInvidualForecast",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnsubscribes services when component gets destroyed\n",
                    "description": "<p>Unsubscribes services when component gets destroyed</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInitializes forecast component\n",
                    "description": "<p>Initializes forecast component</p>\n"
                },
                {
                    "name": "setTabActive",
                    "args": [
                        {
                            "name": "e",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets a different tab active and sets url according to it\n",
                    "description": "<p>Sets a different tab active and sets url according to it</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4381,
                                "end": 4382,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "e"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4375,
                                "end": 4380,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>individual forecast-view component</p>\n",
            "rawdescription": "\n\nindividual forecast-view component\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, InjectionToken, Inject } from '@angular/core';\r\nimport { Location } from '@angular/common';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\nimport { UtilitiesService } from '../../../core/services/utilities.service';\r\nimport { AuthService } from '../../../core/security/auth.service';\r\n\r\nimport { Month } from '../../../core/interfaces/month';\r\nimport { Subscription } from 'rxjs';\r\nimport { PageStateService } from '../../../core/shared/page-state.service';\r\nimport { ForecastService } from '../../../core/services/forecasts/forecast.service';\r\nimport { MonthService } from '../../../core/services/admin/months.service';\r\nimport { LockedMonth } from '../../../core/interfaces/lockedMonth';\r\nimport { SavedMonth } from '../../../core/interfaces/savedMonth';\r\n\r\n/**\r\n * individual forecast-view component\r\n */\r\n@Component({\r\n\tselector: \"app-individual\",\r\n\ttemplateUrl: \"./individual.component.html\",\r\n\tstyleUrls: [\"./individual.component.scss\"]\r\n})\r\nexport class IndividualComponent implements OnInit, OnDestroy {\r\n\t/**\r\n\t * id of currently logged-in user (received from auth-service)\r\n\t */\r\n\tuserId: number;\r\n\r\n\tmonths: Month[];\r\n\r\n\tmonthSubscription: Subscription;\r\n\r\n\t/**\r\n\t * index of currently selected tab (= month)\r\n\t */\r\n\tactiveMonth: number = 0;\r\n\r\n\t/**\r\n\t * individual forecast-view component constructor\r\n\t */\r\n\tconstructor(\r\n\t\tprivate location: Location,\r\n\t\tprivate route: ActivatedRoute,\r\n\t\tprivate authService: AuthService,\r\n\t\tprivate utilitiesService: UtilitiesService,\r\n\t\tprivate pageState: PageStateService,\r\n\t\tprivate forecastService: ForecastService,\r\n\t\tprivate monthService: MonthService,\r\n\t) {\r\n\t\tthis.userId = this.authService.getUserId();\r\n\t}\r\n\r\n\t/**\r\n\t * Initializes forecast component\r\n\t */\r\n\tngOnInit(): void {\r\n\t\tthis.pageState.forecastrReady$.subscribe((ready: boolean) => {\r\n\t\t\tif (ready) {\r\n\t\t\t\tthis.initInvidualForecast();\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n  \t * Unsubscribes services when component gets destroyed\r\n \t */\r\n\tngOnDestroy(): void {\r\n\t\tthis.monthSubscription.unsubscribe();\r\n\t}\r\n\r\n\tprivate initInvidualForecast(): void {\r\n\t\tthis.monthSubscription = this.utilitiesService.months$\r\n\t\t\t.subscribe((months: Month[]) => {\r\n\t\t\t\tthis.months = months.filter((m: Month) => m.active === true);\r\n\t\t\t\tvar today = new Date();\r\n\t\t\t\tvar todayMonth = new Date(today.getFullYear(), today.getMonth(), 1);\r\n\r\n\t\t\t\t\t\t\t\tthis.months = this.months.filter((m: Month) => new Date(m.time) >= todayMonth);\r\n\t\t\t\t\r\n\t\t\t\t\t\t\t\tif(this.months.length > 7) {\r\n\t\t\t\t\t\t\t\t\tthis.months = this.months.slice(1, 7);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tlet id: number = parseInt(this.route.snapshot.paramMap.get('id'), 10);\r\n\t\t\t\tif (typeof id !== 'undefined' && id >= 0 && id < this.months.length) {\r\n\t\t\t\t\tthis.activeMonth = id;\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\tfor (let i: number = 0; i < this.months.length; i++) {\r\n\t\t\t\t\t\tif (Date.parse(this.months[i].time) > (new Date()).setMonth((new Date().getMonth() - 1))) {\r\n\t\t\t\t\t\t\tthis.activeMonth = i;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tlet shift: number = parseInt(window.getComputedStyle(document.querySelector('.mat-tab-label-container')).width) - parseInt(window.getComputedStyle(document.querySelector('.mat-tab-list')).width);\r\n\t\t\t\t\tlet pos: number = parseInt((document.querySelector('.mat-tab-label-active') as HTMLElement).getAttribute('aria-posinset'), 10);\r\n\t\t\t\t\tif (shift < ((pos ? pos : 1) - 1) * -100) {\r\n\t\t\t\t\t\tshift = ((pos ? pos : 1) - 1) * -100;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t(document.querySelector('.mat-tab-list') as HTMLElement).style.transform = 'translateX(' + shift + 'px)';\r\n\t\t\t\t}, 100);\r\n\t\t\t});\r\n\r\n\t\tthis.monthService.getLockedMonths().subscribe(\r\n\t\t\t(lockedMonths: LockedMonth[]) => {\r\n\t\t\t\tlet activeLockedMonths = lockedMonths.filter((m: LockedMonth) => this.months.find((x: Month) => x.id === m.id) !== undefined);\r\n\t\t\t\tfor (let i = 0; i < this.months.length; i++) {\r\n\t\t\t\t\tthis.months[i].locked = activeLockedMonths[i].locked;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\tthis.monthService.getSavedMonths().subscribe(\r\n\t\t\t(savedMonths: SavedMonth[]) => {\r\n\t\t\t\tlet activeSavedMonths = savedMonths.filter((m: SavedMonth) => this.months.find((x: Month) => x.id === m.id) !== undefined);\r\n\t\t\t\tfor (let i = 0; i < this.months.length; i++) {\r\n\t\t\t\t\tthis.months[i].saved = activeSavedMonths[i].locked;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a different tab active and sets url according to it\r\n\t * @param e\r\n\t */\r\n\tsetTabActive(e: number): void {\r\n\t\tthis.activeMonth = e;\r\n\t\tthis.location.replaceState('/forecast/individual/' + this.activeMonth);\r\n\t}\r\n\r\n\tforecastState(type: string, monthId: number): boolean {\r\n\t\treturn this.forecastService.checkForecastState(type, monthId, this.userId);\r\n\t}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../assets/styles/variables.scss';\r\n\r\n.forecast-container {\r\n\tmargin: 16px;\r\n}\r\n\r\n.mat-icon {\r\n\tfont-size: 16px;\r\n\tline-height: 16px;\r\n\tmargin-right: 5px;\r\n\r\n\t&:hover {\r\n\t\tcolor: map-get($font-colors, grey-light);\r\n\t}\r\n\r\n\t&.icon-edited, &.icon-edited:hover {\r\n\t\tcolor: map-get($font-colors, red);\r\n\t}\r\n}\r\n\r\n\r\n\r\n",
                    "styleUrl": "./individual.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>individual forecast-view component constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "monthService",
                        "type": "MonthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "rawdescription": "\n\nindividual forecast-view component constructor\n",
                "jsdoctags": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "monthService",
                        "type": "MonthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<mat-tab-group [selectedIndex]=\"activeMonth\" (selectedIndexChange)=\"setTabActive($event)\" scrollDirection=\"after\" animationDuration=\"1000ms\">\r\n\t<mat-tab *ngFor=\"let month of months\" id=\"{{month.id}}\">\r\n\t\t<ng-template mat-tab-label>\r\n\t\t\t<mat-icon *ngIf=\"forecastState('edited', month.id)\" class=\"icon-edited\">radio_button_checked</mat-icon>\r\n\t\t\t<mat-icon *ngIf=\"month.locked || forecastState('locked', month.id)\" class=\"icon-locked\">lock</mat-icon>\r\n\t\t\t<mat-icon *ngIf=\"month.saved || forecastState('saved', month.id)\">save</mat-icon>\r\n\t\t\t{{month.name}}\r\n\t\t</ng-template>\r\n\t\t<ng-template matTabContent> <!-- matTabContent template for lazyloading-->\r\n\t\t\t<div layout=\"row\" layout-wrap>\r\n\t\t\t\t<div flex=\"100\" flex-gt-md=\"75\">\r\n\t\t\t\t\t<div class=\"forecast-container\">\r\n\t\t\t\t\t\t<app-fc-entry class=\"tab-container\" [singleView]=\"true\" [userId]=\"userId\" [month]=\"month\"></app-fc-entry>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div flex=\"100\" flex-gt-md=\"25\" class=\"summary-box-container\">\r\n\t\t\t\t\t<app-fc-entry-summary [userId]=\"userId\" [month]=\"month\"></app-fc-entry-summary>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</ng-template>\r\n\t</mat-tab>\r\n</mat-tab-group>"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-46caa457eb80b58a0cc08d16a1373f06",
            "file": "src/app/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "emailInvalidError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Contains error message if an error happened at the reset password</p>\n",
                    "line": 30,
                    "rawdescription": "\n\nContains error message if an error happened at the reset password\n"
                },
                {
                    "name": "formSubmitError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Contains error message if an error happened at the login</p>\n",
                    "line": 25,
                    "rawdescription": "\n\nContains error message if an error happened at the login\n"
                },
                {
                    "name": "isEmailFieldEmpty",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "loginActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>true while login process is active</p>\n",
                    "line": 36,
                    "rawdescription": "\n\ntrue while login process is active\n"
                },
                {
                    "name": "loginEmail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AbstractControl",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "loginFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "<p>Login form in order to differentiate among form elements for input validation</p>\n",
                    "line": 41,
                    "rawdescription": "\n\nLogin form in order to differentiate among form elements for input validation\n"
                },
                {
                    "name": "loginPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AbstractControl",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "methodsClass": [
                {
                    "name": "initializeLoginForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInitialization of login form for ngOnInit\n",
                    "description": "<p>Initialization of login form for ngOnInit</p>\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalls the login method\nIf login successful: redirects to home-page\nOtherwise: Shows error\n",
                    "description": "<p>Calls the login method\nIf login successful: redirects to home-page\nOtherwise: Shows error</p>\n",
                    "jsdoctags": []
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "routeToHomePage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRoutes to home page (depending on user role)\n",
                    "description": "<p>Routes to home page (depending on user role)</p>\n",
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Handles login page + initiates login process</p>\n",
            "rawdescription": "\n\nHandles login page + initiates login process\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { AuthService } from '../core/security/auth.service';\r\nimport { LoginService } from '../core/security/login.service';\r\nimport { ifError } from 'assert';\r\nimport { environment as env, environment } from '../../environments/environment';\r\nimport { FormGroup, FormBuilder, Validators, AbstractControl } from '@angular/forms';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { ConfirmMessageDialog } from '../forecast/dialogs/confirm-message/confirm-message.dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ResetPasswordService } from '../core/security/resetPassword.service';\r\n\r\n/**\r\n * Handles login page + initiates login process\r\n */\r\n@Component({\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss'],\r\n})\r\nexport class LoginComponent {\r\n  /**\r\n   * Contains error message if an error happened at the login\r\n   */\r\n  formSubmitError: string;\r\n\r\n  /**\r\n   * Contains error message if an error happened at the reset password\r\n   */\r\n  emailInvalidError: string;\r\n  isEmailFieldEmpty: boolean;\r\n\r\n  /**\r\n   * true while login process is active\r\n   */\r\n  loginActive: boolean = false;\r\n\r\n  /**\r\n   * Login form in order to differentiate among form elements for input validation\r\n   */\r\n  loginFormGroup: FormGroup;\r\n  loginEmail: AbstractControl;\r\n  loginPassword: AbstractControl;\r\n\r\n  /**\r\n   * login component constructor\r\n   * Routes to home page if user is already logged-in\r\n   */\r\n  constructor(\r\n    private loginService: LoginService,\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private fb: FormBuilder,\r\n    private dialog: MatDialog,\r\n    private snackBar: MatSnackBar,\r\n    private resetPasswordService: ResetPasswordService\r\n  ) {\r\n    if (this.authService.isLogged()) {\r\n      this.routeToHomePage();\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.initializeLoginForm();\r\n  }\r\n\r\n\r\n  /**\r\n   * Calls the login method\r\n   * If login successful: redirects to home-page\r\n   * Otherwise: Shows error\r\n   * @param login\r\n   */\r\n  login(): void {\r\n    this.formSubmitError = undefined;\r\n    this.loginActive = true;\r\n    this.isEmailFieldEmpty = false;\r\n\r\n    this.loginService\r\n      .login(this.loginEmail.value, this.loginPassword.value)\r\n      .subscribe(\r\n        (res: any) => {\r\n          const response: any = this.authService.useToken(res.headers.get('Authorization'));\r\n\r\n          if (typeof res.body.showGetStarted !== 'undefined') {\r\n            this.authService.setGetStarted(res.body.showGetStarted);\r\n          }\r\n\r\n          if (response) {\r\n            this.routeToHomePage();\r\n          } else {\r\n            this.formSubmitError = 'Invalid user token.';\r\n          }\r\n\r\n          this.loginActive = false;\r\n        },\r\n        (e: any) => {\r\n          console.log(\"Error message is: \"+ e.status);\r\n          this.authService.setLogged(false);\r\n          if(e.status == \"401\") {\r\n            this.formSubmitError = e.error;\r\n          } else if(e.status == \"404\") {\r\n            this.formSubmitError = e.error;\r\n          } else if(e.status == \"409\") {\r\n            this.formSubmitError = e.error;\r\n          } else {\r\n            this.formSubmitError = 'Problem occured with login process. Please try again later.';\r\n          }\r\n          this.loginActive = false;\r\n        },\r\n      );\r\n  }\r\n\r\n  resetPassword(): void {\r\n    this.isEmailFieldEmpty = this.loginEmail.invalid;\r\n    this.formSubmitError = undefined;\r\n\r\n    if(this.isEmailFieldEmpty) {\r\n      this.emailInvalidError =  \"Please enter your e-mail address.\";\r\n    }\r\n    else {\r\n      this.isEmailFieldEmpty = false;\r\n      let dialogRef: MatDialogRef<ConfirmMessageDialog> = this.dialog.open(ConfirmMessageDialog, {\r\n        data: {\r\n          message: \"Are you sure you want to reset your password for the following e-mail address: \"+ this.loginEmail.value +\"?\",\r\n          button: { cancel: 'Cancel', submit: 'Reset' },\r\n        },\r\n      });\r\n  \r\n      dialogRef.afterClosed().subscribe((remove: boolean) => {\r\n        this.loginActive = true;\r\n        if (remove === true) {\r\n          this.resetPasswordService.resetPassword(this.loginEmail.value).subscribe(\r\n            (response: any) => {\r\n              this.loginActive = false;\r\n              this.snackBar.open(\"A reset link has been sent to \"+ this.loginEmail.value +\". Please check your e-mail inbox.\", \"\",{duration: 5000,});\r\n            },\r\n            (error: any) => {\r\n              this.loginActive = false;\r\n              this.snackBar.open(\"Problem occured while resetting your password. Please check if you typed your e-mail address correctly.\", \"\",{duration: 5000,});\r\n            }\r\n          );\r\n        }\r\n        else {\r\n          this.loginActive = false;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialization of login form for ngOnInit\r\n   */\r\n  private initializeLoginForm() {\r\n    this.loginFormGroup = this.fb.group({\r\n      loginEmail: ['', Validators.required],\r\n      loginPassword: ['', Validators.required],\r\n    });\r\n\r\n    this.loginEmail = this.loginFormGroup.controls['loginEmail'];\r\n    this.loginPassword = this.loginFormGroup.controls['loginPassword'];\r\n  }\r\n\r\n  /**\r\n   * Routes to home page (depending on user role)\r\n   */\r\n  private routeToHomePage(): void {\r\n    if (this.authService.hasRole(env.roles.css)) {\r\n      this.router.navigate(['/forecast']);\r\n    } else if (this.authService.hasRole(env.roles.admin)) {\r\n      this.router.navigate(['/' + env.routes.admin]);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../assets/styles/variables.scss';\r\n\r\n.login-container {\r\n  display: flex;\r\n  height: 100%;\r\n  background: url(../../assets/img/capgemini-shape.png);\r\n  background-size: contain;\r\n  background-repeat: no-repeat;\r\n  background-position: right bottom;\r\n \r\n  > div {\r\n    margin: auto;\r\n  }\r\n}\r\n\r\n.mat-card {\r\n  width: 320px;\r\n  padding: 20px;\r\n  box-shadow: 0 4px 8px 2px rgba(0,0,0,.06) !important;\r\n  background-color: rgba(255,255,255,0.9);\r\n  \r\n  .mat-card-title {\r\n    display: flex;\r\n    height: 36px;\r\n    line-height: 36px;\r\n    margin: 5px 0;\r\n    padding: 0;\r\n\r\n    div {\r\n      display: inline-block;\r\n      height: inherit;\r\n      font-size: 1.25rem;\r\n      font-weight: 700;\r\n      color: map-get($font-colors, blue);\r\n    }\r\n\r\n    .logo {\r\n      height: inherit;\r\n      margin-right: 10px;\r\n    }\r\n  }\r\n\r\n  .mat-card-content {\r\n    padding: 0;\r\n\r\n    form {\r\n      padding: 0;\r\n    }\r\n\r\n    .mat-form-field {\r\n      line-height: 1;\r\n      \r\n    }\r\n\r\n    .login-button {\r\n      margin-bottom: 12px;\r\n    }\r\n\r\n    .reset-link {\r\n      font-size: 0.85rem;\r\n      color: map-get($font-colors, blue);\r\n      text-align: center;\r\n      \r\n      &:hover {\r\n        cursor: pointer;\r\n        text-decoration: underline;\r\n      }\r\n    }    \r\n    \r\n  }\r\n}\r\n\r\n\r\n\r\n.spinner-container {\r\n  display: none;\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  margin: -50px 0 0 -50px;\r\n\r\n  &.active {\r\n    display: block;\r\n  }\r\n}",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>login component constructor\nRoutes to home page if user is already logged-in</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "resetPasswordService",
                        "type": "ResetPasswordService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "rawdescription": "\n\nlogin component constructor\nRoutes to home page if user is already logged-in\n",
                "jsdoctags": [
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "resetPasswordService",
                        "type": "ResetPasswordService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "\r\n<div class=\"login-container\">\r\n  <div layout=\"row\" layout-align=\"center\">\r\n    \r\n    <mat-card>\r\n      <mat-card-title>\r\n        <div>\r\n          <img class=\"logo\" src=\"{{'assets/img/cap_logo_p.png'}}\">\r\n        </div>\r\n       \r\n      </mat-card-title>\r\n\r\n      <mat-card-content>\r\n        <form layout=\"column\" class=\"pad\" (ngSubmit)=\"login()\" #loginForm=\"ngForm\" [formGroup]=\"loginFormGroup\">\r\n          <mat-error *ngIf=\"formSubmitError\">{{formSubmitError}}</mat-error>\r\n          <mat-error *ngIf=\"isEmailFieldEmpty\">{{emailInvalidError}}</mat-error>\r\n          <br>\r\n          <mat-form-field flex>\r\n            <mat-label>E-mail</mat-label>\r\n            <input matInput type=\"text\" placeholder=\"Email\" [formControl]=\"loginEmail\" name=\"email\" required>\r\n          </mat-form-field>\r\n          \r\n          <mat-form-field flex>\r\n            <mat-label>Password</mat-label>\r\n            <input matInput type=\"password\" placeholder=\"Password\" [formControl]=\"loginPassword\" name=\"password\" required>\r\n          </mat-form-field>\r\n\r\n          <button class=\"login-button\" mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"!loginFormGroup.valid || loginActive\">Login</button>\r\n          <a class=\"reset-link\" (click)=\"resetPassword()\">Forgot your password?</a>\r\n        </form>\r\n        \r\n        <div class=\"spinner-container\" [ngClass]=\"{'active': loginActive}\">\r\n          <mat-progress-spinner\r\n            class=\"progress-spinner\" color=\"primary\" mode=\"indeterminate\">\r\n          </mat-progress-spinner>\r\n        </div>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n</div>"
        },
        {
            "name": "MonthsComponent",
            "id": "component-MonthsComponent-2859651d5520c58ea0cd6fca2a161b8d",
            "file": "src/app/admin/components/months/months.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-admin-months",
            "styleUrls": [
                "../../admin.component.scss",
                "./months.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./months.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "months",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTableDataSource<Month>",
                    "optional": false,
                    "description": "<p>available months</p>\n",
                    "line": 28,
                    "rawdescription": "\n\navailable months\n"
                },
                {
                    "name": "monthsSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>month subscription from utilities Service</p>\n",
                    "line": 33,
                    "rawdescription": "\n\nmonth subscription from utilities Service\n"
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSort",
                    "optional": false,
                    "description": "<p>Sort variable for angular material table sort method</p>\n",
                    "line": 23,
                    "rawdescription": "\n\nSort variable for angular material table sort method\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSort, {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addMonth",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalls add month dialog\n",
                    "description": "<p>Calls add month dialog</p>\n"
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nunsubscribes month subscription\n",
                    "description": "<p>unsubscribes month subscription</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ninits months variable\n",
                    "description": "<p>inits months variable</p>\n"
                },
                {
                    "name": "setMonthActiveState",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "active",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalled to set month active state\n",
                    "description": "<p>Called to set month active state</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2095,
                                "end": 2097,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2089,
                                "end": 2094,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2111,
                                "end": 2117,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "active"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2105,
                                "end": 2110,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "showEditDialog",
                    "args": [
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpens dialog window to add/edit month\n",
                    "description": "<p>Opens dialog window to add/edit month</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2312,
                                "end": 2317,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "month"
                            },
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2306,
                                "end": 2311,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "updateMonth",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalls edit month dialog\n",
                    "description": "<p>Calls edit month dialog</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1908,
                                "end": 1910,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1902,
                                "end": 1907,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>admin months table component</p>\n",
            "rawdescription": "\n\nadmin months table component\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\n\r\nimport { Subscription } from 'rxjs';\r\nimport { MonthService } from '../../../core/services/admin/months.service';\r\nimport { Month } from '../../../core/interfaces/month';\r\nimport { AddMonthDialog } from '../../dialogs/add-month/add-month.dialog';\r\n\r\n/**\r\n * admin months table component\r\n */\r\n@Component({\r\n  selector: 'app-admin-months',\r\n  templateUrl: './months.component.html',\r\n  styleUrls: ['../../admin.component.scss', './months.component.scss'],\r\n})\r\nexport class MonthsComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * Sort variable for angular material table sort method\r\n   */\r\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\r\n\r\n  /**\r\n   * available months\r\n   */\r\n  months: MatTableDataSource<Month>;\r\n\r\n  /**\r\n   * month subscription from utilities Service\r\n   */\r\n  monthsSubscription: Subscription;\r\n\r\n  /**\r\n   * constructor for utilities Service (needed for months request)\r\n   * @param dialog\r\n   * @param monthService\r\n   */\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private monthService: MonthService,\r\n  ) {}\r\n\r\n  /**\r\n   * inits months variable\r\n   */\r\n\tngOnInit(): void {\r\n    this.monthService.initializeMonths();\r\n\r\n    this.monthsSubscription = this.monthService.months$\r\n      .subscribe((months: Month[]) => {\r\n        this.months = new MatTableDataSource(months);\r\n        this.months.sort = this.sort;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * unsubscribes month subscription\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.monthsSubscription.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * Calls add month dialog\r\n   */\r\n  addMonth(): void {\r\n    this.showEditDialog(new Month());\r\n  }\r\n\r\n  /**\r\n   * Calls edit month dialog\r\n   * @param id\r\n   */\r\n  updateMonth(id: number): void {\r\n    this.showEditDialog(this.months.data.find((m: Month) => m.id === id));\r\n  }\r\n\r\n  /**\r\n   * Called to set month active state\r\n   * @param id\r\n   * @param active\r\n   */\r\n  setMonthActiveState(id: number, active: boolean): void {\r\n    this.monthService.setMonthActiveState(id, active);\r\n  }\r\n\r\n  /**\r\n   * Opens dialog window to add/edit month\r\n   * @param month\r\n   */\r\n  showEditDialog(month: Month): void {\r\n    let dialogRef: any = this.dialog.open(AddMonthDialog, {\r\n      data: {\r\n        month: month,\r\n      },\r\n    });\r\n    dialogRef.afterClosed().subscribe((m: Month | boolean) => {\r\n      if (m) {\r\n        this.monthService.setMonth(<Month>m);\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../assets/styles/variables.scss';\r\n\r\n.mat-sidenav-container{\r\n\tbackground: transparent;\r\n\tmargin: 0 10px;\r\n}\r\n\r\n.mat-drawer {\r\n\tdisplay: none;\r\n\tbackground: transparent;\r\n\twidth: 50px;\r\n\tborder-right-width: 0px;\r\n}\r\n\r\n.nav-button-container {\r\n\tmargin: 4px 0;\r\n\r\n\t.mat-icon-button {\r\n\t\twidth: 50px;\r\n\t\theight: 50px;\r\n\t\tmargin-bottom: 10px;\r\n\t\tpadding: 0;\r\n\r\n\t\t&.active, &.active .mat-icon {\r\n\t\t\tcolor: map-get($font-colors, blue);\r\n\t\t}\r\n\t}\r\n\r\n\t.mat-icon {\r\n\t\twidth: 1em;\r\n\t\theight: 1em;\r\n\t\tline-height: 1rem;\r\n\t\tfont-size: 2rem;\r\n\t}\r\n}\r\n\r\n\r\ntd.mat-cell:first-of-type, td.mat-footer-cell:first-of-type, th.mat-header-cell:first-of-type {\r\n\tpadding-left: 0;\r\n}\r\n\r\ntd.mat-cell:last-of-type, td.mat-footer-cell:last-of-type, th.mat-header-cell:last-of-type {\r\n\tpadding-right: 0;\r\n}\r\n\r\n.action-button {\r\n\twidth: 50px;\r\n\ttext-align: center;\r\n}\r\n\r\n.flag-button {\r\n\twidth: 70px;\r\n\ttext-align: center;\r\n}\r\n\r\n.button-row {\r\n\tmargin: 50px;\r\n\r\n\t.mat-raised-button {\r\n\t\tposition: fixed;\r\n\t\tz-index: 100;\r\n\t\tbottom: 32px;\r\n\t\tright: 30px;\r\n\t\tbox-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\r\n\t}\r\n}\r\n\r\n.mat-form-field {\r\n\tmargin: 5px 0;\r\n}\r\n\r\ntr.mat-row.inactive td {\r\n\tcolor: map-get($font-colors, grey-label);\r\n\r\n\t.flag-inactive {\r\n\t\tbackground: map-get($font-colors, red);\r\n\t\tcolor: map-get($font-colors, white);\r\n\t\tpadding: 3px 6px;\r\n\t\tborder-radius: 4px;\r\n\t}\r\n}\r\n\r\n.mat-table tr.mat-row:last-child td {\r\n\tborder-bottom: 0;\r\n}",
                    "styleUrl": "../../admin.component.scss"
                },
                {
                    "data": "",
                    "styleUrl": "./months.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor for utilities Service (needed for months request)</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "monthService",
                        "type": "MonthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "rawdescription": "\n\nconstructor for utilities Service (needed for months request)\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1162,
                            "end": 1168,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialog"
                        },
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1156,
                            "end": 1161,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1182,
                            "end": 1194,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "monthService"
                        },
                        "type": "MonthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1176,
                            "end": 1181,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<table mat-table matSort [dataSource]=\"months\">\r\n\r\n\t<ng-container matColumnDef=\"active\">\r\n\t\t<th mat-header-cell mat-sort-header *matHeaderCellDef></th>\r\n\t\t<td mat-cell *matCellDef=\"let month\" class=\"flag-button\">\r\n\t\t\t<mat-slide-toggle color=\"primary\" [checked]=\"month.active\" [(ngModel)]=\"month.active\" (change)=\"setMonthActiveState(month.id, month.active)\"></mat-slide-toggle>\r\n\t\t</td>\r\n\t</ng-container>\r\n\r\n\t<ng-container matColumnDef=\"name\">\r\n\t\t<th mat-header-cell mat-sort-header *matHeaderCellDef>Name</th>\r\n\t\t<td mat-cell *matCellDef=\"let month\">{{ month.name }}</td>\r\n\t</ng-container>\r\n\r\n\t<ng-container matColumnDef=\"workingdays\">\r\n\t\t<th mat-header-cell *matHeaderCellDef>Working Days</th>\r\n\t\t<td mat-cell *matCellDef=\"let month\">{{ month.workingdays }}</td>\r\n\t</ng-container>\r\n\r\n\t<ng-container matColumnDef=\"time\">\r\n\t\t<th mat-header-cell mat-sort-header *matHeaderCellDef>Month</th>\r\n\t\t<td mat-cell *matCellDef=\"let month\">{{ month.time | date: 'MMMM yyyy' }}</td>\r\n\t</ng-container>\r\n\r\n\t<ng-container matColumnDef=\"edit\">\r\n\t\t<th mat-header-cell *matHeaderCellDef class=\"action-button\"></th>\r\n\t\t<td mat-cell *matCellDef=\"let month\" class=\"action-button\"><mat-icon *ngIf=\"month.active\" (click)=\"updateMonth(month.id)\">edit</mat-icon></td>\r\n\t</ng-container>\r\n\t\r\n\t<tr mat-header-row *matHeaderRowDef=\"['active', 'name', 'workingdays', 'time', 'edit']\"></tr>\r\n\t<tr mat-row *matRowDef=\"let row; columns: ['active', 'name', 'workingdays', 'time', 'edit'];\" [ngClass]=\"{'inactive': (!row.active)}\"></tr>\r\n</table>\r\n\r\n<div class=\"button-row\">\r\n\t<button mat-raised-button color=\"primary\" (click)=\"addMonth()\">\r\n\t\t<mat-icon>playlist_add</mat-icon> Add Month\r\n\t</button>\r\n</div>"
        },
        {
            "name": "OrganizationDialogComponent",
            "id": "component-OrganizationDialogComponent-745a78a1b7eacd41bdf10424190ceaf3",
            "file": "src/app/layout/organizationModal/organization-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./organization-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./organization-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_transformer",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "dataSource",
                    "defaultValue": "new MatTreeFlatDataSource(this.treeControl, this.treeFlattener)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "hasChild",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "treeControl",
                    "defaultValue": "new FlatTreeControl<ExampleFlatNode>(\r\n    (node) => node.level,\r\n    (node) => node.expandable\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "treeFlattener",
                    "defaultValue": "new MatTreeFlattener(\r\n    this._transformer,\r\n    (node) => node.level,\r\n    (node) => node.expandable,\r\n    (node) => node.children\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ninit method\n",
                    "description": "<p>init method</p>\n"
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Inject } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { MatDialogRef, MatDialog, MAT_DIALOG_DATA } from \"@angular/material/dialog\";\r\nimport { FlatTreeControl } from \"@angular/cdk/tree\";\r\nimport {\r\n  MatTreeFlatDataSource,\r\n  MatTreeFlattener,\r\n} from \"@angular/material/tree\";\r\nimport { ExecutiveForecastsService } from \"../../core/services/forecasts/executive-forecasts.service\";\r\nimport { BusinessOperationsService } from \"../../core/shared/business-operations.service\";\r\nimport { HierarchyNode } from \"../../core/interfaces/hierarchyNode\";\r\n\r\n/**\r\n * Food data with nested structure.\r\n * Each node has a name and an optional list of children.\r\n */\r\ninterface FoodNode {\r\n  name: string;\r\n  children?: FoodNode[];\r\n}\r\n\r\nconst TREE_DATA: HierarchyNode[] = [];\r\n\r\n/** Flat node with expandable and level information */\r\ninterface ExampleFlatNode {\r\n  expandable: boolean;\r\n  name: string;\r\n  level: number;\r\n}\r\n\r\n@Component({\r\n  templateUrl: \"./organization-dialog.component.html\",\r\n  styleUrls: [\"./organization-dialog.component.scss\"],\r\n})\r\nexport class OrganizationDialogComponent {\r\n  // tslint:disable: member-ordering\r\n  // tslint:disable: typedef\r\n  private _transformer = (node: HierarchyNode, level: number) => {\r\n    return {\r\n      expandable: !!node.children && node.children.length > 0,\r\n      name:\r\n        \"Name: \" +\r\n        node.firstName +\r\n        \"  \" +\r\n        node.lastName +\r\n        \" |  Role: \" +\r\n        node.role +\r\n        \"  | Grade: \" +\r\n        node.grade,\r\n      level: level,\r\n    };\r\n  };\r\n\r\n  treeControl = new FlatTreeControl<ExampleFlatNode>(\r\n    (node) => node.level,\r\n    (node) => node.expandable\r\n  );\r\n\r\n  treeFlattener = new MatTreeFlattener(\r\n    this._transformer,\r\n    (node) => node.level,\r\n    (node) => node.expandable,\r\n    (node) => node.children\r\n  );\r\n\r\n  dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private data: any,\r\n    private http: HttpClient,\r\n    private dialogRef: MatDialogRef<OrganizationDialogComponent>,\r\n    private BO: BusinessOperationsService,\r\n    private executiveForecastsService: ExecutiveForecastsService\r\n  ) {\r\n    this.dataSource.data = TREE_DATA;\r\n  }\r\n\r\n  /**\r\n   * init method\r\n   */\r\n  // tslint:disable: use-life-cycle-interface\r\n  ngOnInit(): void {\r\n    console.log(\"component initialized\");\r\n    this.http\r\n      .get(this.BO.companyHierarchy())\r\n      .subscribe((hierarchy: HierarchyNode) => {\r\n        console.log(hierarchy);\r\n        this.dataSource.data = [hierarchy];\r\n      });\r\n  }\r\n\r\n  hasChild = (_: number, node: ExampleFlatNode) => node.expandable;\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".fix {\r\n  display: flex;\r\n  color: #ffffff;\r\n  background-color: #0070ad;\r\n  height: 50px;\r\n  padding: 0px;\r\n  padding-left: 24px;\r\n  padding-right: 24px;\r\n  line-height: 3.3;\r\n}\r\n\r\n.fix .title {\r\n  color: #fff;\r\n  padding-left: 14px;\r\n}\r\n\r\n.example-fill-remaining-space {\r\n  /* This fills the remaining space, by using flexbox. \r\n       Every toolbar row uses a flexbox row layout. */\r\n  flex: 1 1 auto;\r\n}\r\n\r\n.white {\r\n  color: #ffffff;\r\n}\r\n\r\n.m-0 {\r\n  margin: 0 !important;\r\n}\r\n.p-0 {\r\n  padding: 0 !important;\r\n}\r\n",
                    "styleUrl": "./organization-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<OrganizationDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "executiveForecastsService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 66,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<OrganizationDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "executiveForecastsService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div\r\n  mat-dialog-title\r\n  class=\"fix m-0\"\r\n  layout=\"row\"\r\n  layout-align=\"space-between center\"\r\n>\r\n  <span>Enterprise Structure</span>\r\n\r\n  <!-- This fills the remaining space of the current row -->\r\n  <span class=\"example-fill-remaining-space\"></span>\r\n\r\n  <button mat-icon-button (click)=\"onNoClick()\">\r\n    <mat-icon class=\"white\">close</mat-icon>\r\n  </button>\r\n</div>\r\n<mat-dialog-content class=\"p-0 m-0 w-100\">\r\n  <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\r\n    <!-- This is the tree node template for leaf nodes -->\r\n    <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding>\r\n      <!-- use a disabled button to provide padding for tree leaf -->\r\n      <button mat-icon-button disabled></button>\r\n      {{ node.name }}\r\n    </mat-tree-node>\r\n    <!-- This is the tree node template for expandable nodes -->\r\n    <mat-tree-node\r\n      *matTreeNodeDef=\"let node; when: hasChild\"\r\n      matTreeNodePadding\r\n    >\r\n      <button\r\n        mat-icon-button\r\n        matTreeNodeToggle\r\n        [attr.aria-label]=\"'toggle ' + node.name\"\r\n      >\r\n        <mat-icon class=\"mat-icon-rtl-mirror\">\r\n          {{ treeControl.isExpanded(node) ? \"expand_more\" : \"chevron_right\" }}\r\n        </mat-icon>\r\n      </button>\r\n      {{ node.name }}\r\n    </mat-tree-node>\r\n  </mat-tree>\r\n</mat-dialog-content>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-458a0bd074cddd3932cfcb5b086aeb0d",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-page',\r\n  template: `<article>\r\n    <storybook-header\r\n      [user]=\"user\"\r\n      (onLogout)=\"onLogout.emit($event)\"\r\n      (onLogin)=\"onLogin.emit($event)\"\r\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\r\n    ></storybook-header>\r\n    <section>\r\n      <h2>Pages in Storybook</h2>\r\n      <p>\r\n        We recommend building UIs with a\r\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <strong>component-driven</strong>\r\n        </a>\r\n        process starting with atomic components and ending with pages.\r\n      </p>\r\n      <p>\r\n        Render pages with mock data. This makes it easy to build and review page states without\r\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\r\n        in Storybook:\r\n      </p>\r\n      <ul>\r\n        <li>\r\n          Use a higher-level connected component. Storybook helps you compose such data from the\r\n          \"args\" of child component stories\r\n        </li>\r\n        <li>\r\n          Assemble data in the page component from your services. You can mock these services out\r\n          using Storybook.\r\n        </li>\r\n      </ul>\r\n      <p>\r\n        Get a guided tutorial on component-driven development at\r\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          Storybook tutorials\r\n        </a>\r\n        . Read more in the\r\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\r\n        .\r\n      </p>\r\n      <div class=\"tip-wrapper\">\r\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\r\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\r\n              id=\"a\"\r\n              fill=\"#999\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        Viewports addon in the toolbar\r\n      </div>\r\n    </section>\r\n  </article>`,\r\n  styleUrls: ['./page.css'],\r\n})\r\nexport default class PageComponent {\r\n  @Input()\r\n  user: unknown = null;\r\n\r\n  @Output()\r\n  onLogin = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onLogout = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onCreateAccount = new EventEmitter<Event>();\r\n}\r\n\r\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\r\n//   <article>\r\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\r\n\r\n// );\r\n// Page.propTypes = {\r\n//   user: PropTypes.shape({}),\r\n//   onLogin: PropTypes.func.isRequired,\r\n//   onLogout: PropTypes.func.isRequired,\r\n//   onCreateAccount: PropTypes.func.isRequired,\r\n// };\r\n\r\n// Page.defaultProps = {\r\n//   user: null,\r\n// };\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n  padding: 48px 20px;\r\n  margin: 0 auto;\r\n  max-width: 600px;\r\n  color: #333;\r\n}\r\n\r\nh2 {\r\n  font-weight: 900;\r\n  font-size: 32px;\r\n  line-height: 1;\r\n  margin: 0 0 4px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\np {\r\n  margin: 1em 0;\r\n}\r\n\r\na {\r\n  text-decoration: none;\r\n  color: #1ea7fd;\r\n}\r\n\r\nul {\r\n  padding-left: 30px;\r\n  margin: 1em 0;\r\n}\r\n\r\nli {\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.tip {\r\n  display: inline-block;\r\n  border-radius: 1em;\r\n  font-size: 11px;\r\n  line-height: 12px;\r\n  font-weight: 700;\r\n  background: #e7fdd8;\r\n  color: #66bf3c;\r\n  padding: 4px 12px;\r\n  margin-right: 10px;\r\n  vertical-align: top;\r\n}\r\n\r\n.tip-wrapper {\r\n  font-size: 13px;\r\n  line-height: 20px;\r\n  margin-top: 40px;\r\n  margin-bottom: 40px;\r\n}\r\n\r\n.tip-wrapper svg {\r\n  display: inline-block;\r\n  height: 12px;\r\n  width: 12px;\r\n  margin-right: 4px;\r\n  vertical-align: top;\r\n  margin-top: 3px;\r\n}\r\n\r\n.tip-wrapper svg path {\r\n  fill: #1ea7fd;\r\n}\r\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PowerBi",
            "id": "component-PowerBi-4acb22abba8b63d313172dd4e0528b02",
            "file": "src/app/forecast/components/power-bi/power-bi.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-power-bi",
            "styleUrls": [
                "./power-bi.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./power-bi.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "app",
                    "defaultValue": "'KPI'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: \"app-power-bi\",\r\n    templateUrl: \"./power-bi.component.html\",\r\n    styleUrls: [\"./power-bi.component.scss\"],\r\n  })\r\n  export class PowerBi implements OnInit {\r\n\r\n    app: string = 'KPI';\r\n\r\n    ngOnInit(): void {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n      \r\n  }",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".menu-button {\r\n    width: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: flex-start;\r\n    font-size: 1rem;\r\n\r\n    mat-icon {\r\n        margin-right: 8px;\r\n    }\r\n}\r\n\r\nmat-sidenav {\r\n    margin: 16px;\r\n    width: 200px;\r\n    border-right: none;\r\n    background: #002b5c;\r\n    color: white;\r\n    border-radius: 10px;\r\n    padding: 16px;\r\n    text-align: center;\r\n}\r\n\r\n.content {\r\n    // height: calc(100vh - 72px);\r\n    border-radius: 10px;\r\n    // margin: 16px;\r\n    // margin-left: 32px;\r\n\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n\r\n    font-size: 2rem;\r\n    color: lightgray;\r\n}\r\n\r\nmat-sidenav-container {\r\n    height: calc(100vh - 65px);\r\n}",
                    "styleUrl": "./power-bi.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- <mat-sidenav-container height=\"1024px\">\r\n    <mat-sidenav mode=\"side\" opened class=\"mat-elevation-z8\">\r\n        <mat-button-toggle (click)=\"app = 'KPI'\" class=\"menu-button\">\r\n            <mat-icon>info</mat-icon> Forecastr KPI\r\n        </mat-button-toggle>\r\n        <mat-button-toggle (click)=\"app = 'C2C'\" class=\"menu-button\">\r\n            <mat-icon>info</mat-icon> C2C\r\n        </mat-button-toggle>\r\n    </mat-sidenav>\r\n    <mat-sidenav-content> -->\r\n        <div class=\"content\">\r\n            <iframe *ngIf=\"app === 'KPI'\" width=\"960px\" height=\"568px\" \r\n                src=\"https://app.powerbi.com/reportEmbed?reportId=32ba9d1f-cad1-49df-966b-0091063a11c3&autoAuth=true&ctid=76a2ae5a-9f00-4f6b-95ed-5d33d77c4d61&config=eyJjbHVzdGVyVXJsIjoiaHR0cHM6Ly93YWJpLW5vcnRoLWV1cm9wZS1jLXByaW1hcnktcmVkaXJlY3QuYW5hbHlzaXMud2luZG93cy5uZXQvIn0%3D\" \r\n                frameborder=\"0\" allowFullScreen=\"true\" pageView=\"fitToPage\"></iframe>\r\n            <!-- <iframe *ngIf=\"app === 'C2C'\" width=\"100%\" height=\"100%\" \r\n                src=\"https://app.powerbi.com/reportEmbed?reportId=a4602f40-4e8f-4650-aa44-85cbad58166e&appId=8136c5da-e19d-4976-9e9b-f2f31f43b943&autoAuth=true&ctid=76a2ae5a-9f00-4f6b-95ed-5d33d77c4d61&config=eyJjbHVzdGVyVXJsIjoiaHR0cHM6Ly93YWJpLW5vcnRoLWV1cm9wZS1jLXByaW1hcnktcmVkaXJlY3QuYW5hbHlzaXMud2luZG93cy5uZXQvIn0%3D\" \r\n                frameborder=\"0\" allowFullScreen=\"true\"></iframe> -->\r\n            </div>\r\n    <!-- </mat-sidenav-content>\r\n  </mat-sidenav-container> -->\r\n\r\n"
        },
        {
            "name": "PracticeComponent",
            "id": "component-PracticeComponent-93fa148b7320c7614abb73e0848dba9c",
            "file": "src/app/forecast/pages/practice/practice.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-practice",
            "styleUrls": [
                "./practice.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./practice.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeMonth",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "months",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "monthSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "step",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Number of the header in the child&#39;s expansion panel currently open</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nNumber of the header in the child's expansion panel currently open\n"
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>id of currently logged-in user (received from auth-service)</p>\n",
                    "line": 27,
                    "rawdescription": "\n\nid of currently logged-in user (received from auth-service)\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "forecastState",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initTeamForecast",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setStep",
                    "args": [
                        {
                            "name": "event",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTabActive",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Month } from '../../../core/interfaces/month';\r\nimport { Subscription } from 'rxjs';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { UtilitiesService } from '../../../core/services/utilities.service';\r\nimport { UserService } from '../../../core/services/user.service';\r\nimport { PageStateService } from '../../../core/shared/page-state.service';\r\nimport { AuthService } from '../../../core/security/auth.service';\r\nimport { environment as env } from \"../../../../environments/environment.prod\";\r\nimport { Location } from '@angular/common';\r\nimport { TeamUserService } from '../../../core/services/forecasts/team-user.service';\r\nimport { LockedMonth } from '../../../core/interfaces/lockedMonth';\r\nimport { MonthService } from '../../../core/services/admin/months.service';\r\nimport { ForecastService } from '../../../core/services/forecasts/forecast.service';\r\nimport { ExecutiveForecastsService } from '../../../core/services/forecasts/executive-forecasts.service';\r\n\r\n@Component({\r\n  selector: 'app-practice',\r\n  templateUrl: './practice.component.html',\r\n  styleUrls: ['./practice.component.scss']\r\n})\r\nexport class PracticeComponent implements OnInit, OnDestroy {\r\n\r\n  /**\r\n\t * id of currently logged-in user (received from auth-service)\r\n\t */\r\n\tuserId: number;\r\n\r\n  months: Month[] = [];\r\n  monthSubscription: Subscription;\r\n  activeMonth: number = 0;\r\n  /**\r\n   * Number of the header in the child's expansion panel currently open\r\n   */\r\n  step: number = -1;\r\n\r\n  constructor(\r\n    private location: Location,\r\n    private route: ActivatedRoute,\r\n    private utilitiesService: UtilitiesService,\r\n\r\n    private pageState: PageStateService,\r\n    private authService: AuthService,\r\n    private teamService: TeamUserService,\r\n    private monthService: MonthService,\r\n    private forecastService: ForecastService,\r\n    private executiveService: ExecutiveForecastsService\r\n  ) {\r\n    this.userId = this.authService.getUserId();\r\n   }\r\n\r\n  ngOnInit(): void {\r\n    this.pageState.forecastrReady$.subscribe((ready: boolean) => {\r\n\t\t\tif (ready && this.authService.hasRole(env.roles.pl)) {\r\n\t\t\t\tthis.initTeamForecast();\r\n\t\t\t}\r\n\t\t});\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.monthSubscription.unsubscribe();\r\n  }\r\n\r\n  private initTeamForecast(): void {\r\n    this.teamService.initializePLTeam();\r\n    this.monthSubscription = this.utilitiesService.months$\r\n      .subscribe((months: Month[]) => {\r\n        this.months = months.filter((m: Month) => m.active === true);\r\n        \r\n        var today = new Date();\r\n\t\t\t\tvar todayMonth = new Date(today.getFullYear(), today.getMonth(), 1);\r\n\t\t\t\tthis.months = this.months.filter((m: Month) => new Date(m.time) >= todayMonth);\r\n\r\n\t\t\t\tif(this.months.length > 7) {\r\n\t\t\t\t\tthis.months = this.months.slice(1, 7);\r\n        }\r\n        \r\n        let id: number = parseInt(this.route.snapshot.paramMap.get('id'), 10);\r\n        if (typeof id !== 'undefined' && id >= 0 && id < this.months.length) {\r\n          this.activeMonth = id;\r\n\r\n        } else {\r\n          for (let i: number = 0; i < this.months.length; i++) {\r\n            if (Date.parse(this.months[i].time) > (new Date()).setMonth((new Date().getMonth() - 1))) {\r\n              this.activeMonth = i;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        setTimeout(() => {\r\n\t\t\t\t\tlet shift: number = parseInt(window.getComputedStyle(document.querySelector('.mat-tab-label-container')).width) - parseInt(window.getComputedStyle(document.querySelector('.mat-tab-list')).width);\r\n\t\t\t\t\tlet pos: number = parseInt((document.querySelector('.mat-tab-label-active') as HTMLElement).getAttribute('aria-posinset'), 10);\r\n\t\t\t\t\tif (shift < ((pos ? pos : 1) - 1) * -100) {\r\n\t\t\t\t\t\tshift = ((pos ? pos : 1) - 1) * -100;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t(document.querySelector('.mat-tab-list') as HTMLElement).style.transform = 'translateX(' + shift + 'px)';\r\n\t\t\t\t}, 100);\r\n      });\r\n\r\n      this.monthService.getLockedMonths().subscribe(\r\n        (lockedMonths: LockedMonth[]) => {\r\n          let activeLockedMonths = lockedMonths.filter((m: LockedMonth) => this.months.find((x: Month) => x.id === m.id) !== undefined);\r\n          for(let i = 0; i < this.months.length; i++) {\r\n            this.months[i].locked = activeLockedMonths[i].locked;\r\n          }\r\n        });\r\n  }\r\n\r\n  setTabActive(index: number): void {\r\n    this.activeMonth = index;\r\n    this.location.replaceState('/forecast/practice/' + this.activeMonth);\r\n  }\r\n\r\n  forecastState(type: string, monthId: number): boolean {\r\n\t\treturn this.forecastService.checkForecastState(type, monthId, this.userId);\r\n\t}\r\n\r\n  //Reflect a step change from teamlead-month into parent\r\n  setStep(event : number){\r\n    this.step = event;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./practice.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "teamService",
                        "type": "TeamUserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "monthService",
                        "type": "MonthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "teamService",
                        "type": "TeamUserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "monthService",
                        "type": "MonthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<mat-tab-group [selectedIndex]=\"activeMonth\" (selectedIndexChange)=\"setTabActive($event)\">\r\n    <mat-tab *ngFor=\"let month of months\" label=\"{{month.name}}\"  id=\"{{month.id}}\">\r\n      <ng-template mat-tab-label>\r\n          <mat-icon *ngIf=\"forecastState('edited', month.id)\" class=\"icon-edited\">radio_button_checked</mat-icon>\r\n          <mat-icon *ngIf=\"month.locked || forecastState('locked', month.id)\" class=\"icon-locked\">lock</mat-icon>\r\n          {{month.name}}\r\n      </ng-template>\r\n      <ng-template matTabContent> <!-- matTabContent for tab lazy loading -->\r\n        <app-teamlead-month [role]=\"'practice'\" [month]=\"month\" [step]=\"step\" (setStepEvent)=setStep($event)></app-teamlead-month>\r\n      </ng-template>\r\n    </mat-tab>\r\n  </mat-tab-group>"
        },
        {
            "name": "PracticesComponent",
            "id": "component-PracticesComponent-64a75fd07826afb349c49342694e3a72",
            "file": "src/app/forecast/pages/practices/practices.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-practices",
            "styleUrls": [
                "./practices.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./practices.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "availableMonths",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "months",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "monthSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "period",
                    "defaultValue": "{ from: undefined, to: undefined }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "viewSwitch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "changeViewSwitch",
                    "args": [
                        {
                            "name": "switchState",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "switchState",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initPracticesView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOpen dialog for executive chart",
                    "description": "<p>Open dialog for executive chart</p>\n"
                },
                {
                    "name": "setDefaultPeriod",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the default period to current month until 6 months in the future\n",
                    "description": "<p>Sets the default period to current month until 6 months in the future</p>\n"
                },
                {
                    "name": "showPeriod",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReloads the values after period update\n",
                    "description": "<p>Reloads the values after period update</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Month } from '../../../core/interfaces/month';\r\nimport { Subscription } from 'rxjs';\r\nimport { UtilitiesService } from '../../../core/services/utilities.service';\r\nimport { PageStateService } from '../../../core/shared/page-state.service';\r\nimport { ExecutiveChartComponent } from \"../../components/executive-chart/executive-chart.component\";\r\nimport { MatDialog } from \"@angular/material/dialog\";\r\n\r\n@Component({\r\n  selector: 'app-practices',\r\n  templateUrl: './practices.component.html',\r\n  styleUrls: ['./practices.component.scss']\r\n})\r\nexport class PracticesComponent implements OnInit, OnDestroy {\r\n\r\n  monthSubscription: Subscription;\r\n\r\n  months: Month[] = [];\r\n\r\n  availableMonths: Month[] = [];\r\n\r\n  period: any = { from: undefined, to: undefined };\r\n\r\n  viewSwitch: string;\r\n\r\n\r\n  constructor(\r\n    private utilitiesService: UtilitiesService,\r\n    private pageState: PageStateService,\r\n    public dialog: MatDialog,\r\n  ) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.pageState.forecastrReady$.subscribe((ready:boolean)=> {\r\n      if (ready) {\r\n         this.initPracticesView();\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.monthSubscription.unsubscribe();\r\n  }\r\n\r\n  initPracticesView(): void {\r\n    this.monthSubscription = this.utilitiesService.months$.subscribe((months: Month[]) => {\r\n      this.availableMonths = months;\r\n      this.setDefaultPeriod();\r\n    });\r\n  }\r\n\r\n      /**\r\n   * Reloads the values after period update\r\n   */\r\n  showPeriod(): void {\r\n    if (this.period.to < this.period.from) {\r\n      this.period.to = this.period.from;\r\n    }\r\n\r\n    this.pageState.showSpinner();\r\n    this.months = this.utilitiesService\r\n      .getMonths()\r\n      .filter((m: Month) => m.id >= this.period.from && m.id <= this.period.to);\r\n    this.pageState.hideSpinner();\r\n  }\r\n\r\n  /**\r\n   * Sets the default period to current month until 6 months in the future\r\n   */\r\n  setDefaultPeriod(): void {\r\n    let months: Month[] = this.utilitiesService.getMonths();\r\n\r\n    for (let i: number = 0; i < months.length; i++) {\r\n      if (\r\n        Date.parse(months[i].time) >\r\n        new Date().setMonth(new Date().getMonth() + 1)\r\n      ) {\r\n        this.period.from = i;\r\n        this.period.to = i + 5;\r\n        this.showPeriod();\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**Open dialog for executive chart */\r\n  openDialog(): void {\r\n    const dialogRef = this.dialog.open(ExecutiveChartComponent, {\r\n      height: \"90%\",\r\n      width: \"90%\",\r\n      panelClass: \"custom-dialog-container\",\r\n      data: {},\r\n    });\r\n    dialogRef.afterClosed().subscribe(() => {  });\r\n  }\r\n\r\n  changeViewSwitch(switchState: string): void {\r\n    this.viewSwitch = switchState;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../assets/styles/variables.scss\";\r\n\r\n.practices-view-container {\r\n    margin-top: 5px;\r\n    padding: 0;\r\n    background: transparent;\r\n}\r\n\r\n.second-header {\r\n    width: 100%;\r\n}\r\n\r\n.executive-btn {\r\n    float: right;\r\n    position: relative;\r\n}\r\n\r\n.mat-icon {\r\n    font-size: 18px;\r\n    color: #fff !important;\r\n}\r\n\r\n.period-container {\r\n    width: 100%;\r\n}\r\n.period-component {\r\n    display: inline-flex;\r\n    margin: 0 5px;\r\n\r\n    &.mat-form-field {\r\n      width: 200px;\r\n    }\r\n\r\n    &.mat-raised-button {\r\n      margin-top: 4px;\r\n      bottom: 4px;\r\n    }\r\n\r\n    &:first-child {\r\n      margin-left: 0;\r\n    }\r\n}\r\n  \r\n.period-download {\r\n    margin-top: 4px;\r\n    bottom: 4px;\r\n}",
                    "styleUrl": "./practices.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"practices-view\">\r\n    <div class=\"practices-view-container\">\r\n        <div class=\"period-container\">\r\n            <mat-form-field class=\"period-component\" appearance=\"outline\">\r\n                <mat-label>Period Start Month</mat-label>\r\n        \r\n                    <mat-select [(ngModel)]=\"period.from\">\r\n                        <ng-container *ngFor=\"let r of availableMonths\">\r\n                            <mat-option [value]=\"r.id\">{{ r.name }}</mat-option>\r\n                        </ng-container>\r\n                    </mat-select>\r\n                </mat-form-field>\r\n        \r\n                <mat-form-field class=\"period-component\" appearance=\"outline\">\r\n                    <mat-label>Period End Month</mat-label>\r\n        \r\n                    <mat-select [(ngModel)]=\"period.to\">\r\n                        <ng-container *ngFor=\"let r of availableMonths\">\r\n                            <mat-option [value]=\"r.id\">{{ r.name }}</mat-option>\r\n                        </ng-container>\r\n                    </mat-select>\r\n        \r\n                </mat-form-field>\r\n        \r\n                <button class=\"period-component\" mat-raised-button color=\"primary\" (click)=\"showPeriod()\">\r\n                    <mat-icon>search</mat-icon> Show Period\r\n                </button>\r\n        </div>\r\n        \r\n        <h3>Months</h3>\r\n        <mat-tab-group>\r\n            <mat-tab *ngFor=\"let month of months\" label=\"{{ month.name }}\">\r\n                <ng-template matTabContent>\r\n                    <app-executive-detail (viewSwitch)=\"changeViewSwitch($event)\" [switchState]=\"viewSwitch\"  [month]=\"month\" [months]=\"months\"></app-executive-detail>\r\n                  </ng-template>\r\n            </mat-tab>\r\n        </mat-tab-group>\r\n    </div>\r\n</div>"
        },
        {
            "name": "ProjectRequestDialog",
            "id": "component-ProjectRequestDialog-6107208f2b647056e37340bb770342ae",
            "file": "src/app/forecast/dialogs/add-project/project-request.dialog.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./project-request.dialog.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "line": 32,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<ProjectRequestDialog>",
                    "optional": false,
                    "line": 28,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "projectCode",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "projectComment",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "projectName",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "openEmail",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Component for Add Project Dialog</p>\n",
            "rawdescription": "\n\nComponent for Add Project Dialog\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from \"@angular/core\";\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from \"@angular/material/dialog\";\r\nimport { ProjectRequest } from \"../../../core/interfaces/projectRequest\";\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BusinessOperationsService } from '../../../core/shared/business-operations.service';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\n/**\r\n * Component for Add Project Dialog\r\n */\r\n@Component({\r\n  templateUrl: \"./project-request.dialog.html\"\r\n})\r\nexport class ProjectRequestDialog {\r\n  \r\n  projectCode:String = \"\";\r\n\r\n  projectName:String = \"\";\r\n\r\n  projectComment:String = \"\";\r\n  \r\n  /**\r\n   * default constructor for addProjectDialog\r\n   * @param dialogRef\r\n   * @param data\r\n   */\r\n  constructor(\r\n    public dialogRef: MatDialogRef<ProjectRequestDialog>,\r\n    private http: HttpClient,\r\n    private snackBar: MatSnackBar,\r\n    private BO: BusinessOperationsService,\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n  ) {\r\n    this.projectCode = data.code;\r\n    this.projectName = data.name;\r\n    this.projectComment = data.comment;\r\n\r\n  }\r\n  public openEmail() {\r\n    let projectRequest = new ProjectRequest();\r\n    projectRequest.comment = this.data.comment;\r\n    projectRequest.projectCode = this.data.code;\r\n    projectRequest.projectName = this.data.name;\r\n\r\n    this.http.post(this.BO.requestProject(), projectRequest).subscribe((res: any) => {\r\n      this.snackBar.open(\"A Request has been sent to add this Project\", \"\", {duration: 1000,});\r\n    },\r\n    (e: any) => {\r\n      this.snackBar.open(\"A Problem has occured while performing the Project Request\", \"\", {duration: 1000,});\r\n    });\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>default constructor for addProjectDialog</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ProjectRequestDialog>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "rawdescription": "\n\ndefault constructor for addProjectDialog\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 726,
                            "end": 735,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialogRef"
                        },
                        "type": "MatDialogRef<ProjectRequestDialog>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 720,
                            "end": 725,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 749,
                            "end": 753,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "data"
                        },
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 743,
                            "end": 748,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "templateData": "<h2 mat-dialog-title>Project Request</h2>\r\n<mat-dialog-content>Send a e-mail with following project code and name.</mat-dialog-content>\r\n<br>\r\n<mat-form-field>\r\n  <input matInput placeholder=\"project code\" [(ngModel)]=\"data.code\">\r\n</mat-form-field>\r\n<mat-form-field>\r\n  <input matInput placeholder=\"project name\" [(ngModel)]=\"data.name\">\r\n</mat-form-field>\r\n<mat-form-field>\r\n<textarea matInput [(ngModel)]=\"data.comment\"  name=\"comment\"  maxLength=\"200\"\r\n        cdkTextareaAutosize #autosize=\"cdkTextareaAutosize\" cdkAutosizeMinRows=\"2\" cdkAutosizeMaxRows=\"6\" placeholder=\"leave a comment\"></textarea>\r\n</mat-form-field>\r\n<mat-dialog-actions>\r\n  <button mat-button  mat-dialog-close cdkFocusInitial [mat-dialog-close]=\"false\">cancel</button>\r\n  <!-- The mat-dialog-close directive optionally accepts a value as a result for the dialog. -->\r\n  <button mat-button [mat-dialog-close]=\"true\" (click)=\"openEmail()\">submit </button>\r\n</mat-dialog-actions>\r\n"
        },
        {
            "name": "ProjectsComponent",
            "id": "component-ProjectsComponent-b58d1ee76c86d220f852a40012840664",
            "file": "src/app/admin/components/projects/projects.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-admin-projects",
            "styleUrls": [
                "../../admin.component.scss",
                "./projects.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./projects.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "billableFilter",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "filterValues",
                    "defaultValue": "{\r\n    name:'', // name or code of the project\r\n    mandatory: null,\r\n    billable: null,\r\n    type: []\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "mandatoryFilter",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "projects",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTableDataSource<Project>",
                    "optional": false,
                    "description": "<p>project list</p>\n",
                    "line": 26,
                    "rawdescription": "\n\nproject list\n"
                },
                {
                    "name": "projectSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>project list subscription</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nproject list subscription\n"
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSort",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSort, {static: true}"
                        }
                    ]
                },
                {
                    "name": "typeFilter",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                }
            ],
            "methodsClass": [
                {
                    "name": "addProject",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow new project dialog window\n",
                    "description": "<p>Show new project dialog window</p>\n"
                },
                {
                    "name": "applyFilter",
                    "args": [
                        {
                            "name": "filterValue",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filterValue",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "(project: any, filter: any) => boolean",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "fieldListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemove project subscription when component gets destroyed\n",
                    "description": "<p>Remove project subscription when component gets destroyed</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSubscribe to projects at component init\n",
                    "description": "<p>Subscribe to projects at component init</p>\n"
                },
                {
                    "name": "setProjectActiveState",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "active",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSwitch active state of project\n",
                    "description": "<p>Switch active state of project</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2492,
                                "end": 2494,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2486,
                                "end": 2491,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2508,
                                "end": 2514,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "active"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2502,
                                "end": 2507,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "showEditDialog",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpens add/edit project dialog window\n",
                    "description": "<p>Opens add/edit project dialog window</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2714,
                                "end": 2721,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "project"
                            },
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2708,
                                "end": 2713,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "updateProject",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow update project dialog window\n",
                    "description": "<p>Show update project dialog window</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2301,
                                "end": 2303,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2295,
                                "end": 2300,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>project-admin component</p>\n",
            "rawdescription": "\n\nproject-admin component\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\r\nimport { MatSort } from '@angular/material/sort';\r\n\r\nimport { Project } from '../../../core/interfaces/project';\r\nimport { Subscription } from 'rxjs';\r\nimport { ProjectService } from '../../../core/services/admin/projects.service';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { AddProjectDialog } from '../../dialogs/add-project/add-project.dialog';\r\nimport { FormControl } from '@angular/forms';\r\n\r\n/**\r\n * project-admin component\r\n */\r\n@Component({\r\n  selector: 'app-admin-projects',\r\n  templateUrl: './projects.component.html',\r\n  styleUrls: ['../../admin.component.scss', './projects.component.scss'],\r\n})\r\nexport class ProjectsComponent implements OnInit, OnDestroy {\r\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\r\n\r\n  /**\r\n   * project list\r\n   */\r\n  projects: MatTableDataSource<Project>;\r\n\r\n  /**\r\n   * project list subscription\r\n   */\r\n  projectSubscription: Subscription;\r\n\r\n  /**\r\n   * default constructor\r\n   * @param dialog\r\n   * @param projectService\r\n   */\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private projectService: ProjectService,\r\n  ) {}\r\n\r\n  // Filter Projects\r\n  mandatoryFilter = new FormControl('');\r\n  billableFilter = new FormControl('');\r\n  typeFilter = new FormControl('');\r\n  filterValues : any = {\r\n    name:'', // name or code of the project\r\n    mandatory: null,\r\n    billable: null,\r\n    type: []\r\n  }\r\n  /**\r\n   * Subscribe to projects at component init\r\n   */\r\n  ngOnInit(): void {\r\n    this.projectService.initializeProjects();\r\n\r\n    this.projectSubscription = this.projectService.projects$\r\n      .subscribe((projects: Project[]) => {\r\n        this.projects = new MatTableDataSource(projects);\r\n        this.projects.sort = this.sort;\r\n        this.projects.filterPredicate = this.createFilter();\r\n      });\r\n      this.fieldListener();\r\n  }\r\n\r\n  /**\r\n   * Remove project subscription when component gets destroyed\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.projectSubscription.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * Show new project dialog window\r\n   */\r\n  addProject(): void {\r\n    this.showEditDialog(new Project());\r\n  }\r\n\r\n  /**\r\n   * Show update project dialog window\r\n   * @param id\r\n   */\r\n  updateProject(id: number): void {\r\n    this.showEditDialog(this.projects.data.find((p: Project) => p.id === id));\r\n  }\r\n\r\n  /**\r\n   * Switch active state of project\r\n   * @param id\r\n   * @param active\r\n   */\r\n  setProjectActiveState(id: number, active: boolean): void {\r\n    this.projectService.setProjectActiveState(id, active);\r\n  }\r\n\r\n  /**\r\n   * Opens add/edit project dialog window\r\n   * @param project\r\n   */\r\n  showEditDialog(project: Project): void {\r\n    let dialogRef: any = this.dialog.open(AddProjectDialog, {\r\n      data: {\r\n        project: project,\r\n      },\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((p: Project | boolean) => {\r\n      if (p) {\r\n        this.projectService.setProject(<Project>p);\r\n      }\r\n    });\r\n  }\r\n\r\n  //Filter logic\r\n  applyFilter(filterValue) {\r\n    this.filterValues.name = filterValue.trim().toLowerCase();\r\n    this.projects.filter = JSON.stringify(this.filterValues);\r\n\r\n  }\r\n  private fieldListener() {\r\n    this.mandatoryFilter.valueChanges\r\n      .subscribe(\r\n        isMandatory => {\r\n          this.filterValues.mandatory = isMandatory;\r\n          this.projects.filter = JSON.stringify(this.filterValues);\r\n        }\r\n      )\r\n    this.billableFilter.valueChanges\r\n      .subscribe(\r\n        isBillable => {\r\n          this.filterValues.billable = isBillable;\r\n          this.projects.filter = JSON.stringify(this.filterValues);\r\n        }\r\n      )\r\n    this.typeFilter.valueChanges\r\n      .subscribe(\r\n        type => {\r\n          this.filterValues.type = type;\r\n          this.projects.filter = JSON.stringify(this.filterValues);\r\n        }\r\n      )\r\n  }\r\n\r\n   // custom filter to overwrite the filter predicate\r\n   private createFilter(){\r\n    const filterFunction = function (project: Project, filter): boolean {\r\n      \r\n      let match = true;\r\n      let matchType = false;\r\n\r\n      let searchTerms = JSON.parse(filter);\r\n\r\n      console.log(searchTerms);\r\n      if(searchTerms.name){\r\n        return (project.code.toLowerCase() + project.name.toLowerCase()).split(' ').join('')\r\n        .includes(searchTerms.name);\r\n      } \r\n      if(searchTerms.mandatory !=null){\r\n       match = match && project.mandatory == searchTerms.mandatory;\r\n      }\r\n      if(searchTerms.billable != null){\r\n        match = match && project.billable == searchTerms.billable;\r\n      }\r\n      if(searchTerms.type.length>0){\r\n      searchTerms.type.forEach(element => {\r\n          if(element != null)\r\n          matchType = matchType || project.projectType == element;\r\n        }); \r\n        match = match && (matchType);\r\n      }\r\n      return match;\r\n    }\r\n\r\n    return filterFunction;\r\n  }\r\n\r\n  clearFilter(){\r\n    this.mandatoryFilter.setValue(null);\r\n    this.billableFilter.setValue(null);\r\n    this.typeFilter.setValue([]);\r\n  }\r\n\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../assets/styles/variables.scss';\r\n\r\n.mat-sidenav-container{\r\n\tbackground: transparent;\r\n\tmargin: 0 10px;\r\n}\r\n\r\n.mat-drawer {\r\n\tdisplay: none;\r\n\tbackground: transparent;\r\n\twidth: 50px;\r\n\tborder-right-width: 0px;\r\n}\r\n\r\n.nav-button-container {\r\n\tmargin: 4px 0;\r\n\r\n\t.mat-icon-button {\r\n\t\twidth: 50px;\r\n\t\theight: 50px;\r\n\t\tmargin-bottom: 10px;\r\n\t\tpadding: 0;\r\n\r\n\t\t&.active, &.active .mat-icon {\r\n\t\t\tcolor: map-get($font-colors, blue);\r\n\t\t}\r\n\t}\r\n\r\n\t.mat-icon {\r\n\t\twidth: 1em;\r\n\t\theight: 1em;\r\n\t\tline-height: 1rem;\r\n\t\tfont-size: 2rem;\r\n\t}\r\n}\r\n\r\n\r\ntd.mat-cell:first-of-type, td.mat-footer-cell:first-of-type, th.mat-header-cell:first-of-type {\r\n\tpadding-left: 0;\r\n}\r\n\r\ntd.mat-cell:last-of-type, td.mat-footer-cell:last-of-type, th.mat-header-cell:last-of-type {\r\n\tpadding-right: 0;\r\n}\r\n\r\n.action-button {\r\n\twidth: 50px;\r\n\ttext-align: center;\r\n}\r\n\r\n.flag-button {\r\n\twidth: 70px;\r\n\ttext-align: center;\r\n}\r\n\r\n.button-row {\r\n\tmargin: 50px;\r\n\r\n\t.mat-raised-button {\r\n\t\tposition: fixed;\r\n\t\tz-index: 100;\r\n\t\tbottom: 32px;\r\n\t\tright: 30px;\r\n\t\tbox-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\r\n\t}\r\n}\r\n\r\n.mat-form-field {\r\n\tmargin: 5px 0;\r\n}\r\n\r\ntr.mat-row.inactive td {\r\n\tcolor: map-get($font-colors, grey-label);\r\n\r\n\t.flag-inactive {\r\n\t\tbackground: map-get($font-colors, red);\r\n\t\tcolor: map-get($font-colors, white);\r\n\t\tpadding: 3px 6px;\r\n\t\tborder-radius: 4px;\r\n\t}\r\n}\r\n\r\n.mat-table tr.mat-row:last-child td {\r\n\tborder-bottom: 0;\r\n}",
                    "styleUrl": "../../admin.component.scss"
                },
                {
                    "data": "",
                    "styleUrl": "./projects.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>default constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "rawdescription": "\n\ndefault constructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1096,
                            "end": 1102,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialog"
                        },
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1090,
                            "end": 1095,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1116,
                            "end": 1130,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "projectService"
                        },
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1110,
                            "end": 1115,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div>\r\n\t<mat-form-field>\r\n\t  <input matInput (keyup)=\"applyFilter($event.target.value)\" placeholder=\"search by Name or Code\">\r\n\t</mat-form-field>\r\n\t<mat-form-field appearance=\"fill\" class=\"no-label-field\">\r\n\t\t<mat-label>Mandatory</mat-label>\r\n\t\t<mat-select [formControl]=\"mandatoryFilter\" >\r\n\t\t  <mat-option  [value]=\"'Y'\">Mandatory</mat-option>\r\n\t\t  <mat-option  [value]=\"'N'\">Not Mandatory</mat-option>\r\n\t\t</mat-select>\r\n\t</mat-form-field>\r\n\t<mat-form-field appearance=\"fill\" class=\"no-label-field\">\r\n\t\t<mat-label>Billable</mat-label>\r\n\t\t<mat-select [formControl]=\"billableFilter\">\r\n\t\t  <mat-option [value]=\"true\">Billable</mat-option>\r\n\t\t  <mat-option [value]=\"false\">Non-billable</mat-option>\r\n\t\t</mat-select>\r\n\t</mat-form-field>\r\n\t<mat-form-field appearance=\"fill\" class=\"no-label-field\">\r\n\t  <mat-label>Project Type</mat-label>\r\n\t  <mat-select [formControl]=\"typeFilter\" multiple>\r\n\t\t<mat-option [value]=\"0\">Default</mat-option>\r\n\t\t<mat-option [value]=\"1\">Business Development Days</mat-option>\r\n\t\t<mat-option [value]=\"2\">Training</mat-option>\r\n\t\t<mat-option [value]=\"3\">Vacation</mat-option>\r\n\t\t<mat-option [value]=\"4\">Bench Time</mat-option>\r\n\t\t<mat-option [value]=\"5\">Non-billable / No COR</mat-option>\r\n\t  </mat-select>\r\n\t</mat-form-field>\r\n\t<button mat-raised-button color=\"primary\" (click)=\"clearFilter()\">Clear Filter</button>\r\n  </div>\r\n\r\n\r\n<table mat-table matSort [dataSource]=\"projects\">\r\n\r\n\t<ng-container matColumnDef=\"active\">\r\n\t\t<th mat-header-cell mat-sort-header *matHeaderCellDef></th>\r\n\t\t<td mat-cell *matCellDef=\"let project\" class=\"flag-button\">\r\n\t\t\t<mat-slide-toggle color=\"primary\" [checked]=\"project.active\" [(ngModel)]=\"project.active\" (change)=\"setProjectActiveState(project.id, project.active)\"></mat-slide-toggle>\r\n\t\t</td>\r\n\t</ng-container>\r\n\r\n\t<ng-container matColumnDef=\"code\">\r\n\t\t<th mat-header-cell mat-sort-header *matHeaderCellDef>Code</th>\r\n\t\t<td mat-cell *matCellDef=\"let project\">{{ project.code }}</td>\r\n\t</ng-container>\r\n\t\r\n\t<ng-container matColumnDef=\"name\">\r\n\t\t<th mat-header-cell mat-sort-header *matHeaderCellDef>Name</th>\r\n\t\t<td mat-cell *matCellDef=\"let project\">{{ project.name }}</td>\r\n\t</ng-container>\r\n\r\n\t<ng-container matColumnDef=\"mandatory\">\r\n\t\t<th mat-header-cell mat-sort-header *matHeaderCellDef>Mandatory</th>\r\n\t\t<td mat-cell *matCellDef=\"let project\">\r\n\t\t\t<ng-container [ngSwitch]=\"project.mandatory\">\r\n\t\t\t\t<ng-container *ngSwitchCase=\"'Y'\">Mandatory</ng-container>\r\n\t\t\t\t<ng-container *ngSwitchCase=\"'N'\">Not Mandatory</ng-container>\r\n\t\t\t</ng-container>\r\n\t\t</td>\r\n\t</ng-container>\r\n\r\n\t<ng-container matColumnDef=\"billable\">\r\n\t\t<th mat-header-cell mat-sort-header *matHeaderCellDef>Billable</th>\r\n\t\t<td mat-cell *matCellDef=\"let project\">\r\n\t\t\t<ng-container [ngSwitch]=\"project.billable\">\r\n\t\t\t\t<ng-container *ngSwitchCase=\"true\">Billable</ng-container>\r\n\t\t\t\t<ng-container *ngSwitchCase=\"false\">Non-billable</ng-container>\r\n\t\t\t</ng-container>\r\n\t\t</td>\r\n\t</ng-container>\r\n\r\n\t<ng-container matColumnDef=\"projectType\">\r\n\t\t<th mat-header-cell mat-sort-header *matHeaderCellDef>Type</th>\r\n\t\t<td mat-cell *matCellDef=\"let project\">\r\n\t\t\t<ng-container [ngSwitch]=\"project.projectType\">\r\n\t\t\t\t<ng-container *ngSwitchCase=\"0\">Default</ng-container>\r\n\t\t\t\t<ng-container *ngSwitchCase=\"5\">Non-billable / No COR</ng-container>\r\n\t\t\t\t<ng-container *ngSwitchCase=\"1\">Business Development Days</ng-container>\r\n\t\t\t\t<ng-container *ngSwitchCase=\"2\">Training</ng-container>\r\n\t\t\t\t<ng-container *ngSwitchCase=\"3\">Vacation</ng-container>\r\n\t\t\t\t<ng-container *ngSwitchCase=\"4\">Bench Time</ng-container>\r\n\t\t\t</ng-container>\r\n\t\t</td>\r\n\t</ng-container>\r\n\r\n\t<ng-container matColumnDef=\"edit\">\r\n\t\t<th mat-header-cell *matHeaderCellDef class=\"action-button\"></th>\r\n\t\t<td mat-cell *matCellDef=\"let project\" class=\"action-button\"><mat-icon *ngIf=\"project.active\" (click)=\"updateProject(project.id)\">edit</mat-icon></td>\r\n\t</ng-container>\r\n\t\r\n\t<tr mat-header-row *matHeaderRowDef=\"['active', 'code', 'name', 'mandatory', 'billable', 'projectType', 'edit']\"></tr>\r\n\t<tr mat-row *matRowDef=\"let row; columns: ['active', 'code', 'name', 'mandatory', 'billable', 'projectType', 'edit'];\" [ngClass]=\"{'inactive': (!row.active)}\"></tr>\r\n</table>\r\n\r\n<div class=\"button-row\">\r\n\t<button mat-raised-button color=\"primary\" (click)=\"addProject()\">\r\n\t\t<mat-icon>playlist_add</mat-icon> Add Project\r\n\t</button>\r\n</div>"
        },
        {
            "name": "ResetPasswordComponent",
            "id": "component-ResetPasswordComponent-8050d913022c8f9391150ca38a324d1a",
            "file": "src/app/reset-password/reset-password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-reset-password",
            "styleUrls": [
                "./reset-password.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./reset-password.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formSubmitError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Contains error message if an error happened at the login</p>\n",
                    "line": 32,
                    "rawdescription": "\n\nContains error message if an error happened at the login\n"
                },
                {
                    "name": "resetActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>true while login process is active</p>\n",
                    "line": 37,
                    "rawdescription": "\n\ntrue while login process is active\n"
                },
                {
                    "name": "resetPasswordGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "<p>Reset form group element for comparing two password fields</p>\n",
                    "line": 42,
                    "rawdescription": "\n\nReset form group element for comparing two password fields\n"
                },
                {
                    "name": "resetPasswordToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Token, which is returned from database and is created for resetting password</p>\n",
                    "line": 47,
                    "rawdescription": "\n\nToken, which is returned from database and is created for resetting password\n"
                },
                {
                    "name": "responseRejectedText",
                    "defaultValue": "\"Your password is not strong enough. Please read the rules above again to generate your password.\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "responseSuccessfulText",
                    "defaultValue": "\"Your password has been successfully changed. You will be re-directed to login page shortly.\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Response text for successful and unsuccessful attempts for resetting password</p>\n",
                    "line": 52,
                    "rawdescription": "\n\nResponse text for successful and unsuccessful attempts for resetting password\n",
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "responseUnsuccessfulText",
                    "defaultValue": "\"Problem occured while resetting your password. Please check your reset link and try again later.\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        142
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ResetPasswordService } from '../core/security/resetPassword.service';\r\nimport { FormGroup, AbstractControl, FormBuilder, Validators, ValidatorFn, ValidationErrors, FormControl } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { MatDialogRef, MatDialog } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ConfirmMessageDialog } from '../forecast/dialogs/confirm-message/confirm-message.dialog';\r\n\r\nfunction passwordMatcherValidator(control: AbstractControl): { [key: string]: any } | null {\r\n  let newPasswordControl = control.get('newPassword');\r\n  let confirmPasswordControl = control.get('confirmPassword');\r\n\r\n  if(newPasswordControl.pristine || confirmPasswordControl.pristine) {\r\n    return null;\r\n  }\r\n\r\n  if(newPasswordControl.value === confirmPasswordControl.value) {\r\n    return null;\r\n  }\r\n  return {'passwordMatch': true};\r\n}\r\n\r\n@Component({\r\n  selector: 'app-reset-password',\r\n  templateUrl: './reset-password.component.html',\r\n  styleUrls: ['./reset-password.component.scss']\r\n})\r\nexport class ResetPasswordComponent implements OnInit{\r\n  /**\r\n   * Contains error message if an error happened at the login\r\n   */\r\n  formSubmitError: string;\r\n\r\n  /**\r\n   * true while login process is active\r\n   */\r\n  resetActive: boolean = false;\r\n\r\n  /**\r\n   * Reset form group element for comparing two password fields\r\n   */\r\n  resetPasswordGroup: FormGroup;\r\n\r\n  /**\r\n   * Token, which is returned from database and is created for resetting password\r\n   */\r\n  resetPasswordToken: string;\r\n\r\n  /**\r\n   * Response text for successful and unsuccessful attempts for resetting password\r\n   */\r\n  readonly responseSuccessfulText: string = \"Your password has been successfully changed. You will be re-directed to login page shortly.\";\r\n  readonly responseUnsuccessfulText: string = \"Problem occured while resetting your password. Please check your reset link and try again later.\";\r\n  readonly responseRejectedText: string = \"Your password is not strong enough. Please read the rules above again to generate your password.\";\r\n\r\n  constructor(\r\n    private resetPasswordService: ResetPasswordService,\r\n    private fb: FormBuilder,\r\n    private activatedRoute: ActivatedRoute,\r\n    private dialog: MatDialog,\r\n    private snackBar: MatSnackBar,\r\n    private router: Router,) { }\r\n\r\n  ngOnInit() {\r\n    this.resetPasswordGroup = this.fb.group({\r\n      newPassword: [''],\r\n      confirmPassword: [''],\r\n    }, {validator: passwordMatcherValidator});\r\n  }\r\n\r\n  resetPassword(): void {\r\n    //this.resetActive = false;\r\n\r\n    let resetToken = this.activatedRoute.snapshot.paramMap.get('token');\r\n    let newPassword = this.resetPasswordGroup.controls['newPassword'].value;\r\n\r\n    let dialogRef: MatDialogRef<ConfirmMessageDialog> = this.dialog.open(ConfirmMessageDialog, {\r\n      data: {\r\n        message: \"Are you sure you want to reset your password? This action cannot be undone.\",\r\n        button: { cancel: 'Cancel', submit: 'Reset' },\r\n      },\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((remove: boolean) => {\r\n      this.resetActive = true;\r\n      if (remove === true) {\r\n        this.resetPasswordService.resetPasswordWithToken(resetToken, newPassword).subscribe(\r\n          (response: any) => {\r\n            this.resetActive = false;\r\n            if(response.status === 200) {\r\n              this.snackBar.open(this.responseSuccessfulText, \"\",{duration: 5000,});\r\n              setTimeout(() => {\r\n                this.router.navigate(['/login']);\r\n              }, 5000);\r\n            }\r\n            else {\r\n              this.snackBar.open(this.responseUnsuccessfulText, \"\",{duration: 5000,});\r\n            }\r\n          },\r\n          (error: any) => {\r\n            this.resetActive = false;\r\n            if(error.status === 422) {\r\n              this.snackBar.open(this.responseRejectedText, \"\",{duration: 5000,});\r\n            }\r\n            else {\r\n              this.snackBar.open(this.responseUnsuccessfulText, \"\",{duration: 5000,});\r\n            }\r\n            \r\n          }\r\n        );\r\n      }\r\n    });\r\n    \r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../assets/styles/variables.scss';\r\n\r\n.reset-password-container {\r\n  display: flex;\r\n  height: 100%;\r\n  background: url(../../assets/img/capgemini-shape.png);\r\n  background-size: contain;\r\n  background-repeat: no-repeat;\r\n  background-position: right bottom;\r\n \r\n  > div {\r\n    margin: auto;\r\n  }\r\n}\r\n\r\n.invalid-feedback {\r\n    color: map-get($font-colors, red);\r\n    margin-bottom: 12px;\r\n}\r\n\r\n.reset-password-label {\r\n  color: map-get($font-colors, blue);\r\n  font-size: 1.25rem;\r\n  margin-bottom: 12px;\r\n  font-weight: 700;\r\n}\r\n\r\n.mat-card {\r\n  width: 320px;\r\n  padding: 20px;\r\n  box-shadow: 0 4px 8px 2px rgba(0,0,0,.06) !important;\r\n  background-color: rgba(255,255,255,0.9);\r\n  \r\n  .mat-card-title {\r\n    display: flex;\r\n    height: 36px;\r\n    line-height: 36px;\r\n    margin: 5px 0;\r\n    padding: 0;\r\n\r\n    div {\r\n      display: inline-block;\r\n      height: inherit;\r\n      font-size: 1.25rem;\r\n      font-weight: 700;\r\n      color: map-get($font-colors, blue);\r\n    }\r\n\r\n    .logo {\r\n      height: inherit;\r\n      margin-right: 10px;\r\n    }\r\n  }\r\n\r\n  .mat-card-content {\r\n    padding: 0;\r\n\r\n    form {\r\n      padding: 0;\r\n    }\r\n\r\n    .mat-form-field {\r\n      line-height: 1;\r\n    }\r\n  }\r\n}\r\n\r\n.spinner-container {\r\n  display: none;\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  margin: -50px 0 0 -50px;\r\n\r\n  &.active {\r\n    display: block;\r\n  }\r\n}",
                    "styleUrl": "./reset-password.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "resetPasswordService",
                        "type": "ResetPasswordService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 54,
                "jsdoctags": [
                    {
                        "name": "resetPasswordService",
                        "type": "ResetPasswordService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\r\n<div class=\"reset-password-container\">\r\n  <div layout=\"row\" layout-align=\"center\">\r\n    \r\n    <mat-card>\r\n      <mat-card-title>\r\n        <div>\r\n          <img class=\"logo\" src=\"{{'assets/img/cap_logo_p.png'}}\">\r\n        </div>\r\n       \r\n      </mat-card-title>\r\n\r\n      <mat-card-content>\r\n        \r\n        <form layout=\"column\" class=\"pad\" (ngSubmit)=\"resetPassword()\" #resetPasswordForm=\"ngForm\" >\r\n          <br>\r\n          <mat-label class=\"reset-password-label\">Reset your password</mat-label>\r\n          <div>Your password should have the following properties:</div>\r\n          <ul>\r\n            <li>at least 8 characters</li>\r\n            <li>at least one uppercase and lowercase letters</li>\r\n            <li>at least one number</li>\r\n            <li>at least one special character (!_$@#/? etc.)</li>\r\n          </ul>\r\n          <div [formGroup]=\"resetPasswordGroup\">\r\n            <mat-form-field flex>\r\n              <input matInput type=\"password\" placeholder=\"New password\" formControlName=\"newPassword\" required>\r\n            </mat-form-field>\r\n  \r\n            <mat-form-field flex>\r\n              <input class=\"form-control\" matInput type=\"password\" placeholder=\"Confirm your new password\" formControlName=\"confirmPassword\" required pattern=\"{{ resetPasswordGroup.controls.newPassword.value }}\">\r\n            </mat-form-field>\r\n            <div class=\"invalid-feedback\">\r\n              <span *ngIf=\"resetPasswordGroup.errors?.passwordMatch\">\r\n                Your password doesn't match with above.\r\n              </span>\r\n            </div>\r\n          </div>\r\n\r\n          <button class=\"reset-button\" mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"!resetPasswordGroup.valid || resetActive\">Reset Password</button>\r\n          \r\n        </form>\r\n        \r\n        <div class=\"spinner-container\" [ngClass]=\"{'active': resetActive}\">\r\n          <mat-progress-spinner\r\n            class=\"progress-spinner\" color=\"primary\" mode=\"indeterminate\">\r\n          </mat-progress-spinner>\r\n        </div>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "StaffingComponent",
            "id": "component-StaffingComponent-6cd1224ae4a14687ee32747061a9a985",
            "file": "src/app/forecast/pages/staffing/staffing.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-staffing",
            "styleUrls": [
                "./staffing.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./staffing.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "availableMonths",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "<p>next 6 months</p>\n",
                    "line": 28,
                    "rawdescription": "\n\nnext 6 months\n"
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "months",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "monthSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "period",
                    "defaultValue": "{ from: undefined, to: undefined }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Defines executive data view period (monthIDs)</p>\n",
                    "line": 33,
                    "rawdescription": "\n\nDefines executive data view period (monthIDs)\n"
                },
                {
                    "name": "users",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User[]",
                    "optional": false,
                    "description": "<p>all active users</p>\n",
                    "line": 38,
                    "rawdescription": "\n\nall active users\n"
                },
                {
                    "name": "userSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "methodsClass": [
                {
                    "name": "initStaffingView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ninitiates staffing view\n",
                    "description": "<p>initiates staffing view</p>\n"
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOpen dialog for executive chart",
                    "description": "<p>Open dialog for executive chart</p>\n"
                },
                {
                    "name": "setDefaultPeriod",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the default period to current month until 6 months in the future\n",
                    "description": "<p>Sets the default period to current month until 6 months in the future</p>\n"
                },
                {
                    "name": "showPeriod",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReloads the values after period update\n",
                    "description": "<p>Reloads the values after period update</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { MatDialog } from \"@angular/material/dialog\";\r\nimport { Subscription } from \"rxjs\";\r\n\r\nimport { environment as env } from \"../../../../environments/environment.prod\";\r\n\r\nimport { User } from \"../../../core/interfaces/user\";\r\nimport { Month } from \"../../../core/interfaces/month\";\r\n\r\nimport { UserService } from \"../../../core/services/user.service\";\r\nimport { UtilitiesService } from \"../../../core/services/utilities.service\";\r\nimport { PageStateService } from \"../../../core/shared/page-state.service\";\r\nimport { ExecutiveChartComponent } from \"../../components/executive-chart/executive-chart.component\";\r\nimport { AuthService } from \"../../../core/security/auth.service\";\r\nimport { ForecastService } from \"../../../core/services/forecasts/forecast.service\";\r\nimport { ExecutiveForecastsService } from \"../../../core/services/forecasts/executive-forecasts.service\";\r\n\r\n@Component({\r\n  selector: \"app-staffing\",\r\n  templateUrl: \"./staffing.component.html\",\r\n  styleUrls: [\"./staffing.component.scss\"]\r\n})\r\nexport class StaffingComponent implements OnInit, OnDestroy {\r\n\r\n  /**\r\n   * next 6 months\r\n   */\r\n  availableMonths: Month[] = [];\r\n\r\n    /**\r\n   * Defines executive data view period (monthIDs)\r\n   */\r\n  period: any = { from: undefined, to: undefined };\r\n\r\n  /**\r\n   * all active users\r\n   */\r\n  users: User[] = []\r\n\r\n  monthSubscription: Subscription;\r\n\r\n  userSubscription: Subscription;\r\n\r\n  months: Month[] = [];\r\n  \r\n\r\n  constructor(\r\n    private utilitiesService: UtilitiesService,\r\n    private pageState: PageStateService,\r\n    private userService: UserService,\r\n    public dialog: MatDialog,\r\n    private authService: AuthService,\r\n    private forecastService: ForecastService,\r\n    private executiveService: ExecutiveForecastsService,\r\n  ) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.pageState.forecastrReady$.subscribe((ready: boolean) => {\r\n      if (ready && this.authService.hasRole(env.roles.msl)) {\r\n        this.initStaffingView();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * initiates staffing view\r\n   */\r\n  initStaffingView(): void {\r\n\r\n    this.monthSubscription = this.utilitiesService.months$.subscribe((months: Month[]) => {\r\n      this.availableMonths = months;\r\n      this.setDefaultPeriod();\r\n\r\n      /**for (let month of months) {\r\n        this.forecastService.initStaffingForecasts(month.id);\r\n        this.executiveService.initializeDetailValues(month.id);\r\n      }**/\r\n    });\r\n\r\n    this.userSubscription = this.userService.allUsers$.subscribe((user: User[]) => {\r\n      this.users = user;\r\n    });\r\n  }\r\n\r\n    /**\r\n   * Sets the default period to current month until 6 months in the future\r\n   */\r\n  setDefaultPeriod(): void {\r\n    let months: Month[] = this.utilitiesService.getMonths();\r\n\r\n    for (let i: number = 0; i < months.length; i++) {\r\n      if (\r\n        Date.parse(months[i].time) >\r\n        new Date().setMonth(new Date().getMonth() + 1)\r\n      ) {\r\n        this.period.from = i;\r\n        this.period.to = i + 5;\r\n        this.showPeriod();\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.monthSubscription.unsubscribe();\r\n    this.userSubscription.unsubscribe();\r\n  }\r\n\r\n    /**\r\n   * Reloads the values after period update\r\n   */\r\n  showPeriod(): void {\r\n    if (this.period.to < this.period.from) {\r\n      this.period.to = this.period.from;\r\n    }\r\n\r\n    this.pageState.showSpinner();\r\n    this.months = this.utilitiesService\r\n      .getMonths()\r\n      .filter((m: Month) => m.id >= this.period.from && m.id <= this.period.to);\r\n    for (let month of this.months) {\r\n      this.forecastService.initStaffingForecasts(month.id);\r\n      this.executiveService.initializeDetailValues(month.id);\r\n    }\r\n  }\r\n\r\n  /**Open dialog for executive chart */\r\n  openDialog(): void {\r\n    const dialogRef = this.dialog.open(ExecutiveChartComponent, {\r\n      height: \"90%\",\r\n      width: \"90%\",\r\n      panelClass: \"custom-dialog-container\",\r\n      data: {},\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(() => { });\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../assets/styles/variables.scss\";\r\n\r\n.staffing-view-container {\r\n    margin-top: 5px;\r\n    padding: 0;\r\n    background: transparent;\r\n}\r\n\r\n.second-header {\r\n    width: 100%;\r\n}\r\n\r\n.executive-btn {\r\n    float: right;\r\n    position: relative;\r\n}\r\n\r\n.mat-icon {\r\n    font-size: 18px;\r\n    color: #fff !important;\r\n}\r\n\r\n.period-container {\r\n    width: 100%;\r\n}\r\n.period-component {\r\n    display: inline-flex;\r\n    margin: 0 5px;\r\n\r\n    &.mat-form-field {\r\n      width: 200px;\r\n    }\r\n\r\n    &.mat-raised-button {\r\n      margin-top: 4px;\r\n      bottom: 4px;\r\n    }\r\n\r\n    &:first-child {\r\n      margin-left: 0;\r\n    }\r\n}\r\n  \r\n.period-download {\r\n    margin-top: 4px;\r\n    bottom: 4px;\r\n}",
                    "styleUrl": "./staffing.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"staffing-view\">\r\n    <div class=\"period-container\">\r\n\r\n        <mat-form-field class=\"period-component\" appearance=\"outline\">\r\n            <mat-label>Period Start Month</mat-label>\r\n\r\n            <mat-select [(ngModel)]=\"period.from\">\r\n                <ng-container *ngFor=\"let r of availableMonths\">\r\n                    <mat-option [value]=\"r.id\">{{ r.name }}</mat-option>\r\n                </ng-container>\r\n            </mat-select>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field class=\"period-component\" appearance=\"outline\">\r\n            <mat-label>Period End Month</mat-label>\r\n\r\n            <mat-select [(ngModel)]=\"period.to\">\r\n                <ng-container *ngFor=\"let r of availableMonths\">\r\n                    <mat-option [value]=\"r.id\">{{ r.name }}</mat-option>\r\n                </ng-container>\r\n            </mat-select>\r\n\r\n        </mat-form-field>\r\n\r\n        <button class=\"period-component\" mat-raised-button color=\"primary\" (click)=\"showPeriod()\">\r\n            <mat-icon>search</mat-icon> Show Period\r\n        </button>\r\n\r\n        <div class=\"staffing-view-container\">\r\n            <app-staffing-overview [months]=\"months\" [users]=\"users\"></app-staffing-overview>\r\n        </div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "StaffingOverviewComponent",
            "id": "component-StaffingOverviewComponent-6209781b4b89d702c67adf186657c2e1",
            "file": "src/app/forecast/components/staffing-overview/staffing-overview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-staffing-overview",
            "styleUrls": [
                "./staffing-overview.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./staffing-overview.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "months",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "Month[]"
                },
                {
                    "name": "users",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "User[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "columnsToDisplay",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String[]",
                    "optional": false,
                    "description": "<p>columns which are displayed</p>\n",
                    "line": 44,
                    "rawdescription": "\n\ncolumns which are displayed\n"
                },
                {
                    "name": "forecastrSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "forecasts",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FcEntry[]",
                    "optional": false,
                    "description": "<p>list of all forecast entries for all users</p>\n",
                    "line": 49,
                    "rawdescription": "\n\nlist of all forecast entries for all users\n"
                },
                {
                    "name": "isFinished",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "isPageReady",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "projectHelpers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProjectHelper[]",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "projects",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Project[]",
                    "optional": false,
                    "description": "",
                    "line": 51
                }
            ],
            "methodsClass": [
                {
                    "name": "exportCSV",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 309,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMonthARVEFromPerson",
                    "args": [
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 402,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMonthFTEFromPerson",
                    "args": [
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 386,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProjectCode",
                    "args": [
                        {
                            "name": "forecastHelpers",
                            "type": "ProjectHelper[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "String",
                    "typeParameters": [],
                    "line": 253,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "forecastHelpers",
                            "type": "ProjectHelper[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProjectCodes",
                    "args": [
                        {
                            "name": "forecastHelpers",
                            "type": "ProjectHelper[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "String",
                    "typeParameters": [],
                    "line": 266,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "forecastHelpers",
                            "type": "ProjectHelper[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProjectHelper",
                    "args": [
                        {
                            "name": "forecasts",
                            "type": "FcEntry[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ProjectHelper[]",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "forecasts",
                            "type": "FcEntry[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProjects",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "viewColumn",
                            "type": "String",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "String",
                    "typeParameters": [],
                    "line": 218,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "viewColumn",
                            "type": "String",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTeam",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "String",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTotalARVE",
                    "args": [
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTotalFTE",
                    "args": [
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initStaffing",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 286,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 418,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "parseForCSV",
                    "args": [
                        {
                            "name": "toParse",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "div",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "minPrecision",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        },
                        {
                            "name": "maxPrecision",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 377,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "toParse",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "div",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "minPrecision",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "maxPrecision",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, Input, OnChanges, SimpleChange, SimpleChanges, AfterContentInit, AfterViewInit } from \"@angular/core\";\r\n\r\nimport { User } from \"../../../core/interfaces/user\";\r\nimport { Month } from \"../../../core/interfaces/month\";\r\nimport { FcEntry } from \"../../../core/interfaces/fcEntry\";\r\nimport { ForecastService } from \"../../../core/services/forecasts/forecast.service\";\r\nimport { UserService } from \"../../../core/services/user.service\";\r\nimport { DatePipe } from \"@angular/common\";\r\nimport { PageStateService } from \"../../../core/shared/page-state.service\";\r\nimport { MatTooltipModule } from \"@angular/material/tooltip\";\r\nimport { TooltipPosition } from '@angular/material/tooltip';\r\nimport { Subscription } from \"rxjs\";\r\nimport { Project } from \"../../../core/interfaces/project\";\r\nimport { UtilitiesService } from \"../../../core/services/utilities.service\";\r\nimport { parseHostBindings } from \"@angular/compiler\";\r\n\r\nclass ProjectHelper {\r\n    projectId: number;\r\n    days: number;\r\n    projectCode: String;\r\n\r\n    constructor() {\r\n        this.projectId = 0;\r\n        this.days = 0;\r\n        this.projectCode = undefined;\r\n    }\r\n\r\n}\r\n\r\n@Component({\r\n    selector: 'app-staffing-overview',\r\n    templateUrl: './staffing-overview.component.html',\r\n    styleUrls: ['./staffing-overview.component.scss'],\r\n})\r\nexport class StaffingOverviewComponent implements OnInit, OnDestroy, OnChanges {\r\n\r\n    @Input('months') months: Month[];\r\n\r\n    @Input('users') users: User[];\r\n\r\n    /**\r\n      * columns which are displayed\r\n     */\r\n    columnsToDisplay: String[] = [];\r\n\r\n    /**\r\n      * list of all forecast entries for all users\r\n     */\r\n    forecasts: FcEntry[] = [];\r\n\r\n    projects: Project[] = [];\r\n    // allForecast: FcEntry[] = [];\r\n\r\n    projectHelpers: ProjectHelper[] = [];\r\n\r\n    forecastrSubscription: Subscription;\r\n\r\n    isPageReady: boolean = false;\r\n\r\n     isFinished: boolean = false;\r\n    /**\r\n     * constructor for staffing-overview component\r\n     *  @param forecastService\r\n     */\r\n    constructor(\r\n        private forecastService: ForecastService,\r\n        private userService: UserService,\r\n        private datePipe: DatePipe,\r\n        private pageState: PageStateService,\r\n        private utilityService: UtilitiesService\r\n    ) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.pageState.forecastrReady$.subscribe((ready: boolean) => {\r\n            if (ready) {\r\n                this.initStaffing();\r\n            }\r\n        });\r\n\r\n    }\r\n    ngOnChanges(): void {\r\n        this.pageState.forecastrReady$.subscribe((ready: boolean) => {\r\n            if (ready) {\r\n                this.initStaffing();\r\n            }\r\n        });\r\n    }\r\n\r\n    getTotalARVE(month: Month): string {\r\n        let projectDays = 0;\r\n        let totalDays = 0;\r\n        let vacationDays = 0;\r\n\r\n        for (let user of this.users) {\r\n            let forecast: FcEntry = this.forecastService.forecasts.find((fc: FcEntry) => {\r\n                return fc.monthId === month.id && fc.userId === user.id\r\n            });\r\n\r\n            if (user.active) {\r\n                if (user.active.valueOf) {\r\n                    if (forecast) {\r\n                        if (forecast.isRelevant) {\r\n                            if (forecast.projectDays) {\r\n                                projectDays += forecast.projectDays;\r\n                            }\r\n                            if (forecast.vacationDays) {\r\n                                vacationDays += forecast.vacationDays;\r\n                            }\r\n                            if (forecast.totalDays) {\r\n                                totalDays += forecast.totalDays;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let arve = (projectDays) / (totalDays - vacationDays);\r\n        return (arve * 100).toFixed(2);\r\n    }\r\n\r\n    getTotalFTE(month: Month): string {\r\n        let fte = 0;\r\n\r\n        for (let user of this.users) {\r\n            let forecast: FcEntry = this.forecastService.forecasts.find((fc: FcEntry) => {\r\n                return fc.monthId === month.id && fc.userId === user.id\r\n            });\r\n\r\n            if (forecast) {\r\n                //if(forecast.isRelevant) {\r\n                fte += forecast.fte;\r\n                //}\r\n            }\r\n        }\r\n\r\n        return fte.toFixed(2);\r\n    }\r\n\r\n    getTeam(user: User): String {\r\n        if (user.id === -1) {\r\n            return \"\";\r\n        }\r\n\r\n        let team = user;\r\n\r\n        if (team === undefined) {\r\n            return \"-\";\r\n        }\r\n\r\n        let parentId = user.parentId;\r\n\r\n        if (parentId === undefined) {\r\n            return team.lastName + \", \" + team.firstName;\r\n        }\r\n\r\n        let parentUser = this.userService.getUser(parentId);\r\n        let parentRole = this.userService.getRole(parentUser.roleId);\r\n\r\n        if (parentUser !== undefined) {\r\n            team = parentUser;\r\n\r\n            while (parentUser !== undefined && parentRole !== undefined && (parentRole.shortcut === \"CSS\" || parentRole.shortcut === \"PDL\")) {\r\n                parentId = parentUser.parentId;\r\n\r\n                if (parentId === undefined) {\r\n                    return team.lastName + \", \" + team.firstName;\r\n                }\r\n\r\n                parentUser = this.userService.getUser(parentId);\r\n\r\n                if (parentUser !== undefined) {\r\n                    parentRole = this.userService.getRole(parentUser.roleId);\r\n                }\r\n\r\n                team = parentUser;\r\n            }\r\n        }\r\n\r\n        if (team === undefined) {\r\n            return \"-\";\r\n        }\r\n\r\n        return team.lastName + \", \" + team.firstName + \" (\" + parentRole.shortcut + \")\";\r\n    }\r\n\r\n    getProjectHelper(forecasts: FcEntry[]): ProjectHelper[] {\r\n\r\n        let projectHelpers: ProjectHelper[] = []\r\n        var check: boolean = false;\r\n        for (let fcEntry of forecasts) {\r\n            for (let project of fcEntry.projects) {\r\n\r\n                let helper = projectHelpers.find((helper: ProjectHelper) => {\r\n                    return helper.projectId === project.projectId;\r\n                });\r\n\r\n                if (helper) {\r\n                    helper.days += project.plannedProjectDays;\r\n                }\r\n                else {\r\n                    let projectTemp: Project = this.forecastService.projects.find((pro: Project) => {\r\n                        return pro.id === project.projectId\r\n                    });\r\n\r\n                    let projectHelperTemp: ProjectHelper = new ProjectHelper;\r\n                    projectHelperTemp.days = project.plannedProjectDays;\r\n                    projectHelperTemp.projectId = project.projectId;\r\n                    projectHelperTemp.projectCode = projectTemp.name.split('-')[0];\r\n                    projectHelpers.push(projectHelperTemp);\r\n                }\r\n            }\r\n        }\r\n        return projectHelpers;\r\n    }\r\n\r\n    getProjects(user: User, viewColumn: String): String {\r\n\r\n        const projectIds = []\r\n        if (user.id === -1) {\r\n            return \"\";\r\n        }\r\n\r\n        let forecasts: FcEntry[] = [];\r\n        let forecast: FcEntry;\r\n\r\n        for (let month of this.months) {\r\n            forecast = this.forecastService.forecasts.find((fc: FcEntry) => {\r\n                return fc.monthId === month.id && fc.userId === user.id\r\n            });\r\n\r\n            if (forecast) {\r\n                forecasts.push(forecast);\r\n            }\r\n            forecast = null;\r\n        }\r\n\r\n        if (forecast) {\r\n            forecasts.push(forecast);\r\n        }\r\n\r\n        let forecastHelpers = this.getProjectHelper(forecasts);\r\n\r\n        if (viewColumn === \"table\") {\r\n            return this.getProjectCode(forecastHelpers);\r\n        }\r\n        else {\r\n            return this.getProjectCodes(forecastHelpers);\r\n        }\r\n    }\r\n\r\n    getProjectCode(forecastHelpers: ProjectHelper[]): String {\r\n\r\n        if (forecastHelpers.length <= 0) {\r\n            return \"no project\";\r\n        }\r\n\r\n        forecastHelpers.sort(function (a, b) {\r\n            return a.days - b.days;\r\n        }).reverse();\r\n\r\n        return forecastHelpers[0].projectCode.toString();\r\n    }\r\n\r\n    getProjectCodes(forecastHelpers: ProjectHelper[]): String {\r\n\r\n        if (forecastHelpers.length <= 0) {\r\n            return \"no project\";\r\n        }\r\n\r\n        forecastHelpers.sort(function (a, b) {\r\n            return a.days - b.days;\r\n        }).reverse();\r\n\r\n        let returnString = \" \";\r\n\r\n        for (let helper of forecastHelpers) {\r\n            if (helper.days !== 0) {\r\n                returnString += helper.projectCode + \"\\n\";\r\n            }\r\n        }\r\n        return returnString;\r\n    }\r\n\r\n    initStaffing(): void {\r\n        this.projects = this.utilityService.getProjects();\r\n        this.columnsToDisplay = [];\r\n        this.columnsToDisplay.push('name');\r\n        this.columnsToDisplay.push('team');\r\n        this.columnsToDisplay.push(\"corp\");\r\n        this.columnsToDisplay.push(\"projects\");\r\n\r\n        for (let month of this.months) {\r\n            this.columnsToDisplay.push(month.name);\r\n        }\r\n\r\n        if (!this.users.find((u: User) => u.id === -1)) {\r\n            let user: User = new User();\r\n            user.id = -1;\r\n            user.firstName = \"\";\r\n            user.lastName = \"Total\";\r\n            user.globalId = -1;\r\n            user.fte = 0;\r\n            this.users.unshift(user);\r\n        }\r\n    }\r\n\r\n    exportCSV(): void {\r\n        this.pageState.showSpinner();\r\n\r\n        let lineEnding = \"\\r\\n\";\r\n        let header: string = \"Employee;Team;Corp Id;\" + this.months.map(x => x.name + \" ARVE;\" + x.name + \" FTE\").join(\";\") + lineEnding;\r\n\r\n        let body = \"\";\r\n\r\n        let teams = new Map<string, User[]>();\r\n\r\n        for (let u of this.users) {\r\n            if (u.id === -1) {\r\n                continue;\r\n            }\r\n\r\n            let team = this.getTeam(u);\r\n            let teamContent: User[] = teams.get(team.toString());\r\n\r\n            if (teamContent === undefined) {\r\n                teams = teams.set(team.toString(), [u]);\r\n            } else {\r\n                teamContent.push(u);\r\n                teams = teams.set(team.toString(), teamContent);\r\n            }\r\n        }\r\n\r\n        let teamNames = Array.from(teams.keys());\r\n\r\n        for (let team of teamNames) {\r\n            body += team + lineEnding;\r\n            body += header;\r\n            body += teams.get(team).map(u => u.lastName + \", \" + u.firstName + \";\" +\r\n                team + \";\" +\r\n                u.globalId.toString() + \";\" +\r\n                this.months.map(x => this.parseForCSV(this.getMonthARVEFromPerson(x, u), 100, 4, 4) + \";\" +\r\n                    this.parseForCSV(this.getMonthFTEFromPerson(x, u), 1, 0)).join(\";\")).join(lineEnding);\r\n            body += lineEnding + lineEnding;\r\n        }\r\n        //summary\r\n        body += \"Summary\" + lineEnding;\r\n        body += this.months.map(x => x.name + \" ARVE;\" + x.name + \" FTE\").join(\";\") + lineEnding;\r\n        body += this.months.map(x => this.getTotalARVE(x) + \";\" + this.getTotalFTE(x)).join(\";\") + lineEnding;\r\n\r\n        const data = body;\r\n        const blob: Blob = new Blob([data], { type: \"text/csv\" });\r\n        const filename: string = this.datePipe.transform(new Date(), \"yyyyMMdd\") + \"-AllOverview.csv\";\r\n\r\n        this.pageState.hideSpinner();\r\n\r\n        let navigator: any = window.navigator;\r\n        //For IE\r\n        if (navigator.msSaveOrOpenBlob) {\r\n            navigator.msSaveOrOpenBlob(blob, filename);\r\n        //For any other browser\r\n        } else {\r\n            const url: string = window.URL.createObjectURL(blob);\r\n\r\n            let a: HTMLAnchorElement = document.createElement(\"a\");\r\n            a.href = url;\r\n            a.download = filename;\r\n\r\n            document.body.appendChild(a);\r\n            a.click();\r\n            document.body.removeChild(a);\r\n            window.URL.revokeObjectURL(url);\r\n        }\r\n    }\r\n\r\n    parseForCSV(toParse: string, div: number, minPrecision: number = 0, maxPrecision: number = 2): string {\r\n        if (toParse == \"-\") {\r\n            return \"0\";\r\n        }\r\n\r\n        let n = parseFloat(toParse) / div;\r\n        return n.toLocaleString(\"de\", { minimumFractionDigits: minPrecision, maximumFractionDigits: maxPrecision}).replace(\".\", \"\");\r\n    }\r\n\r\n    getMonthFTEFromPerson(month: Month, user: User): string {\r\n        if (user.id === -1) {\r\n            return this.getTotalFTE(month);\r\n        }\r\n\r\n        let forecast: FcEntry = this.forecastService.forecasts.find((fc: FcEntry) => {\r\n            return fc.monthId === month.id && fc.userId === user.id\r\n        });\r\n\r\n        if (forecast) {\r\n            return forecast.fte.toString();\r\n        } else {\r\n            return user.fte.toString();\r\n        }\r\n    }\r\n\r\n    getMonthARVEFromPerson(month: Month, user: User): string {\r\n        if (user.id === -1) {\r\n            return this.getTotalARVE(month);\r\n        }\r\n\r\n        let forecast: FcEntry = this.forecastService.forecasts.find((fc: FcEntry) => {\r\n            return fc.monthId === month.id && fc.userId === user.id\r\n        });\r\n\r\n        if (forecast) {\r\n            return (forecast.arve * 100).toFixed(2);\r\n        } else {\r\n            return \"-\";\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n    }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../assets/styles/variables.scss';\r\n\r\n.goodUt {\r\n  color:  green;\r\n}\r\n\r\n.medUt {  \r\n  color: orange;\r\n}\r\n\r\n.badUt {\r\n  color: red;\r\n}\r\n\r\n.mat-stroked-button {\r\n\tmargin: 5px;\r\n\tmargin-left: 0;\r\n}\r\n\r\n.accordion-header {\r\n    display: flex;\r\n    flex: 1;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    padding: 15px 45px 15px 15px;\r\n    color: map-get($font-colors, black);\r\n    margin-right: 8px;\r\n  \r\n    div {\r\n      display: flex;\r\n      flex-grow: 1;\r\n      width: 0;\r\n      margin-right: 0;\r\n  \r\n      &:first-child {\r\n        padding-left: 10px;\r\n      }\r\n  \r\n      &:last-child {\r\n        flex-grow: 2;\r\n        text-align: center;\r\n      }\r\n  \r\n      span {\r\n        flex: 1;\r\n        word-break: break-word;\r\n      }\r\n    }\r\n  }\r\n\r\n  .tooltip{\r\n    background: transparent;\r\n    border: none;\r\n  }",
                    "styleUrl": "./staffing-overview.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor for staffing-overview component\n @param forecastService</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilityService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 60,
                "rawdescription": "\n\nconstructor for staffing-overview component\n @param forecastService\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 2014,
                            "end": 2029,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "forecastService"
                        },
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2008,
                            "end": 2013,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilityService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "OnChanges"
            ],
            "templateData": "<button mat-stroked-button class=\"mat-primary-reversed\" color=\"primary\" (click)=\"exportCSV()\">\r\n    <mat-icon>insert_drive_file</mat-icon> Export CSV\r\n</button>\r\n<table mat-table matSort [dataSource]=\"users\">\r\n    <ng-container matColumnDef=\"name\">\r\n        <th mat-header-cell mat-sort-header *matHeaderCellDef>Name</th>\r\n        <td mat-cell *matCellDef=\"let user\">{{user.lastName}}{{user.firstName.length > 0 ? \",\": \"\"}} {{user.firstName}}</td>\r\n    </ng-container>\r\n    <ng-container matColumnDef=\"team\">\r\n        <th mat-header-cell mat-sort-header *matHeaderCellDef>Team</th>\r\n        <td mat-cell *matCellDef=\"let user\">{{getTeam(user)}}</td>\r\n    </ng-container>\r\n    <ng-container matColumnDef=\"corp\">\r\n        <th mat-header-cell mat-sort-header *matHeaderCellDef>Corp Id</th>\r\n        <td mat-cell *matCellDef=\"let user\">{{user.globalId > -1 ? user.globalId : \"\"}}</td>\r\n    </ng-container>\r\n    <ng-container matColumnDef=\"projects\">\r\n        <th mat-header-cell mat-sort-header *matHeaderCellDef>Projects</th>\r\n        <td mat-cell *matCellDef=\"let user\"><button class=\"tooltip\" #tooltip=\"matTooltip\"\r\n                matTooltip=\"{{getProjects(user,'tooltip')}}\" matTooltipPosition=\"right\">{{getProjects(user, 'table')}}\r\n            </button></td>\r\n    </ng-container>\r\n    <ng-container matColumnDef=\"{{month.name}}\" *ngFor=\"let month of months\">\r\n        <th mat-header-cell mat-sort-header *matHeaderCellDef>{{month.name}}</th>\r\n        <td mat-cell *matCellDef=\"let user\" [ngClass]=\"{\r\n            'goodUt' : getMonthARVEFromPerson(month,user) >= 80,\r\n            'medUt' : getMonthARVEFromPerson(month,user) < 80 && getMonthARVEFromPerson(month,user) >= 60,\r\n            'badUt' : getMonthARVEFromPerson(month,user) < 60\r\n        }\">{{getMonthARVEFromPerson(month,user)}} % ({{getMonthFTEFromPerson(month,user)}} FTE)</td>\r\n    </ng-container>\r\n    <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\r\n    <tr mat-row *matRowDef=\"let row; columns: columnsToDisplay\"></tr>\r\n</table>"
        },
        {
            "name": "SubcoExecutiveChartComponent",
            "id": "component-SubcoExecutiveChartComponent-c1ce8adf328209755155671615f14a0c",
            "file": "src/app/forecast/components/subco-executive-chart/subco-executive-chart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-subco-executive-chart",
            "styleUrls": [
                "./subco-executive-chart.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./subco-executive-chart.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "month",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "month (received as input)",
                    "description": "<p>month (received as input)</p>\n",
                    "line": 29,
                    "type": "Month"
                },
                {
                    "name": "months",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "Month[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "averageFTEExternal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "averageFTEInternal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "averageFTEOffshore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<SubcoExecutiveChartComponent>",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "monthLabels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "showComponent",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "subCoDetailTotals",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SubCoDetailTotals[]",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "totalCostExternal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "totalCostInternal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "totalCostOffshore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "totalCPExternal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "totalCPInternal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "totalCPOffshore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "totalRevenueExternal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "totalRevenueInternal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "totalRevenueOffshore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "totalsSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 49
                }
            ],
            "methodsClass": [
                {
                    "name": "average",
                    "args": [
                        {
                            "name": "numArray",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "numArray",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "exportCSV",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "numberToString",
                    "args": [
                        {
                            "name": "no",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 219,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "no",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "processTableData",
                    "args": [
                        {
                            "name": "totals",
                            "type": "SubCoDetailTotals[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "totals",
                            "type": "SubCoDetailTotals[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "total",
                    "args": [
                        {
                            "name": "numArray",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "numArray",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, Inject } from \"@angular/core\";\r\nimport {\r\n  MatDialogRef,\r\n  MAT_DIALOG_DATA\r\n} from \"@angular/material/dialog\";\r\nimport { ExecutiveForecastsService } from \"../../../core/services/forecasts/executive-forecasts.service\";\r\nimport { MonthlySummaryReport } from \"../../../core/interfaces/kpiData\";\r\nimport { PageStateService } from \"../../../core/shared/page-state.service\";\r\nimport { DatePipe } from '@angular/common';\r\nimport { Subscription } from \"rxjs\";\r\n\r\nimport { SubCoTotals } from \"../../../core/interfaces/subCoTotals\";\r\nimport { SubCoDetailTotals } from \"../../../core/interfaces/subCoDetailTotals\";\r\nimport { SubCoService } from \"../../../core/services/subCo.service\";\r\nimport { Month } from \"../../../core/interfaces/month\";\r\nimport { UtilitiesService } from \"../../../core/services/utilities.service\";\r\n\r\n\r\n@Component({\r\n  selector: \"app-subco-executive-chart\",\r\n  templateUrl: \"./subco-executive-chart.component.html\",\r\n  styleUrls: [\"./subco-executive-chart.component.scss\"]\r\n})\r\nexport class SubcoExecutiveChartComponent implements OnInit {\r\n\r\n  /**\r\n   * month (received as input)\r\n   */\r\n   @Input('month') month: Month;\r\n   @Input('months') months: Month[];\r\n  showComponent: boolean = false;\r\n  \r\n  subCoDetailTotals: SubCoDetailTotals[];   \r\n  monthLabels: string[];\r\n\r\n  totalRevenueInternal: number[];\r\n  totalRevenueExternal: number[];\r\n  totalRevenueOffshore: number[];\r\n  totalCostInternal: number[];\r\n  totalCostExternal: number[];\r\n  totalCostOffshore: number[];\r\n  averageFTEInternal: number[];\r\n  averageFTEExternal: number[];\r\n  averageFTEOffshore: number[];\r\n  totalCPInternal: number[];\r\n  totalCPExternal: number[];\r\n  totalCPOffshore: number[];\r\n  \r\n  totalsSubscription: Subscription;\r\n\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<SubcoExecutiveChartComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any,\r\n    private subcoService: SubCoService,\r\n    private pageState: PageStateService,\r\n    private datePipe: DatePipe,\r\n    private utilitiesService: UtilitiesService,\r\n\r\n  ) {  \r\n    this.totalRevenueInternal = [];\r\n    this.totalRevenueExternal = [];\r\n    this.totalRevenueOffshore= [];\r\n    this.totalCostInternal= [];\r\n    this.totalCostExternal= [];\r\n    this.totalCostOffshore= [];\r\n    this.averageFTEInternal= [];\r\n    this.averageFTEExternal= [];\r\n    this.averageFTEOffshore= [];\r\n    this.monthLabels = [];\r\n    this.totalCPInternal = [];\r\n    this.totalCPExternal = [];\r\n    this.totalCPOffshore = [];\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n\r\n    \r\n    this.months = this.utilitiesService.getMonths();\r\n    const dateObj = new Date();\r\n    const monthName = dateObj.toLocaleString(\"default\", { month: \"short\" });\r\n    var year = dateObj.getFullYear();\r\n    var last = String(year).slice(-2);\r\n    var monthYear = monthName + \" '\"+last;\r\n    var i = 0;\r\n    for (i = 0; i < this.months.length; i++) {\r\n      if(this.months[i].name.includes(monthYear))\r\n      {\r\n        break;\r\n      }\r\n    }\r\n    \r\n    this.subcoService.initializeSubcoDetailTotalsForMonthRange(i+2,i+7);\r\n\r\n\r\n    this.totalsSubscription = this.subcoService.subCoDetailTotals$\r\n    .subscribe((subcoDetailTotals: SubCoDetailTotals[]) => {\r\n      this.subCoDetailTotals = subcoDetailTotals;\r\n      this.subCoDetailTotals = this.subCoDetailTotals.sort(function(a, b) { return a.monthId-b.monthId });\r\n      if (this.subCoDetailTotals.length > 0) {\r\n       this.processTableData(this.subCoDetailTotals);\r\n     this.showComponent = true;    \r\n     }\r\n    });\r\n  }\r\n\r\n  processTableData(totals: SubCoDetailTotals[]) : void {\r\n    const dateObj = new Date();\r\n    const monthName = dateObj.toLocaleString(\"default\", { month: \"short\" });\r\n    var year = dateObj.getFullYear();\r\n    var last = String(year).slice(-2);\r\n    var monthYear = monthName + \" '\"+last;\r\n    var i = 0;\r\n    for (i = 0; i < this.months.length; i++) {\r\n      if(this.months[i].name.includes(monthYear))\r\n      {\r\n        break;\r\n      }\r\n    }\r\n    \r\n    i=i+1;\r\n\r\n    this.totalRevenueInternal = [];\r\n    this.totalRevenueExternal = [];\r\n    this.totalRevenueOffshore= [];\r\n    this.totalCostInternal= [];\r\n    this.totalCostExternal= [];\r\n    this.totalCostOffshore= [];\r\n    this.averageFTEInternal= [];\r\n    this.averageFTEExternal= [];\r\n    this.averageFTEOffshore= [];\r\n    this.totalCPInternal = [];\r\n    this.totalCPExternal = [];\r\n    this.totalCPOffshore = [];\r\n    this.monthLabels = [];\r\n\r\n    for (let total of totals) {\r\n    \r\n      this.totalRevenueInternal.push(total.subcontractorTotals.totalRevenueInternal);\r\n      this.totalRevenueExternal.push(total.subcontractorTotals.totalRevenueExternal);\r\n      this.totalRevenueOffshore.push(total.subcontractorTotals.totalRevenueOffshore);\r\n      this.totalCostInternal.push(total.subcontractorTotals.totalCostInternal);\r\n      this.totalCostExternal.push(total.subcontractorTotals.totalCostExternal);\r\n      this.totalCostOffshore.push(total.subcontractorTotals.totalCostOffshore);\r\n      this.averageFTEInternal.push(total.subcontractorTotals.averageFTEInternal);\r\n      this.averageFTEExternal.push(total.subcontractorTotals.averageFTEExternal);\r\n      this.averageFTEOffshore.push(total.subcontractorTotals.averageFTEOffshore);\r\n      this.totalCPInternal.push(total.subcontractorTotals.totalCPInternal * 100);\r\n      this.totalCPExternal.push(total.subcontractorTotals.totalCPExternal* 100);\r\n      this.totalCPOffshore.push(total.subcontractorTotals.totalCPOffshore* 100);\r\n\r\n      this.monthLabels.push(this.months[i].name);  \r\n      i++;\r\n    }\r\n\r\n\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.totalsSubscription.unsubscribe();\r\n  }\r\n\r\n  total(numArray: number[]) {\r\n    return numArray.reduce(function(a, b) {\r\n      return a + b;\r\n    }, 0);\r\n  }\r\n\r\n  average(numArray: number[]) : number {\r\n    return this.total(numArray) / numArray.length;\r\n  }\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  exportCSV(): void {\r\n    this.pageState.showSpinner();\r\n    let lineEnding = \"\\r\\n\";\r\n    let header = \"KPI;\" + this.monthLabels.join(\";\") + lineEnding;\r\n    let body: string = \r\n      \"Total Int. Revenue;\" + this.totalRevenueInternal.map(this.numberToString).join(\";\") + lineEnding + \r\n      \"Total Ext. Revenue;\" + this.totalRevenueExternal.map(this.numberToString).join(\";\") + lineEnding +\r\n      \"Total Off. Revenue;\" + this.totalRevenueOffshore.map(this.numberToString).join(\";\") + lineEnding +\r\n      \"Total Int. Cost;\" + this.totalCostInternal.map(this.numberToString).join(\";\") + lineEnding +\r\n      \"Total Ext. Cost;\" + this.totalCostExternal.map(this.numberToString).join(\";\") + lineEnding + \r\n      \"Total Off. Cost;\" + this.totalCostOffshore.map(this.numberToString).join(\";\") + lineEnding +\r\n      \"Avg. Int. FTE;\" + this.averageFTEInternal.map(this.numberToString).join(\";\") + lineEnding +\r\n      \"Avg. Ext. FTE;\" + this.averageFTEExternal.map(this.numberToString).join(\";\") + lineEnding +\r\n      \"Avg. Off. FTE;\" + this.averageFTEOffshore.map(this.numberToString).join(\";\") + lineEnding +\r\n      \"Total Int. CP;\" + this.totalCPInternal.map(this.numberToString).join(\";\") + lineEnding +\r\n      \"Total Ext. CP;\" + this.totalCPExternal.map(this.numberToString).join(\";\") + lineEnding +\r\n      \"TOtal Off. CP;\" + this.totalCPOffshore.map(this.numberToString).join(\";\") + lineEnding;\r\n    const data = header + body;\r\n    const blob: Blob = new Blob([data], { type: \"text/csv\" });\r\n    const filename: string = this.datePipe.transform(new Date(), \"yyyyMMdd\") + \"-SubCoKPIOverview.csv\";    \r\n    this.pageState.hideSpinner();\r\n\r\n    //For IE\r\n    let navigator: any = window.navigator;\r\n    if (navigator.msSaveOrOpenBlob) {\r\n      navigator.msSaveOrOpenBlob(blob, filename);\r\n    //For any other browser\r\n    } else {\r\n      const url: string = window.URL.createObjectURL(blob);\r\n\r\n      let a: HTMLAnchorElement = document.createElement(\"a\");\r\n      a.href = url;\r\n      a.download = filename;\r\n\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      document.body.removeChild(a);\r\n      window.URL.revokeObjectURL(url);\r\n    }\r\n  }\r\n\r\n  numberToString(no: number): string {\r\n    return no.toLocaleString(\"de\",  { minimumFractionDigits: 0, maximumFractionDigits: 2 } ).replace(\".\",\"\");\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".w-100 {\r\n  width: 100%;\r\n}\r\n\r\n.w-50 {\r\n  width: 50%;\r\n}\r\n\r\n.h-100 {\r\n  height: 100%;\r\n}\r\n\r\n.p-16 {\r\n  padding: 16px;\r\n}\r\n\r\n.px-16 {\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n}\r\n\r\n.pt-5 {\r\n  padding-top: 5px;\r\n}\r\n.example-fill-remaining-space {\r\n  /* This fills the remaining space, by using flexbox. \r\n     Every toolbar row uses a flexbox row layout. */\r\n  flex: 1 1 auto;\r\n}\r\n\r\n.white {\r\n  color: #ffffff;\r\n}\r\n\r\n.fix {\r\n  display: flex;\r\n  color: #ffffff;\r\n  background-color: #0070ad;\r\n  height: 50px;\r\n  padding: 0px;\r\n  padding-left: 24px;\r\n  padding-right: 24px;\r\n  line-height: 3.3;\r\n}\r\n\r\n.fix .title {\r\n  color: #fff;\r\n  padding-left: 14px;\r\n}\r\n.stats-table-header {\r\n  font-family: \"Roboto\", sans-serif;\r\n  text-align: center;\r\n  padding: 12px;\r\n}\r\n\r\n.stats-table-header:first-of-type {\r\n  font-family: \"Roboto\", sans-serif;\r\n  text-align: left;\r\n  padding: 12px;\r\n}\r\n\r\n.stats-table-cell:first-of-type {\r\n  font-family: \"Roboto\", sans-serif;\r\n  text-align: left;\r\n  font-size: 12px;\r\n  line-height: 1.3em;\r\n  padding: 12px;\r\n}\r\n\r\n.stats-table-cell {\r\n  font-family: \"Roboto\", sans-serif;\r\n  text-align: center;\r\n  font-size: 12px;\r\n  line-height: 1.3em;\r\n  padding: 12px;\r\n}\r\n\r\n.border-collapse {\r\n  border-collapse: collapse;\r\n}\r\n\r\n.border-line {\r\n  border-bottom: 1px solid #e0e0e0;\r\n  border-collapse: separate;\r\n  border-spacing: 4px;\r\n}\r\n\r\n.color-grey {\r\n  color: grey;\r\n}\r\n\r\n.mat-stroked-button {\r\n\tmargin: 5px;\r\n\tmargin-left: 0;\r\n}\r\n\r\n.button-rows {\r\n\tdisplay: flex;\r\n\t.button-row {\r\n    width: 50%\r\n  }\r\n}",
                    "styleUrl": "./subco-executive-chart.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<SubcoExecutiveChartComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "subcoService",
                        "type": "SubCoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<SubcoExecutiveChartComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "subcoService",
                        "type": "SubCoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\r\n  <div\r\n    mat-dialog-title\r\n    class=\"fix\"\r\n    layout=\"row\"\r\n    layout-align=\"space-between center\"\r\n    style=\"margin-bottom: 0px; padding-bottom: 0;\"\r\n  >\r\n    <span>Subco Totals Overview</span>\r\n\r\n    <!-- This fills the remaining space of the current row -->\r\n    <span class=\"example-fill-remaining-space\"></span>\r\n\r\n    <button mat-icon-button (click)=\"onNoClick()\">\r\n      <mat-icon class=\"white\">close</mat-icon>\r\n    </button>\r\n  </div>\r\n\r\n  <div mat-dialog-content>\r\n    <div layout=\"row\" layout-wrap *ngIf=\"showComponent\">\r\n      <div flex=\"100\" class=\"px-16 pt-5\">\r\n        Overview/Summary of the Subcontractor KPIs for the next 6 Months. \r\n\r\n        <table class=\"border-collapse w-100 h-100\">\r\n          <thead class=\"border-line color-grey\">\r\n            <tr>\r\n              <td class=\"stats-table-header\">KPI</td>\r\n              <td *ngFor=\"let m of monthLabels\" class=\"stats-table-header\">\r\n                {{ m }}\r\n              </td>\r\n            </tr>\r\n          </thead> \r\n          <tbody>\r\n            <!--Total Int. Revenue -->\r\n            <tr class=\"border-line\">\r\n              <td class=\"stats-table-cell\">Total Int. Revenue</td>\r\n              <td class=\"stats-table-cell\" *ngFor=\"let t of totalRevenueInternal\">  \r\n                {{ t | number: '1.0-2': 'de' }}\r\n              </td>\r\n              <td class=\"stats-table-cell\">{{ t | number: '1.0-2': 'de'}}</td>\r\n            </tr>\r\n\r\n            <!--Total Ext. Revenue -->\r\n            <tr class=\"border-line\">\r\n              <td class=\"stats-table-cell\">Total Ext. Revenue</td>\r\n              <td class=\"stats-table-cell\" *ngFor=\"let t of totalRevenueExternal\">\r\n                {{ t | number: '1.0-2': 'de' }}\r\n              </td>\r\n              <td class=\"stats-table-cell\">{{ t | number: '1.0-2': 'de' }}</td>\r\n            </tr>\r\n\r\n            <!--Total Off. Revenue -->\r\n            <tr class=\"border-line\">\r\n              <td class=\"stats-table-cell\">Total Off. Revenue</td>\r\n              <td class=\"stats-table-cell\" *ngFor=\"let t of totalRevenueOffshore\">\r\n                {{ t | number: '1.0-2': 'de' }}\r\n              </td>\r\n              <td class=\"stats-table-cell\">{{ t | number: '1.0-2': 'de' }}</td>\r\n            </tr>\r\n\r\n            <!--Total Int. Cost-->\r\n            <tr class=\"border-line\">\r\n              <td class=\"stats-table-cell\">Total Int. Cost</td>\r\n              <td class=\"stats-table-cell\" *ngFor=\"let t of totalCostInternal\">\r\n                {{t | number: '1.0-2': 'de' }}\r\n              </td>\r\n              <td class=\"stats-table-cell\">{{ t | number: '1.0-2': 'de' }}</td>\r\n            </tr>\r\n\r\n            <!--Total Ext. Cost -->\r\n            <tr class=\"border-line\">\r\n              <td class=\"stats-table-cell\">Total Ext. Cost</td>\r\n              <td class=\"stats-table-cell\" *ngFor=\"let t of totalCostExternal\">\r\n                {{ t | number: '1.0-2': 'de'}}\r\n              </td>\r\n              <td class=\"stats-table-cell\">{{ t | number: '1.0-2': 'de' }}</td>\r\n            </tr>\r\n\r\n            <!--Total Off. Cost -->\r\n            <tr class=\"border-line\">\r\n              <td class=\"stats-table-cell\">Total Off. Cost</td>\r\n              <td class=\"stats-table-cell\" *ngFor=\"let t of totalCostOffshore\">\r\n                {{ t | number: '1.0-2': 'de'}}\r\n              </td>\r\n              <td class=\"stats-table-cell\">{{ t | number: '1.0-2': 'de' }}</td>\r\n            </tr>\r\n\r\n            <!--Avg. Int. FTE -->\r\n            <tr class=\"border-line\">\r\n              <td class=\"stats-table-cell\">Avg. Int. FTE</td>\r\n              <td class=\"stats-table-cell\" *ngFor=\"let t of averageFTEInternal\">\r\n                {{ t | number: '1.0-2': 'de'}}\r\n              </td>\r\n              <td class=\"stats-table-cell\">{{ t | number: '1.0-2': 'de' }}</td>\r\n            </tr>\r\n             <!--Avg. Ext. FTE -->\r\n             <tr class=\"border-line\">\r\n              <td class=\"stats-table-cell\">Avg. Ext. FTE</td>\r\n              <td class=\"stats-table-cell\" *ngFor=\"let t of averageFTEExternal\">\r\n                {{ t | number: '1.0-2': 'de'}}\r\n              </td>\r\n              <td class=\"stats-table-cell\">{{ t | number: '1.0-2': 'de' }}</td>\r\n            </tr>\r\n             <!--Avg. Off. FTE -->\r\n             <tr class=\"border-line\">\r\n              <td class=\"stats-table-cell\">Avg. Off. FTE</td>\r\n              <td class=\"stats-table-cell\" *ngFor=\"let t of averageFTEOffshore\">\r\n                {{ t | number: '1.0-2': 'de'}}\r\n              </td>\r\n              <td class=\"stats-table-cell\">{{ t | number: '1.0-2': 'de' }}</td>\r\n            </tr>\r\n             <!--Total. Int. CP -->\r\n             <tr class=\"border-line\">\r\n              <td class=\"stats-table-cell\">Total. Int. CP</td>\r\n              <td class=\"stats-table-cell\" *ngFor=\"let t of totalCPInternal\">\r\n                {{t | number:'1.0-2':'de'}}%\r\n              </td>\r\n              <td class=\"stats-table-cell\">{{ t | number: '1.0-2': 'de' }}</td>\r\n            </tr>\r\n             <!--Total. Ext. CP -->\r\n             <tr class=\"border-line\">\r\n              <td class=\"stats-table-cell\">Total. Ext. CP</td>\r\n              <td class=\"stats-table-cell\" *ngFor=\"let t of totalCPExternal\">\r\n                {{t | number:'1.0-2':'de'}}%\r\n              </td>\r\n              <td class=\"stats-table-cell\">{{ t | number: '1.0-2': 'de' }}</td>\r\n            </tr>\r\n             <!--Total. Off. CP -->\r\n             <tr class=\"border-line\">\r\n              <td class=\"stats-table-cell\">Total. Off. CP</td>\r\n              <td class=\"stats-table-cell\" *ngFor=\"let t of totalCPOffshore\">\r\n                {{t | number:'1.0-2':'de'}}%\r\n              </td>\r\n              <td class=\"stats-table-cell\">{{ t | number: '1.0-2': 'de' }}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n\r\n    <br />\r\n    <br />\r\n\r\n\r\n  </div>\r\n\r\n  <div mat-dialog-actions\r\n    style=\"background-color: #0070ad; margin-bottom: 0px;\"\r\n    layout=\"row\" \r\n    layout-align=\"space-between center\"  \r\n    class=\"fix\" >\r\n        <button mat-stroked-button class=\"mat-primary-reversed\" class=\"button-rows\" color=\"primary\" style=\"background-color: white;\" (click)=\"exportCSV()\">\r\n          <mat-icon>insert_drive_file</mat-icon> Export CSV\r\n        </button>\r\n  </div>"
        },
        {
            "name": "SubcoExecutiveDetailComponent",
            "id": "component-SubcoExecutiveDetailComponent-142ac9c9337915390988845abf2d967e",
            "file": "src/app/forecast/components/subco-executive-detail/subco-executive-detail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-subco-executive-detail",
            "styleUrls": [
                "./subco-executive-detail.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./subco-executive-detail.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "month",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "month (received as input)",
                    "description": "<p>month (received as input)</p>\n",
                    "line": 49,
                    "type": "Month"
                },
                {
                    "name": "months",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "Month[]"
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "string"
                },
                {
                    "name": "switchState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "viewSwitch",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nviewSwitch saves if the PL of PDL View is shown as Output\n",
                    "description": "<p>viewSwitch saves if the PL of PDL View is shown as Output</p>\n",
                    "line": 56,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "line": 145,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "externalMonthRange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SubCoFcIntExt[]",
                    "optional": false,
                    "description": "<p>list of all subco dtos for internal</p>\n",
                    "line": 84,
                    "rawdescription": "\n\nlist of all subco dtos for internal\n"
                },
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "fte",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>sum all FTE</p>\n",
                    "line": 65,
                    "rawdescription": "\n\nsum all FTE\n"
                },
                {
                    "name": "internalExternal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SubCoFcIntExt[]",
                    "optional": false,
                    "description": "<p>list of all subco dtos for internal</p>\n",
                    "line": 70,
                    "rawdescription": "\n\nlist of all subco dtos for internal\n"
                },
                {
                    "name": "internalMonthRange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SubCoFcIntExt[]",
                    "optional": false,
                    "description": "<p>list of all subco dtos for internal</p>\n",
                    "line": 80,
                    "rawdescription": "\n\nlist of all subco dtos for internal\n"
                },
                {
                    "name": "loadingActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "offshoreAverage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SubCoFcOffshore",
                    "optional": false,
                    "description": "<p>list of all subco dtos for offshore</p>\n",
                    "line": 94,
                    "rawdescription": "\n\nlist of all subco dtos for offshore\n"
                },
                {
                    "name": "offshoreTotals",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SubCoFcOffshore[]",
                    "optional": false,
                    "description": "<p>list of all subco dtos for offshore</p>\n",
                    "line": 75,
                    "rawdescription": "\n\nlist of all subco dtos for offshore\n"
                },
                {
                    "name": "offshoreTotalsRange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SubCoFcOffshore[]",
                    "optional": false,
                    "description": "<p>list of all subco dtos for offshore</p>\n",
                    "line": 89,
                    "rawdescription": "\n\nlist of all subco dtos for offshore\n"
                },
                {
                    "name": "subCoTotals",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SubCoDetailTotals[]",
                    "optional": false,
                    "description": "<p>contains totals-data</p>\n",
                    "line": 127,
                    "rawdescription": "\n\ncontains totals-data\n"
                },
                {
                    "name": "teamSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 98
                },
                {
                    "name": "totals",
                    "defaultValue": "{\r\n    revenue: 0,\r\n    cost: 0,\r\n    contribution: 0,\r\n    cp: 0\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 102
                },
                {
                    "name": "totalsCSVMonth",
                    "defaultValue": "{\r\n    revenue: 0,\r\n    cost: 0,\r\n    contribution: 0,\r\n    cp: 0,\r\n    manDay: 0\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 116
                },
                {
                    "name": "totalsOffshore",
                    "defaultValue": "{\r\n    revenue: 0,\r\n    cost: 0,\r\n    contribution: 0,\r\n    cp: 0\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 109
                },
                {
                    "name": "totalsSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 129
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 96
                }
            ],
            "methodsClass": [
                {
                    "name": "changeView",
                    "args": [
                        {
                            "name": "status",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 268,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\nchanges the status of pl or pdl and sends it to parent\n",
                    "description": "<p>changes the status of pl or pdl and sends it to parent</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8128,
                                "end": 8134,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "status"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8122,
                                "end": 8127,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>changes the status of pl or pdl and sends it to parent</p>\n"
                        }
                    ]
                },
                {
                    "name": "exportCSV",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 286,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "filterUpdate",
                    "args": [
                        {
                            "name": "filter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 237,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTeamValue",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 259,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturn value for given type (used for arve + urve + revenue + workingdays)\n",
                    "description": "<p>Return value for given type (used for arve + urve + revenue + workingdays)</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7991,
                                "end": 7995,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "originalKeywordKind": 149,
                                "escapedText": "type"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7985,
                                "end": 7990,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 8009,
                                "end": 8015,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "userId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8003,
                                "end": 8008,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getTotals",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 561,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTotalsForSpecificMonth",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 520,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTotalsOffshore",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 581,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getValues",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 209,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "IsExecutive",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 247,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isFinancialController",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 243,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 283,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\n",
                    "description": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\n",
                    "description": ""
                },
                {
                    "name": "numberToString",
                    "args": [
                        {
                            "name": "no",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "precision",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 516,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "no",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "precision",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openDashboardSubco",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 601,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submitAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 272,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "subscribeMonthRange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 498,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "unlockAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 276,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>teamlead summary component</p>\n",
            "rawdescription": "\n\nteamlead summary component\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, OnDestroy, Output, EventEmitter } from \"@angular/core\";\r\nimport { MatDialog, MatDialogRef } from \"@angular/material/dialog\";\r\nimport { MatSnackBar } from \"@angular/material/snack-bar\";\r\nimport { MatTableDataSource } from \"@angular/material/table\";\r\nimport { cloneDeep } from 'lodash';\r\n\r\nimport { UtilitiesService } from \"../../../core/services/utilities.service\";\r\nimport { ForecastService } from \"../../../core/services/forecasts/forecast.service\";\r\nimport { UserService } from \"../../../core/services/user.service\";\r\n\r\nimport { FcEntry } from \"../../../core/interfaces/fcEntry\";\r\nimport { Project } from \"../../../core/interfaces/project\";\r\nimport { Month } from \"../../../core/interfaces/month\";\r\nimport { User } from \"../../../core/interfaces/user\";\r\n\r\nimport { Subscription } from \"rxjs\";\r\nimport { ExecutiveForecastsService } from \"../../../core/services/forecasts/executive-forecasts.service\";\r\nimport { FcProject } from \"../../../core/interfaces/fcProject\";\r\nimport { ConfirmMessageDialog } from \"../../dialogs/confirm-message/confirm-message.dialog\";\r\nimport { TeamForecastService } from \"../../../core/services/forecasts/team-forecasts.service\";\r\nimport { PageStateService } from \"../../../core/shared/page-state.service\";\r\nimport { AuthService } from \"../../../core/security/auth.service\";\r\nimport { environment as env } from \"../../../../environments/environment\";\r\nimport { DatePipe } from \"@angular/common\";\r\nimport { SubCoFcIntExt } from \"../../../core/interfaces/subCoFcIntExt\";\r\nimport { SubCoFcOffshore } from \"../../../core/interfaces/subCoFcOffshore\";\r\nimport { getMultipleValuesInSingleSelectionError } from \"@angular/cdk/collections\";\r\nimport { SubCoFinancialControllerService } from \"../../../core/services/subCoFinancialController.service\";\r\nimport { SubcoSummaryComponent } from \"../subco-summary/subco-summary.component\";\r\nimport { MatCalendarBody } from \"@angular/material/datepicker\";\r\nimport { ExecutiveChartComponent } from \"../executive-chart/executive-chart.component\";\r\nimport { SubcoExecutiveChartComponent } from \"../subco-executive-chart/subco-executive-chart.component\";\r\nimport { SubCoService } from \"../../../core/services/subCo.service\";\r\nimport { SubCoDetailTotals } from \"../../../core/interfaces/subCoDetailTotals\";\r\nimport { SubCoForecastService } from \"../../../core/services/subCoForecast.service\";\r\nimport { SubCoDetails } from \"../../../core/interfaces/subCoDetails\";\r\n/**\r\n * teamlead summary component\r\n */\r\n@Component({\r\n  selector: \"app-subco-executive-detail\",\r\n  templateUrl: \"./subco-executive-detail.component.html\",\r\n  styleUrls: [\"./subco-executive-detail.component.scss\"]\r\n})\r\nexport class SubcoExecutiveDetailComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * month (received as input)\r\n   */\r\n  @Input('month') month: Month;\r\n  @Input('months') months: Month[];\r\n  @Input('role') role: string;\r\n\r\n  /**\r\n   * viewSwitch saves if the PL of PDL View is shown as Output\r\n   */\r\n  @Output() viewSwitch = new EventEmitter<string>();\r\n\r\n  @Input('switchState') switchState: string;\r\n\r\n  filter: string;\r\n\r\n  /**\r\n   * sum all FTE\r\n   */\r\n  fte: number;\r\n\r\n  /**\r\n   * list of all subco dtos for internal\r\n   */\r\n  internalExternal: SubCoFcIntExt[];\r\n\r\n  /**\r\n  * list of all subco dtos for offshore\r\n  */\r\n  offshoreTotals: SubCoFcOffshore[];\r\n\r\n  /**\r\n* list of all subco dtos for internal\r\n*/\r\n  internalMonthRange: SubCoFcIntExt[];\r\n  /**\r\n * list of all subco dtos for internal\r\n */\r\n  externalMonthRange: SubCoFcIntExt[];\r\n\r\n  /**\r\n  * list of all subco dtos for offshore\r\n  */\r\n  offshoreTotalsRange: SubCoFcOffshore[];\r\n\r\n  /**\r\n* list of all subco dtos for offshore\r\n*/\r\n  offshoreAverage: SubCoFcOffshore;\r\n\r\n  userId: number;\r\n\r\n  teamSubscription: Subscription;\r\n\r\n  loadingActive: boolean = false;\r\n\r\n  totals: any = {\r\n    revenue: 0,\r\n    cost: 0,\r\n    contribution: 0,\r\n    cp: 0\r\n  };\r\n\r\n  totalsOffshore: any = {\r\n    revenue: 0,\r\n    cost: 0,\r\n    contribution: 0,\r\n    cp: 0\r\n  };\r\n\r\n  totalsCSVMonth: any = {\r\n    revenue: 0,\r\n    cost: 0,\r\n    contribution: 0,\r\n    cp: 0,\r\n    manDay: 0\r\n  }\r\n\r\n  /**\r\n     * contains totals-data \r\n     */\r\n  subCoTotals: SubCoDetailTotals[];\r\n\r\n  totalsSubscription: Subscription;\r\n\r\n  /**\r\n   * constructor for teamlead-summary component\r\n   * @param datePipe\r\n   * @param dialog\r\n   * @param utilitiesService\r\n   * @param forecastService\r\n   * @param teamForecastService\r\n   * @param userService\r\n   * @param pageState\r\n   */\r\n  constructor(\r\n    private subcoFinancialControllerService: SubCoFinancialControllerService,\r\n    private subcoService: SubCoService,\r\n    private subcoForecastService: SubCoForecastService,\r\n    public dialog: MatDialog,\r\n    private snackBar: MatSnackBar,\r\n    private authService: AuthService,\r\n    private datePipe: DatePipe,\r\n    private pageState: PageStateService,\r\n  ) {\r\n    this.filter = 'internal'; // 'internal', 'external' or 'offshore'\r\n    this.userId = this.authService.getUserId();\r\n    this.fte = 0;\r\n    this.totals = {\r\n      manday: 0,\r\n      revenue: 0,\r\n      cost: 0,\r\n      contribution: 0,\r\n      cp: 0\r\n    };\r\n\r\n    this.totalsOffshore = {\r\n      manday: 0,\r\n      revenue: 0,\r\n      cost: 0,\r\n      contribution: 0,\r\n      cp: 0\r\n    };\r\n\r\n    this.totalsCSVMonth = {\r\n      revenue: 0,\r\n      cost: 0,\r\n      contribution: 0,\r\n      cp: 0,\r\n      manday: 0\r\n    };\r\n  }\r\n\r\n  /**\r\n   * \r\n   */\r\n  ngOnInit(): void {\r\n\r\n    if (this.switchState) {\r\n      this.filter = this.switchState;\r\n    }\r\n\r\n    this.subcoForecastService.initSubCoDetailsByMonth(this.month.id);\r\n\r\n    this.subcoForecastService.subcoDetails$.subscribe(\r\n      (details: SubCoDetails[]) =>{\r\n        //only call this if all details have been submitted to the backend\r\n        if(!details.some(d => d.updated)){\r\n          this.subcoFinancialControllerService.initSubCoExternalForMonth(this.month.id);\r\n          this.subcoFinancialControllerService.initSubCoInternalForMonth(this.month.id);\r\n        }\r\n      }\r\n    );\r\n\r\n    this.subcoFinancialControllerService.initSubCoExternalForMonthRange(this.month.id, this.month.id + 5);\r\n    this.subcoFinancialControllerService.initSubCoInternalForMonthRange(this.month.id, this.month.id + 5);\r\n    this.subcoFinancialControllerService.initSubCoOffshoreForMonthRange(this.month.id, this.month.id + 5);\r\n\r\n    this.subcoService.initializeSubcoDetailTotalsForMonthRange(this.month.id, this.month.id + 5);\r\n    this.subcoFinancialControllerService.initSubCoOffshoreForMonth(this.month.id);\r\n    this.getValues();\r\n  }\r\n\r\n  getValues() {\r\n    switch (this.filter) {\r\n      case 'external':\r\n        this.subcoFinancialControllerService.initSubCoExternalForMonth(this.month.id);\r\n\r\n        this.subcoFinancialControllerService.intExtSubCo$.subscribe((external: SubCoFcIntExt[]) => {\r\n          this.internalExternal = external;\r\n          this.getTotals();\r\n        })\r\n        break;\r\n      case 'offshore':\r\n        this.subcoFinancialControllerService.offshoreSubCo$.subscribe((offshore: SubCoFcOffshore[]) => {\r\n          this.offshoreTotals = offshore;\r\n          this.getTotalsOffshore();\r\n        })\r\n        break;\r\n      default:\r\n      case 'internal':\r\n        this.subcoFinancialControllerService.initSubCoInternalForMonth(this.month.id);\r\n\r\n        this.subcoFinancialControllerService.intExtSubCo$.subscribe((internalSubco: SubCoFcIntExt[]) => {\r\n          this.internalExternal = internalSubco;\r\n          this.getTotals();\r\n        })\r\n        break;\r\n    }\r\n  }\r\n\r\n  filterUpdate(filter: string): void {\r\n    this.filter = filter;\r\n    // this.teamleads = this.executiveService.calculateTeamleadValues(this.filter, this.team);\r\n    this.getValues();\r\n  }\r\n\r\n  isFinancialController(): boolean {\r\n    return this.authService.getRoleId() === env.roles.fc;\r\n  }\r\n\r\n  IsExecutive(): boolean {\r\n    return this.authService.hasRole(env.roles.msl);\r\n  }\r\n\r\n\r\n\r\n\r\n  /**\r\n   * Return value for given type (used for arve + urve + revenue + workingdays)\r\n   * @param type\r\n   * @param userId\r\n   */\r\n  getTeamValue(type: string, userId: number): number {\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param status \r\n   * changes the status of pl or pdl and sends it to parent\r\n   */\r\n  changeView(status: string): void {\r\n    this.viewSwitch.emit(status);\r\n  }\r\n\r\n  submitAll(): void{\r\n\r\n  }\r\n\r\n  unlockAll(): void{\r\n\r\n  }\r\n\r\n  /**\r\n   * \r\n   */\r\n  ngOnDestroy(): void {\r\n  }\r\n\r\n  exportCSV(): void {\r\n    this.pageState.showSpinner();\r\n\r\n    let body = \"\";\r\n    let monthHeader = \" ; ; ; ; ;Month;\"\r\n    let workingDaysMonth = \" ; ; ; ; ;Working Days;\"\r\n    let headerValueNames = \"Resource Name;Engagement Manager;Project Name;Customer; ;\"\r\n    let header = \"\";\r\n    let lineEnding = \"\\r\\n\";\r\n    let summaryLine = \"\";\r\n    let summaryHeader = \" ; ; ; ; Summary;\"\r\n    let avgFTEInt = \" ; ; ; ; ;\"\r\n    let avgFTEExt = \" ; ; ; ; ;\"\r\n    let avgFTEOffshore = \" ; ; ; ; ;\"\r\n    let currentPosition = this.month.id;\r\n    let skip = \"; ; ; ; ; ;\";\r\n\r\n    let secondSheetHeader = \";\";\r\n    let RevExternalSub = \"Revenue External Subcontractor ;\";\r\n    let RevInternalSub = \"Revenue Internal Subcontractor ;\";\r\n    let RevOffshoreSub = \"Revenue Offshore Subcontractor ;\";\r\n    let DCExternalSub = \"DC External Subcontractor ;\";\r\n    let DCEInternalSub = \"DC Internal Subcontractor ;\";\r\n    let DCOffshoreSub = \"DC Offshore Subcontractor ;\";\r\n    let bodySecondSheet = \"\";\r\n\r\n    this.subscribeMonthRange();\r\n    this.months.forEach((month: Month) => {\r\n\r\n      monthHeader += month.name + \" ; ; ; ; ; ;\";\r\n      workingDaysMonth += month.workingdays + \" ; ; ; ; ; ;\";\r\n      headerValueNames += \"ManDay;Revenue;Cost;Contribution;CP; ;\";\r\n      secondSheetHeader += month.name + \";\";\r\n\r\n      this.getTotalsForSpecificMonth(month.id);\r\n      summaryLine += this.numberToString(this.totalsCSVMonth.manday) + \";\"\r\n        + this.numberToString(this.totalsCSVMonth.revenue) + \";\"\r\n        + this.numberToString(this.totalsCSVMonth.cost) + \";\"\r\n        + this.numberToString(this.totalsCSVMonth.contribution) + \";\"\r\n        + this.numberToString(this.totalsCSVMonth.cp) + \"; ;\";\r\n\r\n      avgFTEInt += \"AverageFTE Internal;\" + this.subCoTotals.find(sub => sub.monthId == month.id).subcontractorTotals.averageFTEInternal + \"; ; ; ; ; \";\r\n      avgFTEExt += \"AverageFTE External;\" + this.subCoTotals.find(sub => sub.monthId == month.id).subcontractorTotals.averageFTEExternal + \"; ; ; ; ; \";\r\n      avgFTEOffshore += \"AverageFTE Offshore;\" + this.subCoTotals.find(sub => sub.monthId == month.id).subcontractorTotals.averageFTEOffshore + \"; ; ; ; ; \";\r\n    });\r\n\r\n    this.subCoTotals.forEach(element => {\r\n      RevExternalSub += this.numberToString(element.subcontractorTotals.totalRevenueExternal / 1000) + \";\";\r\n      RevInternalSub += this.numberToString(element.subcontractorTotals.totalRevenueInternal / 1000) + \";\";\r\n      RevOffshoreSub += this.numberToString(element.subcontractorTotals.totalCostOffshore / 1000) + \";\";\r\n      DCExternalSub += this.numberToString(-element.subcontractorTotals.totalCostExternal / 1000) + \";\";\r\n      DCEInternalSub += this.numberToString(element.subcontractorTotals.totalCostInternal / 1000) + \";\";\r\n      DCOffshoreSub += this.numberToString(-element.subcontractorTotals.totalCostOffshore / 1000) + \";\";\r\n    });\r\n    bodySecondSheet = RevExternalSub + lineEnding + RevInternalSub + lineEnding + RevOffshoreSub + lineEnding\r\n      + DCExternalSub + lineEnding + DCEInternalSub + lineEnding + DCOffshoreSub + lineEnding;\r\n\r\n    header += monthHeader + lineEnding + workingDaysMonth + lineEnding + headerValueNames + lineEnding;\r\n\r\n    body += \"Internal Subcontractors\" + lineEnding;\r\n    this.internalMonthRange.forEach((subco: any) => {\r\n\r\n      const result = this.internalMonthRange.filter((sub: any) => sub.subcontractorIntExt.resourceName == subco.subcontractorIntExt.resourceName\r\n        && sub.subcontractorIntExt.projectName == subco.subcontractorIntExt.projectName)\r\n      if (result.length > 0) {\r\n        let line = \"\";\r\n        line += subco.subcontractorIntExt.resourceName + \";\"\r\n          + subco.subcontractorIntExt.engagementManagerName + \";\"\r\n          + subco.subcontractorIntExt.projectName + \";\"\r\n          + subco.subcontractorIntExt.customer + \"; ;\";\r\n\r\n        result.forEach((subco: any) => {\r\n          if (subco.monthId < currentPosition) {\r\n            body = body + line + lineEnding;\r\n            currentPosition = currentPosition - 1;\r\n            line = \"\";\r\n            line += subco.subcontractorIntExt.resourceName + \";\"\r\n              + subco.subcontractorIntExt.engagementManagerName + \";\"\r\n              + subco.subcontractorIntExt.projectName + \";\"\r\n              + subco.subcontractorIntExt.customer + \"; ;\";\r\n          }\r\n          if (subco.monthId > currentPosition) {\r\n            while (subco.monthId != currentPosition) {\r\n              line += skip;\r\n              currentPosition = currentPosition + 1;\r\n            }\r\n          }\r\n          line += this.numberToString(subco.subcontractorIntExt.manDay) + \";\"\r\n            + this.numberToString(subco.subcontractorIntExt.revenue) + \";\"\r\n            + this.numberToString(subco.subcontractorIntExt.cost) + \";\"\r\n            + this.numberToString(subco.subcontractorIntExt.contribution) + \";\"\r\n            + this.numberToString(subco.subcontractorIntExt.cp * 100, 2) + \";\" + \";\"\r\n\r\n\r\n          currentPosition = currentPosition + 1;\r\n        });\r\n        currentPosition = this.month.id;\r\n        this.internalMonthRange = this.internalMonthRange.filter((sub: any) => !(sub.subcontractorIntExt.resourceName == subco.subcontractorIntExt.resourceName\r\n          && sub.subcontractorIntExt.projectName == subco.subcontractorIntExt.projectName));\r\n\r\n        body = body + line + lineEnding;\r\n      };\r\n    });\r\n\r\n    body += lineEnding + \"External Subcontractors\" + lineEnding;\r\n\r\n    this.externalMonthRange.forEach((subco: any) => {\r\n\r\n      const result = this.externalMonthRange.filter((sub: any) => sub.subcontractorIntExt.resourceName == subco.subcontractorIntExt.resourceName\r\n        && sub.subcontractorIntExt.projectName == subco.subcontractorIntExt.projectName)\r\n      if (result.length > 0) {\r\n        let line = \"\";\r\n        line += subco.subcontractorIntExt.resourceName + \";\"\r\n          + subco.subcontractorIntExt.engagementManagerName + \";\"\r\n          + subco.subcontractorIntExt.projectName + \";\"\r\n          + subco.subcontractorIntExt.customer + \"; ;\";\r\n\r\n        result.forEach((subcoR: any) => {\r\n          if (subco.monthId < currentPosition) {\r\n            body = body + line + lineEnding;\r\n            currentPosition = currentPosition - 1;\r\n            line = \"\";\r\n            line += subco.subcontractorIntExt.resourceName + \";\"\r\n              + subco.subcontractorIntExt.engagementManagerName + \";\"\r\n              + subco.subcontractorIntExt.projectName + \";\"\r\n              + subco.subcontractorIntExt.customer + \"; ;\";\r\n          }\r\n          if (subcoR.monthId > currentPosition) {\r\n            while (subcoR.monthId != currentPosition) {\r\n              line += skip;\r\n              currentPosition = currentPosition + 1;\r\n            }\r\n          }\r\n\r\n          line += this.numberToString(subco.subcontractorIntExt.manDay) + \";\"\r\n            + this.numberToString(subcoR.subcontractorIntExt.revenue) + \";\"\r\n            + this.numberToString(subcoR.subcontractorIntExt.cost) + \";\"\r\n            + this.numberToString(subcoR.subcontractorIntExt.contribution) + \";\"\r\n            + this.numberToString(subcoR.subcontractorIntExt.cp * 100, 2) + \";\" + \";\"\r\n\r\n          currentPosition = currentPosition + 1;\r\n        });\r\n\r\n        currentPosition = this.month.id;\r\n\r\n        this.externalMonthRange = this.externalMonthRange.filter((sub: any) => !(sub.subcontractorIntExt.resourceName == subco.subcontractorIntExt.resourceName\r\n          && sub.subcontractorIntExt.projectName == subco.subcontractorIntExt.projectName))\r\n\r\n        body = body + line + lineEnding;\r\n      }\r\n    });\r\n\r\n    body += lineEnding + \"Offshore\" + lineEnding\r\n\r\n    this.offshoreTotalsRange.forEach((subco: any) => {\r\n      const result = this.offshoreTotalsRange.filter((sub: any) => sub.subcontractorOffshore.projectName == subco.subcontractorOffshore.projectName)\r\n      if (result.length > 0) {\r\n        let line = \"\";\r\n        line += \"\" + \";\"\r\n          + subco.subcontractorOffshore.engagementManagerName + \";\"\r\n          + subco.subcontractorOffshore.projectName + \";\"\r\n          + subco.subcontractorOffshore.customer + \"; ;\";\r\n\r\n        result.forEach((subcoR: any) => {\r\n          if (subcoR.monthId > currentPosition) {\r\n            while (subcoR.monthId != currentPosition) {\r\n              line += skip;\r\n              currentPosition = currentPosition + 1;\r\n            }\r\n          }\r\n          line += this.numberToString(subco.subcontractorOffshore.totalManDays) + \";\"\r\n            + this.numberToString(subcoR.subcontractorOffshore.totalRevenue) + \";\"\r\n            + this.numberToString(subcoR.subcontractorOffshore.totalCost) + \";\"\r\n            + this.numberToString(subcoR.subcontractorOffshore.totalContribution) + \";\"\r\n            + this.numberToString(subcoR.subcontractorOffshore.totalCp * 100, 2) + \";\" + \";\"\r\n\r\n          currentPosition = currentPosition + 1;\r\n        });\r\n\r\n        this.offshoreTotalsRange = this.offshoreTotalsRange.filter((sub: any) => sub.subcontractorOffshore.projectName != subco.subcontractorOffshore.projectName)\r\n\r\n        body = body + line + lineEnding;\r\n      }\r\n    });\r\n\r\n    const data = header + body + lineEnding + lineEnding + summaryHeader + summaryLine\r\n      + lineEnding + lineEnding + avgFTEExt + lineEnding + avgFTEInt + lineEnding + avgFTEOffshore\r\n      + lineEnding + lineEnding + secondSheetHeader + lineEnding + bodySecondSheet;\r\n    const blob: Blob = new Blob([\"\\ufeff\", data], { type: \"text/csv\" });\r\n    const filename: string = this.datePipe.transform(new Date(), \"yyyyMMdd\") + \"-SubcoOverview.csv\";\r\n\r\n    this.pageState.hideSpinner();\r\n\r\n    let navigator: any = window.navigator;\r\n    //For IE\r\n    if (navigator.msSaveOrOpenBlob) {\r\n      navigator.msSaveOrOpenBlob(blob, filename);\r\n      //For any other browser\r\n    } else {\r\n      const url: string = window.URL.createObjectURL(blob);\r\n\r\n      let a: HTMLAnchorElement = document.createElement(\"a\");\r\n      a.href = url;\r\n      a.download = filename;\r\n\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      document.body.removeChild(a);\r\n      window.URL.revokeObjectURL(url);\r\n    };\r\n  }\r\n\r\n  subscribeMonthRange(): void {\r\n    this.subcoFinancialControllerService.intSubCoRange$.subscribe((internal: SubCoFcIntExt[]) => {\r\n      this.internalMonthRange = internal;\r\n    })\r\n\r\n    this.subcoFinancialControllerService.extSubCoRange$.subscribe((external: SubCoFcIntExt[]) => {\r\n      this.externalMonthRange = external;\r\n    })\r\n\r\n    this.subcoFinancialControllerService.offshoreSubCoRange$.subscribe((offshore: SubCoFcOffshore[]) => {\r\n      this.offshoreTotalsRange = offshore;\r\n    })\r\n\r\n    this.totalsSubscription = this.subcoService.subCoDetailTotals$\r\n      .subscribe((subcototalss: SubCoDetailTotals[]) => {\r\n        this.subCoTotals = subcototalss;\r\n      });\r\n  }\r\n  numberToString(no: number, precision: number = 2): string {\r\n    return no.toLocaleString(\"de\", { minimumFractionDigits: 0, maximumFractionDigits: precision }).replace(\".\", \"\");\r\n  }\r\n\r\n  getTotalsForSpecificMonth(monthId: number) {\r\n    let revenue = 0;\r\n    let cost = 0;\r\n    let contribution = 0;\r\n    let manday = 0;\r\n    var temp = this.internalMonthRange.filter(month => month.monthId == monthId);\r\n\r\n    temp.forEach((ie: any) => {\r\n      manday += ie.subcontractorIntExt.manDay;\r\n      revenue += ie.subcontractorIntExt.revenue;\r\n      cost += ie.subcontractorIntExt.cost;\r\n      contribution += ie.subcontractorIntExt.contribution;\r\n    });\r\n\r\n    temp = this.externalMonthRange.filter(month => month.monthId == monthId);\r\n\r\n    temp.forEach((ie: any) => {\r\n      manday += ie.subcontractorIntExt.manDay;\r\n      revenue += ie.subcontractorIntExt.revenue;\r\n      cost += ie.subcontractorIntExt.cost;\r\n      contribution += ie.subcontractorIntExt.contribution;\r\n    });\r\n\r\n    var tempOff = this.offshoreTotalsRange.filter(month => month.monthId == monthId);\r\n\r\n    tempOff.forEach((ie: any) => {\r\n      manday += ie.subcontractorOffshore.totalManDays;\r\n      revenue += ie.subcontractorOffshore.totalRevenue;\r\n      cost += ie.subcontractorOffshore.totalCost;\r\n      contribution += ie.subcontractorOffshore.totalContribution;\r\n    });\r\n\r\n    this.totalsCSVMonth = {\r\n      manday: manday,\r\n      revenue: revenue,\r\n      cost: cost,\r\n      contribution: contribution,\r\n      cp: (contribution / revenue) * 100\r\n    };\r\n  }\r\n\r\n  getTotals() {\r\n    let revenue = 0;\r\n    let cost = 0;\r\n    let contribution = 0;\r\n    let manday = 0;\r\n    this.internalExternal.forEach((ie: SubCoFcIntExt) => {\r\n      manday += ie.manDay;\r\n      revenue += ie.revenue;\r\n      cost += ie.cost;\r\n      contribution += ie.contribution;\r\n    })\r\n    this.totals = {\r\n      manday: manday,\r\n      revenue: revenue,\r\n      cost: cost,\r\n      contribution: contribution,\r\n      cp: (contribution / revenue) * 100\r\n    };\r\n  }\r\n\r\n  getTotalsOffshore() {\r\n    let revenue = 0;\r\n    let cost = 0;\r\n    let contribution = 0;\r\n    let manday = 0;\r\n    this.offshoreTotals.forEach((ie: SubCoFcOffshore) => {\r\n      manday += ie.totalManDays;\r\n      revenue += ie.totalRevenue;\r\n      cost += ie.totalCost;\r\n      contribution += ie.totalContribution;\r\n    })\r\n    this.totalsOffshore = {\r\n      manday: manday,\r\n      revenue: revenue,\r\n      cost: cost,\r\n      contribution: contribution,\r\n      cp: (contribution / revenue) * 100\r\n    };\r\n  }\r\n\r\n  openDashboardSubco(): void {\r\n\r\n    const dialogRef = this.dialog.open(SubcoExecutiveChartComponent, {\r\n      height: \"90%\",\r\n      width: \"90%\",\r\n      panelClass: \"custom-dialog-container\",\r\n      data: {},\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((result) => {\r\n      console.log(\"The dialog was closed\");\r\n    });\r\n\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../assets/styles/variables.scss';\r\n\r\n.headermargin {\r\n  margin: 20px 0px 0px 20px;\r\n}\r\n\r\n.dashboard-button {\r\n  position: relative;\r\n  width: 220px;\r\n  top: 0;\r\n  height: 34px;\r\n  line-height: 34px;\r\n  border-radius: 20px;\r\n  background-color: map-get($font-colors, blue);\r\n  color: map-get($font-colors, white);\r\n  box-shadow: 0px 1px 5px grey;\r\n\r\n  .mat-icon {\r\n    color: map-get($font-colors, white);\r\n  }\r\n}\r\n.mat-button-toggle-group {\r\n  margin: 20px 30px 0;\r\n  background-color: map-get($font-colors, white);\r\n  font-size: 1.1em;\r\n  border-radius: 4px;\r\n}\r\n\r\n.mat-button-toggle {\r\n  background-color: map-get($font-colors, white);\r\n  color: map-get($font-colors, blue);\r\n  border-right: 1px solid #0070AD;\r\n  width: 150px;\r\n\r\n  .mat-icon {\r\n    color: map-get($font-colors, blue);\r\n  }\r\n\r\n  &:hover {\r\n    background-color: map-get($bg-colors, light);\r\n    \r\n  }\r\n\r\n  &:last-child {\r\n    border: none;\r\n  }\r\n}\r\n\r\n.mat-icon:hover {\r\n  cursor: pointer;\r\n}\r\n\r\n.mat-button-toggle-checked, .mat-button-toggle-checked .mat-icon {\r\n  background-color: map-get($font-colors, blue);\r\n  color: map-get($font-colors, white);\r\n\r\n  &:hover {\r\n    background-color: map-get($font-colors, blue);\r\n  }\r\n}\r\n\r\n.accordion-header {\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  padding: 15px 45px 15px 15px;\r\n  color: map-get($font-colors, black);\r\n  margin-right: 8px;\r\n  position: sticky;\r\n\r\n  div {\r\n    display: flex;\r\n    flex-grow: 1;\r\n    width: 0;\r\n    margin-right: 0;\r\n\r\n    &:first-child {\r\n      padding-left: 10px;\r\n    }\r\n\r\n    &:last-child {\r\n      flex-grow: 2;\r\n      text-align: center;\r\n    }\r\n\r\n    span {\r\n      flex: 1;\r\n      word-break: break-word;\r\n    }\r\n  }\r\n}\r\n\r\n.mat-expansion-panel {\r\n\tborder-radius: 0;\r\n\tmargin: 0;\r\n  \r\n  /**\r\n\t&.mat-expanded {\r\n\t\tmargin-top: 16px;\r\n\t\tmargin-bottom: 16px;\r\n  }\r\n  */\r\n\r\n  .mat-expansion-panel-header-description, .mat-expansion-panel-header-title {\r\n    font-size: 1.1rem;\r\n    line-height: 1.2rem;\r\n    width: 0;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n\r\n    .mat-cell {\r\n      font-size: 1.1rem;\r\n    }\r\n  }\r\n  \r\n  .mat-expansion-panel-header-description {\r\n    text-align: center; \r\n    flex-grow: 2;\r\n  }\r\n}\r\n\r\n.mat-table {\r\n  padding-right: 24px;\r\n  position: relative;\r\n\r\n  .edit-button {\r\n    position: absolute;\r\n    right: 30px;\r\n  }\r\n}\r\n\r\n.mat-cell, .mat-header-cell {\r\n  flex: 1;\r\n  color: map-get($font-colors, black);\r\n  width: 8.33%;\r\n  text-align: center;\r\n}\r\n\r\ntd.mat-cell:first-of-type, td.mat-footer-cell:first-of-type, th.mat-header-cell:first-of-type,\r\ntd.mat-cell:nth-of-type(2), td.mat-footer-cell:nth-of-type(2), th.mat-header-cell:nth-of-type(2) {\r\n\tpadding-left: 10px;\r\n  flex-grow: 4;\r\n  width: 16.66%;\r\n}\r\n\r\ntd.mat-cell:first-of-type, td.mat-footer-cell:first-of-type, th.mat-header-cell:first-of-type {\r\n  text-align: left;\r\n}\r\n\r\n.mat-icon {\r\n\tfont-size: 20px;\r\n\tline-height: 20px;\r\n\r\n\t&:hover {\r\n    color: map-get($font-colors, blue);\r\n\t}\r\n\r\n\t&.icon-edited, &.icon-edited:hover {\r\n\t\tcolor: map-get($font-colors, red);\r\n\t}\r\n}\r\n\r\n.mat-primary-reversed {\r\n\r\n  .align-right {\r\n    right: 0px;\r\n  }\r\n} \r\n\r\n.fte {\r\n  position: absolute;\r\n  right: 0;\r\n  display: inline;\r\n  .mat-icon{\r\n    position: relative;\r\n    margin: 5px;\r\n    margin-top: 20px;\r\n  }\r\n  span{\r\n    color: #00000061;\r\n    text-align: center;\r\n    padding-top: 0px;\r\n    padding: 10px;\r\n    text-align: center;\r\n  }\r\n}\r\nh3{\r\n  display: inline;\r\n  .mat-stroked-button {\r\n\t  margin: 5px;\r\n\t  margin-left: 0;\r\n  }\r\n}\r\n\r\n.button-rows {\r\n\tdisplay: flex;\r\n\t.button-row {\r\n    width: 50%\r\n  }\r\n}",
                    "styleUrl": "./subco-executive-detail.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor for teamlead-summary component</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "subcoFinancialControllerService",
                        "type": "SubCoFinancialControllerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "subcoService",
                        "type": "SubCoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "subcoForecastService",
                        "type": "SubCoForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 129,
                "rawdescription": "\n\nconstructor for teamlead-summary component\n",
                "jsdoctags": [
                    {
                        "name": "subcoFinancialControllerService",
                        "type": "SubCoFinancialControllerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "subcoService",
                        "type": "SubCoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "subcoForecastService",
                        "type": "SubCoForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 4325,
                            "end": 4331,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialog"
                        },
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 4319,
                            "end": 4324,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 4303,
                            "end": 4311,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "datePipe"
                        },
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 4297,
                            "end": 4302,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 4462,
                            "end": 4471,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "pageState"
                        },
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 4456,
                            "end": 4461,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<!-- <div style=\"margin: 10px;\">\r\n\t<h3 class=\"headermargin\">Teams</h3>\r\n\t<div class=\"fte\" style=\"position: absolute; right: 0px;\">\r\n\t\t<span> FTE {{fte | number: '1.0-1': 'de'}} </span>\r\n\t</div>\r\n</div> -->\r\n<mat-button-toggle-group appearance=\"legacy\" aria-label=\"Role\" #group=\"matButtonToggleGroup\" [value]=\"filter\"\r\n\t(change)=\"filterUpdate(group.value)\">\r\n\t\r\n\t<mat-button-toggle value=\"internal\" (click)=\"changeView('internal')\">\r\n\t\t<mat-icon>supervisor_account</mat-icon> Internal\r\n\t</mat-button-toggle>\r\n\t<mat-button-toggle value=\"external\" (click)=\"changeView('external')\">\r\n\t\t<mat-icon>supervisor_account</mat-icon> External\r\n\t</mat-button-toggle>\r\n\t<mat-button-toggle value=\"offshore\" (click)=\"changeView('offshore')\">\r\n\t\t<mat-icon>supervisor_account</mat-icon> Offshore\r\n\t</mat-button-toggle>\r\n\t\r\n</mat-button-toggle-group>\r\n<button *ngIf=\"isFinancialController()\" mat-raised-button class=\"dashboard-button practice-em-dashboard\"\r\n\t(click)=\"openDashboardSubco()\">\r\n\t<mat-icon>insert_chart</mat-icon> Subco Totals Overview\r\n   </button>\r\n<button *ngIf=\"!isFinancialController() && IsExecutive()\" mat-stroked-button class=\"mat-primary-reversed\" (click)=\"submitAll()\" style=\"visibility: none;\"\r\n\tstyle=\"position: absolute; right: 220px; margin-right: 120px; margin: 20px;\">\r\n\t<mat-icon>lock</mat-icon> Submit all Forecasts\r\n</button>\r\n<button *ngIf=\"!isFinancialController() && IsExecutive()\" mat-stroked-button class=\"mat-primary-reversed\" (click)=\"unlockAll()\" style=\"visibility: none;\"\r\n\tstyle=\"position: absolute; right: 0px; margin-right: 30px; margin: 20px;\">\r\n\t<mat-icon>lock_open</mat-icon> Unlock all forecasts\r\n</button>\r\n\r\n\r\n<div layout=\"row\" layout-wrap>\r\n\t<div flex=\"100\" flex-gt-md=\"75\">\r\n\t\t<div class=\"mat-row accordion-header\">\r\n\t\t\t<div *ngIf=\"filter !== 'offshore'\">Resource Name</div>\r\n\t\t\t<div *ngIf=\"filter === 'offshore'\">Project Name</div>\r\n\t\t\t<div>\r\n\t\t\t\t<span>Engagement Manager</span>\r\n\t\t\t\t<span *ngIf=\"filter !== 'offshore'\">Project Name</span>\r\n\t\t\t\t<span *ngIf=\"filter !== 'offshore'\">Customer</span>\r\n\t\t\t\t<span *ngIf=\"filter === 'internal'\">Eastern Europe(?)</span>\r\n\t\t\t\t<span>Man Day</span>\r\n\t\t\t\t<span>Revenue</span>\r\n\t\t\t\t<span>Cost</span>\r\n\t\t\t\t<span>Contribution</span>\r\n\t\t\t\t<span>CP</span>\r\n\t\t\t</div>\r\n\r\n\t\t</div>\r\n\r\n\r\n\t\t<div *ngIf=\"filter !== 'offshore'\">\r\n\t\t\t<mat-accordion displayMode=\"flat\" multi>\r\n\t\t\t\t<mat-expansion-panel hideToggle=\"true\">\r\n\t\t\t\t\t<mat-expansion-panel-header #internalExternalPanelTotallHeader (click)=\"internalExternalPanelTotallHeader._toggle()\">\r\n\t\t\t\t\t\t<mat-panel-title>Total</mat-panel-title>\r\n\t\t\t\t\t\t<mat-panel-description >\r\n\t\t\t\t\t\t\t<span class=\"mat-cell\"></span>\r\n\t\t\t\t\t\t\t<span class=\"mat-cell\"></span>\r\n\t\t\t\t\t\t\t<span class=\"mat-cell\"></span>\r\n\t\t\t\t\t\t\t<span class=\"mat-cell\" *ngIf=\"filter === 'internal'\"></span>\r\n\t\t\t\t\t\t\t<span class=\"mat-cell\">{{totals.manday | number:'1.0-2':'de'}}</span>\r\n\t\t\t\t\t\t\t<span class=\"mat-cell\">{{totals.revenue | number:'1.0-2':'de'}}</span>\r\n\t\t\t\t\t\t\t<span class=\"mat-cell\">{{totals.cost | number:'1.0-2':'de'}}</span>\r\n\t\t\t\t\t\t\t<span class=\"mat-cell\">{{totals.contribution | number:'1.0-2':'de'}}</span>\r\n\t\t\t\t\t\t\t<span class=\"mat-cell\">{{totals.cp | number:'1.0-2':'de'}}%</span>\r\n\t\t\t\t\t\t</mat-panel-description>\r\n\t\t\t\t\t</mat-expansion-panel-header>\r\n\t\t\t\t</mat-expansion-panel>\r\n\r\n\t\t\t\t<mat-expansion-panel *ngFor=\"let subco of internalExternal; let i = index; subcontractorId as id\" hideToggle=\"{{isFinancialController()}}\">\r\n\t\t\t\t\t<mat-expansion-panel-header  #internalExternalPanelHeader (click)=\"!isFinancialController() && IsExecutive() ? false : internalExternalPanelHeader._toggle()\" >\r\n\t\t\t\t\t\t<mat-panel-title>\r\n\t\t\t\t\t\t\t{{subco.resourceName}}\r\n\t\t\t\t\t\t</mat-panel-title>\r\n\t\t\t\t\t\t<mat-panel-description>\r\n\t\t\t\t\t\t\t<span class=\"mat-cell\">{{subco.engagementManagerName}}</span>\r\n\t\t\t\t\t\t\t<span class=\"mat-cell\">{{subco.projectName}}</span>\r\n\t\t\t\t\t\t\t<span class=\"mat-cell\">{{subco.customer}}</span>\r\n\t\t\t\t\t\t\t<span class=\"mat-cell\"\r\n\t\t\t\t\t\t\t\t*ngIf=\"filter === 'internal' && subco.isEasternEurope=== true\">Yes</span>\r\n\t\t\t\t\t\t\t<span class=\"mat-cell\"\r\n\t\t\t\t\t\t\t\t*ngIf=\"filter === 'internal' && subco.isEasternEurope=== false\">No</span>\r\n\t\t\t\t\t\t\t<span class=\"mat-cell\">{{subco.manDay | number: '1.0-1': 'de'}}</span>\r\n\t\t\t\t\t\t\t<span class=\"mat-cell\">{{subco.revenue | number: '1.0-1': 'de'}}</span>\r\n\t\t\t\t\t\t\t<span class=\"mat-cell\">{{subco.cost | number: '1.0-1': 'de' }}</span>\r\n\t\t\t\t\t\t\t<span class=\"mat-cell\">{{subco.contribution | number: '1.0-1': 'de' }}</span>\r\n\t\t\t\t\t\t\t<span class=\"mat-cell\">{{subco.cp * 100  | number: '1.0-2': 'de'}}%</span>\r\n\t\t\t\t\t\t</mat-panel-description>\r\n\t\t\t\t\t</mat-expansion-panel-header>\r\n\t\t\t\t\t<app-subco-fc-entry class=\"tab-container\" [subcoId]=\"subco.subcontractorId\" [month]=\"month\"></app-subco-fc-entry>\r\n\t\t\t\t</mat-expansion-panel>\r\n\t\t\t</mat-accordion>\r\n\t\t</div>\r\n\r\n\t\t<div *ngIf=\"filter === 'offshore'\">\r\n\t\t\t<mat-accordion displayMode=\"flat\" multi>\r\n\t\t\t\t<mat-expansion-panel hideToggle=\"true\">\r\n\t\t\t\t\t<mat-expansion-panel-header #offshorePanelHeader (click)=\"offshorePanelHeader._toggle()\" hi> \r\n\t\t\t\t\t\t<mat-panel-title>Total</mat-panel-title>\r\n\t\t\t\t\t\t<mat-panel-description>\r\n\t\t\t\t\t\t\t<span class=\"mat-cell\"></span>\r\n\t\t\t\t\t\t\t<span class=\"mat-cell\">{{totalsOffshore.manday | number:'1.0-2':'de'}}</span>\r\n\t\t\t\t\t\t\t<span class=\"mat-cell\">{{totalsOffshore.revenue | number:'1.0-2':'de'}}</span>\r\n\t\t\t\t\t\t\t<span class=\"mat-cell\">{{totalsOffshore.cost | number:'1.0-2':'de'}}</span>\r\n\t\t\t\t\t\t\t<span class=\"mat-cell\">{{totalsOffshore.contribution | number:'1.0-2':'de'}}</span>\r\n\t\t\t\t\t\t\t<span class=\"mat-cell\">{{totalsOffshore.cp | number:'1.0-2':'de'}}%</span>\r\n\t\t\t\t\t\t</mat-panel-description>\r\n\t\t\t\t\t</mat-expansion-panel-header>\r\n\t\t\t\t</mat-expansion-panel>\r\n\r\n\t\t\t\t<mat-expansion-panel *ngFor=\"let totalProject of offshoreTotals; let i = index\" hideToggle=\"{{isFinancialController()}}\">\r\n\t\t\t\t\t<mat-expansion-panel-header #offshorePanelHeader (click)=\"!isFinancialController() && IsExecutive() ? false : offshorePanelHeader._toggle()\">\r\n\t\t\t\t\t\t<mat-panel-title>\r\n\t\t\t\t\t\t\t{{totalProject.projectName}}\r\n\t\t\t\t\t\t</mat-panel-title>\r\n\t\t\t\t\t\t<mat-panel-description>\r\n\t\t\t\t\t\t\t<span class=\"mat-cell\">{{totalProject.engagementManagerName}}</span>\r\n\t\t\t\t\t\t\t<span class=\"mat-cell\">{{totalProject.totalManDays | number:'1.0-2':'de'}}</span>\r\n\t\t\t\t\t\t\t<span class=\"mat-cell\">{{totalProject.totalRevenue | number:'1.0-2':'de'}}</span>\r\n\t\t\t\t\t\t\t<span class=\"mat-cell\">{{totalProject.totalCost | number:'1.0-2':'de'}}</span>\r\n\t\t\t\t\t\t\t<span class=\"mat-cell\">{{totalProject.totalContribution | number:'1.0-2':'de'}}</span>\r\n\t\t\t\t\t\t\t<span class=\"mat-cell\">{{totalProject.totalCp * 100 | number:'1.0-2':'de'}}%</span>\r\n\t\t\t\t\t\t</mat-panel-description>\r\n\t\t\t\t\t</mat-expansion-panel-header>\r\n\t\t\t\t</mat-expansion-panel>\r\n\t\t\t</mat-accordion>\r\n\t\t</div>\r\n\t</div>\r\n\r\n\t<div flex=\"100\" flex-gt-md=\"25\" class=\"summary-box-container\">\r\n\t\t<app-subco-summary [role]=\"role\" [month]=\"month\"></app-subco-summary>\r\n\t</div>\r\n\r\n\t<div layout=\"row\" layout-wrap>\r\n\t\t<button mat-stroked-button class=\"mat-primary-reversed\" class=\"button-rows\" color=\"primary\"\r\n\t\t\t(click)=\"exportCSV()\">\r\n\t\t\t<mat-icon>insert_drive_file</mat-icon> Export CSV\r\n\t\t</button>\r\n\t</div>\r\n</div>"
        },
        {
            "name": "SubcoExecutiveIntExtDetailComponent",
            "id": "component-SubcoExecutiveIntExtDetailComponent-3713a7f260900b8729dcb79ef91b8f22",
            "file": "src/app/forecast/components/subco-fc-intExt/subco-fc-intExt.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-subco-fc-internal",
            "styleUrls": [
                "./subco-fc-intExt.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./subco-fc-intExt.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "month",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "month (received as input)",
                    "description": "<p>month (received as input)</p>\n",
                    "line": 39,
                    "type": "Month"
                },
                {
                    "name": "months",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "Month[]"
                },
                {
                    "name": "switchState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "viewSwitch",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nviewSwitch saves if the PL of PDL View is shown as Output\n",
                    "description": "<p>viewSwitch saves if the PL of PDL View is shown as Output</p>\n",
                    "line": 45,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "line": 112,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "fcEntries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FcEntry[]",
                    "optional": false,
                    "description": "<p>list of all forecast entries for teamlead + month</p>\n",
                    "line": 61,
                    "rawdescription": "\n\nlist of all forecast entries for teamlead + month\n"
                },
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "forecasts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FcEntry[]",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "fte",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>sum all FTE</p>\n",
                    "line": 56,
                    "rawdescription": "\n\nsum all FTE\n"
                },
                {
                    "name": "loadingActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "projects",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Project[]",
                    "optional": false,
                    "description": "<p>project list</p>\n",
                    "line": 66,
                    "rawdescription": "\n\nproject list\n"
                },
                {
                    "name": "team",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User[]",
                    "optional": false,
                    "description": "<p>team member list</p>\n",
                    "line": 76,
                    "rawdescription": "\n\nteam member list\n"
                },
                {
                    "name": "teamleads",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "teamSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "totals",
                    "defaultValue": "{ \r\n    projectDays: 0, \r\n    billableDays: 0, \r\n    vacationDays: 0, \r\n    totalDays: 0,\r\n    ros: 0,\r\n    fte: 0,\r\n    corDays: 0\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 78
                }
            ],
            "methodsClass": [
                {
                    "name": "calcARVE",
                    "args": [
                        {
                            "name": "projectDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "vacationDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "totalDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 292,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "projectDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "vacationDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "totalDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calcURVE",
                    "args": [
                        {
                            "name": "billableDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "vacationDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "totalDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 301,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "billableDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "vacationDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "totalDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeView",
                    "args": [
                        {
                            "name": "status",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 390,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\nchanges the status of pl or pdl and sends it to parent\n",
                    "description": "<p>changes the status of pl or pdl and sends it to parent</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 11838,
                                "end": 11844,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "status"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 11832,
                                "end": 11837,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>changes the status of pl or pdl and sends it to parent</p>\n"
                        }
                    ]
                },
                {
                    "name": "clickOnEdit",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "firstName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lastName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 191,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "firstName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lastName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "exportCSV",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 467,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "forecastState",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 347,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getChildData",
                    "args": [
                        {
                            "name": "parentId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "MatTableDataSource<User>",
                    "typeParameters": [],
                    "line": 277,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "parentId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTeamValue",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 289,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturn value for given type (used for arve + urve + revenue + workingdays)\n",
                    "description": "<p>Return value for given type (used for arve + urve + revenue + workingdays)</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8440,
                                "end": 8444,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "originalKeywordKind": 149,
                                "escapedText": "type"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8434,
                                "end": 8439,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 8458,
                                "end": 8464,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "userId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8452,
                                "end": 8457,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getTotal",
                    "args": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 401,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUserValues",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 413,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "isEditPermitted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isParent",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parentId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 237,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parentId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isUserRelevantForMonth",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 256,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 397,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\n",
                    "description": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\n",
                    "description": ""
                },
                {
                    "name": "numberToString",
                    "args": [
                        {
                            "name": "no",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "precision",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 548,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "no",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "precision",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setLockState",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "role",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "messageSuccess",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "messageFail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 327,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "role",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "messageSuccess",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "messageFail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTeamleads",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submitAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 310,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "teamFilterUpdate",
                    "args": [
                        {
                            "name": "filter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unlockAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 366,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>teamlead summary component</p>\n",
            "rawdescription": "\n\nteamlead summary component\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, OnDestroy, Output, EventEmitter } from \"@angular/core\";\r\nimport { MatDialog, MatDialogRef } from \"@angular/material/dialog\";\r\nimport { MatSnackBar } from \"@angular/material/snack-bar\";\r\nimport { MatTableDataSource } from \"@angular/material/table\";\r\nimport { cloneDeep } from 'lodash';\r\n\r\nimport { UtilitiesService } from \"../../../core/services/utilities.service\";\r\nimport { ForecastService } from \"../../../core/services/forecasts/forecast.service\";\r\nimport { UserService } from \"../../../core/services/user.service\";\r\n\r\nimport { FcEntry } from \"../../../core/interfaces/fcEntry\";\r\nimport { Project } from \"../../../core/interfaces/project\";\r\nimport { Month } from \"../../../core/interfaces/month\";\r\nimport { User } from \"../../../core/interfaces/user\";\r\n\r\nimport { Subscription } from \"rxjs\";\r\nimport { ExecutiveForecastsService } from \"../../../core/services/forecasts/executive-forecasts.service\";\r\nimport { FcProject } from \"../../../core/interfaces/fcProject\";\r\nimport { FcEntryDetailDialogComponent } from \"../executive-detail/fc-entry-detail-dialog.component\";\r\nimport { ConfirmMessageDialog } from \"../../dialogs/confirm-message/confirm-message.dialog\";\r\nimport { TeamForecastService } from \"../../../core/services/forecasts/team-forecasts.service\";\r\nimport { PageStateService } from \"../../../core/shared/page-state.service\";\r\nimport { AuthService } from \"../../../core/security/auth.service\";\r\nimport { environment } from \"../../../../environments/environment\";\r\nimport { DatePipe } from \"@angular/common\";\r\n\r\n/**\r\n * teamlead summary component\r\n */\r\n@Component({\r\n  selector: \"app-subco-fc-internal\",\r\n  templateUrl: \"./subco-fc-intExt.component.html\",\r\n  styleUrls: [\"./subco-fc-intExt.component.scss\"]\r\n})\r\nexport class SubcoExecutiveIntExtDetailComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * month (received as input)\r\n   */\r\n  @Input('month') month: Month;\r\n  @Input('months') months: Month[];\r\n\r\n  /**\r\n   * viewSwitch saves if the PL of PDL View is shown as Output\r\n   */\r\n  @Output() viewSwitch = new EventEmitter<string>();\r\n\r\n  @Input('switchState') switchState: string;\r\n\r\n  forecasts: FcEntry[];\r\n\r\n  filter: string;\r\n\r\n  /**\r\n   * sum all FTE\r\n   */\r\n  fte: number;\r\n\r\n  /**\r\n   * list of all forecast entries for teamlead + month\r\n   */\r\n  fcEntries: FcEntry[];\r\n\r\n  /**\r\n   * project list\r\n   */\r\n  projects: Project[] = [];\r\n\r\n  /**\r\n   * months list\r\n   */\r\n  // months: Month[] = [];\r\n  \r\n  /**\r\n   * team member list\r\n   */\r\n  team: User[] = [];\r\n\r\n  userId: number;\r\n\r\n  teamleads: any[] = [];\r\n  \r\n  teamSubscription: Subscription;\r\n\r\n  loadingActive: boolean = false;\r\n\r\n  totals: any = { \r\n    projectDays: 0, \r\n    billableDays: 0, \r\n    vacationDays: 0, \r\n    totalDays: 0,\r\n    ros: 0,\r\n    fte: 0,\r\n    corDays: 0\r\n  };\r\n\r\n  /**\r\n   * constructor for teamlead-summary component\r\n   * @param datePipe\r\n   * @param dialog\r\n   * @param utilitiesService\r\n   * @param forecastService\r\n   * @param teamForecastService\r\n   * @param userService\r\n   * @param pageState\r\n   */\r\n  constructor(\r\n    private utilitiesService: UtilitiesService,\r\n    private forecastService: ForecastService,\r\n    private userService: UserService,\r\n    private executiveService: ExecutiveForecastsService,\r\n    private teamForecastService: TeamForecastService,\r\n    public dialog: MatDialog,\r\n    private snackBar: MatSnackBar,\r\n    private authService: AuthService,\r\n    private datePipe: DatePipe,\r\n    private pageState: PageStateService,\r\n  ) {\r\n    this.filter = 'pdl'; // 'pdl' or 'pl'\r\n    this.userId = this.authService.getUserId();\r\n    this.fte=0;\r\n    this.totals = { \r\n      projectDays: 0, \r\n      billableDays: 0, \r\n      vacationDays: 0, \r\n      totalDays: 0,\r\n      ros: 0,\r\n      fte: 0,\r\n      corDays: 0\r\n    };\r\n  }\r\n\r\n  /**\r\n   * \r\n   */\r\n  ngOnInit(): void {\r\n\r\n    if(this.switchState) {\r\n      this.filter = this.switchState;\r\n    }\r\n    \r\n    this.executiveService.initializeDetailValues(this.month.id);\r\n\r\n    this.utilitiesService.projects$.subscribe((projects: Project[]) => {\r\n      this.projects = projects;\r\n    });\r\n\r\n    this.forecastService.forecasts$.subscribe((forecasts: FcEntry[]) => {\r\n      this.fte=0;\r\n      this.totals = { \r\n        projectDays: 0, \r\n        billableDays: 0, \r\n        vacationDays: 0, \r\n        totalDays: 0,\r\n        ros: 0,\r\n        fte: 0,\r\n        corDays: 0\r\n      };\r\n      this.forecasts = forecasts.filter((fc: FcEntry) => fc.monthId === this.month.id);\r\n      this.getUserValues();\r\n      this.teamleads = this.executiveService.calculateTeamleadValues(this.filter, this.team);\r\n    });\r\n\r\n    this.teamSubscription = this.userService.allUsers$\r\n      .subscribe((team: User[]) => {\r\n        this.team = cloneDeep(team);\r\n\r\n        this.getUserValues();\r\n        this.teamleads = this.executiveService.calculateTeamleadValues(this.filter, this.team);\r\n      });\r\n    \r\n  }\r\n\r\n  teamFilterUpdate(filter: string): void {\r\n    this.filter = filter;\r\n    this.teamleads = this.executiveService.calculateTeamleadValues(this.filter, this.team);\r\n  }\r\n\r\n  setTeamleads(): void {\r\n    if (this.filter === 'pl') {\r\n      this.teamleads = this.team\r\n        .filter((u: User) => u.roleId === 1005)\r\n        .map((u: User) => u.id); // u.roleId === env.roles.pl\r\n    } else {\r\n      this.teamleads = this.team\r\n        .filter((u: User) => u.roleId === 1002 || u.roleId === 1005)\r\n        .map((u: User) => u.id); // u.roleId === env.roles.pdl || u.roleId === env.roles.pl\r\n    }\r\n  }\r\n\r\n\r\n  clickOnEdit(id: number, firstName: string, lastName: string) {\r\n    if(this.isEditPermitted())\r\n    {\r\n      this.loadingActive = true;\r\n      \r\n      let dialogRef: any = this.dialog.open(FcEntryDetailDialogComponent,{\r\n        height: 'auto',\r\n        width: 'auto',\r\n        //panelClass: 'getSartedStepper-no-padding-dialog',\r\n        //backdropClass: 'mat-dialog-container',\r\n        data:{\r\n          userId: id,\r\n          month: this.month,\r\n          months: this.months,\r\n          firstName: firstName,\r\n          lastName: lastName\r\n        },\r\n      });\r\n      dialogRef.afterOpened().subscribe(result => {\r\n        this.loadingActive = false;\r\n      });\r\n    }\r\n  }\r\n\r\n  isEditPermitted(): boolean {\r\n    let userId = this.authService.getUserId();\r\n\r\n    if (userId === undefined) {\r\n      return false;\r\n    }\r\n\r\n    let roleId = this.userService.getUser(userId).roleId;\r\n\r\n    if (roleId === undefined) {\r\n      return false;\r\n    }\r\n\r\n    let role = this.userService.getRole(roleId).shortcut;\r\n\r\n    if (role === undefined) {\r\n      return false;\r\n    }\r\n    \r\n    return role === 'HOP' || role === 'MSL';\r\n  }\r\n\r\n  isParent(user: User, parentId: number): boolean {\r\n    if (user.parentId === parentId || parentId === user.id) {\r\n      return true;\r\n\r\n    } else if (this.filter === 'pl') {\r\n      let parent: User = this.team.find((u: User) => u.id === user.parentId);\r\n      let Parantparent: User = this.team.find((u: User) => u.id === parentId);\r\n      if(Parantparent.permission === environment.roles.msl){\r\n        return false;\r\n      }\r\n      else if (parent && parent.parentId === parentId ) {\r\n        return true; \r\n      }\r\n\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  isUserRelevantForMonth(user: User, month: Month) : boolean {\r\n    if(user.endDate && user.startDate && month.time) {\r\n      var endMonth = new Date(user.endDate);\r\n      endMonth = new Date(endMonth.getFullYear(), endMonth.getMonth(), 1);\r\n      var startMonth = new Date(user.startDate);\r\n      startMonth = new Date(startMonth.getFullYear(), endMonth.getMonth(), 1);\r\n      var monthMonth = new Date(month.time);\r\n      monthMonth = new Date(monthMonth.getFullYear(), monthMonth.getMonth(), 1)\r\n      if(startMonth <= endMonth) {\r\n        if(monthMonth > endMonth) {\r\n          return false;\r\n        }\r\n      } else if(startMonth > endMonth) {\r\n        if(monthMonth <= startMonth && monthMonth >= endMonth) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  getChildData(parentId: number): MatTableDataSource<User> {\r\n    // let userDataArray: User[];\r\n    // userDataArray.push(this.team.find((u: User) => u.id === parentId));\r\n    // userDataArray.push();\r\n    return new MatTableDataSource<User>(this.team.filter((u: User) => this.isParent(u, parentId) && this.isUserRelevantForMonth(u, this.month)));\r\n  }\r\n\r\n  /**\r\n   * Return value for given type (used for arve + urve + revenue + workingdays)\r\n   * @param type\r\n   * @param userId\r\n   */\r\n  getTeamValue(type: string, userId: number): number {\r\n    return 0;\r\n  }\r\n  calcARVE( projectDays: number, vacationDays: number, totalDays : number): number{\r\n      if( ( projectDays / (totalDays - vacationDays) > 0)){\r\n        return (projectDays / (totalDays - vacationDays)) * 100;\r\n      }  \r\n      else {\r\n        return 0;\r\n      }\r\n  }\r\n\r\n  calcURVE(billableDays: number, vacationDays: number, totalDays : number): number{\r\n    if ( ( billableDays / (totalDays - vacationDays) > 0)){\r\n      return (billableDays / (totalDays - vacationDays)) * 100;\r\n    }\r\n    else {\r\n      return 0;\r\n    }\r\n  }\r\n  \r\n  submitAll(): void {\r\n    let dialogRef: MatDialogRef<ConfirmMessageDialog> = this.dialog.open(ConfirmMessageDialog, {\r\n      data: {\r\n        message: 'Are you sure you want to submit all forecasts?',\r\n        button: { cancel: 'No', submit: 'Yes' },\r\n      },\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((submit: boolean) => {\r\n      if (submit === true) {\r\n        this.pageState.showSpinner();\r\n        this.setLockState(true, this.userId ,'All forecast entries are successfully submitted.', 'Forecast entries could not be submitted. Please try again later.');\r\n      }\r\n      \r\n    });\r\n  }\r\n\r\n  setLockState(locked: boolean, role: number, messageSuccess: string, messageFail: string): void {\r\n    let level: number = 3;\r\n    \r\n\r\n    this.teamForecastService.setForecastsLockState(this.month.id, level, locked)\r\n      .then((forecasts: FcEntry[]) => {\r\n        if (forecasts) {\r\n          this.forecastService.addForecasts(forecasts, true);\r\n        } else {\r\n          this.forecastService.setTeamLockState(this.month.id, level, role); \r\n        }\r\n\r\n        this.snackBar.open(messageSuccess, 'OK', { duration: 10000, });\r\n        this.pageState.hideSpinner();\r\n      }).catch(() => {\r\n        this.snackBar.open(messageFail, 'OK', { duration: 10000, });\r\n        this.pageState.hideSpinner();\r\n      });\r\n  }\r\n\r\n  forecastState(type: string, userId: number): boolean  {\r\n    if (type === 'locked') {\r\n      return this.forecasts.find((fc: FcEntry) => fc.monthId == this.month.id && fc.userId == userId && fc.locked == -1) != undefined;\r\n    } else {\r\n      return true;\r\n    } \r\n    \r\n    //else {\r\n    //   return this.forecastService.checkForecastState(type, this.month.id, userId);\r\n    // }\r\n  }\r\n  // forecastState(type: string, userId: number): boolean | string {\r\n  //   if (type === 'locklevel') {\r\n  //     return this.userService.getRoleName(this.forecastService.getForecastLockLevel(this.month.id, userId));\r\n  //   } else {\r\n  //     return this.forecastService.checkForecastState(type, this.month.id, userId);\r\n  //   }\r\n  // }\r\n\r\n  unlockAll(): void {\r\n    let dialogRef: MatDialogRef<ConfirmMessageDialog> = this.dialog.open(ConfirmMessageDialog, {\r\n      data: {\r\n        message: 'Are you sure you want to unlock all forecasts?',\r\n        button: { cancel: 'No', submit: 'Yes' },\r\n      },\r\n    });\r\n    dialogRef.afterClosed().subscribe((submit: boolean) => {\r\n      if (submit === true) {\r\n        this.pageState.showSpinner();\r\n        for(let member of this.team) {\r\n          this.forecastService.unlockForecast(this.month.id, member.id);\r\n        }\r\n        //this.forecastService.unlockForecast(this.month.id, this.userId);\r\n        this.pageState.hideSpinner();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param status \r\n   * changes the status of pl or pdl and sends it to parent\r\n   */\r\n  changeView(status: string): void {\r\n    this.viewSwitch.emit(status);\r\n  }\r\n\r\n  /**\r\n   * \r\n   */\r\n  ngOnDestroy(): void {\r\n    this.teamSubscription.unsubscribe();\r\n  }\r\n\r\n  public getTotal(property: string): number {\r\n    if(property === 'ARVE') {\r\n      return this.calcARVE(this.totals.projectDays, this.totals.vacationDays, this.totals.totalDays);\r\n    } else if(property === 'URVE') {\r\n      return this.calcURVE(this.totals.billableDays, this.totals.vacationDays, this.totals.totalDays);\r\n    } else if(property === 'COR') {\r\n      return this.totals.ros / this.totals.corDays;\r\n    } else {\r\n      return 3;\r\n    }\r\n  }\r\n\r\n  private getUserValues(): void {\r\n    this.team.forEach((user: any) => {\r\n      const forecast: FcEntry = this.forecasts.find((fc: FcEntry) => fc.userId === user.id);\r\n\r\n      if (!forecast) {\r\n        user.projects = [];\r\n        user.projectDays = 0;\r\n        user.billableDays = 0;\r\n        user.vacationDays = 0;\r\n        user.totalDays = 0;\r\n        user.cor = 0;\r\n        user.ros = 0;\r\n        user.arve = 0;\r\n        user.urve = 0;\r\n        user.fte = 0;\r\n      } else {\r\n        user.projects = forecast.projects\r\n           ? forecast.projects\r\n             .filter((fcp: FcProject) => this.projects.find((p: Project) => (p.id === fcp.projectId && (p.projectType === 0 || p.projectType === 5))))\r\n             .map((fcp: FcProject) => this.projects.find(p => p.id === fcp.projectId).name)\r\n           : [];\r\n        user.projectDays = forecast.billableDays + forecast.nonbillableProjectDays;\r\n        user.billableDays = forecast.billableDays;\r\n        user.vacationDays = forecast.vacationDays;\r\n        user.totalDays = forecast.totalDays;\r\n        user.cor = forecast.cor ? forecast.cor : 0;\r\n        user.ros = forecast.ros ? forecast.ros : 0;\r\n        user.arve = (forecast.arve * 100).toFixed(0);\r\n        user.urve = (forecast.urve * 100).toFixed(0);\r\n        user.fte = forecast.fte ? forecast.fte : 0; // changed as it is not correct to add the users fte when the forecast fte is Null\r\n      }\r\n      this.fte += user.fte;\r\n\r\n      this.totals.fte += user.fte;\r\n      this.totals.ros += user.ros;\r\n\r\n      if (forecast) {\r\n        forecast.projects.forEach(fp => {\r\n          if( fp.billable && fp.cor !== 0) {\r\n            this.totals.corDays += fp.plannedProjectDays\r\n          }  \r\n        });\r\n      }\r\n      // forecast.projects.forEach((pe:FcProject) => { if( pe.billable && pe.plannedProjectDays !== 0)  this.totals.corDays += pe.plannedProjectDays} );\r\n\r\n      if(forecast && forecast.isRelevant) {\r\n        this.totals.projectDays += user.projectDays;\r\n        this.totals.vacationDays += user.vacationDays;\r\n        this.totals.totalDays += user.totalDays;\r\n        this.totals.billableDays += user.billableDays;\r\n      }\r\n    });\r\n  }\r\n\r\n  exportCSV(): void {\r\n    this.pageState.showSpinner();\r\n\r\n    let lineEnding = \"\\r\\n\";\r\n    let header: string = \"Month;\" + this.month.name + lineEnding\r\n      + \"Working Days;\" + this.month.workingdays + lineEnding\r\n      + \"Name;Global ID;Prod Unit Code;FTE;Paid Days;Project Days;Billable Days;Vacation Days;ARVE;URVE;Revenue;COR\"\r\n      + lineEnding;\r\n    \r\n    let body = \"\";\r\n\r\n    let totalPaidDays = 0;\r\n    let totalProjectDays = 0;\r\n    let totalBillableDays = 0;\r\n    let totalVacationDays = 0;\r\n    let totalROS = 0;\r\n    let totalFTE = 0;\r\n\r\n    this.team.forEach((user: any) => {\r\n      \r\n      let line = user.firstName + \" \" + user.lastName + \";\" //Name\r\n        + this.numberToString(user.globalId.toFixed(0)) + \";\" //Global ID\r\n        + user.prodUnitCode + \";\" //Production Unit COde\r\n        + this.numberToString(user.fte) + \";\" //FTE\r\n        + this.numberToString(user.fte * parseInt(this.month.workingdays)) + \";\" //Paid Days\r\n        + this.numberToString(user.projectDays) + \";\" //Project Days\r\n        + this.numberToString(user.billableDays) + \";\" //Billable Days\r\n        + this.numberToString(user.vacationDays) + \";\" //Vactaion Days\r\n        + this.numberToString(user.arve / 100, 4) + \";\" //ARVE\r\n        + this.numberToString(user.urve / 100, 4) + \";\" //URVE\r\n        + this.numberToString(user.ros) + \";\" //ROS\r\n        + this.numberToString(user.cor)  //COR\r\n        + lineEnding;\r\n      body = body + line;\r\n      totalPaidDays += user.fte * parseInt(this.month.workingdays);\r\n      totalProjectDays += user.projectDays;\r\n      totalBillableDays += user.billableDays;\r\n      totalVacationDays += user.vacationDays;\r\n      totalROS += user.ros;\r\n      totalFTE += user.fte\r\n    });\r\n\r\n    let summaryHeader = \"Summary;\" + this.month.name + lineEnding\r\n      + \"FTE;Paid Days;Project Days;Billable Days;Vacation Days;ARVE;URVE;Revenue;Weighted COR\" \r\n      + lineEnding;\r\n    let summaryLine = this.numberToString(this.totals.fte) + \";\" \r\n      + this.numberToString(this.totals.totalDays) + \";\" \r\n      + this.numberToString(this.totals.projectDays) + \";\" \r\n      + this.numberToString(this.totals.billableDays) + \";\" \r\n      + this.numberToString(this.totals.vacationDays) + \";\" \r\n      + this.numberToString((this.totals.projectDays) / (this.totals.totalDays - this.totals.vacationDays), 4) + \";\"\r\n      + this.numberToString(this.totals.billableDays / (this.totals.totalDays - this.totals.vacationDays), 4) + \";\"\r\n      + this.numberToString(this.totals.ros) + \";\"\r\n      + this.numberToString(this.totals.ros / this.totals.corDays)\r\n      + lineEnding;\r\n    \r\n    const data = header + body + lineEnding + lineEnding + summaryHeader + summaryLine;\r\n    const blob: Blob = new Blob([data], { type: \"text/csv\" });\r\n    const filename: string = this.datePipe.transform(new Date(), \"yyyyMMdd\") + \"-AllOverview.csv\";    \r\n\r\n    this.pageState.hideSpinner();\r\n\r\n    let navigator: any = window.navigator;\r\n    //For IE\r\n    if (navigator.msSaveOrOpenBlob) {\r\n      navigator.msSaveOrOpenBlob(blob, filename);\r\n    //For any other browser\r\n    } else {\r\n      const url: string = window.URL.createObjectURL(blob);\r\n\r\n      let a: HTMLAnchorElement = document.createElement(\"a\");\r\n      a.href = url;\r\n      a.download = filename;\r\n\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      document.body.removeChild(a);\r\n      window.URL.revokeObjectURL(url);\r\n    }\r\n  }\r\n\r\n  numberToString(no: number, precision: number = 2): string {\r\n    return no.toLocaleString(\"de\",  { minimumFractionDigits: 0, maximumFractionDigits: precision } ).replace(\".\",\"\");\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../assets/styles/variables.scss';\r\n\r\n.headermargin {\r\n  margin: 20px 0px 0px 20px;\r\n}\r\n\r\n.dashboard-button {\r\n  position: relative;\r\n  width: 220px;\r\n  top: 0;\r\n  height: 34px;\r\n  line-height: 34px;\r\n  border-radius: 20px;\r\n  background-color: map-get($font-colors, blue);\r\n  color: map-get($font-colors, white);\r\n  box-shadow: 0px 1px 5px grey;\r\n\r\n  .mat-icon {\r\n    color: map-get($font-colors, white);\r\n  }\r\n}\r\n.mat-button-toggle-group {\r\n  margin: 20px 30px 0;\r\n  background-color: map-get($font-colors, white);\r\n  font-size: 1.1em;\r\n  border-radius: 4px;\r\n}\r\n\r\n.mat-button-toggle {\r\n  background-color: map-get($font-colors, white);\r\n  color: map-get($font-colors, blue);\r\n  border-right: 1px solid #0070AD;\r\n  width: 150px;\r\n\r\n  .mat-icon {\r\n    color: map-get($font-colors, blue);\r\n  }\r\n\r\n  &:hover {\r\n    background-color: map-get($bg-colors, light);\r\n    \r\n  }\r\n\r\n  &:last-child {\r\n    border: none;\r\n  }\r\n}\r\n\r\n.mat-icon:hover {\r\n  cursor: pointer;\r\n}\r\n\r\n.mat-button-toggle-checked, .mat-button-toggle-checked .mat-icon {\r\n  background-color: map-get($font-colors, blue);\r\n  color: map-get($font-colors, white);\r\n\r\n  &:hover {\r\n    background-color: map-get($font-colors, blue);\r\n  }\r\n}\r\n\r\n.accordion-header {\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  padding: 15px 45px 15px 15px;\r\n  color: map-get($font-colors, black);\r\n  margin-right: 8px;\r\n  position: sticky;\r\n\r\n  div {\r\n    display: flex;\r\n    flex-grow: 1;\r\n    width: 0;\r\n    margin-right: 0;\r\n\r\n    &:first-child {\r\n      padding-left: 10px;\r\n    }\r\n\r\n    &:last-child {\r\n      flex-grow: 2;\r\n      text-align: center;\r\n    }\r\n\r\n    span {\r\n      flex: 1;\r\n      word-break: break-word;\r\n    }\r\n  }\r\n}\r\n\r\n.mat-expansion-panel {\r\n\tborder-radius: 0;\r\n\tmargin: 0;\r\n  \r\n  /**\r\n\t&.mat-expanded {\r\n\t\tmargin-top: 16px;\r\n\t\tmargin-bottom: 16px;\r\n  }\r\n  */\r\n\r\n  .mat-expansion-panel-header-description, .mat-expansion-panel-header-title {\r\n    font-size: 1.1rem;\r\n    line-height: 1.2rem;\r\n    width: 0;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n\r\n    .mat-cell {\r\n      font-size: 1.1rem;\r\n    }\r\n  }\r\n  \r\n  .mat-expansion-panel-header-description {\r\n    text-align: center; \r\n    flex-grow: 2;\r\n  }\r\n}\r\n\r\n.mat-table {\r\n  padding-right: 24px;\r\n  position: relative;\r\n\r\n  .edit-button {\r\n    position: absolute;\r\n    right: 30px;\r\n  }\r\n}\r\n\r\n.mat-cell, .mat-header-cell {\r\n  flex: 1;\r\n  color: map-get($font-colors, black);\r\n  width: 8.33%;\r\n  text-align: center;\r\n}\r\n\r\ntd.mat-cell:first-of-type, td.mat-footer-cell:first-of-type, th.mat-header-cell:first-of-type,\r\ntd.mat-cell:nth-of-type(2), td.mat-footer-cell:nth-of-type(2), th.mat-header-cell:nth-of-type(2) {\r\n\tpadding-left: 10px;\r\n  flex-grow: 4;\r\n  width: 16.66%;\r\n}\r\n\r\ntd.mat-cell:first-of-type, td.mat-footer-cell:first-of-type, th.mat-header-cell:first-of-type {\r\n  text-align: left;\r\n}\r\n\r\n.mat-icon {\r\n\tfont-size: 20px;\r\n\tline-height: 20px;\r\n\r\n\t&:hover {\r\n    color: map-get($font-colors, blue);\r\n\t}\r\n\r\n\t&.icon-edited, &.icon-edited:hover {\r\n\t\tcolor: map-get($font-colors, red);\r\n\t}\r\n}\r\n\r\n.mat-primary-reversed {\r\n\r\n  .align-right {\r\n    right: 0px;\r\n  }\r\n} \r\n\r\n.fte {\r\n  position: absolute;\r\n  right: 0;\r\n  display: inline;\r\n  .mat-icon{\r\n    position: relative;\r\n    margin: 5px;\r\n    margin-top: 20px;\r\n  }\r\n  span{\r\n    color: #00000061;\r\n    text-align: center;\r\n    padding-top: 0px;\r\n    padding: 10px;\r\n    text-align: center;\r\n  }\r\n}\r\nh3{\r\n  display: inline;\r\n  .mat-stroked-button {\r\n\t  margin: 5px;\r\n\t  margin-left: 0;\r\n  }\r\n}\r\n\r\n.button-rows {\r\n\tdisplay: flex;\r\n\t.button-row {\r\n    width: 50%\r\n  }\r\n}",
                    "styleUrl": "./subco-fc-intExt.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor for teamlead-summary component</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "teamForecastService",
                        "type": "TeamForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 94,
                "rawdescription": "\n\nconstructor for teamlead-summary component\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 2913,
                            "end": 2929,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "utilitiesService"
                        },
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2907,
                            "end": 2912,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 2943,
                            "end": 2958,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "forecastService"
                        },
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2937,
                            "end": 2942,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 3005,
                            "end": 3016,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "userService"
                        },
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2999,
                            "end": 3004,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 2972,
                            "end": 2991,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "teamForecastService"
                        },
                        "type": "TeamForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2966,
                            "end": 2971,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 2893,
                            "end": 2899,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialog"
                        },
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2887,
                            "end": 2892,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 2871,
                            "end": 2879,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "datePipe"
                        },
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2865,
                            "end": 2870,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 3030,
                            "end": 3039,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "pageState"
                        },
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3024,
                            "end": 3029,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div style=\"margin: 10px;\">\r\n\t<h3 class=\"headermargin\">Subcontractors</h3>\r\n\t<div class=\"fte\" style=\"position: absolute; right: 0px;\">\r\n\t\t<span> FTE {{fte | number: '1.0-1': 'de'}} </span>\r\n\t</div>\r\n</div>\r\n<mat-button-toggle-group appearance=\"legacy\" aria-label=\"Role\" #group=\"matButtonToggleGroup\" [value]=\"filter\"\r\n\t(change)=\"teamFilterUpdate(group.value)\">\r\n\t<mat-button-toggle value=\"Internal\" (click)=\"changeView('Internal')\">\r\n\t\t<mat-icon>supervisor_account</mat-icon> Internal\r\n\t</mat-button-toggle>\r\n\t<mat-button-toggle value=\"External\" (click)=\"changeView('External')\">\r\n\t\t<mat-icon>supervisor_account</mat-icon> External\r\n\t</mat-button-toggle>\r\n    <mat-button-toggle value=\"Offshore\" (click)=\"changeView('Offshore')\">      <!-- WIP reference to offshore view-->\r\n\t\t<mat-icon>supervisor_account</mat-icon> Offshore\r\n\t</mat-button-toggle>\r\n</mat-button-toggle-group>\r\n<button mat-stroked-button class=\"mat-primary-reversed\" (click)=\"submitAll()\"\r\n\tstyle=\"position: absolute; right: 220px; margin-right: 120px; margin: 20px;\">\r\n\t<mat-icon>lock</mat-icon> Submit all Forecasts\r\n</button>\r\n<button mat-stroked-button class=\"mat-primary-reversed\" (click)=\"unlockAll()\"\r\n\tstyle=\"position: absolute; right: 0px; margin-right: 30px; margin: 20px;\">\r\n\t<mat-icon>lock_open</mat-icon> Unlock all forecasts\r\n</button>\r\n\r\n\r\n\r\n<div layout=\"row\" layout-wrap *ngIf=\"subCos.length > 0\">\r\n\t<div flex=\"100\">\r\n\t\t<div class=\"mat-row accordion-header\">\r\n\t\t\t<div>Name</div>\r\n\t\t\t<div>\r\n\t\t\t\t<span>Resource name</span>\r\n\t\t\t\t<span>Project code</span>\r\n\t\t\t\t<span>Project name</span>\r\n\t\t\t\t<span>Engagement manager</span>\r\n\t\t\t\t<span>Customer</span>\r\n\t\t\t\t<span>Location</span>\r\n\t\t\t\t<span>Revenue</span>\r\n\t\t\t\t<span>Cost</span>\r\n\t\t\t\t<span>Contribution</span>\r\n\t\t\t\t<span>CP%</span>\r\n\t\t\t</div>\r\n\t\t</div>\r\n     \r\n\t\t<mat-accordion displayMode=\"flat\" multi>\r\n\t\t\t<mat-expansion-panel>\r\n\t\t\t\t<mat-expansion-panel-header>\r\n\t\t\t\t\t<mat-panel-title>Total</mat-panel-title>\r\n\t\t\t\t\t<mat-panel-description>\t\t\t\t\t\r\n                        <span class=\"mat-cell\">&euro;{{totals.revenue | number: '1.0-1': 'de' }}</span>\r\n                        <span class=\"mat-cell\">&euro;{{totals.cost | number: '1.0-1': 'de' }}</span>\r\n                        <span class=\"mat-cell\">&euro;   {{totals.contribution | number: '1.0-1': 'de' }}</span>\r\n                        <span class=\"mat-cell\">{{totals.cp | number: '1.0-1': 'de' }}%</span>\t\t\t\t\t\r\n\t\t\t\t\t</mat-panel-description>\r\n\t\t\t\t</mat-expansion-panel-header>\r\n\t\t\t</mat-expansion-panel>\r\n       \r\n\r\n\t\t\t<mat-expansion-panel *ngFor=\"let subCo of subCos; let i = index\">\r\n\t\t\t\t<mat-expansion-panel-header>\r\n\t\t\t\t\t<mat-panel-title>\r\n\t\t\t\t\t\t{{subCo.Resource}}\r\n\t\t\t\t\t</mat-panel-title>\r\n\t\t\t\t\t<mat-panel-description>\r\n\t\t\t\t\t\t<span class=\"mat-cell\" >{{subco.resourceName}}</span>\r\n\t\t\t\t\t\t<span class=\"mat-cell\">{{subco.projectCode | number: '1.0-1': 'de'}}</span>\r\n\t\t\t\t\t\t<span class=\"mat-cell\">{{subco.projectName}}</span>\r\n\t\t\t\t\t\t<span class=\"mat-cell\">{{subco.emId | number: '1.0-1': 'de'}}</span>\r\n\t\t\t\t\t\t<span class=\"mat-cell\">{{subco.customer }}</span>\r\n                        <span class=\"mat-cell\">{{subco.isEasterEurope }}</span>\r\n                        <span class=\"mat-cell\">&euro;{{subco.revenue | number: '1.0-1': 'de' }}</span>\r\n                        <span class=\"mat-cell\">&euro;{{subco.cost | number: '1.0-1': 'de' }}</span>\r\n                        <span class=\"mat-cell\">&euro;   {{subco.contribution | number: '1.0-1': 'de' }}</span>\r\n                        <span class=\"mat-cell\">{{subco.cp | number: '1.0-1': 'de' }}%</span>\t\t\t\t\t\r\n\t\t\t\t\t</mat-panel-description>\r\n\t\t\t\t</mat-expansion-panel-header>\r\n\r\n\t\t\t\r\n\t\t\t</mat-expansion-panel>\r\n\t\t</mat-accordion>\r\n\t</div>\r\n\r\n\t<div layout=\"row\" layout-wrap>\r\n\t\t<button mat-stroked-button class=\"mat-primary-reversed\" class=\"button-rows\" color=\"primary\"\r\n\t\t\t(click)=\"exportCSV()\">\r\n\t\t\t<mat-icon>insert_drive_file</mat-icon> Export CSV\r\n\t\t</button>\r\n\t</div>\r\n</div>"
        },
        {
            "name": "SubcoFcEntryComponent",
            "id": "component-SubcoFcEntryComponent-f42bf6f9430a50730152f9e8fc2d1ea8",
            "file": "src/app/forecast/components/subco-fc-entry/subco-fc-entry.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-subco-fc-entry",
            "styleUrls": [
                "./subco-fc-entry.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./subco-fc-entry.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "month",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "selected month (received as input)",
                    "description": "<p>selected month (received as input)</p>\n",
                    "line": 42,
                    "type": "Month"
                },
                {
                    "name": "subcoId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "userId (received as input)",
                    "description": "<p>userId (received as input)</p>\n",
                    "line": 37,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "foreCastEmptyEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nevent to subscribe to if there is no forecast for the current user and month\n",
                    "description": "<p>event to subscribe to if there is no forecast for the current user and month</p>\n",
                    "line": 47,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "fcLoaded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "fcSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "fteSliderValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "hasProjectInputFocus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "isCorValueBiggerThanZero",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "isProjectInputValid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "lastEditor",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>string that includes name + date of last edit</p>\n",
                    "line": 58,
                    "rawdescription": "\n\nstring that includes name + date of last edit\n"
                },
                {
                    "name": "loadingActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "project",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Project",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "subCoDetails",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SubCoDetails",
                    "optional": false,
                    "description": "<p>Contains the newest version of forecast</p>\n",
                    "line": 52,
                    "rawdescription": "\n\nContains the newest version of forecast\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "fcIsLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTest is forecast is locked for logged-in user\n",
                    "description": "<p>Test is forecast is locked for logged-in user</p>\n"
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 189,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalled if there are changes to input fields\n",
                    "description": "<p>Called if there are changes to input fields</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6395,
                                "end": 6402,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6389,
                                "end": 6394,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>an dict of changes. Value at Key is undefined if there are no chagnes.</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnsubscribe services when component gets destroyed\n",
                    "description": "<p>Unsubscribe services when component gets destroyed</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInitializes forecast entry component.\n",
                    "description": "<p>Initializes forecast entry component.</p>\n"
                },
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveForecast",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSaves forecast\n",
                    "description": "<p>Saves forecast</p>\n"
                },
                {
                    "name": "settingsUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submitForecast",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSubmits forecast (save + \"locked: true\")\n",
                    "description": "<p>Submits forecast (save + &quot;locked: true&quot;)</p>\n"
                },
                {
                    "name": "subscribeForcasts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "unlockForecast",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnlock a forecast\n",
                    "description": "<p>Unlock a forecast</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>forecast-entry component</p>\n",
            "rawdescription": "\n\nforecast-entry component\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, OnDestroy, SimpleChanges, Output, EventEmitter,OnChanges } from '@angular/core';\r\nimport { formatDate } from '@angular/common';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\n\r\nimport { ForecastService } from '../../../core/services/forecasts/forecast.service';\r\nimport { UtilitiesService } from '../../../core/services/utilities.service';\r\n\r\nimport { FcEntry } from '../../../core/interfaces/fcEntry';\r\nimport { Month } from '../../../core/interfaces/month';\r\nimport { Project } from '../../../core/interfaces/project';\r\nimport { Subscription } from 'rxjs';\r\nimport { FcProject } from '../../../core/interfaces/fcProject';\r\nimport { UserService } from '../../../core/services/user.service';\r\nimport { Grade } from '../../../core/interfaces/grade';\r\nimport { AuthService } from '../../../core/security/auth.service';\r\nimport { environment as env } from '../../../../environments/environment';\r\nimport { ConfirmMessageDialog } from '../../dialogs/confirm-message/confirm-message.dialog';\r\nimport { DataSharingService } from '../../../core/shared/data-sharing.service';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { SubCoForecastService } from '../../../core/services/subCoForecast.service';\r\nimport { ExecutiveForecastsService } from '../../../core/services/forecasts/executive-forecasts.service';\r\nimport { SubCoDetails as SubCoDetails } from '../../../core/interfaces/subCoDetails';\r\n\r\n\r\n/**\r\n * forecast-entry component\r\n */\r\n@Component({\r\n  selector: 'app-subco-fc-entry',\r\n  templateUrl: './subco-fc-entry.component.html',\r\n  styleUrls: [ './subco-fc-entry.component.scss' ],\r\n})\r\nexport class SubcoFcEntryComponent implements OnInit, OnDestroy, OnChanges {\r\n  /**\r\n   * userId (received as input)\r\n   */\r\n  @Input('subcoId') subcoId: number;\r\n\r\n  /**\r\n   * selected month (received as input)\r\n   */\r\n  @Input('month') month: Month;\r\n\r\n  /**\r\n   * event to subscribe to if there is no forecast for the current user and month\r\n   */\r\n   @Output() foreCastEmptyEvent = new EventEmitter();\r\n\r\n  /**\r\n   * Contains the newest version of forecast\r\n   */\r\n  subCoDetails: SubCoDetails;\r\n  project: Project;\r\n\r\n  /**\r\n   * string that includes name + date of last edit\r\n   */\r\n  lastEditor: string = '';\r\n  fteSliderValue: number;\r\n  fcLoaded: boolean = false;\r\n  fcSubscription: Subscription;\r\n  loadingActive: boolean = false;\r\n\r\n  hasProjectInputFocus: boolean;\r\n  isProjectInputValid: boolean;\r\n  isCorValueBiggerThanZero: boolean;\r\n\r\n  /**\r\n   * forecast-entry component constructor\r\n   * @param utilitiesService\r\n   * @param subcoForecastService\r\n   */\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private utilitiesService: UtilitiesService,\r\n    private subcoForecastService: SubCoForecastService,\r\n    private executiveService: ExecutiveForecastsService,\r\n    private userService: UserService,\r\n    private authService: AuthService,\r\n    private dataSharingService: DataSharingService,\r\n    private snackBar: MatSnackBar\r\n  ) {}\r\n\r\n  /**\r\n   * Initializes forecast entry component.\r\n   */\r\n  ngOnInit(): void {\r\n    this.fcLoaded = true;\r\n    this.loadingActive = true;\r\n\r\n    //only subscribe to forecasts if there is none\r\n    //since changing of months in handeled in the ngOnChanges function\r\n    if(!this.subCoDetails)\r\n      this.subscribeForcasts();\r\n    if(this.subCoDetails.projectId && !this.project)\r\n      this.project = this.utilitiesService.getProjects().find(p => p.id === this.subCoDetails.projectId);\r\n    else \r\n      this.project = new Project();\r\n\r\n    this.dataSharingService.hasProjectInputFocus().subscribe(hasFocus => this.hasProjectInputFocus = hasFocus);\r\n    this.dataSharingService.isProjectInputValid().subscribe(isValid => this.isProjectInputValid = isValid);\r\n    this.dataSharingService.isCorValueBiggerThanZero().subscribe(isBigger => this.isCorValueBiggerThanZero = isBigger);\r\n  }\r\n\r\n  subscribeForcasts():void {\r\n    this.fcSubscription = this.subcoForecastService.subcoDetails$\r\n    .subscribe((forecasts: SubCoDetails[]) => {\r\n      this.subCoDetails = forecasts.find((fc: SubCoDetails) => fc.monthId === this.month.id && fc.subcontractorId === this.subcoId);\r\n      if (!this.subCoDetails) {\r\n        //Add Empty Forecast\r\n        this.subCoDetails = new SubCoDetails();\r\n        this.subCoDetails.engagementManagerId = this.authService.getUserId();\r\n        this.subCoDetails.costRate = 0;\r\n        this.subCoDetails.cor = 0;\r\n        this.subCoDetails.manDay = 0;\r\n        this.subCoDetails.contribution = 0;\r\n        this.subCoDetails.revenue = 0;\r\n        this.subCoDetails.cp = 0;\r\n        this.subCoDetails.lockState = 'Unlocked';\r\n        this.subCoDetails.subcontractorId = this.subcoId;\r\n        this.subCoDetails.monthId = this.month.id;\r\n        this.subCoDetails.probabilityId = 2;\r\n        this.project = new Project();\r\n        // this.subcoForecastService.subcoDetails.push(this.subCoDetails);\r\n      }\r\n      this.fcLoaded = true;\r\n      this.loadingActive = false;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe services when component gets destroyed\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.fcSubscription.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * Saves forecast\r\n   */\r\n  saveForecast(): void {\r\n    this.subcoForecastService.saveForecast(this.month.id, this.subcoId, false);\r\n  }\r\n\r\n  /**\r\n   * Submits forecast (save + \"locked: true\")\r\n   */\r\n  submitForecast(): void {\r\n    this.subcoForecastService.saveForecast(this.month.id, this.subcoId, true);\r\n  }\r\n\r\n  /**\r\n   * Unlock a forecast\r\n   */\r\n  unlockForecast(): void {\r\n    this.subcoForecastService.unlockForecast(this.subCoDetails.forecastId);\r\n  }\r\n\r\n\r\n  settingsUpdate(): void {\r\n    this.subcoForecastService.setForecast(this.subCoDetails, false, false); //TODO: is sumbitted false?\r\n  }\r\n\r\n  /**\r\n   * Test is forecast is locked for logged-in user\r\n   */\r\n  fcIsLocked(): boolean {\r\n    if (this.subCoDetails && this.subCoDetails.lockState !== 'Unlocked') {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  openDialog(): void {\r\n    let dialogRef: MatDialogRef<ConfirmMessageDialog> = this.dialog.open(ConfirmMessageDialog, {\r\n      width: '250px',\r\n      data: {\r\n             message: 'Copy data from last submitted month?',\r\n             button: { cancel: 'No', submit: 'Yes' },\r\n             },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Called if there are changes to input fields\r\n   * @param changes an dict of changes. Value at Key is undefined if there are no chagnes.\r\n   */\r\n  \r\n  ngOnChanges(changes: SimpleChanges){\r\n    //If there are changes to the current month BUT its not the first time this chagnes happen\r\n    if(changes['month'] && !changes['month'].isFirstChange()){\r\n      this.loadingActive = true;\r\n      this.fcLoaded = false;\r\n      this.fcSubscription.unsubscribe();\r\n      this.fcSubscription = this.subcoForecastService.subcoDetails$.subscribe((subCoDetails: SubCoDetails[]) => {\r\n        this.subCoDetails = subCoDetails.find((fc: SubCoDetails) => fc.monthId === this.month.id && fc.subcontractorId === this.subcoId);\r\n      });\r\n      //init the new month to be retrivable by the forecast service subscription\r\n      this.executiveService.initializeDetailValues(this.month.id).then(()=>{\r\n        //when the data is initialized\r\n        //this should be nearly the same time the subscription received it's value\r\n        this.loadingActive = false;\r\n        this.fcLoaded = true;\r\n        //Since the subscription should already have fired this forecast should only be undefined if there is no forecast\r\n        if(!this.subCoDetails){\r\n          this.subCoDetails = undefined;\r\n          this.foreCastEmptyEvent.emit();\r\n          this.snackBar.open('There is no forceast for this user and ' + this.month.name, 'Ok', { duration: 10000, });\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../assets/styles/variables.scss';\r\n\r\n.loading-overlay {\r\n\tposition: absolute;\r\n\tdisplay: block;\r\n\ttop: 0;\r\n\tleft: 0;\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\tz-index: 900;\r\n\tbackground: rgba(255,255,255,0.5);\r\n\topacity: 1;\r\n\r\n\t&.hide {\r\n\t\tdisplay: none;\r\n\t}\r\n}\r\n\r\n.spinner-container {\r\n\tdisplay: none;\r\n\tposition: absolute;\r\n\ttop: 50%;\r\n\tleft: 50%;\r\n\ttransform: translate(-50%, -50%);\r\n\tz-index: 1000;\r\n  \r\n\t&.active {\r\n\t  display: block;\r\n\t}\r\n  }\r\n\r\n.button-row {\r\n\tmargin: 10px 5px 50px;\r\n\r\n\tbutton.align-right {\r\n\t\tfloat: right;\r\n\t\tmargin-left: 5px;\r\n\t}\r\n}\r\n\r\n\r\n\r\n.settings-row {\r\n\tmargin-top: 25px;\r\n\tfont-size: $font-size;\r\n\r\n\t&.teamview {\r\n\t\tmargin-top: 0;\r\n\t}\r\n\t\r\n\t> div {\r\n\t\tpadding: 0 25px;\r\n\t\tborder-right: 1px solid rgba(0,0,0,0.12);\r\n\r\n\t\t&:first-child {\r\n\t\t\tpadding-left: 5px;\r\n\t\t}\r\n\r\n\t\t&:last-child {\r\n\t\t\tpadding-right: 5px;\r\n\t\t\tborder-right: none;\r\n\t\t}\r\n\t}\r\n\r\n\t.mat-slide-toggle {\r\n\t\theight: 100%;\r\n\t\tline-height: 1.2em;\r\n\t\ttext-align: center;\r\n\t}\r\n}\r\n\r\n.project-list.height-fix{\r\n\theight: 200px;\r\n\toverflow: auto;\r\n}\r\n.mat-divider {\r\n\tmargin: 15px 0;\r\n}\r\n\r\n.slider {\r\n\twidth: 85%;\r\n}\r\n\r\n.slider-text {\r\n\tdisplay: inline-block;\r\n\ttext-align: center;\r\n\twidth: 15%;\r\n}",
                    "styleUrl": "./subco-fc-entry.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>forecast-entry component constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "subcoForecastService",
                        "type": "SubCoForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataSharingService",
                        "type": "DataSharingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 66,
                "rawdescription": "\n\nforecast-entry component constructor\n",
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 2580,
                            "end": 2596,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "utilitiesService"
                        },
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2574,
                            "end": 2579,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 2610,
                            "end": 2630,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "subcoForecastService"
                        },
                        "type": "SubCoForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2604,
                            "end": 2609,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataSharingService",
                        "type": "DataSharingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "OnChanges"
            ],
            "templateData": "<div class=\"loading-overlay\" [ngClass]=\"{'hide': fcLoaded}\"></div>\r\n\r\n<div class=\"spinner-container\" [ngClass]=\"{'active': loadingActive}\">\r\n    <mat-progress-spinner class=\"progress-spinner\" color=\"primary\" mode=\"indeterminate\"></mat-progress-spinner>\r\n</div>\r\n\r\n<!-- <mat-divider></mat-divider> -->\r\n\r\n<div class=\"project-list\" >\r\n    <app-subco-fc-project [subCoDetails]=\"subCoDetails\" [project]=\"project\" [monthId]=\"month.id\" [subcoId]=\"subcoId\" [lastEditor]=\"lastEditor\"></app-subco-fc-project>\r\n</div>\r\n\r\n<div class=\"button-row\">\r\n\r\n  <button mat-stroked-button *ngIf=\"!fcIsLocked()\" class=\"mat-primary-reversed align-right\"\r\n    (click)=\"submitForecast()\" [disabled]=\"subCoDetails.manDay > month.workingdays\">\r\n    <mat-icon>lock</mat-icon> Submit\r\n  </button>\r\n\r\n  <button mat-stroked-button *ngIf=\"!fcIsLocked()\" class=\"mat-primary-reversed align-right\"\r\n    (click)=\"saveForecast()\" [disabled]=\"subCoDetails.manDay > month.workingdays\">\r\n    <mat-icon>save</mat-icon> Save\r\n  </button>\r\n\r\n  <button mat-stroked-button *ngIf=\"fcIsLocked()\" class=\"mat-primary-reversed align-right\"\r\n    (click)=\"unlockForecast()\">\r\n    <mat-icon>lock_open</mat-icon> Unlock\r\n  </button>\r\n</div>"
        },
        {
            "name": "SubcoFcProjectComponent",
            "id": "component-SubcoFcProjectComponent-0458d47a658cb704e78a92fba9d294dd",
            "file": "src/app/forecast/components/subco-fc-project/subco-fc-project.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-subco-fc-project",
            "styleUrls": [
                "./subco-fc-project.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./subco-fc-project.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "lastEditor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string"
                },
                {
                    "name": "monthId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "number"
                },
                {
                    "name": "project",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "FcProject"
                },
                {
                    "name": "subCoDetails",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "SubCoDetails"
                },
                {
                    "name": "subcoId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "availableProbabilities",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Probability[]",
                    "optional": false,
                    "description": "<p>list of available probabilities</p>\n",
                    "line": 46,
                    "rawdescription": "\n\nlist of available probabilities\n"
                },
                {
                    "name": "availableProjects",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Project[]",
                    "optional": false,
                    "description": "<p>list of all projects</p>\n",
                    "line": 36,
                    "rawdescription": "\n\nlist of all projects\n"
                },
                {
                    "name": "filteredProjects",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Project[]",
                    "optional": false,
                    "description": "<p>list of filtered projects</p>\n",
                    "line": 41,
                    "rawdescription": "\n\nlist of filtered projects\n"
                },
                {
                    "name": "projectControl",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "<p>projectcontrol attribute for angular material autocomplete</p>\n",
                    "line": 52,
                    "rawdescription": "\n\nprojectcontrol attribute for angular material autocomplete\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "addProjectMail",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 231,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "applyFilter",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\napply filter method for material autocomplete to only show filtered values\n",
                    "description": "<p>apply filter method for material autocomplete to only show filtered values</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3213,
                                "end": 3218,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "value"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3207,
                                "end": 3212,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "callDataUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPasses updated data to the summary\n",
                    "description": "<p>Passes updated data to the summary</p>\n"
                },
                {
                    "name": "checkCORValueBiggerThanZero",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 246,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearProjectId",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemoves projectId when Autocomplete panel is opened\n",
                    "description": "<p>Removes projectId when Autocomplete panel is opened</p>\n"
                },
                {
                    "name": "displayProjectName",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndisplay project name by id method for material autocomplete\n",
                    "description": "<p>display project name by id method for material autocomplete</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4527,
                                "end": 4536,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "projectId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 4521,
                                "end": 4526,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "fcIsLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 225,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTest is forecast is locked for logged-in user\n",
                    "description": "<p>Test is forecast is locked for logged-in user</p>\n"
                },
                {
                    "name": "isFixedInternal",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTests if a project is automatically set as internal\n",
                    "description": "<p>Tests if a project is automatically set as internal</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6499,
                                "end": 6508,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "projectId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6493,
                                "end": 6498,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInitializes forecast entry component.\n",
                    "description": "<p>Initializes forecast entry component.</p>\n"
                },
                {
                    "name": "onProjectDaysBlur",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onProjectInputBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onProjectInputFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "projectName",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 203,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns the name of a project.\n",
                    "description": "<p>Returns the name of a project.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6226,
                                "end": 6228,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6220,
                                "end": 6225,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setProjectInputValidness",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toErrorClass",
                    "args": [
                        {
                            "name": "errtext",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 262,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTurns an error test into a css class\n",
                    "description": "<p>Turns an error test into a css class</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7734,
                                "end": 7741,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "errtext"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7728,
                                "end": 7733,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>the text of the error</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "validateProjects",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>forecast-entry component</p>\n",
            "rawdescription": "\n\nforecast-entry component\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, ViewChild, ElementRef, OnChanges, SimpleChanges } from \"@angular/core\";\r\nimport { MatDialog, MatDialogRef } from \"@angular/material/dialog\";\r\n\r\nimport { ForecastService } from \"../../../core/services/forecasts/forecast.service\";\r\nimport { UtilitiesService } from \"../../../core/services/utilities.service\";\r\n\r\nimport { FcEntry } from \"../../../core/interfaces/fcEntry\";\r\nimport { FcProject } from \"../../../core/interfaces/fcProject\";\r\nimport { Project } from \"../../../core/interfaces/project\";\r\nimport { AuthService } from \"../../../core/security/auth.service\";\r\nimport { FormBuilder, Validators, FormControl } from \"@angular/forms\";\r\nimport { ProjectRequestDialog } from \"../../dialogs/add-project/project-request.dialog\";\r\nimport { DataSharingService } from \"../../../core/shared/data-sharing.service\";\r\nimport { SubCoForecastService } from \"../../../core/services/subCoForecast.service\";\r\nimport { SubCoDetails } from \"../../../core/interfaces/subCoDetails\";\r\nimport { Probability } from \"../../../core/interfaces/probability\";\r\n\r\n/**\r\n * forecast-entry component\r\n */\r\n@Component({\r\n  selector: \"app-subco-fc-project\",\r\n  templateUrl: \"./subco-fc-project.component.html\",\r\n  styleUrls: [\"./subco-fc-project.component.scss\"],\r\n})\r\nexport class SubcoFcProjectComponent implements OnInit {\r\n  @Input(\"subCoDetails\") subcoDetails: SubCoDetails;\r\n  @Input(\"project\") project: FcProject;\r\n  @Input(\"monthId\") monthId: number;\r\n  @Input(\"subcoId\") subcoId: number;\r\n  @Input(\"lastEditor\") lastEditor: string;\r\n\r\n  /**\r\n   * list of all projects\r\n   */\r\n  availableProjects: Project[] = [];\r\n\r\n  /**\r\n   * list of filtered projects\r\n   */\r\n  filteredProjects: Project[] = [];\r\n\r\n  /**\r\n   * list of available probabilities\r\n   */\r\n  availableProbabilities: Probability[] = [];\r\n\r\n\r\n  /**\r\n   * projectcontrol attribute for angular material autocomplete\r\n   */\r\n  projectControl: FormControl = new FormControl();\r\n\r\n  /**\r\n   * forecast-entry component constructor\r\n   * @param dialog\r\n   * @param fb\r\n   * @param authService\r\n   * @param utilitiesService\r\n   * @param forecastService\r\n   */\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private fb: FormBuilder,\r\n    private authService: AuthService,\r\n    private utilitiesService: UtilitiesService,\r\n    private subcoForecastService: SubCoForecastService,\r\n    private dataSharingService: DataSharingService\r\n  ) {}\r\n\r\n  /**\r\n   * Initializes forecast entry component.\r\n   */\r\n  ngOnInit(): void {\r\n    this.projectControl = this.fb.control(\r\n      {\r\n        value: this.subcoDetails.projectId,\r\n        disabled: \r\n            this.subcoDetails.lockState === 'LoackedState1'\r\n      },\r\n      Validators.required\r\n    );\r\n  \r\n    this.availableProjects = this.utilitiesService.getProjects();\r\n    this.filteredProjects = this.availableProjects.filter(\r\n      (p: Project) => p.active === true\r\n    );\r\n    this.availableProbabilities = this.utilitiesService.getSubcoProbabilities();\r\n\r\n    this.dataSharingService.setProjectInputValid(true);\r\n    this.validateProjects();\r\n    this.checkCORValueBiggerThanZero();\r\n  }\r\n\r\n  /**\r\n   * apply filter method for material autocomplete to only show filtered values\r\n   * @param value\r\n   */\r\n  applyFilter(value: string): void {\r\n    const filteredValue: string = value.toLowerCase();\r\n    this.filteredProjects = this.availableProjects.filter(\r\n      (p: Project) =>\r\n        p.active === true && p.name.toLowerCase().includes(filteredValue)\r\n    );\r\n  }\r\n\r\n  onProjectInputFocus(): void {\r\n    this.dataSharingService.setProjectInputFocus(true);\r\n  }\r\n\r\n  onProjectInputBlur(): void {\r\n    this.dataSharingService.setProjectInputFocus(false);\r\n\r\n    if (this.filteredProjects.length === 1) {\r\n      this.projectControl.setValue(this.filteredProjects[0].id);\r\n    }\r\n    this.validateProjects();\r\n  //  this.callDataUpdate();\r\n\r\n  }\r\n  validateProjects(): void {\r\n    if (!this.project.projectId) {\r\n      for (let p of this.availableProjects) {\r\n        if (p.id === this.projectControl.value) {\r\n          this.project.projectId = p.id;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.subcoForecastService.validateProjects(this.subcoDetails);\r\n    this.setProjectInputValidness();\r\n    this.checkCORValueBiggerThanZero();\r\n  }\r\n  onProjectDaysBlur(event: any): void {\r\n    if (event.target.value === \"\") {\r\n      this.project.plannedProjectDays = 0;\r\n    }\r\n    this.validateProjects();\r\n  }\r\n\r\n  /**\r\n   * display project name by id method for material autocomplete\r\n   * @param projectId\r\n   */\r\n  displayProjectName(projectId?: number): string {\r\n    return projectId ? this.projectName(projectId) : \"\";\r\n  }\r\n\r\n  setProjectInputValidness(): void {\r\n    if (this.subcoDetails.projectId) {\r\n      this.dataSharingService.setProjectInputValid(true);\r\n      this.dataSharingService.setCorValueBiggerThanZero(true);\r\n    }\r\n\r\n    if (this.subcoDetails.errors.length > 0) {\r\n      this.dataSharingService.setProjectInputValid(false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes projectId when Autocomplete panel is opened\r\n   */\r\n  clearProjectId(): void {\r\n    this.project.projectId = undefined;\r\n  }\r\n\r\n  /**\r\n   * Passes updated data to the summary\r\n   */\r\n  callDataUpdate(): void {\r\n    if (this.project.projectId !== this.projectControl.value) {\r\n      this.project.projectId =\r\n        this.projectControl.value === \"\"\r\n          ? undefined\r\n          : this.projectControl.value;\r\n\r\n      let project: Project = this.availableProjects.find(\r\n        (p: Project) => p.id === this.project.projectId\r\n      );\r\n      this.project.projectId = project === undefined ? undefined : project.id;\r\n\r\n      this.project.billable =\r\n        project && typeof project.billable !== \"undefined\"\r\n          ? project.billable\r\n          : true;\r\n      if (project && project.projectType >= 1 && project.projectType <= 5) {\r\n        this.project.cor = 0;\r\n        this.project.externalRevenue = false;\r\n      }\r\n    }\r\n\r\n    this.project.cor = this.subcoDetails.cor;\r\n    this.subcoDetails.projectId = this.project.projectId;\r\n    this.subcoForecastService.setForecast(this.subcoDetails, false, true);\r\n    this.validateProjects();\r\n  }\r\n\r\n  /**\r\n   * Returns the name of a project.\r\n   * @param id\r\n   */\r\n  projectName(id: number): string {\r\n    let project: Project = this.availableProjects.find(\r\n      (p: Project) => p.id === id\r\n    );\r\n    return project ? project.name : \"\";\r\n  }\r\n\r\n  /**\r\n   * Tests if a project is automatically set as internal\r\n   * @param projectId\r\n   */\r\n  isFixedInternal(projectId: number): boolean {\r\n    return this.availableProjects.find(\r\n      (p: Project) => p.projectType > 0 && p.id === projectId\r\n    )\r\n      ? true\r\n      : false;\r\n  }\r\n\r\n  /**\r\n   * Test is forecast is locked for logged-in user\r\n   */\r\n  fcIsLocked(): boolean {\r\n    if (this.subcoDetails && this.subcoDetails.lockState !== 'Unlocked') {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  addProjectMail() {\r\n    let dialogRef: MatDialogRef<ProjectRequestDialog> = this.dialog.open(\r\n      ProjectRequestDialog,\r\n      {\r\n        data: {\r\n          width: \"30%\",\r\n          maxHeight: \"20%\",\r\n        },\r\n      }\r\n    );\r\n    dialogRef.afterClosed().subscribe((result) => {\r\n      console.log(\"The dialog was closed\");\r\n    });\r\n  }\r\n\r\n  checkCORValueBiggerThanZero(): void {\r\n    if (this.project.billable) {\r\n      if (this.project.cor > 0) {\r\n        this.dataSharingService.setCorValueBiggerThanZero(true);\r\n      } else {\r\n        this.dataSharingService.setCorValueBiggerThanZero(false);\r\n      }\r\n    } else if (!this.project.billable ) {\r\n      this.dataSharingService.setCorValueBiggerThanZero(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Turns an error test into a css class\r\n   * @param errtext - the text of the error\r\n   */\r\n  toErrorClass(errtext): string {\r\n    let result = errtext.toLowerCase().split(\".\").join(\"\");\r\n    return result.replace(/\\s/gi, \"-\");\r\n  }\r\n}\r\n\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../assets/styles/variables.scss\";\r\n\r\n.tab-container {\r\n  display: flow-root;\r\n}\r\n.project-container {\r\n  margin: 0;\r\n  border: 0;\r\n\r\n  .project {\r\n    min-height: 60px;\r\n    padding: 0;\r\n\r\n    .project-form {\r\n      padding-right: 50px;\r\n    }\r\n\r\n    .project-element {\r\n      padding: 0 5px;\r\n      padding-top: 1.1em;\r\n\r\n      &:first-child {\r\n        padding-left: 0;\r\n      }\r\n\r\n      &:last-child {\r\n        padding-right: 0;\r\n      }\r\n    }\r\n\r\n    .delete-entry {\r\n      position: absolute;\r\n      margin: 0;\r\n      top: 36px;\r\n      right: -37px;\r\n\r\n      transform: translate(0, -50%);\r\n\r\n      .mat-icon {\r\n        position: absolute;\r\n        top: 50%;\r\n        right: 50%;\r\n        width: auto;\r\n        height: auto;\r\n        font-size: 20px;\r\n        margin-top: -12px;\r\n        margin-right: -10px;\r\n\r\n        &.icon--delete {\r\n          font-size: 26px;\r\n          margin-right: -13px;\r\n        }\r\n\r\n        &.icon--block {\r\n          font-size: 30px;\r\n          margin-right: -15px;\r\n        }\r\n      }\r\n\r\n      &[disabled] .mat-icon {\r\n        color: map-get($font-colors, grey-super-light) !important;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nmat-error.no-probability-defined {\r\n  text-align: end !important;\r\n}\r\n\r\n.request-project-btn {\r\n  background-color: #0070ad;\r\n  color: #ffffff;\r\n  font-weight: bold;\r\n  margin: 5px;\r\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\r\n  border-radius: 3px;\r\n}\r\n\r\n.request-project-btn:hover {\r\n  background: #42a5f5;\r\n}\r\n\r\n.mat-error {\r\n  padding: 2px 5px;\r\n}\r\n\r\n.mat-option {\r\n  height: 40px;\r\n  line-height: 40px;\r\n  font-size: $font-size;\r\n}\r\n\r\n.multi-view-box {\r\n  padding: 10px 5px 0;\r\n}\r\n\r\n.mat-form-field-wrapper {\r\n  padding-bottom: 0;\r\n\r\n  &.mat-form-field-appearance-outline {\r\n    margin: 0;\r\n    margin-right: 20px;\r\n  }\r\n}\r\n\r\n.mat-form-field-outline {\r\n  margin: 0;\r\n  margin-right: 20px;\r\n}\r\n\r\n.mat-button-toggle-group {\r\n  margin: 0.25em 0;\r\n  width: 100%;\r\n  height: 38px;\r\n  border-radius: 0;\r\n\r\n  .mat-button-toggle {\r\n    width: 50%;\r\n    white-space: normal;\r\n  }\r\n}\r\n\r\n.mat-form-field .mat-slide-toggle {\r\n  padding: 1px 0 0 1px;\r\n  position: absolute;\r\n  top: 0;\r\n  right: 0;\r\n  background-color: map-get($font-colors, white);\r\n  z-index: 10;\r\n}\r\n\r\n.form-element.mat-slide-toggle {\r\n  height: 45px;\r\n  margin: 0.25em 0;\r\n}\r\n\r\n.mat-form-field-clone {\r\n  display: flex;\r\n  width: 100%;\r\n  margin: 0.25em 0;\r\n\r\n  input {\r\n    width: 100%;\r\n    border-radius: 0;\r\n    border: 1px solid map-get($border-colors, light);\r\n    font-family: inherit;\r\n    font-size: 1rem;\r\n    line-height: 1.2em;\r\n    padding: 1.2em 0.5em 0.8em;\r\n    color: map-get($font-colors, grey-light);\r\n    background-color: transparent;\r\n  }\r\n\r\n  .label {\r\n    position: absolute;\r\n    top: 12px;\r\n    font-size: 0.75rem;\r\n    line-height: 11px;\r\n    color: map-get($font-colors, grey-light);\r\n    margin-left: 5px;\r\n    padding: 0 5px;\r\n    background: map-get($font-colors, white);\r\n  }\r\n\r\n  &.not-locked {\r\n    input {\r\n      color: map-get($font-colors, black);\r\n      border-color: map-get($border-colors, medium);\r\n    }\r\n\r\n    .label {\r\n      color: map-get($font-colors, grey-label);\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./subco-fc-project.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>forecast-entry component constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "subcoForecastService",
                        "type": "SubCoForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataSharingService",
                        "type": "DataSharingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 52,
                "rawdescription": "\n\nforecast-entry component constructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 2010,
                            "end": 2016,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialog"
                        },
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2004,
                            "end": 2009,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 2030,
                            "end": 2032,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "fb"
                        },
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2024,
                            "end": 2029,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 2046,
                            "end": 2057,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "authService"
                        },
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2040,
                            "end": 2045,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 2071,
                            "end": 2087,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "utilitiesService"
                        },
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2065,
                            "end": 2070,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "subcoForecastService",
                        "type": "SubCoForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataSharingService",
                        "type": "DataSharingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form class=\"project-form\">\r\n  <mat-card class=\"project-container\" id=\"project-{{ monthId }}\">\r\n    <mat-card-content class=\"project\">\r\n      <div layout=\"row\" layout-fill>\r\n        <div [attr.flex]=\"30\" class=\"project-element\">\r\n          <ng-container *ngIf=\"!fcIsLocked()\">\r\n            <mat-form-field\r\n              appearance=\"outline\"\r\n              class=\"no-padding\"\r\n              id=\"projectId-{{ monthId }}\"\r\n            >\r\n              <input\r\n                type=\"text\"\r\n                onClick=\"this.select()\"\r\n                (focus)=\"onProjectInputFocus()\"\r\n                (blur)=\"onProjectInputBlur()\"\r\n                placeholder=\"Project\"\r\n                matInput\r\n                [formControl]=\"projectControl\"\r\n                [matAutocomplete]=\"auto\"\r\n                (ngModelChange)=\"applyFilter($event)\"\r\n                required\r\n              />\r\n              <mat-label>Project</mat-label>\r\n            </mat-form-field>\r\n            <mat-autocomplete\r\n              #auto=\"matAutocomplete\"\r\n              autoActiveFirstOption\r\n              [displayWith]=\"displayProjectName.bind(this)\"\r\n              (opened)=\"clearProjectId()\"\r\n              (closed)=\"callDataUpdate()\"\r\n            >\r\n              <ng-container *ngFor=\"let p of filteredProjects\">\r\n                <mat-option [value]=\"p.id\">{{\r\n                  p.name\r\n                }}</mat-option>\r\n              </ng-container>\r\n              <mat-option class=\"request-project-btn\" (click)=\"addProjectMail()\"\r\n                >Request Project</mat-option\r\n              >\r\n            </mat-autocomplete>\r\n          </ng-container>\r\n\r\n          <div\r\n            class=\"mat-form-field-clone\"\r\n            [ngClass]=\"{ 'not-locked': !fcIsLocked() }\"\r\n            *ngIf=\"fcIsLocked()\"\r\n           \r\n          >\r\n            <input\r\n              type=\"text\"\r\n              disabled\r\n              value=\"{{ projectName(subcoDetails.projectId) }}\"\r\n            />\r\n            <span class=\"label\">Project</span>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Cost Rate -->\r\n        <div flex=\"15\" class=\"project-element\">\r\n          <mat-form-field appearance=\"outline\">\r\n            <mat-label>\r\n              Cost Rate\r\n            </mat-label>\r\n\r\n            <input\r\n              type=\"number\"\r\n              onClick=\"this.select()\"\r\n              matInput\r\n              name=\"costRate-{{ monthId }}\"\r\n              [(ngModel)]=\"subcoDetails.costRate\"\r\n              required\r\n              min=\"0\"\r\n              (ngModelChange)=\"callDataUpdate()\"\r\n              [disabled]=\"fcIsLocked()\"\r\n              (blur)=\"onProjectDaysBlur($event)\"\r\n              #projectDaysInput\r\n              matTooltipPosition=\"above\"\r\n            />\r\n\r\n          </mat-form-field>\r\n        </div>\r\n\r\n        <!--COR-->\r\n        <div\r\n          flex=\"15\"\r\n          class=\"project-element\"\r\n        >\r\n          <mat-form-field\r\n            appearance=\"outline\"\r\n            matTooltipPosition=\"above\"\r\n          >\r\n            <mat-label>\r\n              COR\r\n            </mat-label>\r\n            <input\r\n              matInput\r\n              type=\"number\"\r\n              onClick=\"this.select()\"\r\n              name=\"cor-{{ monthId }}\"\r\n              [(ngModel)]=\"subcoDetails.cor\"\r\n              [disabled]=\"fcIsLocked()\"\r\n              required\r\n              min=\"1\"\r\n              (ngModelChange)=\"callDataUpdate()\"\r\n            />\r\n          </mat-form-field>\r\n        </div>\r\n\r\n        <!--ManDay-->\r\n        <div\r\n          flex=\"15\"\r\n          class=\"project-element\"\r\n        >\r\n          <mat-form-field\r\n            appearance=\"outline\"\r\n            matTooltipPosition=\"above\"\r\n          >\r\n            <mat-label>\r\n              ManDay\r\n            </mat-label>\r\n\r\n            <!-- [disabled]=\"\r\n              isFixedInternal(project.projectId) ||\r\n              fcIsLocked() ||\r\n              !project.billable\r\n            \" -->\r\n            <input\r\n              matInput\r\n              type=\"number\"\r\n              onClick=\"this.select()\"\r\n              name=\"manDay-{{ monthId }}\"\r\n              [(ngModel)]=\"subcoDetails.manDay\"\r\n              [disabled]=\"fcIsLocked()\"\r\n              required\r\n              min=\"1\"\r\n              (ngModelChange)=\"callDataUpdate()\"\r\n            />\r\n          </mat-form-field>\r\n        </div>\r\n\r\n        <!--Probabilities-->\r\n        <div flex=\"35\" class=\"project-element\">\r\n          <mat-button-toggle-group\r\n            name=\"probabilityId-{{ monthId }}\"\r\n            [(ngModel)]=\"subcoDetails.probabilityId\"\r\n            required\r\n            (ngModelChange)=\"callDataUpdate()\"\r\n            [disabled]=\"fcIsLocked()\"\r\n            matTooltipPosition=\"above\"\r\n          >\r\n            <mat-button-toggle\r\n              *ngFor=\"let p of availableProbabilities\"\r\n              [value]=\"p.id\"\r\n              >{{ p.name }}</mat-button-toggle\r\n            >\r\n          </mat-button-toggle-group>\r\n        </div>\r\n      </div>\r\n    </mat-card-content>\r\n  </mat-card>\r\n\r\n  <div *ngIf=\"project.errors\">\r\n    <ng-container *ngFor=\"let error of project.errors\">\r\n      <mat-error [ngClass]=\"toErrorClass(error)\">{{ error }}</mat-error>\r\n    </ng-container>\r\n  </div>\r\n</form>\r\n"
        },
        {
            "name": "SubcoMonthComponent",
            "id": "component-SubcoMonthComponent-4de54214984dd1e759cdc0be557a5908",
            "file": "src/app/forecast/components/subco-month/subco-month.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-subco-month",
            "styleUrls": [
                "./subco-month.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./subco-month.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "month",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "month (received as input)",
                    "description": "<p>month (received as input)</p>\n",
                    "line": 36,
                    "type": "Month"
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "string"
                },
                {
                    "name": "step",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "step-input-variable for angular material expansion panel",
                    "description": "<p>step-input-variable for angular material expansion panel</p>\n",
                    "line": 41,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "setStepEvent",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\noutput event to inform parent about step change\n",
                    "description": "<p>output event to inform parent about step change</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "allSubcosPre",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SubCoPreview[]",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "firstTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "isStepping",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "scrollToIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>scroll-variable for scrolling into in AfterViewChecked</p>\n",
                    "line": 60,
                    "rawdescription": "\n\nscroll-variable for scrolling into in AfterViewChecked\n"
                },
                {
                    "name": "showDialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "subcoDetailSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "subcoPreviewSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "subcos",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SubCoPreview[]",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "subcosDetails",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SubCoDetails[]",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>userId (loaded from auth-service)</p>\n",
                    "line": 51,
                    "rawdescription": "\n\nuserId (loaded from auth-service)\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "addNewSubco",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 265,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nopen add subco dialog\n",
                    "description": "<p>open add subco dialog</p>\n"
                },
                {
                    "name": "ExpPanelClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 237,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalled when an expansion panel is closed\n",
                    "description": "<p>Called when an expansion panel is closed</p>\n",
                    "jsdoctags": []
                },
                {
                    "name": "forecastState",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean | string",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "subcoId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturn value for given type\n",
                    "description": "<p>Return value for given type</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6051,
                                "end": 6055,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "originalKeywordKind": 149,
                                "escapedText": "type"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6045,
                                "end": 6050,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 6069,
                                "end": 6076,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "subcoId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6063,
                                "end": 6068,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "nextStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 249,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGo to next accordion\n",
                    "description": "<p>Go to next accordion</p>\n"
                },
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n Called after the ngAfterViewInit() and every subsequent ngAfterContentChecked()\n If something in the component is clicked etc. this is called\n",
                    "description": "<p> Called after the ngAfterViewInit() and every subsequent ngAfterContentChecked()\n If something in the component is clicked etc. this is called</p>\n"
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnsubscribe services when component gets destroyed\n",
                    "description": "<p>Unsubscribe services when component gets destroyed</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInitiates forecast-entries + team\n",
                    "description": "<p>Initiates forecast-entries + team</p>\n"
                },
                {
                    "name": "onMousewheel",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nScroll with mousewheel\n",
                    "description": "<p>Scroll with mousewheel</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mousewheel', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5702,
                                "end": 5707,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "event"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5696,
                                "end": 5701,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "onScroll",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nScroll of the wrapper for this component\n",
                    "description": "<p>Scroll of the wrapper for this component</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5581,
                                "end": 5586,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "event"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5575,
                                "end": 5580,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "openUserDialog",
                    "args": [
                        {
                            "name": "subco",
                            "type": "SubCoPreview",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 273,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nopen update user dialog\n",
                    "description": "<p>open update user dialog</p>\n",
                    "jsdoctags": [
                        {
                            "name": "subco",
                            "type": "SubCoPreview",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "prevStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 257,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGo to previous accordion\n",
                    "description": "<p>Go to previous accordion</p>\n"
                },
                {
                    "name": "setStep",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 227,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet step for accordion\n",
                    "description": "<p>Set step for accordion</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7360,
                                "end": 7365,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7354,
                                "end": 7359,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "showCopyDataDialog",
                    "args": [
                        {
                            "name": "subcosDetails",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "subcosDetails",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "working",
                    "args": [
                        {
                            "name": "user",
                            "type": "SubCoPreview",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "SubCoPreview",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "mousewheel",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nScroll with mousewheel\n",
                    "description": "<p>Scroll with mousewheel</p>\n",
                    "jsdoctags": [
                        {
                            "pos": 5695,
                            "end": 5713,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 5696,
                                "end": 5701,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "name": {
                                "pos": 5702,
                                "end": 5707,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "event"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ],
                    "line": 164
                }
            ],
            "description": "<p>teamlead view component</p>\n",
            "rawdescription": "\n\nteamlead view component\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, OnDestroy, Output,EventEmitter, HostListener } from \"@angular/core\";\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { FcEntry } from \"../../../core/interfaces/fcEntry\";\r\nimport { UserService } from \"../../../core/services/user.service\";\r\nimport { User } from \"../../../core/interfaces/user\";\r\nimport { ForecastService } from \"../../../core/services/forecasts/forecast.service\";\r\nimport { Month } from \"../../../core/interfaces/month\";\r\nimport { AuthService } from \"../../../core/security/auth.service\";\r\nimport { FcProject } from \"../../../core/interfaces/fcProject\";\r\nimport { TeamForecastService } from \"../../../core/services/forecasts/team-forecasts.service\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { TeamUserService } from \"../../../core/services/forecasts/team-user.service\";\r\nimport { UtilitiesService } from \"../../../core/services/utilities.service\";\r\nimport { Project } from \"../../../core/interfaces/project\";\r\nimport { environment as env } from '../../../../environments/environment';\r\nimport { formatDate } from '@angular/common';\r\nimport { SubCoDetails } from \"../../../core/interfaces/subCoDetails\";\r\nimport { SubCoService } from \"../../../core/services/subCo.service\";\r\nimport { SubCoPreview } from \"../../../core/interfaces/subCoPreview\";\r\nimport { SubCoForecastService } from \"../../../core/services/subCoForecast.service\";\r\nimport { AddSubcoDialogEm } from \"../../dialogs/add-subco-em/add-subco-em.dialog\";\r\nimport { ConfirmMessageDialog } from '../../dialogs/confirm-message/confirm-message.dialog';\r\n\r\n/**\r\n * teamlead view component\r\n */\r\n@Component({\r\n  selector: \"app-subco-month\",\r\n  templateUrl: \"./subco-month.component.html\",\r\n  styleUrls: [\"./subco-month.component.scss\"]\r\n})\r\nexport class SubcoMonthComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * month (received as input)\r\n   */\r\n  @Input('month') month: Month;\r\n  @Input('role') role: string;\r\n    /**\r\n   * step-input-variable for angular material expansion panel\r\n   */\r\n  @Input('step') step: number;\r\n\r\n  /**\r\n   * output event to inform parent about step change\r\n   */\r\n  @Output() setStepEvent = new EventEmitter<number>();\r\n\r\n  /**\r\n   * userId (loaded from auth-service)\r\n   */\r\n  userId: number;\r\n\r\n  subcos: SubCoPreview[] = []; \r\n  subcosDetails: SubCoDetails[] = []; \r\n  allSubcosPre: SubCoPreview[] = []; \r\n  \r\n  /**\r\n   * scroll-variable for scrolling into in AfterViewChecked\r\n   */\r\n  scrollToIndex : number;\r\n\r\n  subcoPreviewSubscription: Subscription;\r\n  subcoDetailSubscription: Subscription; //TODO: Probably do not need that\r\n  firstTime: boolean;\r\n  isStepping: boolean;\r\n  showDialog: boolean;\r\n\r\n  /**\r\n   * teamlead component constructor\r\n   */\r\n  constructor(\r\n    private userService: UserService,\r\n    private subcoService: SubCoService,\r\n    private utilitiesService: UtilitiesService,\r\n    private authService: AuthService,\r\n    private dialog: MatDialog,\r\n\r\n    private subcoForecastService: SubCoForecastService,\r\n  ) {\r\n    this.userId = this.authService.getUserId();\r\n  }\r\n\r\n  /**\r\n   * Initiates forecast-entries + team\r\n   */\r\n  ngOnInit(): void {\r\n    this.firstTime = true;\r\n    this.isStepping = false;\r\n    this.showDialog = true;\r\n    this.subcoForecastService.initSubCoDetailsByMonthAndEm(this.month.id, this.userId);\r\n    this.subcoService.initSubCoPreviewById(this.userId);\r\n\r\n    this.subcoPreviewSubscription = this.subcoService.subCoPreviews$.subscribe((subcos: SubCoPreview[]) =>{\r\n      this.subcos = subcos.filter(subco => subco.subcontractorEmId == this.userId);\r\n    });\r\n    this.subcoDetailSubscription = this.subcoForecastService.subcoDetails$.subscribe((subcos: SubCoDetails[]) => {\r\n      this.subcosDetails = subcos.filter(subco => subco.engagementManagerId == this.userId);\r\n      this.showCopyDataDialog(subcos);\r\n    });\r\n  }\r\n\r\n  showCopyDataDialog(subcosDetails): void{\r\n    subcosDetails.forEach(subco =>{\r\n      if(this.showDialog && subco.projectName === 'Placeholder' && subco.monthId === this.month.id){\r\n        let dialogRef: MatDialogRef<ConfirmMessageDialog> = this.dialog.open(ConfirmMessageDialog, {\r\n          data: {\r\n            message: 'Copy data from last month submitted?',\r\n            button: { cancel: 'No', submit: 'Yes' },\r\n          },\r\n        });\r\n\r\n        dialogRef.afterClosed().subscribe((add: boolean) => {\r\n          if (add === false) {\r\n            this.subcosDetails.forEach(details => {\r\n              if(subco.projectName === 'Placeholder'){}\r\n                details.projectId = 0;\r\n                details.cor = null;\r\n                details.manDay = null;\r\n                details.costRate = null;\r\n            })\r\n          }\r\n        });\r\n        this.showDialog = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   *  Called after the ngAfterViewInit() and every subsequent ngAfterContentChecked()\r\n   *  If something in the component is clicked etc. this is called\r\n   */\r\n  ngAfterViewChecked() :void{\r\n    //Check if the component already scrollled successfully\r\n    if(this.scrollToIndex !== -1){\r\n      let index = this.scrollToIndex == 0 ? 0 : this.scrollToIndex -1; \r\n      let element = document.getElementById(\"panel-\"+ index);\r\n      if(element){\r\n          element.scrollIntoView({block: \"start\", behavior: \"smooth\"});\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe services when component gets destroyed\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.subcoPreviewSubscription.unsubscribe();\r\n    this.subcoDetailSubscription.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * Scroll of the wrapper for this component\r\n   * @param event \r\n   */\r\n  onScroll(event) {\r\n    this.scrollToIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Scroll with mousewheel\r\n   * @param event \r\n   */\r\n  @HostListener('mousewheel', ['$event']) \r\n  onMousewheel(event) {\r\n    this.scrollToIndex = -1;\r\n  }\r\n\r\n  forecastState(type: string, userId: number): boolean | string {\r\n    return false;\r\n  }\r\n\r\n  working(user: SubCoPreview, month: Month): boolean {\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Return value for given type \r\n   * @param type\r\n   * @param subcoId\r\n   */\r\n  getValue(type: string, subcoId: number): any {\r\n    let subco: SubCoPreview = this.subcos.find((e: SubCoPreview) => e.subcontractorId === subcoId);\r\n    let details = this.subcosDetails.find(d => d.subcontractorId === subcoId && d.monthId ===this.month.id);\r\n\r\n    if (!details) {\r\n      return 0;\r\n    }\r\n    if (details) {\r\n      if (type === 'costRate') {\r\n        return details.costRate;\r\n      }\r\n      else if (type === 'cor') {\r\n        return details.cor;\r\n      }\r\n      else if (type === 'manDay') {\r\n        return details.manDay;\r\n\r\n      } else if (type === 'revenue') {\r\n        return details.revenue;\r\n\r\n      } else if (type === 'costs') {\r\n        return details.cost;\r\n\r\n      } else if (type === 'contribution') {\r\n        return details.contribution;\r\n\r\n      } else if (type === 'cp') {\r\n        return details.cp*100;\r\n\r\n      }\r\n      else if (type === 'history') {\r\n        // if (subco.history && subco.history.length > 0 && subco.history[0].createdAt) {\r\n        //   let date: string = formatDate(subco.history[0].createdAt, 'dd.MM.yyyy', 'en');\r\n        //   return  'Last updated from ' + subco.changedBy + ', ' + date;\r\n        // }\r\n        return 0;\r\n      }\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Set step for accordion\r\n   * @param index\r\n   */\r\n  setStep(index: number): void {\r\n    this.scrollToIndex = index;\r\n    this.step = index;\r\n    this.setStepEvent.emit(index);\r\n  }\r\n\r\n  /**\r\n   * Called when an expansion panel is closed\r\n   * @param event \r\n   */\r\n  ExpPanelClicked(){\r\n    if(!this.isStepping){\r\n      this.scrollToIndex = -1;\r\n      this.setStepEvent.emit(-1);\r\n    }\r\n    this.isStepping = false;\r\n  }\r\n  \r\n\r\n  /**\r\n   * Go to next accordion\r\n   */\r\n  nextStep(): void {\r\n    this.isStepping = true;\r\n    this.step++;\r\n  }\r\n\r\n  /**\r\n   * Go to previous accordion\r\n   */\r\n  prevStep(): void {\r\n    this.isStepping = true;\r\n    this.step--;\r\n  }\r\n\r\n   /**\r\n   * open add subco dialog\r\n   */\r\n    addNewSubco(): void {\r\n      this.openUserDialog(new SubCoPreview());\r\n    } \r\n\r\n      /**\r\n   * open update user dialog\r\n   * @param user\r\n   */\r\n  openUserDialog(subco: SubCoPreview): void {\r\n    let dialogRef: any = this.dialog.open(AddSubcoDialogEm, { height: 'auto', width: '50vw', data: subco });\r\n\r\n    dialogRef.afterClosed().subscribe((s: SubCoPreview | boolean) => {\r\n      if (s) {\r\n        var temp = s as SubCoPreview;\r\n        temp.subcontractorEmId = this.userId;\r\n        this.subcoService.setSubco(<SubCoPreview>temp);\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../assets/styles/variables.scss';\r\n\r\n.accordion-header {\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  padding: 15px 24px;\r\n  color: map-get($font-colors, grey-dark);\r\n  margin-right: 8px;\r\n\r\n  div {\r\n    display: flex;\r\n    flex-grow: 1;\r\n    width: 0;\r\n    margin-right: 16px;\r\n\r\n    &:last-child {\r\n      flex-grow: 4;\r\n      text-align: center;\r\n    }\r\n\r\n    span {\r\n      flex: 1;\r\n      word-break: break-word;\r\n      align-self: center;\r\n    }\r\n  }\r\n}\r\n\r\n.mat-accordion .mat-expansion-panel {\r\n  border-radius: 0;\r\n\r\n  .mat-expansion-panel-header-description, .mat-expansion-panel-header-title {\r\n    font-size: 1.1rem;\r\n    line-height: 1.2rem;\r\n    width: 0;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n\r\n    .mat-cell {\r\n      font-size: 1.1rem;\r\n    }\r\n  }\r\n  \r\n  .mat-expansion-panel-header-description {\r\n    text-align: center; \r\n    flex-grow: 4;\r\n  }\r\n\r\n  .mat-cell, .mat-header-cell {\r\n    flex: 1;\r\n    color: map-get($font-colors, grey-dark);\r\n  }\r\n}\r\n\r\n.mat-icon {\r\n\tfont-size: 20px;\r\n\tline-height: 20px;\r\n\r\n\t&:hover {\r\n\t\tcolor: map-get($font-colors, grey-light);\r\n\t}\r\n\r\n\t&.icon-edited, &.icon-edited:hover {\r\n\t\tcolor: map-get($font-colors, red);\r\n\t}\r\n}\r\n\r\n.locked-leveldesc {\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.mat-expansion-panel.mat-expanded {\r\n  order: -1;\r\n}",
                    "styleUrl": "./subco-month.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>teamlead component constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "subcoService",
                        "type": "SubCoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "subcoForecastService",
                        "type": "SubCoForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 66,
                "rawdescription": "\n\nteamlead component constructor\n",
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "subcoService",
                        "type": "SubCoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "subcoForecastService",
                        "type": "SubCoForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div style=\"height: 72vh; overflow: auto;\"  (scroll)=\"onScroll($event)\">\r\n  <div class=\"no-data\" *ngIf=\"subcos.length == 0\">\r\n    <h3>No user assigned.</h3>\r\n  </div>\r\n\r\n  <div layout=\"row\" layout-wrap *ngIf=\"subcos.length > 0\">\r\n    <div flex=\"100\" flex-gt-md=\"75\">\r\n      <div class=\"mat-row accordion-header\">\r\n        <div>Name</div>\r\n        <div>\r\n          <span></span>\r\n          <span>Cost Rate</span>\r\n          <span>COR</span>\r\n          <span>ManDay</span>\r\n          <span>Revenue</span>\r\n          <span>Costs</span>\r\n          <span>Contribution</span>\r\n          <span>CP%</span>\r\n        </div>\r\n      </div>\r\n\r\n      <mat-accordion displayMode=\"flat\" multi >\r\n        <!--order of events closed and opened is important-->\r\n        <mat-expansion-panel *ngFor=\"let s of subcos; let i = index\" id=\"{{'panel-' + i}}\" [expanded]=\"step === i\" (opened)=\"setStep(i)\" (closed)=\"ExpPanelClicked()\" >\r\n          <mat-expansion-panel-header *ngIf='working(s, month)'>\r\n            <mat-panel-title>\r\n              {{s.resourceName}}\r\n            </mat-panel-title>\r\n            <mat-panel-description class=\"mat-row\">\r\n                <span class=\"mat-cell\">\r\n                  <mat-icon *ngIf=\"forecastState('locked', s.subcontractorId)\" class=\"icon-locked\"\r\n                  matTooltip=\"{{getValue('history', s.subcontractorId)}}\" matTooltipPosition=\"above\" matTooltipDisabled=\"{{!getValue('history', s.subcontractorId)}}\">\r\n                  lock</mat-icon>\r\n                  <ng-container *ngIf=\"forecastState('locked-sub', s.subcontractorId)\">\r\n                    <mat-icon class=\"icon-locked-sublevel\"\r\n                    matTooltip=\"{{getValue('history', s.subcontractorId)}}\" matTooltipPosition=\"above\" matTooltipDisabled=\"{{!getValue('history', s.subcontractorId)}}\">\r\n                      lock_open</mat-icon>\r\n                    <div class=\"locked-leveldesc\">{{forecastState('locklevel', s.subcontractorId)}}</div>\r\n                  </ng-container>\r\n                  <mat-icon *ngIf=\"forecastState('saved', s.subcontractorId)\" \r\n                  matTooltip=\"{{getValue('history', s.subcontractorId)}}\" matTooltipPosition=\"above\" matTooltipDisabled=\"{{!getValue('history', s.subcontractorId)}}\">\r\n                  save</mat-icon>\r\n                  <mat-icon *ngIf=\"forecastState('edited', s.subcontractorId)\" class=\"icon-edited\">radio_button_checked</mat-icon>\r\n                </span>\r\n                <span class=\"mat-cell\">{{getValue('costRate', s.subcontractorId) | number: '1.0-2': 'de'}}</span>\r\n                <span class=\"mat-cell\">{{getValue('cor', s.subcontractorId) | number: '1.0-2': 'de'}}</span>\r\n                <span class=\"mat-cell\">{{getValue('manDay', s.subcontractorId) | number: '1.0-2': 'de'}}</span>\r\n                <span class=\"mat-cell\">{{getValue('revenue', s.subcontractorId) | number: '1.0-2': 'de'}}</span>\r\n                <span class=\"mat-cell\">{{getValue('costs', s.subcontractorId) | number: '1.0-2': 'de'}}</span>\r\n                <span class=\"mat-cell\">{{getValue('contribution', s.subcontractorId) | number: '1.0-2': 'de'}}</span>\r\n                <span class=\"mat-cell\">{{getValue('cp', s.subcontractorId) | number: '1.0-2': 'de'}}</span>\r\n            </mat-panel-description>\r\n          </mat-expansion-panel-header>\r\n        \r\n          <ng-template matExpansionPanelContent>\r\n            <app-subco-fc-entry class=\"tab-container\" [subcoId]=\"s.subcontractorId\" [month]=\"month\"></app-subco-fc-entry>\r\n          </ng-template>\r\n          \r\n          <mat-action-row>\r\n            <button mat-button color=\"warn\" (click)=\"prevStep()\" *ngIf=\"i > 0\">Previous</button>\r\n            <button mat-button color=\"primary\" (click)=\"nextStep()\" *ngIf=\"i < (subcos.length-1)\">Next</button>\r\n          </mat-action-row>\r\n        </mat-expansion-panel>\r\n      </mat-accordion>\r\n    </div>\r\n\r\n    <div flex=\"100\" flex-gt-md=\"25\" class=\"summary-box-container\">\r\n      <app-subco-summary [role]=\"role\" [month]=\"month\"></app-subco-summary>\r\n      <!-- <div class=\"button-row\" style=\"padding-left: 15px;\">\r\n        <button mat-raised-button (click)=\"addNewSubco()\" color=\"primary\" style=\"width: 144px;\">\r\n          <mat-icon>person_add</mat-icon> Add Subco\r\n        </button> \r\n    </div> -->\r\n    </div>\r\n  </div>\r\n</div>\r\n  <div layout=\"row\" layout-wrap>\r\n    <button mat-raised-button (click)=\"addNewSubco()\" color=\"primary\" style=\"width: 144px;\">\r\n      <mat-icon>person_add</mat-icon> Add Subco\r\n    </button>\r\n</div>"
        },
        {
            "name": "SubcosComponent",
            "id": "component-SubcosComponent-09a0395f1de3d3547e404285cd061203",
            "file": "src/app/admin/components/subcos/subcos.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-admin-subcos",
            "styleUrls": [
                "../../admin.component.scss",
                "./subcos.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./subcos.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSort",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSort, {static: true}"
                        }
                    ]
                },
                {
                    "name": "subco",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTableDataSource<SubCoPreview>",
                    "optional": false,
                    "description": "<p>Subco array as MatTableDataSource (needed for auto updates on table)</p>\n",
                    "line": 23,
                    "rawdescription": "\n\nSubco array as MatTableDataSource (needed for auto updates on table)\n"
                },
                {
                    "name": "subcoSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>subco update subscription</p>\n",
                    "line": 28,
                    "rawdescription": "\n\nsubco update subscription\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "addNewSubco",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nopen add subco dialog\n",
                    "description": "<p>open add subco dialog</p>\n"
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnsubscribe services when component gets destroyed\n",
                    "description": "<p>Unsubscribe services when component gets destroyed</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openUserDialog",
                    "args": [
                        {
                            "name": "subco",
                            "type": "SubCoPreview",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nopen update user dialog\n",
                    "description": "<p>open update user dialog</p>\n",
                    "jsdoctags": [
                        {
                            "name": "subco",
                            "type": "SubCoPreview",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { Subscription } from 'rxjs';\r\nimport { User } from '../../../core/interfaces/user';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { AddUserDialog } from '../../dialogs/add-user/add-user.dialog';\r\nimport { UserAdminService } from '../../../core/services/admin/user.service';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { SubCoPreview } from '../../../core/interfaces/subCoPreview';\r\nimport { SubCoService } from '../../../core/services/subCo.service';\r\nimport { AddSubcoDialog } from '../../dialogs/add-subco/add-subco.dialog';\r\n@Component({\r\n  selector: 'app-admin-subcos',\r\n  templateUrl: './subcos.component.html',\r\n  styleUrls: ['../../admin.component.scss','./subcos.component.scss']\r\n})\r\nexport class SubcosComponent implements OnInit {\r\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\r\n\r\n  /**\r\n   * Subco array as MatTableDataSource (needed for auto updates on table)\r\n   */\r\n  subco: MatTableDataSource<SubCoPreview>;\r\n\r\n  /**\r\n   * subco update subscription\r\n   */\r\n   subcoSubscription: Subscription;\r\n\r\n  constructor(private dialog: MatDialog,\r\n              private userAdminService: UserAdminService,\r\n              private subcoService: SubCoService) { \r\n    this.subco = new MatTableDataSource([]);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.subcoService.initializeAllSubCoPreviews();\r\n\r\n    //load all subcos\r\n    this.subcoSubscription = this.subcoService.allSubCoPreviews$\r\n      .subscribe((subco: SubCoPreview[]) => {\r\n        this.subco = new MatTableDataSource(subco);\r\n        this.subco.sort = this.sort;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe services when component gets destroyed\r\n   */\r\n   ngOnDestroy(): void {\r\n    this.subcoSubscription.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * open add subco dialog\r\n   */\r\n   addNewSubco(): void {\r\n    this.openUserDialog(new SubCoPreview());\r\n  } \r\n\r\n  /**\r\n   * open update user dialog\r\n   * @param user\r\n   */\r\n  openUserDialog(subco: SubCoPreview): void {\r\n    let dialogRef: any = this.dialog.open(AddSubcoDialog, { height: 'auto', width: '50vw', data: subco });\r\n\r\n    dialogRef.afterClosed().subscribe((s: SubCoPreview | boolean) => {\r\n      if (s) {\r\n        this.subcoService.setSubco(<SubCoPreview>s);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * returns subco type\r\n   * @param roleId\r\n   */\r\n   /*getType(typeId: number): string {\r\n    return this.roles.find((r: Role) => r.typeId === typeId) ? this.roles.find((r: any) => r.roleId === roleId).name : '-';\r\n  }*/\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../assets/styles/variables.scss';\r\n\r\n.mat-sidenav-container{\r\n\tbackground: transparent;\r\n\tmargin: 0 10px;\r\n}\r\n\r\n.mat-drawer {\r\n\tdisplay: none;\r\n\tbackground: transparent;\r\n\twidth: 50px;\r\n\tborder-right-width: 0px;\r\n}\r\n\r\n.nav-button-container {\r\n\tmargin: 4px 0;\r\n\r\n\t.mat-icon-button {\r\n\t\twidth: 50px;\r\n\t\theight: 50px;\r\n\t\tmargin-bottom: 10px;\r\n\t\tpadding: 0;\r\n\r\n\t\t&.active, &.active .mat-icon {\r\n\t\t\tcolor: map-get($font-colors, blue);\r\n\t\t}\r\n\t}\r\n\r\n\t.mat-icon {\r\n\t\twidth: 1em;\r\n\t\theight: 1em;\r\n\t\tline-height: 1rem;\r\n\t\tfont-size: 2rem;\r\n\t}\r\n}\r\n\r\n\r\ntd.mat-cell:first-of-type, td.mat-footer-cell:first-of-type, th.mat-header-cell:first-of-type {\r\n\tpadding-left: 0;\r\n}\r\n\r\ntd.mat-cell:last-of-type, td.mat-footer-cell:last-of-type, th.mat-header-cell:last-of-type {\r\n\tpadding-right: 0;\r\n}\r\n\r\n.action-button {\r\n\twidth: 50px;\r\n\ttext-align: center;\r\n}\r\n\r\n.flag-button {\r\n\twidth: 70px;\r\n\ttext-align: center;\r\n}\r\n\r\n.button-row {\r\n\tmargin: 50px;\r\n\r\n\t.mat-raised-button {\r\n\t\tposition: fixed;\r\n\t\tz-index: 100;\r\n\t\tbottom: 32px;\r\n\t\tright: 30px;\r\n\t\tbox-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\r\n\t}\r\n}\r\n\r\n.mat-form-field {\r\n\tmargin: 5px 0;\r\n}\r\n\r\ntr.mat-row.inactive td {\r\n\tcolor: map-get($font-colors, grey-label);\r\n\r\n\t.flag-inactive {\r\n\t\tbackground: map-get($font-colors, red);\r\n\t\tcolor: map-get($font-colors, white);\r\n\t\tpadding: 3px 6px;\r\n\t\tborder-radius: 4px;\r\n\t}\r\n}\r\n\r\n.mat-table tr.mat-row:last-child td {\r\n\tborder-bottom: 0;\r\n}",
                    "styleUrl": "../../admin.component.scss"
                },
                {
                    "data": "@import '../../../../assets/styles/variables.scss';\r\n\r\n.form-field-toggle {\r\n  margin: 10px;\r\n}\r\n\r\n\r\n.accordion-header {\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  padding: 15px 24px;\r\n  color: map-get($font-colors, grey-dark);\r\n  margin-right: 8px;\r\n\r\n  div {\r\n    display: flex;\r\n    flex-grow: 1;\r\n    width: 0;\r\n    margin-right: 16px;\r\n\r\n    &:last-child {\r\n      flex-grow: 2;\r\n      text-align: center;\r\n    }\r\n\r\n    span {\r\n      flex: 1;\r\n      word-break: break-word;\r\n    }\r\n  }\r\n}\r\n\r\n.mat-accordion .mat-expansion-panel {\r\n  border-radius: 0;\r\n\r\n  .mat-expansion-panel-header-description, .mat-expansion-panel-header-title {\r\n    width: 0;\r\n    line-height: 15px;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n  }\r\n  \r\n  .mat-expansion-panel-header-description {\r\n    text-align: center; \r\n    flex-grow: 2;\r\n  }\r\n\r\n  .mat-cell, .mat-header-cell {\r\n    flex: 1;\r\n    color: map-get($font-colors, grey-dark);\r\n  }\r\n}\r\n\r\n.mat-raised-button{\r\n    margin-top: 20px;\r\n}\r\n\r\n.button-margin {\r\n  margin: 10px,\r\n}\r\n\r\n.clicked {\r\n  background-color: #f9fafb;\r\n}\r\n\r\n\r\ntd.mat-cell:last-of-type, td.mat-footer-cell:last-of-type, th.mat-header-cell:last-of-type {\r\n\tpadding-right: 5;\r\n}\r\n\r\n",
                    "styleUrl": "./subcos.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userAdminService",
                        "type": "UserAdminService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "subcoService",
                        "type": "SubCoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userAdminService",
                        "type": "UserAdminService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "subcoService",
                        "type": "SubCoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<table mat-table matSort [dataSource]=\"subco\" style=\"padding-left: 60px;\">\r\n    <ng-container  matColumnDef=\"name\" >\r\n      <th mat-header-cell  mat-sort-header *matHeaderCellDef>Name</th>\r\n      <td mat-cell  *matCellDef=\"let subco\">{{subco.resourceName}}</td>\r\n    </ng-container>\r\n  \r\n    <ng-container  matColumnDef=\"type\">\r\n      <th mat-header-cell  mat-sort-header *matHeaderCellDef>Type</th>\r\n      <td mat-cell  *matCellDef=\"let subco\">{{ subco.subcontractorTypeName }}</td> \r\n    </ng-container>\r\n\r\n    <ng-container  matColumnDef=\"emId\">\r\n      <th mat-header-cell  mat-sort-header *matHeaderCellDef>Engagement Manager Id</th>\r\n      <td mat-cell  *matCellDef=\"let subco\">{{ subco.subcontractorEmId }}</td> \r\n    </ng-container>\r\n  \r\n    <ng-container matColumnDef=\"edit\">\r\n      <th mat-header-cell *matHeaderCellDef class=\"action-button\"></th>\r\n      <td mat-cell *matCellDef=\"let subco\" class=\"action-button\" (click)=\"openUserDialog(subco)\"><mat-icon>edit</mat-icon></td>\r\n    </ng-container>\r\n  \r\n    <tr mat-header-row *matHeaderRowDef=\"[ 'name', 'type', 'emId', 'edit']\"></tr>\r\n    <tr mat-row  *matRowDef=\"let row; columns: [ 'name', 'type', 'emId', 'edit'];\" ></tr>\r\n</table>\r\n\r\n<div class=\"button-row\">\r\n    <button mat-raised-button (click)=\"addNewSubco()\" color=\"primary\">\r\n      <mat-icon>person_add</mat-icon> Add Subco\r\n    </button> \r\n</div>"
        },
        {
            "name": "SubcosComponent",
            "id": "component-SubcosComponent-ffdf59d745f6106d50b56c4a1c0930b6-1",
            "file": "src/app/forecast/pages/subcos/subcos.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-subcos",
            "styleUrls": [
                "./subcos.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./subcos.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeMonth",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>index of currently selected tab (= month)</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nindex of currently selected tab (= month)\n"
                },
                {
                    "name": "months",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "monthSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "step",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Number of the header in the child&#39;s expansion panel currently open</p>\n",
                    "line": 40,
                    "rawdescription": "\n\nNumber of the header in the child's expansion panel currently open\n"
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>id of currently logged-in user (received from auth-service)</p>\n",
                    "line": 30,
                    "rawdescription": "\n\nid of currently logged-in user (received from auth-service)\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "forecastState",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initSubcoForecast",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setStep",
                    "args": [
                        {
                            "name": "event",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTabActive",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Location } from '@angular/common';\r\n\r\nimport { Month } from '../../../core/interfaces/month';\r\nimport { Subscription } from 'rxjs';\r\nimport { UtilitiesService } from '../../../core/services/utilities.service';\r\nimport { PageStateService } from '../../../core/shared/page-state.service';\r\nimport { environment as env } from \"../../../../environments/environment.prod\";\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { LockedMonth } from '../../../core/interfaces/lockedMonth';\r\nimport { MonthService } from '../../../core/services/admin/months.service';\r\nimport { AuthService } from '../../../core/security/auth.service';\r\nimport { TeamUserService } from '../../../core/services/forecasts/team-user.service';\r\nimport { ForecastService } from '../../../core/services/forecasts/forecast.service';\r\n\r\n@Component({\r\n  selector: 'app-subcos',\r\n  templateUrl: './subcos.component.html',\r\n  styleUrls: ['./subcos.component.scss']\r\n})\r\nexport class SubcosComponent implements OnInit, OnDestroy {\r\n  months: Month[] = [];\r\n  monthSubscription: Subscription;\r\n\r\n  \r\n  /**\r\n\t * id of currently logged-in user (received from auth-service)\r\n\t */\r\n\tuserId: number;\r\n\r\n  /**\r\n   * index of currently selected tab (= month)\r\n   */\r\n  activeMonth: number = 0;\r\n\r\n  /**\r\n   * Number of the header in the child's expansion panel currently open\r\n   */\r\n  step: number = -1;\r\n\r\n  constructor(\r\n    private location: Location,\r\n\t\tprivate route: ActivatedRoute,\r\n    private utilitiesService: UtilitiesService,\r\n    private monthService: MonthService,\r\n    private pageState: PageStateService,\r\n    private authService: AuthService,\r\n    private teamService: TeamUserService,\r\n    private forecastService: ForecastService\r\n  ){\r\n    this.userId = this.authService.getUserId();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.pageState.forecastrReady$.subscribe((ready: boolean) => {\r\n\t\t\tif (ready && this.authService.hasRole(env.roles.css)) {\r\n\t\t\t\tthis.initSubcoForecast();\r\n\t\t\t}\r\n\t\t});\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.monthSubscription.unsubscribe();\r\n  }\r\n\r\n  private initSubcoForecast(): void {\r\n    // this.teamService.initializePDLTeam(); //TODO: needs to be SubcoService\r\n    this.monthSubscription = this.utilitiesService.months$\r\n      .subscribe((months: Month[]) => {\r\n        this.months = months.filter((m: Month) => m.active === true);\r\n        var today = new Date();\r\n        var todayMonth = new Date(today.getFullYear(), today.getMonth(), 1);\r\n\r\n        this.months = this.months.filter((m: Month) => new Date(m.time) >= todayMonth);\r\n\r\n\t\t\t\tif(this.months.length > 7) {\r\n\t\t\t\t\tthis.months = this.months.slice(1, 7);\r\n        }\r\n        \r\n        let id: number = parseInt(this.route.snapshot.paramMap.get('id'), 10);\r\n        if (typeof id !== 'undefined' && id >= 0 && id < this.months.length) {\r\n          this.activeMonth = id;\r\n  \r\n        } else {\r\n          for (let i: number = 0; i < this.months.length; i++) {\r\n            if (Date.parse(this.months[i].time) > (new Date()).setMonth((new Date().getMonth() - 1))) {\r\n              this.activeMonth = i;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        setTimeout(() => {\r\n\t\t\t\t\tlet shift: number = parseInt(window.getComputedStyle(document.querySelector('.mat-tab-label-container')).width) - parseInt(window.getComputedStyle(document.querySelector('.mat-tab-list')).width);\r\n\t\t\t\t\tlet pos: number = parseInt((document.querySelector('.mat-tab-label-active') as HTMLElement).getAttribute('aria-posinset'), 10);\r\n\t\t\t\t\tif (shift < ((pos ? pos : 1) - 1) * -100) {\r\n\t\t\t\t\t\tshift = ((pos ? pos : 1) - 1) * -100;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t(document.querySelector('.mat-tab-list') as HTMLElement).style.transform = 'translateX(' + shift + 'px)';\r\n\t\t\t\t}, 100);\r\n      });\r\n\r\n      this.monthService.getLockedMonths().subscribe(\r\n        (lockedMonths: LockedMonth[]) => {\r\n          let activeLockedMonths = lockedMonths.filter((m: LockedMonth) => this.months.find((x: Month) => x.id === m.id) !== undefined);\r\n          for(let i = 0; i < this.months.length; i++) {\r\n            this.months[i].locked = activeLockedMonths[i].locked;\r\n          }\r\n        }\r\n      );\r\n  }\r\n\r\n  forecastState(type: string, monthId: number): boolean {\r\n\t\treturn this.forecastService.checkForecastState(type, monthId, this.userId);\r\n\t}\r\n\r\n  setTabActive(index: number): void {\r\n    this.activeMonth = index;\r\n    this.location.replaceState('/forecast/subcos/' + this.activeMonth);\r\n  }\r\n\r\n  //Reflect a step change from em-month into parent\r\n  setStep(event : number){\r\n    this.step = event;\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./subcos.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "monthService",
                        "type": "MonthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "teamService",
                        "type": "TeamUserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 40,
                "jsdoctags": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "monthService",
                        "type": "MonthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "teamService",
                        "type": "TeamUserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "SubcosComponent-1",
            "templateData": "<mat-tab-group [selectedIndex]=\"activeMonth\" (selectedIndexChange)=\"setTabActive($event)\">\r\n    <mat-tab *ngFor=\"let month of months\" label=\"{{month.name}}\" id=\"{{month.id}}\">\r\n      <ng-template mat-tab-label>\r\n              <mat-icon *ngIf=\"forecastState('edited', month.id)\" class=\"icon-edited\">radio_button_checked</mat-icon>\r\n        <mat-icon *ngIf=\"month.locked || forecastState('locked', month.id)\" class=\"icon-locked\">lock</mat-icon>\r\n              {{month.name}}\r\n          </ng-template>\r\n      <ng-template matTabContent> <!-- matTabContent for tab lazy loading -->\r\n        <app-subco-month [month]=\"month\" [step]=\"step\" (setStepEvent)=setStep($event)></app-subco-month>\r\n      </ng-template>\r\n    </mat-tab>\r\n</mat-tab-group>"
        },
        {
            "name": "SubcosExecutiveComponent",
            "id": "component-SubcosExecutiveComponent-e200974e4ce5cfebd8b43e3b41cf3561",
            "file": "src/app/forecast/pages/subcos-executive/subcos-executive.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-subcos-executive",
            "styleUrls": [
                "./subcos-executive.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./subcos-executive.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "availableMonths",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "months",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "monthSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "period",
                    "defaultValue": "{ from: undefined, to: undefined }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "viewSwitch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "changeViewSwitch",
                    "args": [
                        {
                            "name": "switchState",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "switchState",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initPracticesView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOpen dialog for executive chart",
                    "description": "<p>Open dialog for executive chart</p>\n"
                },
                {
                    "name": "setDefaultPeriod",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the default period to current month until 6 months in the future\n",
                    "description": "<p>Sets the default period to current month until 6 months in the future</p>\n"
                },
                {
                    "name": "showPeriod",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReloads the values after period update\n",
                    "description": "<p>Reloads the values after period update</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Month } from '../../../core/interfaces/month';\r\nimport { Subscription } from 'rxjs';\r\nimport { UtilitiesService } from '../../../core/services/utilities.service';\r\nimport { PageStateService } from '../../../core/shared/page-state.service';\r\nimport { ExecutiveChartComponent } from \"../../components/executive-chart/executive-chart.component\";\r\nimport { MatDialog } from \"@angular/material/dialog\";\r\n\r\n@Component({\r\n  selector: 'app-subcos-executive',\r\n  templateUrl: './subcos-executive.component.html',\r\n  styleUrls: ['./subcos-executive.component.scss']\r\n})\r\nexport class SubcosExecutiveComponent implements OnInit, OnDestroy {\r\n\r\n  monthSubscription: Subscription;\r\n\r\n  months: Month[] = [];\r\n\r\n  availableMonths: Month[] = [];\r\n\r\n  period: any = { from: undefined, to: undefined };\r\n\r\n  viewSwitch: string;\r\n\r\n\r\n  constructor(\r\n    private utilitiesService: UtilitiesService,\r\n    private pageState: PageStateService,\r\n    public dialog: MatDialog,\r\n  ) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.pageState.forecastrReady$.subscribe((ready:boolean)=> {\r\n      if (ready) {\r\n         this.initPracticesView();\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.monthSubscription.unsubscribe();\r\n  }\r\n\r\n  initPracticesView(): void {\r\n    this.monthSubscription = this.utilitiesService.months$.subscribe((months: Month[]) => {\r\n      this.availableMonths = months;\r\n      this.setDefaultPeriod();\r\n    });\r\n  }\r\n\r\n      /**\r\n   * Reloads the values after period update\r\n   */\r\n  showPeriod(): void {\r\n    if (this.period.to < this.period.from) {\r\n      this.period.to = this.period.from;\r\n    }\r\n\r\n    this.pageState.showSpinner();\r\n    this.months = this.utilitiesService\r\n      .getMonths()\r\n      .filter((m: Month) => m.id >= this.period.from && m.id <= this.period.to);\r\n    this.pageState.hideSpinner();\r\n  }\r\n\r\n  /**\r\n   * Sets the default period to current month until 6 months in the future\r\n   */\r\n  setDefaultPeriod(): void {\r\n    let months: Month[] = this.utilitiesService.getMonths();\r\n\r\n    for (let i: number = 0; i < months.length; i++) {\r\n      if (\r\n        Date.parse(months[i].time) >\r\n        new Date().setMonth(new Date().getMonth() + 1)\r\n      ) {\r\n        this.period.from = i;\r\n        this.period.to = i + 5;\r\n        this.showPeriod();\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  \r\n  /**Open dialog for executive chart */\r\n  openDialog(): void {\r\n    const dialogRef = this.dialog.open(ExecutiveChartComponent, {\r\n      height: \"90%\",\r\n      width: \"90%\",\r\n      panelClass: \"custom-dialog-container\",\r\n      data: {},\r\n    });\r\n    dialogRef.afterClosed().subscribe(() => {  });\r\n  }\r\n\r\n  changeViewSwitch(switchState: string): void {\r\n    this.viewSwitch = switchState;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../assets/styles/variables.scss\";\r\n\r\n.practices-view-container {\r\n    margin-top: 5px;\r\n    padding: 0;\r\n    background: transparent;\r\n}\r\n\r\n.second-header {\r\n    width: 100%;\r\n}\r\n\r\n.executive-btn {\r\n    float: right;\r\n    position: relative;\r\n}\r\n\r\n.mat-icon {\r\n    font-size: 18px;\r\n    color: #fff !important;\r\n}\r\n\r\n.period-container {\r\n    width: 100%;\r\n}\r\n.period-component {\r\n    display: inline-flex;\r\n    margin: 0 5px;\r\n\r\n    &.mat-form-field {\r\n      width: 200px;\r\n    }\r\n\r\n    &.mat-raised-button {\r\n      margin-top: 4px;\r\n      bottom: 4px;\r\n    }\r\n\r\n    &:first-child {\r\n      margin-left: 0;\r\n    }\r\n}\r\n  \r\n.period-download {\r\n    margin-top: 4px;\r\n    bottom: 4px;\r\n}",
                    "styleUrl": "./subcos-executive.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"practices-view\">\r\n    <div class=\"practices-view-container\">\r\n        <h3>Months</h3>\r\n        <mat-tab-group>\r\n            <mat-tab *ngFor=\"let month of months\" label=\"{{ month.name }}\">\r\n                <ng-template matTabContent>\r\n                    <app-subco-executive-detail (viewSwitch)=\"changeViewSwitch($event)\" [switchState]=\"viewSwitch\"  [month]=\"month\" [months]=\"months\"></app-subco-executive-detail>\r\n                  </ng-template>\r\n            </mat-tab>\r\n        </mat-tab-group>\r\n    </div>\r\n</div>"
        },
        {
            "name": "SubcoSummaryComponent",
            "id": "component-SubcoSummaryComponent-d0ee4e3d89132e3d77961698ceac020e",
            "file": "src/app/forecast/components/subco-summary/subco-summary.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-subco-summary",
            "styleUrls": [
                "./subco-summary.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./subco-summary.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "month",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "month (received as input)",
                    "description": "<p>month (received as input)</p>\n",
                    "line": 44,
                    "type": "Month"
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fcEntries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FcEntry[]",
                    "optional": false,
                    "description": "<p>list of all forecast entries for subco + month</p>\n",
                    "line": 50,
                    "rawdescription": "\n\nlist of all forecast entries for subco + month\n"
                },
                {
                    "name": "fcSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>forecast subscription</p>\n",
                    "line": 84,
                    "rawdescription": "\n\nforecast subscription\n"
                },
                {
                    "name": "months",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "<p>months list</p>\n",
                    "line": 60,
                    "rawdescription": "\n\nmonths list\n"
                },
                {
                    "name": "projects",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Project[]",
                    "optional": false,
                    "description": "<p>project list</p>\n",
                    "line": 55,
                    "rawdescription": "\n\nproject list\n"
                },
                {
                    "name": "subcos",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SubCoDetails[]",
                    "optional": false,
                    "description": "<p>subcos member list</p>\n",
                    "line": 65,
                    "rawdescription": "\n\nsubcos member list\n"
                },
                {
                    "name": "subcosSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>subcos subscription</p>\n",
                    "line": 89,
                    "rawdescription": "\n\nsubcos subscription\n"
                },
                {
                    "name": "subCoTotals",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SubCoTotals",
                    "optional": false,
                    "description": "<p>contains totals-data</p>\n",
                    "line": 75,
                    "rawdescription": "\n\ncontains totals-data\n"
                },
                {
                    "name": "summaryData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SubcoSummaryData",
                    "optional": false,
                    "description": "<p>contains summary-data (calculated in subco-summary service)</p>\n",
                    "line": 70,
                    "rawdescription": "\n\ncontains summary-data (calculated in subco-summary service)\n"
                },
                {
                    "name": "totalsSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 92
                }
            ],
            "methodsClass": [
                {
                    "name": "exportPeriodForecastToCSV",
                    "args": [
                        {
                            "name": "csvExportMonths",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 296,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExport forecasts for subcos for the selected months\n",
                    "description": "<p>Export forecasts for subcos for the selected months</p>\n",
                    "jsdoctags": [
                        {
                            "name": "csvExportMonths",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasPracticeLeadRole",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 269,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns whether the logged in user has a practice lead role\n",
                    "description": "<p>Returns whether the logged in user has a practice lead role</p>\n"
                },
                {
                    "name": "isFinancialController",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 272,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isSubcoRelevantForMonth",
                    "args": [
                        {
                            "name": "user",
                            "type": "SubCoDetails",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "SubCoDetails",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnsubscribe services when component gets destroyed\n",
                    "description": "<p>Unsubscribe services when component gets destroyed</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInit summaryDays\nSet Utilities\nCalc Total workingDays\nSubscribe forecast at ForecastService for updates\n",
                    "description": "<p>Init summaryDays\nSet Utilities\nCalc Total workingDays\nSubscribe forecast at ForecastService for updates</p>\n"
                },
                {
                    "name": "numberToString",
                    "args": [
                        {
                            "name": "no",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "precision",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 383,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "no",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "precision",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openCSVExportModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 279,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpen csv export modal to choose which data to export\n",
                    "description": "<p>Open csv export modal to choose which data to export</p>\n"
                },
                {
                    "name": "percentageValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturn for giving VALUE percentage value.\n",
                    "description": "<p>Return for giving VALUE percentage value.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6021,
                                "end": 6026,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "value"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6015,
                                "end": 6020,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setLockState",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "role",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "messageSuccess",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "messageFail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 244,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReset all forecasts to initial state DEACTIVATED\n",
                    "description": "<p>Reset all forecasts to initial state DEACTIVATED</p>\n",
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "role",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "messageSuccess",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "messageFail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "submitAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 189,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSubmit all forecasts at once\n",
                    "description": "<p>Submit all forecasts at once</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>subco summary component</p>\n",
            "rawdescription": "\n\nsubco summary component\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, OnChanges, OnDestroy, Inject } from \"@angular/core\";\r\nimport { DatePipe } from '@angular/common';\r\nimport { MatDialog, MatDialogRef } from \"@angular/material/dialog\";\r\nimport { MatSnackBar } from \"@angular/material/snack-bar\";\r\nimport { MatTableDataSource } from \"@angular/material/table\";\r\n\r\nimport { UtilitiesService } from \"../../../core/services/utilities.service\";\r\nimport { ForecastService } from \"../../../core/services/forecasts/forecast.service\";\r\nimport { UserService } from \"../../../core/services/user.service\";\r\nimport { AuthService } from \"../../../core/security/auth.service\";\r\n\r\nimport { FcEntry } from \"../../../core/interfaces/fcEntry\";\r\nimport { Project } from \"../../../core/interfaces/project\";\r\nimport { Month } from \"../../../core/interfaces/month\";\r\nimport { User } from \"../../../core/interfaces/user\";\r\nimport { Grade } from \"../../../core/interfaces/grade\";\r\nimport { SummaryData, SummaryDataProject } from '../../../core/interfaces/summaryData';\r\n\r\nimport { TeamForecastService } from \"../../../core/services/forecasts/team-forecasts.service\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { PageStateService } from \"../../../core/shared/page-state.service\";\r\nimport { environment as env } from '../../../../environments/environment';\r\nimport { TeamUserService } from \"../../../core/services/forecasts/team-user.service\";\r\nimport { ExportCsvDialog } from \"../../dialogs/export-csv/export-csv.dialog\";\r\nimport { ConfirmMessageDialog } from \"../../dialogs/confirm-message/confirm-message.dialog\";\r\nimport { SubCoService } from \"../../../core/services/subCo.service\";\r\nimport { SubCoDetails } from \"../../../core/interfaces/subCoDetails\";\r\nimport { SubcoSummaryData } from \"../../../core/interfaces/subcoSummaryData\";\r\nimport { SubCoForecastService } from \"../../../core/services/subCoForecast.service\";\r\nimport { SubCoTotals } from \"../../../core/interfaces/subCoTotals\";\r\n\r\n/**\r\n * subco summary component\r\n */\r\n@Component({\r\n  selector: \"app-subco-summary\",\r\n  templateUrl: \"./subco-summary.component.html\",\r\n  styleUrls: [\"./subco-summary.component.scss\"]\r\n})\r\nexport class SubcoSummaryComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * month (received as input)\r\n   */\r\n  @Input('month') month: Month;\r\n  @Input('role') role: string;\r\n\r\n  /**\r\n   * list of all forecast entries for subco + month\r\n   */\r\n  fcEntries: FcEntry[];\r\n\r\n  /**\r\n   * project list\r\n   */\r\n  projects: Project[] = [];\r\n\r\n  /**\r\n   * months list\r\n   */\r\n  months: Month[] = [];\r\n  \r\n  /**\r\n   * subcos member list\r\n   */\r\n  subcos: SubCoDetails[] = []; //TODO: Replace with subcos\r\n\r\n  /**\r\n   * contains summary-data (calculated in subco-summary service)\r\n   */\r\n  summaryData: SubcoSummaryData;\r\n\r\n  /**\r\n   * contains totals-data \r\n   */\r\n  subCoTotals: SubCoTotals;\r\n  /**\r\n   * provides summary-data projects in 'MatTableDataSource' format\r\n   */\r\n  // summaryProjects: MatTableDataSource<SummaryDataProject>;\r\n\r\n  /**\r\n   * forecast subscription\r\n   */\r\n  fcSubscription: Subscription;\r\n\r\n  /**\r\n   * subcos subscription\r\n   */\r\n  subcosSubscription: Subscription;\r\n\r\n\r\n  userId: number;\r\n  totalsSubscription: Subscription;\r\n\r\n  /**\r\n   * constructor for subco-summary component\r\n   * @param datePipe\r\n   * @param dialog\r\n   * @param utilitiesService\r\n   * @param subcoForecastService\r\n   * @param subcoForecastService\r\n   * @param userService\r\n   * @param pageState\r\n   */\r\n  constructor(\r\n    private datePipe: DatePipe,\r\n    private dialog: MatDialog,\r\n    private snackBar: MatSnackBar,\r\n    private utilitiesService: UtilitiesService,\r\n    private subcoForecastService: SubCoForecastService,\r\n    private userService: UserService,\r\n    private subcoService: SubCoService, //TODO: Replace with SubcoService\r\n    private authService: AuthService,\r\n    private pageState: PageStateService,\r\n  ) {\r\n    this.fcEntries = [];\r\n    // this.summaryProjects = new MatTableDataSource([]);\r\n    this.userId = this.authService.getUserId();\r\n  }\r\n\r\n  /**\r\n   * Init summaryDays\r\n   * Set Utilities\r\n   * Calc Total workingDays\r\n   * Subscribe forecast at ForecastService for updates\r\n   */\r\n  ngOnInit(): void {\r\n    this.projects = this.utilitiesService.getProjects();\r\n    this.months = this.utilitiesService.getMonths();\r\n    this.subcoService.initializeSubcoTotalsForMonth(this.month.id);\r\n\r\n    this.subcosSubscription = this.subcoService.allSubCoDetails$ //TODO: replace\r\n      .subscribe((subco: SubCoDetails[]) => {\r\n        this.subcos = subco;\r\n      });\r\n\r\n    this.fcSubscription = this.subcoForecastService.subcoDetails$\r\n      .subscribe((forecasts: SubCoDetails[]) => {\r\n        this.summaryData = this.subcoService.getSummaryData(forecasts);\r\n      });\r\n      \r\n      this.totalsSubscription = this.subcoService.subCoTotals$\r\n      .subscribe((subcototalss: SubCoTotals) => {\r\n        this.subCoTotals = subcototalss;\r\n      });\r\n  }\r\n\r\n  //TODO: is this relevant\r\n  isSubcoRelevantForMonth(user: SubCoDetails, month: Month) : boolean {\r\n    // if(user. && user.startDate && month.time) {\r\n    //   var endMonth = new Date(user.endDate);\r\n    //   endMonth = new Date(endMonth.getFullYear(), endMonth.getMonth(), 1);\r\n    //   var startMonth = new Date(user.startDate);\r\n    //   startMonth = new Date(startMonth.getFullYear(), endMonth.getMonth(), 1);\r\n    //   var monthMonth = new Date(month.time);\r\n    //   monthMonth = new Date(monthMonth.getFullYear(), monthMonth.getMonth(), 1)\r\n    //   if(startMonth <= endMonth) {\r\n    //     if(monthMonth > endMonth) {\r\n    //       return false;\r\n    //     }\r\n    //   } else if(startMonth > endMonth) {\r\n    //     if(monthMonth <= startMonth && monthMonth >= endMonth) {\r\n    //       return false;\r\n    //     }\r\n    //   }\r\n    // }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe services when component gets destroyed\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.fcSubscription.unsubscribe();\r\n    this.subcosSubscription.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * Return for giving VALUE percentage value.\r\n   * @param value\r\n   */\r\n  percentageValue(value: number): number {\r\n    return parseFloat((value * 100).toFixed(0));\r\n  }\r\n\r\n  /**\r\n   * Submit all forecasts at once\r\n   */\r\n  submitAll(): void {\r\n    let dialogRef: MatDialogRef<ConfirmMessageDialog> = this.dialog.open(ConfirmMessageDialog, {\r\n      data: {\r\n        message: 'Are you sure you want to submit all forecasts?',\r\n        button: { cancel: 'No', submit: 'Yes' },\r\n      },\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((submit: boolean) => {\r\n      if (submit === true) {\r\n        this.pageState.showSpinner();\r\n        this.setLockState(true, this.userId, 'All forecast entries are successfully submitted.', 'Forecast entries could not be submitted. Please try again later.');\r\n      }\r\n      \r\n    });\r\n  }\r\n\r\n  // unlockAll(): void {\r\n  //   let dialogRef: MatDialogRef<ConfirmMessageDialog> = this.dialog.open(ConfirmMessageDialog, {\r\n  //     data: {\r\n  //       message: 'Are you sure you want to unlock all forecasts?',\r\n  //       button: { cancel: 'No', submit: 'Yes' },\r\n  //     },\r\n  //   });\r\n  //   dialogRef.afterClosed().subscribe((submit: boolean) => {\r\n  //     if (submit === true) {\r\n  //       this.pageState.showSpinner();\r\n  //       for(let member of this.subcos) {\r\n  //         this.subcoForecastService.unlockForecast(this.month.id, member.subcontractorId);\r\n  //       }\r\n  //       this.subcoForecastService.unlockForecast(this.month.id, this.userId);\r\n  //       this.pageState.hideSpinner();\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n   * Reset all forecasts to initial state DEACTIVATED\r\n   */\r\n  // resetAll(): void {\r\n  //   let dialogRef: MatDialogRef<ConfirmMessageDialog> = this.dialog.open(ConfirmMessageDialog, {\r\n  //     data: {\r\n  //       message: 'Are you sure you want to re-initialize all forecasts?',\r\n  //       button: { cancel: 'No', submit: 'Yes' },\r\n  //     },\r\n  //   });\r\n\r\n  //   dialogRef.afterClosed().subscribe((submit: boolean) => {\r\n  //     if (submit === true) {\r\n  //       this.pageState.showSpinner();\r\n  //       this.setLockState(false, -1, 'All forecast entries are successfully re-initialized.', 'Forecast entries could not be re-initialized. Please try again later.');\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n  setLockState(locked: boolean, role: number, messageSuccess: string, messageFail: string): void {\r\n    let level: number = 1;\r\n    if (this.role === 'practice') {\r\n      level = 2;\r\n    }\r\n\r\n    // this.subcoService.setForecastsLockState(this.month.id, this.userId, locked)\r\n    //   .then((forecasts: FcEntry[]) => {\r\n    //     if (forecasts) {\r\n    //       this.forecastService.addForecasts(forecasts, true);\r\n    //     } else {\r\n    //       this.forecastService.setTeamLockState(this.month.id, level, role); //TODO: Replace\r\n    //     }\r\n\r\n    //     this.snackBar.open(messageSuccess, 'OK', { duration: 10000, });\r\n    //     this.pageState.hideSpinner();\r\n    //   }).catch(() => {\r\n    //     this.snackBar.open(messageFail, 'OK', { duration: 10000, });\r\n    //     this.pageState.hideSpinner();\r\n    //   });\r\n  }\r\n\r\n  /**\r\n   * Returns whether the logged in user has a practice lead role\r\n   */\r\n  hasPracticeLeadRole(): boolean {\r\n    return this.authService.hasRole(env.roles.pl);\r\n  }\r\n  isFinancialController(): boolean {\r\n    return this.authService.hasRole(env.roles.fc);\r\n  }\r\n  \r\n  /**\r\n   * Open csv export modal to choose which data to export\r\n   */\r\n  openCSVExportModal(): void {\r\n    let dialogRef: any = this.dialog.open(ExportCsvDialog, {\r\n      width: '30vw',\r\n      maxHeight: '80vh',\r\n      data: { months: this.months.filter((m: Month) => m.active === true) },\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((csvExportMonths: number[]) => {\r\n      if (csvExportMonths) {\r\n        this.exportPeriodForecastToCSV(csvExportMonths);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Export forecasts for subcos for the selected months\r\n   */\r\n  exportPeriodForecastToCSV(csvExportMonths: number[]): void {\r\n    this.pageState.showSpinner();\r\n    let openRequests: number = csvExportMonths.length;\r\n\r\n    let level: number = 1;\r\n    let summaryMap = new Map();\r\n    let monthSummaries: string[] = [];\r\n    let lineEnding = \"\\r\\n\";\r\n    let header = \"Resource;Project Name;Customer;Cost Rate;Cor;Man Day;Revenue;Cost;Contribution;CP%;\"+ lineEnding;\r\n    let summaryHeader = \"Total Revenue;Total Cost;Total Contribution;Total CP%;\" + lineEnding;\r\n\r\n    this.utilitiesService.getMonths().forEach((month: Month) => {\r\n      if (csvExportMonths.indexOf(month.id) >= 0) {\r\n        this.subcoForecastService.getForecastPromise(month.id).then((details: SubCoDetails[]) => {\r\n          let monthSummary: string = \"Month;\" + month.name + lineEnding + \"Working Days;\" + month.workingdays + lineEnding;\r\n          monthSummary += header;\r\n\r\n          let totalContribution: number = 0;\r\n          let totalCosts: number = 0;\r\n          let totalRevenue: number = 0;\r\n          let totalCP: number = 0;\r\n\r\n          for(var d of details) {\r\n            let monthEntry: string = d.resourceName + \";\" + \r\n              d.projectName + \";\" + \r\n              d.customer + \";\" + \r\n              this.numberToString(d.costRate) + \";\" + \r\n              this.numberToString(d.cor) + \";\" + \r\n              this.numberToString(d.manDay) + \";\" + \r\n              this.numberToString(d.revenue) + \";\" + \r\n              this.numberToString(d.cost) + \";\" + \r\n              this.numberToString(d.contribution) + \";\" + \r\n              this.numberToString(d.cp  * 100) + \";\" + \r\n              lineEnding;\r\n\r\n            totalContribution += d.contribution;\r\n            totalCosts += d.cost;\r\n            totalRevenue += d.revenue;\r\n            totalCP += d.cp;\r\n\r\n            monthSummary += monthEntry;\r\n          }\r\n\r\n          let monthTotalEntry = \r\n            this.numberToString(totalRevenue) + \";\" + \r\n            this.numberToString(totalCosts) + \";\" + \r\n            this.numberToString(totalContribution) + \";\" + \r\n            this.numberToString(totalCP) + \";\" + \r\n            lineEnding;\r\n\r\n          monthSummary += \"\\n\\n\" + \"Summary\\n\" + summaryHeader + monthTotalEntry + \"\\n\";\r\n          openRequests--;\r\n          summaryMap = summaryMap.set(month.id, monthSummary);\r\n\r\n          if (openRequests === 0) {\r\n            this.pageState.hideSpinner();\r\n            let keys = Array.from(summaryMap.keys()).sort();\r\n\r\n            for(var key of keys) {\r\n              monthSummaries.push(summaryMap.get(key));\r\n            }\r\n\r\n            const data = monthSummaries.join(\"\\n\\n\");\r\n            const blob: Blob = new Blob([data], { type: \"text/csv\" });\r\n            const filename: string = this.datePipe.transform(new Date(), \"yyyyMMdd\") + \"-Summary.csv\";    \r\n    \r\n            let navigator:any = window.navigator;\r\n            if (navigator.msSaveOrOpenBlob) {\r\n              navigator.msSaveOrOpenBlob(blob, filename);\r\n            } else {\r\n              const url: string = window.URL.createObjectURL(blob);\r\n        \r\n              let a: HTMLAnchorElement = document.createElement(\"a\");\r\n              a.href = url;\r\n              a.download = filename;\r\n        \r\n              document.body.appendChild(a);\r\n              a.click();\r\n              document.body.removeChild(a);\r\n              window.URL.revokeObjectURL(url);\r\n            }\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  numberToString(no: number, precision: number = 2): string {\r\n    return no.toLocaleString(\"de\",  { minimumFractionDigits: precision } ).replace(\".\",\"\");\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-stroked-button {\r\n\tmargin: 5px;\r\n\tmargin-left: 0;\r\n}\r\n\r\n.button-rows {\r\n\tdisplay: flex;\r\n\t.button-row {\r\n\t\twidth: 50%\r\n\t}\r\n}",
                    "styleUrl": "./subco-summary.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor for subco-summary component</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "subcoForecastService",
                        "type": "SubCoForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "subcoService",
                        "type": "SubCoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 93,
                "rawdescription": "\n\nconstructor for subco-summary component\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 3240,
                            "end": 3248,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "datePipe"
                        },
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3234,
                            "end": 3239,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 3262,
                            "end": 3268,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialog"
                        },
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3256,
                            "end": 3261,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 3282,
                            "end": 3298,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "utilitiesService"
                        },
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3276,
                            "end": 3281,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 3312,
                            "end": 3332,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "subcoForecastService"
                        },
                        "type": "SubCoForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3306,
                            "end": 3311,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 3380,
                            "end": 3391,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "userService"
                        },
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3374,
                            "end": 3379,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "subcoService",
                        "type": "SubCoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 3405,
                            "end": 3414,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "pageState"
                        },
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 3399,
                            "end": 3404,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<mat-card class=\"summary-box\">\r\n  <mat-card-title>\r\n    Summary {{month.name}}\r\n  </mat-card-title>\r\n\r\n  <mat-card-content>\r\n    <!-- <table mat-table [dataSource]=\"summaryProjects\">\r\n      <ng-container matColumnDef=\"name\">\r\n        <th mat-header-cell *matHeaderCellDef>Project name</th>\r\n        <td mat-cell *matCellDef=\"let project\">{{ project.title }}</td>\r\n        <td mat-footer-cell *matFooterCellDef>\r\n          Billable days<br>\r\n          Non-billable days<br>\r\n          <span class=\"total\">Total days</span><br>\r\n          <span class=\"note\">Expected days</span>\r\n        </td>\r\n      </ng-container>\r\n\r\n      <ng-container matColumnDef=\"days\">\r\n        <th mat-header-cell *matHeaderCellDef>Days</th>\r\n        <td mat-cell *matCellDef=\"let project\">{{ project.days | number: '1.0-2' :'de'}}</td>\r\n        <td mat-footer-cell *matFooterCellDef>\r\n          {{summaryData.billableDays | number: '1.0-2':'de'}}<br>\r\n          {{summaryData.nonbillableDays | number: '1.0-2':'de'}}<br>\r\n          <span class=\"total\">{{(summaryData.billableDays + summaryData.nonbillableDays) | number: '1.0-2':'de'}}</span><br>\r\n          <span class=\"note\">{{ summaryData.workingDays | number: '1.0-2':'de' }}</span>\r\n        </td>\r\n      </ng-container>\r\n      <tr mat-header-row *matHeaderRowDef=\"['name', 'days']\"></tr>\r\n      <tr mat-row *matRowDef=\"let row; columns: ['name', 'days']\"></tr>\r\n      <tr mat-footer-row *matFooterRowDef=\"['name', 'days']\"></tr>\r\n    </table> -->\r\n\r\n\t\t<div class=\"card-section\">\r\n      <mat-chip-list>\r\n        <mat-chip *ngIf=\"!isFinancialController()\"><mat-icon>timeline</mat-icon>Revenue {{summaryData.revenue  | number: '1.0-2': 'de'}}</mat-chip>\r\n        <mat-chip *ngIf=\"!isFinancialController()\"><mat-icon>timeline</mat-icon>Costs {{summaryData.cost  | number: '1.0-2': 'de'}}</mat-chip>\r\n        <mat-chip *ngIf=\"!isFinancialController()\"><mat-icon>trending_up</mat-icon>Contribution {{summaryData.contribution | number:'':'de' }}</mat-chip>\r\n        <mat-chip *ngIf=\"!isFinancialController()\"><mat-icon>trending_up</mat-icon> CP {{summaryData.cp | number:'':'de' }}%</mat-chip>\r\n        \r\n        <mat-chip *ngIf=\"isFinancialController()\"><mat-icon>timeline</mat-icon>Avg. FTE Internal {{subCoTotals.averageFTEInternal  | number: '1.0-2': 'de'}}</mat-chip>\r\n        <mat-chip *ngIf=\"isFinancialController()\"><mat-icon>timeline</mat-icon>Avg. FTE External {{subCoTotals.averageFTEExternal  | number: '1.0-2': 'de'}}</mat-chip>\r\n        <mat-chip *ngIf=\"isFinancialController()\"><mat-icon>timeline</mat-icon>Avg. FTE Offshore {{subCoTotals.averageFTEOffshore  | number: '1.0-2': 'de'}}</mat-chip>\r\n      </mat-chip-list>\r\n    </div>\r\n  \r\n \r\n    <div class=\"card-section\">\r\n    <!-- <div class=\"card-section button-rows\"> -->\r\n      <button mat-stroked-button class=\"mat-primary-reversed button-row\" *ngIf=\"role == 'practice' && hasPracticeLeadRole()\" (click)=\"submitAll()\">\r\n        <mat-icon>lock</mat-icon> Submit all forecasts\r\n      </button>\r\n      <!-- <button mat-stroked-button class=\"mat-primary-reversed button-row\" *ngIf=\"role == 'practice' && hasPracticeLeadRole()\" (click)=\"resetAll()\"> DEACTIVATED\r\n        <mat-icon>restore</mat-icon> Reset to initial values\r\n      </button> -->\r\n    </div>\r\n\r\n    <div class=\"card-section\">\r\n    <!-- <div class=\"card-section button-rows\"> -->\r\n      <button mat-stroked-button class=\"mat-primary-reversed button-row\" *ngIf=\"role == 'practice' && hasPracticeLeadRole()\" (click)=\"unlockAll()\">\r\n          <mat-icon>lock_open</mat-icon> Unlock all forecasts\r\n      </button>\r\n      <button mat-stroked-button class=\"mat-primary-reversed\" *ngIf=\"!isFinancialController()\" [ngClass]=\"{'button-row': role == 'practice' && hasPracticeLeadRole()}\" (click)=\"openCSVExportModal()\">\r\n        <mat-icon>insert_drive_file</mat-icon> CSV Export\r\n      </button>\r\n    </div>\r\n  </mat-card-content>\r\n</mat-card>\r\n"
        },
        {
            "name": "TeamComponent",
            "id": "component-TeamComponent-cf1818a083f1f4ed296ff7386a67646f",
            "file": "src/app/forecast/pages/team/team.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-team",
            "styleUrls": [
                "../../forecast.component.scss",
                "./team.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./team.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeMonth",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>index of currently selected tab (= month)</p>\n",
                    "line": 38,
                    "rawdescription": "\n\nindex of currently selected tab (= month)\n"
                },
                {
                    "name": "months",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "monthSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "step",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Number of the header in the child&#39;s expansion panel currently open</p>\n",
                    "line": 43,
                    "rawdescription": "\n\nNumber of the header in the child's expansion panel currently open\n"
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>id of currently logged-in user (received from auth-service)</p>\n",
                    "line": 33,
                    "rawdescription": "\n\nid of currently logged-in user (received from auth-service)\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "forecastState",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initTeamForecast",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnsubscribes services when component gets destroyed\n",
                    "description": "<p>Unsubscribes services when component gets destroyed</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInitializes teamlead component\n",
                    "description": "<p>Initializes teamlead component</p>\n"
                },
                {
                    "name": "setStep",
                    "args": [
                        {
                            "name": "event",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTabActive",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChanges active month, if change to an other tab.\n",
                    "description": "<p>Changes active month, if change to an other tab.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4762,
                                "end": 4767,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4756,
                                "end": 4761,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>team forecast-view component</p>\n",
            "rawdescription": "\n\nteam forecast-view component\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from \"@angular/core\";\r\nimport { Location } from '@angular/common';\r\nimport { ActivatedRoute } from \"@angular/router\";\r\n\r\nimport { UtilitiesService } from \"../../../core/services/utilities.service\";\r\nimport { Month } from \"../../../core/interfaces/month\";\r\nimport { UserService } from \"../../../core/services/user.service\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { PageStateService } from \"../../../core/shared/page-state.service\";\r\nimport { AuthService } from \"../../../core/security/auth.service\";\r\nimport { environment as env } from \"../../../../environments/environment.prod\";\r\nimport { TeamUserService } from '../../../core/services/forecasts/team-user.service';\r\nimport { MonthService } from \"../../../core/services/admin/months.service\";\r\nimport { LockedMonth } from \"../../../core/interfaces/lockedMonth\";\r\nimport { ForecastService } from \"../../../core/services/forecasts/forecast.service\";\r\nimport { ExecutiveForecastsService } from '../../../core/services/forecasts/executive-forecasts.service';\r\n\r\n/**\r\n * team forecast-view component\r\n */\r\n@Component({\r\n  selector: \"app-team\",\r\n  templateUrl: \"./team.component.html\",\r\n  styleUrls: [\"../../forecast.component.scss\", \"./team.component.scss\"]\r\n})\r\nexport class TeamComponent implements OnInit, OnDestroy {\r\n  months: Month[] = [];\r\n  monthSubscription: Subscription;\r\n\r\n  /**\r\n\t * id of currently logged-in user (received from auth-service)\r\n\t */\r\n\tuserId: number;\r\n\r\n  /**\r\n\t * index of currently selected tab (= month)\r\n\t */\r\n  activeMonth: number = 0;\r\n\r\n  /**\r\n   * Number of the header in the child's expansion panel currently open\r\n   */\r\n  step: number = -1;\r\n\r\n  /**\r\n\t * team forecast-view component constructor\r\n\t */\r\n  constructor(\r\n    private location: Location,\r\n\t\tprivate route: ActivatedRoute,\r\n    private utilitiesService: UtilitiesService,\r\n    private userService: UserService,\r\n    private pageState: PageStateService,\r\n    private authService: AuthService,\r\n    private teamService: TeamUserService,\r\n    private monthService: MonthService,\r\n    private forecastService: ForecastService,\r\n    private executiveService: ExecutiveForecastsService\r\n  ) {\r\n    this.userId = this.authService.getUserId();\r\n  }\r\n\r\n  /**\r\n   * Initializes teamlead component\r\n   */\r\n  ngOnInit(): void {\r\n\t\tthis.pageState.forecastrReady$.subscribe((ready: boolean) => {\r\n\t\t\tif (ready && this.authService.hasRole(env.roles.pdl)) {\r\n\t\t\t\tthis.initTeamForecast();\r\n\t\t\t}\r\n\t\t});\r\n  }\r\n\r\n  /**\r\n   * Unsubscribes services when component gets destroyed\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.monthSubscription.unsubscribe();\r\n  }\r\n\r\n  private initTeamForecast(): void {\r\n    this.teamService.initializePDLTeam();\r\n    this.monthSubscription = this.utilitiesService.months$\r\n      .subscribe((months: Month[]) => {\r\n        this.months = months.filter((m: Month) => m.active === true);\r\n        var today = new Date();\r\n        var todayMonth = new Date(today.getFullYear(), today.getMonth(), 1);\r\n\r\n        this.months = this.months.filter((m: Month) => new Date(m.time) >= todayMonth);\r\n\r\n\t\t\t\tif(this.months.length > 7) {\r\n\t\t\t\t\tthis.months = this.months.slice(1, 7);\r\n        }\r\n        \r\n        let id: number = parseInt(this.route.snapshot.paramMap.get('id'), 10);\r\n        if (typeof id !== 'undefined' && id >= 0 && id < this.months.length) {\r\n          this.activeMonth = id;\r\n  \r\n        } else {\r\n          for (let i: number = 0; i < this.months.length; i++) {\r\n            if (Date.parse(this.months[i].time) > (new Date()).setMonth((new Date().getMonth() - 1))) {\r\n              this.activeMonth = i;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        setTimeout(() => {\r\n\t\t\t\t\tlet shift: number = parseInt(window.getComputedStyle(document.querySelector('.mat-tab-label-container')).width) - parseInt(window.getComputedStyle(document.querySelector('.mat-tab-list')).width);\r\n\t\t\t\t\tlet pos: number = parseInt((document.querySelector('.mat-tab-label-active') as HTMLElement).getAttribute('aria-posinset'), 10);\r\n\t\t\t\t\tif (shift < ((pos ? pos : 1) - 1) * -100) {\r\n\t\t\t\t\t\tshift = ((pos ? pos : 1) - 1) * -100;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t(document.querySelector('.mat-tab-list') as HTMLElement).style.transform = 'translateX(' + shift + 'px)';\r\n\t\t\t\t}, 100);\r\n      });\r\n\r\n      this.monthService.getLockedMonths().subscribe(\r\n        (lockedMonths: LockedMonth[]) => {\r\n          let activeLockedMonths = lockedMonths.filter((m: LockedMonth) => this.months.find((x: Month) => x.id === m.id) !== undefined);\r\n          for(let i = 0; i < this.months.length; i++) {\r\n            this.months[i].locked = activeLockedMonths[i].locked;\r\n          }\r\n        }\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Changes active month, if change to an other tab.\r\n   * @param index\r\n   */\r\n  setTabActive(index: number): void {\r\n    this.activeMonth = index;\r\n    this.location.replaceState('/forecast/team/' + this.activeMonth);\r\n  }\r\n\r\n  forecastState(type: string, monthId: number): boolean {\r\n\t\treturn this.forecastService.checkForecastState(type, monthId, this.userId);\r\n\t}\r\n\r\n  //Reflect a step change from teamlead-month into parent\r\n  setStep(event : number){\r\n    this.step = event;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../assets/styles/variables.scss\";\r\n\r\n.role-header {\r\n  position: relative;\r\n  height: 37px;\r\n  margin: 20px 0px 30px 0px;\r\n\r\n  h1 {\r\n    line-height: 37px;\r\n    font-size: 1.8em;\r\n    margin: 0;\r\n  }\r\n\r\n  .mat-button-toggle-group {\r\n    background-color: map-get($font-colors, white);\r\n    font-size: 1.1em;\r\n    border-radius: 4px;\r\n  }\r\n\r\n  .mat-button-toggle {\r\n    background-color: map-get($font-colors, white);\r\n    color: map-get($font-colors, blue);\r\n    border-right: 1px solid #0070ad;\r\n    width: 120px;\r\n\r\n    .mat-icon {\r\n      color: map-get($font-colors, blue);\r\n    }\r\n\r\n    &:hover {\r\n      background-color: map-get($bg-colors, light);\r\n    }\r\n\r\n    &:last-child {\r\n      border: none;\r\n    }\r\n  }\r\n\r\n  .mat-button-toggle-checked,\r\n  .mat-button-toggle-checked .mat-icon {\r\n    background-color: map-get($font-colors, blue);\r\n    color: map-get($font-colors, white);\r\n\r\n    &:hover {\r\n      background-color: map-get($font-colors, blue);\r\n    }\r\n  }\r\n\r\n  .switch-role-toggle {\r\n    position: absolute;\r\n    right: 0px;\r\n    top: 0;\r\n    height: 34px;\r\n    line-height: 34px;\r\n    border-radius: 0;\r\n  }\r\n\r\n  .dashboard-button {\r\n    position: absolute  ;\r\n    width: 180px;\r\n    top: 0;\r\n    height: 34px;\r\n    line-height: 34px;\r\n    border-radius: 20px;\r\n    background-color: map-get($font-colors, blue);\r\n    color: map-get($font-colors, white);\r\n    box-shadow: 0px 1px 5px grey;\r\n\r\n    .mat-icon {\r\n      color: map-get($font-colors, white);\r\n    }\r\n  }\r\n\r\n  .ms-dashboard-button {\r\n    width: 180px;\r\n    top: 0;\r\n    height: 34px;\r\n    line-height: 34px;\r\n    border-radius: 20px;\r\n    background-color: map-get($font-colors, blue);\r\n    color: map-get($font-colors, white);\r\n    box-shadow: 0px 1px 5px grey;\r\n\r\n    .mat-icon {\r\n      color: map-get($font-colors, white);\r\n    }\r\n  }\r\n\r\n  .practice-dashboard {\r\n    right: 375px;\r\n  }\r\n\r\n  .pdl-dashboard {\r\n    right: 250px;\r\n  }\r\n\r\n  .power-bi-practice-dashboard {\r\n    right: 575px;\r\n  }\r\n\r\n  .practice-em-dashboard {\r\n    right: 500px;\r\n  }\r\n\r\n  .pdl-em-dashboard {\r\n    right: 375px;\r\n  }\r\n  .subco-totals-dashboard {\r\n    width: 220px;\r\n    height: 36px;\r\n    line-height: 36px;\r\n  }\r\n  .subco-totals-ms-dashboard {\r\n    left: 15px;\r\n  }\r\n  .power-bi-pdl-dashboard {\r\n    right: 450px;\r\n  }\r\n\r\n  .power-bi-ms-dashboard {\r\n    left: 30px;\r\n  }\r\n  .power-bi-mscss-dashboard {\r\n    left: 15px;\r\n  }\r\n\r\n  .sm-hop-button-toggle-group {\r\n    right: 0px;\r\n  }\r\n\r\n  .sm-hop-button-toggle {\r\n    width: 140px;\r\n  }\r\n}\r\n\r\n.progress-spinner-overlay {\r\n  display:  none;\r\n  position: fixed;\r\n  bottom: 0;\r\n  right: 0;\r\n  z-index: 10000;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: map-get($font-colors, white);\r\n  opacity: 0.5;\r\n\r\n  \r\n  &.active {\r\n\t\tdisplay: block;\r\n\t}\r\n\r\n  &.hide {\r\n\t\tdisplay: none;\r\n\t}\r\n}\r\n.progress-spinner {\r\n\ttop: 50%;\r\n\tleft: 50%;\r\n  z-index: 11000;\r\n\ttransform: translate(-50%, -50%);\r\n}\r\n\r\n.mat-sidenav-container {\r\n  min-width: 700px;\r\n  background: transparent;\r\n  margin: 0 10px;\r\n}\r\n\r\n.mat-drawer {\r\n  display: none;\r\n  background: transparent;\r\n  width: 50px;\r\n  border-right-width: 0px;\r\n}\r\n\r\n.nav-button-container {\r\n  margin: 4px 0;\r\n\r\n  .mat-icon-button {\r\n    width: 50px;\r\n    height: 50px;\r\n    margin-bottom: 10px;\r\n    padding: 0;\r\n\r\n    &.active,\r\n    &.active .mat-icon {\r\n      color: map-get($font-colors, blue);\r\n    }\r\n  }\r\n\r\n  .mat-icon {\r\n    width: 1em;\r\n    height: 1em;\r\n    line-height: 1em;\r\n    font-size: 2em;\r\n  }\r\n}\r\n",
                    "styleUrl": "../../forecast.component.scss"
                },
                {
                    "data": "",
                    "styleUrl": "./team.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>team forecast-view component constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "teamService",
                        "type": "TeamUserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "monthService",
                        "type": "MonthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "rawdescription": "\n\nteam forecast-view component constructor\n",
                "jsdoctags": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "teamService",
                        "type": "TeamUserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "monthService",
                        "type": "MonthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<mat-tab-group [selectedIndex]=\"activeMonth\" (selectedIndexChange)=\"setTabActive($event)\">\r\n  <mat-tab *ngFor=\"let month of months\" label=\"{{month.name}}\" id=\"{{month.id}}\">\r\n    <ng-template mat-tab-label>\r\n\t\t\t<mat-icon *ngIf=\"forecastState('edited', month.id)\" class=\"icon-edited\">radio_button_checked</mat-icon>\r\n      <mat-icon *ngIf=\"month.locked || forecastState('locked', month.id)\" class=\"icon-locked\">lock</mat-icon>\r\n\t\t\t{{month.name}}\r\n\t\t</ng-template>\r\n    <ng-template matTabContent> <!-- matTabContent for tab lazy loading -->\r\n      <app-teamlead-month [month]=\"month\" [step]=\"step\" (setStepEvent)=setStep($event)></app-teamlead-month>\r\n    </ng-template>\r\n  </mat-tab>\r\n</mat-tab-group>"
        },
        {
            "name": "TeamleadMonthComponent",
            "id": "component-TeamleadMonthComponent-8b738a9d67e136636e77e88471d79f5c",
            "file": "src/app/forecast/components/teamlead-month/teamlead-month.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-teamlead-month",
            "styleUrls": [
                "./teamlead-month.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./teamlead-month.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "month",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "month (received as input)",
                    "description": "<p>month (received as input)</p>\n",
                    "line": 31,
                    "type": "Month"
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string"
                },
                {
                    "name": "step",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "step-input-variable for angular material expansion panel",
                    "description": "<p>step-input-variable for angular material expansion panel</p>\n",
                    "line": 36,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "setStepEvent",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\noutput event to inform parent about step change\n",
                    "description": "<p>output event to inform parent about step change</p>\n",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "fcEntries",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FcEntry[]",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "fcSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "firstTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "isStepping",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "scrollToIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>scroll-variable for scrolling into in AfterViewChecked</p>\n",
                    "line": 54,
                    "rawdescription": "\n\nscroll-variable for scrolling into in AfterViewChecked\n"
                },
                {
                    "name": "showCopyDialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "team",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User[]",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "teamFcSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "teamSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>userId (loaded from auth-service)</p>\n",
                    "line": 46,
                    "rawdescription": "\n\nuserId (loaded from auth-service)\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ExpPanelClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 353,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalled when an expansion panel is closed\n",
                    "description": "<p>Called when an expansion panel is closed</p>\n",
                    "jsdoctags": []
                },
                {
                    "name": "forecastState",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean | string",
                    "typeParameters": [],
                    "line": 310,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturn value for given type (used for arve + urve + revenue + workingdays)\n",
                    "description": "<p>Return value for given type (used for arve + urve + revenue + workingdays)</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7111,
                                "end": 7115,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "originalKeywordKind": 149,
                                "escapedText": "type"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7105,
                                "end": 7110,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 7129,
                                "end": 7135,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "userId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7123,
                                "end": 7128,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "nextStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 365,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGo to next accordion\n",
                    "description": "<p>Go to next accordion</p>\n"
                },
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n Called after the ngAfterViewInit() and every subsequent ngAfterContentChecked()\n If something in the component is clicked etc. this is called\n",
                    "description": "<p> Called after the ngAfterViewInit() and every subsequent ngAfterContentChecked()\n If something in the component is clicked etc. this is called</p>\n"
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnsubscribe services when component gets destroyed\n",
                    "description": "<p>Unsubscribe services when component gets destroyed</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInitiates forecast-entries + team\n",
                    "description": "<p>Initiates forecast-entries + team</p>\n"
                },
                {
                    "name": "onMousewheel",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 201,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nScroll with mousewheel\n",
                    "description": "<p>Scroll with mousewheel</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mousewheel', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6890,
                                "end": 6895,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "event"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6884,
                                "end": 6889,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "onScroll",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nScroll of the wrapper for this component\n",
                    "description": "<p>Scroll of the wrapper for this component</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6769,
                                "end": 6774,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "event"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6763,
                                "end": 6768,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "prevStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 373,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGo to previous accordion\n",
                    "description": "<p>Go to previous accordion</p>\n"
                },
                {
                    "name": "setStep",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 343,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet index for accordion\n",
                    "description": "<p>Set index for accordion</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 12619,
                                "end": 12624,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 12613,
                                "end": 12618,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "subscribeTeam",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "subscribeTeamForecasts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "working",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 318,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "mousewheel",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nScroll with mousewheel\n",
                    "description": "<p>Scroll with mousewheel</p>\n",
                    "jsdoctags": [
                        {
                            "pos": 6883,
                            "end": 6901,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 6884,
                                "end": 6889,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "name": {
                                "pos": 6890,
                                "end": 6895,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "event"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ],
                    "line": 201
                }
            ],
            "description": "<p>teamlead view component</p>\n",
            "rawdescription": "\n\nteamlead view component\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, OnDestroy, Output,EventEmitter, HostListener } from \"@angular/core\";\r\nimport { FcEntry } from \"../../../core/interfaces/fcEntry\";\r\nimport { UserService } from \"../../../core/services/user.service\";\r\nimport { User } from \"../../../core/interfaces/user\";\r\nimport { ForecastService } from \"../../../core/services/forecasts/forecast.service\";\r\nimport { Month } from \"../../../core/interfaces/month\";\r\nimport { AuthService } from \"../../../core/security/auth.service\";\r\nimport { FcProject } from \"../../../core/interfaces/fcProject\";\r\nimport { TeamForecastService } from \"../../../core/services/forecasts/team-forecasts.service\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { TeamUserService } from \"../../../core/services/forecasts/team-user.service\";\r\nimport { UtilitiesService } from \"../../../core/services/utilities.service\";\r\nimport { Project } from \"../../../core/interfaces/project\";\r\nimport { environment as env } from '../../../../environments/environment';\r\nimport { formatDate } from '@angular/common';\r\nimport { ConfirmMessageDialog } from \"../../dialogs/confirm-message/confirm-message.dialog\";\r\nimport { MatDialog, MatDialogRef } from \"@angular/material/dialog\";\r\n\r\n/**\r\n * teamlead view component\r\n */\r\n@Component({\r\n  selector: \"app-teamlead-month\",\r\n  templateUrl: \"./teamlead-month.component.html\",\r\n  styleUrls: [\"./teamlead-month.component.scss\"]\r\n})\r\nexport class TeamleadMonthComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * month (received as input)\r\n   */\r\n  @Input('month') month: Month;\r\n  @Input('role') role: string;\r\n    /**\r\n   * step-input-variable for angular material expansion panel\r\n   */\r\n  @Input('step') step: number;\r\n\r\n  /**\r\n   * output event to inform parent about step change\r\n   */\r\n  @Output() setStepEvent = new EventEmitter<number>();\r\n\r\n  /**\r\n   * userId (loaded from auth-service)\r\n   */\r\n  userId: number;\r\n\r\n  fcEntries: FcEntry[] = [];\r\n  team: User[] = [];\r\n  \r\n  /**\r\n   * scroll-variable for scrolling into in AfterViewChecked\r\n   */\r\n  scrollToIndex : number;\r\n\r\n  fcSubscription: Subscription;\r\n  teamSubscription: Subscription;\r\n  teamFcSubscription: Subscription;\r\n  firstTime: boolean;\r\n  isStepping: boolean;\r\n  showCopyDialog: boolean;  //Dialog could be shown for every suggested data. This prevents this and only opens the dialog one time when the component is opened.\r\n\r\n  /**\r\n   * teamlead component constructor\r\n   */\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private userService: UserService,\r\n    private teamService: TeamUserService,\r\n    private authService: AuthService,\r\n    private utilitiesService: UtilitiesService,\r\n    private forecastService: ForecastService,\r\n    private teamForecastService: TeamForecastService,\r\n  ) {\r\n    this.userId = this.authService.getUserId();\r\n    this.showCopyDialog = true;\r\n  }\r\n\r\n  /**\r\n   * Initiates forecast-entries + team\r\n   */\r\n  ngOnInit(): void {\r\n    this.firstTime = true;\r\n    this.isStepping = false;\r\n    this.fcSubscription = this.forecastService.forecasts$\r\n    .subscribe((forecasts: FcEntry[]) => {\r\n      this.fcEntries = forecasts.filter((fc: FcEntry) => fc.monthId === this.month.id);\r\n    });\r\n    this.subscribeTeam();\r\n    this.subscribeTeamForecasts();\r\n  }\r\n\r\n  subscribeTeam(): void {\r\n    if (this.role === 'practice') {\r\n      this.teamSubscription = this.teamService.teamPL$\r\n        .subscribe((team: User[]) => {\r\n          for (let i = 0; i < team.length; i++) {\r\n            for (let i = 0; i < team.length; i++) {\r\n              if(this.userId === team[i].id) {\r\n                let tempUser: User = team[0];\r\n                team[0] = team[i];\r\n                team.splice(i, 1);\r\n                team.splice(1, 0, tempUser);\r\n              }\r\n            }\r\n          }\r\n          this.team = team;\r\n        });\r\n    } else {\r\n      this.teamSubscription = this.teamService.teamPDL$\r\n        .subscribe((team: User[]) => {\r\n          for (let i = 0; i < team.length; i++) {\r\n            if(this.userId === team[i].id) {\r\n              let tempUser: User = team[0];\r\n              team[0] = team[i];\r\n              team.splice(i, 1);\r\n              team.splice(1, 0, tempUser);\r\n            }\r\n          }\r\n          this.team = team;\r\n        });\r\n    }\r\n  }\r\n\r\n  subscribeTeamForecasts(): void {\r\n    let level: number = 1;\r\n    if (this.role === 'practice') {\r\n      level = 2;\r\n    }\r\n    this.teamFcSubscription = this.teamForecastService\r\n      .getTeamForecast(this.userId, this.month.id, level)\r\n      .subscribe((fcEntries: any[]) => {\r\n        \r\n        this.forecastService.addForecasts(fcEntries, false, this.month.id);\r\n        fcEntries.forEach(entry =>{\r\n          if((entry.suggestedData) &&\r\n          (entry.suggestedData.projects.length > 0 || entry.suggestedData.fte !== entry.fte || entry.suggestedData.gradeId !== entry.gradeId )){\r\n          //showDialog only one time \r\n          if(this.showCopyDialog && this.teamForecastService.getShowDialogForMonth(this.month.id)){\r\n            let dialogRef: MatDialogRef<ConfirmMessageDialog> = this.dialog.open(ConfirmMessageDialog, {\r\n              data: {\r\n                message: 'Copy data from last month submitted for all user?',\r\n                button: { cancel: 'No', submit: 'Yes' },\r\n              },\r\n            });\r\n            dialogRef.afterClosed().subscribe((add: boolean) => {\r\n              if (add === true) {\r\n                //dialog is shown only one time, so add all forecasts\r\n                fcEntries.forEach(entry =>{\r\n                  if(entry.suggestedData){\r\n                    this.forecastService.addProjectsToForecast(entry.userId, this.month.id, entry.suggestedData);\r\n                  }\r\n                });\r\n                this.teamForecastService.setShowDialogForMonth(this.month.id, false);\r\n              }\r\n            });\r\n            this.showCopyDialog = false;\r\n          }\r\n        }\r\n      })\r\n    });\r\n  }\r\n\r\n  /**\r\n   *  Called after the ngAfterViewInit() and every subsequent ngAfterContentChecked()\r\n   *  If something in the component is clicked etc. this is called\r\n   */\r\n  ngAfterViewChecked() :void{\r\n    //Check if the component already scrollled successfully\r\n    if(this.scrollToIndex !== -1){\r\n      let index = this.scrollToIndex == 0 ? 0 : this.scrollToIndex -1; \r\n      let element = document.getElementById(\"panel-\"+ index);\r\n      if(element){\r\n          element.scrollIntoView({block: \"start\", behavior: \"smooth\"});\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe services when component gets destroyed\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.fcSubscription.unsubscribe();\r\n    this.teamSubscription.unsubscribe();\r\n    this.teamFcSubscription.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * Scroll of the wrapper for this component\r\n   * @param event \r\n   */\r\n  onScroll(event) {\r\n    this.scrollToIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Scroll with mousewheel\r\n   * @param event \r\n   */\r\n  @HostListener('mousewheel', ['$event']) \r\n  onMousewheel(event) {\r\n    this.scrollToIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Return value for given type (used for arve + urve + revenue + workingdays)\r\n   * @param type\r\n   * @param userId\r\n   */\r\n  getValue(type: string, userId: number): any {\r\n    let fc: FcEntry = this.fcEntries.find((e: FcEntry) => e.userId === userId);\r\n    if (!fc) {\r\n      if (type === 'totaldays') {\r\n        let u: User = this.userService.getUser(userId);\r\n        if (u && u.fte) {\r\n          return u.fte * parseInt(this.month.workingdays, 10);\r\n        } else {\r\n          return parseInt(this.month.workingdays, 10);\r\n        }\r\n      }\r\n      return 0;\r\n    }\r\n\r\n    if (type === 'arve' && typeof fc.arve === 'number') {\r\n      return parseFloat((fc.arve * 100).toFixed(0));\r\n\r\n    } else if (type === 'urve' && typeof fc.urve === 'number') {\r\n      return parseFloat((fc.urve * 100).toFixed(0));\r\n\r\n    } else if (type === 'totaldays') {\r\n      if (typeof fc.fte !== 'undefined') {\r\n        return parseInt(this.month.workingdays, 10) * fc.fte;\r\n      } else {\r\n        return parseInt(this.month.workingdays, 10);\r\n      }\r\n\r\n    } else if (fc.projects && fc.projects.length > 0) {\r\n      if (type === 'billabledays') {\r\n        return fc.projects\r\n          .map((p: FcProject) => ((p.plannedProjectDays && p.billable) ? p.plannedProjectDays : 0))\r\n          .reduce((pSum: number, a: number) => pSum + a);\r\n\r\n      } else if (type === 'projectdays') {\r\n        let projectIds: number[] = this.utilitiesService.getProjects()\r\n          .filter((p: Project) => (p.projectType === env.projectTypes.default || p.projectType === env.projectTypes.nonbillable))\r\n          .map((p: Project) => p.id);\r\n\r\n        return fc.projects\r\n          .map((p: FcProject) => (p.plannedProjectDays && (projectIds.indexOf(p.projectId) >= 0) ? p.plannedProjectDays : 0))\r\n          .reduce((pSum: number, a: number) => pSum + a);\r\n\r\n      } else if (type === 'vacationdays') {\r\n        let projectIds: number[] = this.utilitiesService.getProjects()\r\n          .filter((p: Project) => (p.projectType === env.projectTypes.vacationdays))\r\n          .map((p: Project) => p.id);\r\n\r\n        return fc.projects\r\n          .map((p: FcProject) => (p.plannedProjectDays && (projectIds.indexOf(p.projectId) >= 0) ? p.plannedProjectDays : 0))\r\n          .reduce((pSum: number, a: number) => pSum + a);\r\n\r\n      } else if (type === 'benchdays') {\r\n        let projectIds: number[] = this.utilitiesService.getProjects()\r\n          .filter((p: Project) => (p.projectType === env.projectTypes.benchdays))\r\n          .map((p: Project) => p.id);\r\n\r\n        return fc.projects\r\n          .map((p: FcProject) => (p.plannedProjectDays && (projectIds.indexOf(p.projectId) >= 0) ? p.plannedProjectDays : 0))\r\n          .reduce((pSum: number, a: number) => pSum + a);\r\n\r\n      } else if (type === 'trainingdays') {\r\n        let projectIds: number[] = this.utilitiesService.getProjects()\r\n          .filter((p: Project) => (p.projectType === env.projectTypes.trainingdays))\r\n          .map((p: Project) => p.id);\r\n\r\n        return fc.projects\r\n          .map((p: FcProject) => (p.plannedProjectDays && (projectIds.indexOf(p.projectId) >= 0) ? p.plannedProjectDays : 0))\r\n          .reduce((pSum: number, a: number) => pSum + a);\r\n\r\n      } else if (type === 'businessdays') {\r\n        let projectIds: number[] = this.utilitiesService.getProjects()\r\n          .filter((p: Project) => (p.projectType === env.projectTypes.businessdays))\r\n          .map((p: Project) => p.id);\r\n\r\n        return fc.projects\r\n          .map((p: FcProject) => (p.plannedProjectDays && (projectIds.indexOf(p.projectId) >= 0) ? p.plannedProjectDays : 0))\r\n          .reduce((pSum: number, a: number) => pSum + a);\r\n\r\n      } else if (type === 'workingdays') {\r\n        return fc.projects\r\n          .map((p: FcProject) => (p.plannedProjectDays ? p.plannedProjectDays : 0))\r\n          .reduce((pSum: number, a: number) => pSum + a);\r\n\r\n      } else if (type === 'revenue') {\r\n        return fc.projects\r\n          .map((p: FcProject) => ((p.plannedProjectDays ? p.plannedProjectDays : 0) * (p.cor ? p.cor : 0)))\r\n          .reduce((pSum: number, a: number) => pSum + a);\r\n\r\n      }\r\n      else if (type === 'history') {\r\n        if (fc.history && fc.history.length > 0 && fc.history[0].createdAt) {\r\n          let date: string = formatDate(fc.history[0].createdAt, 'dd.MM.yyyy', 'en');\r\n          return  'Last updated from ' + fc.changedBy + ', ' + date;\r\n        }\r\n      }\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  forecastState(type: string, userId: number): boolean | string {\r\n    if (type === 'locklevel') {\r\n      return this.userService.getRoleName(this.forecastService.getForecastLockLevel(this.month.id, userId));\r\n    } else {\r\n      return this.forecastService.checkForecastState(type, this.month.id, userId);\r\n    }\r\n  }\r\n\r\n  working(user: User, month: Month): boolean {\r\n    if(user.endDate && user.startDate && month.time) {\r\n      var endMonth = new Date(user.endDate);\r\n      endMonth = new Date(endMonth.getFullYear(), endMonth.getMonth(), 1);\r\n      var startMonth = new Date(user.startDate);\r\n      startMonth = new Date(startMonth.getFullYear(), endMonth.getMonth(), 1);\r\n      var monthMonth = new Date(month.time);\r\n      monthMonth = new Date(monthMonth.getFullYear(), monthMonth.getMonth(), 1)\r\n      if(startMonth <= endMonth) {\r\n        if(monthMonth > endMonth) {\r\n          return false;\r\n        }\r\n      } else if(startMonth > endMonth) {\r\n        if(monthMonth <= startMonth && monthMonth >= endMonth) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Set index for accordion\r\n   * @param index\r\n   */\r\n  setStep(index: number): void {\r\n    this.scrollToIndex = index;\r\n    this.step = index;\r\n    this.setStepEvent.emit(index);\r\n  }\r\n\r\n  /**\r\n   * Called when an expansion panel is closed\r\n   * @param event \r\n   */\r\n  ExpPanelClicked(){\r\n    if(!this.isStepping){\r\n      this.scrollToIndex = -1;\r\n      this.setStepEvent.emit(-1);\r\n    }\r\n    this.isStepping = false;\r\n  }\r\n  \r\n\r\n  /**\r\n   * Go to next accordion\r\n   */\r\n  nextStep(): void {\r\n    this.isStepping = true;\r\n    this.step++;\r\n  }\r\n\r\n  /**\r\n   * Go to previous accordion\r\n   */\r\n  prevStep(): void {\r\n    this.isStepping = true;\r\n    this.step--;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../assets/styles/variables.scss';\r\n\r\n.accordion-header {\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  padding: 15px 24px;\r\n  color: map-get($font-colors, grey-dark);\r\n  margin-right: 8px;\r\n\r\n  div {\r\n    display: flex;\r\n    flex-grow: 1;\r\n    width: 0;\r\n    margin-right: 16px;\r\n\r\n    &:last-child {\r\n      flex-grow: 4;\r\n      text-align: center;\r\n    }\r\n\r\n    span {\r\n      flex: 1;\r\n      word-break: break-word;\r\n      align-self: center;\r\n    }\r\n  }\r\n}\r\n\r\n.mat-accordion .mat-expansion-panel {\r\n  border-radius: 0;\r\n\r\n  .mat-expansion-panel-header-description, .mat-expansion-panel-header-title {\r\n    font-size: 1.1rem;\r\n    line-height: 1.2rem;\r\n    width: 0;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n\r\n    .mat-cell {\r\n      font-size: 1.1rem;\r\n    }\r\n  }\r\n  \r\n  .mat-expansion-panel-header-description {\r\n    text-align: center; \r\n    flex-grow: 4;\r\n  }\r\n\r\n  .mat-cell, .mat-header-cell {\r\n    flex: 1;\r\n    color: map-get($font-colors, grey-dark);\r\n  }\r\n}\r\n\r\n.mat-icon {\r\n\tfont-size: 20px;\r\n\tline-height: 20px;\r\n\r\n\t&:hover {\r\n\t\tcolor: map-get($font-colors, grey-light);\r\n\t}\r\n\r\n\t&.icon-edited, &.icon-edited:hover {\r\n\t\tcolor: map-get($font-colors, red);\r\n\t}\r\n}\r\n\r\n.locked-leveldesc {\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.mat-expansion-panel.mat-expanded {\r\n  order: -1;\r\n}",
                    "styleUrl": "./teamlead-month.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>teamlead component constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "teamService",
                        "type": "TeamUserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "teamForecastService",
                        "type": "TeamForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 61,
                "rawdescription": "\n\nteamlead component constructor\n",
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "teamService",
                        "type": "TeamUserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "teamForecastService",
                        "type": "TeamForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div style=\"height: 72vh; overflow: auto;\"  (scroll)=\"onScroll($event)\">\r\n  <div class=\"no-data\" *ngIf=\"team.length == 0\">\r\n    <h3>No user assigned.</h3>\r\n  </div>\r\n\r\n  <div layout=\"row\" layout-wrap *ngIf=\"team.length > 0\">\r\n    <div flex=\"100\" flex-gt-md=\"75\">\r\n      <div class=\"mat-row accordion-header\">\r\n        <div>Name</div>\r\n        <div>\r\n          <span></span>\r\n          <span>Paid Days</span>\r\n          <span>Project Days</span>\r\n          <span>Billable Days</span>\r\n          <span>Vacation Days</span>\r\n          <span>Bench Time</span>\r\n          <span>Training Days</span>\r\n          <span>Business Development Days</span>\r\n          <span>ARVE</span>\r\n          <span>URVE</span>\r\n          <span>ROS</span>\r\n        </div>\r\n      </div>\r\n\r\n      <mat-accordion displayMode=\"flat\" multi >\r\n        <!--order of events closed and opened is important-->\r\n        <mat-expansion-panel *ngFor=\"let u of team; let i = index\" id=\"{{'panel-' + i}}\" [expanded]=\"step === i\" (closed)=\"ExpPanelClicked()\" (opened)=\"setStep(i)\" >\r\n          <mat-expansion-panel-header *ngIf='working(u, month)'>\r\n            <mat-panel-title>\r\n              {{u.lastName}}, {{u.firstName}}\r\n            </mat-panel-title>\r\n            <mat-panel-description class=\"mat-row\">\r\n                <span class=\"mat-cell\">\r\n                  <mat-icon *ngIf=\"forecastState('locked', u.id)\" class=\"icon-locked\"\r\n                  matTooltip=\"{{getValue('history', u.id)}}\" matTooltipPosition=\"above\" matTooltipDisabled=\"{{!getValue('history', u.id)}}\">\r\n                  lock</mat-icon>\r\n                  <ng-container *ngIf=\"forecastState('locked-sub', u.id)\">\r\n                    <mat-icon class=\"icon-locked-sublevel\"\r\n                    matTooltip=\"{{getValue('history', u.id)}}\" matTooltipPosition=\"above\" matTooltipDisabled=\"{{!getValue('history', u.id)}}\">\r\n                      lock_open</mat-icon>\r\n                    <div class=\"locked-leveldesc\">{{forecastState('locklevel', u.id)}}</div>\r\n                  </ng-container>\r\n                  <mat-icon *ngIf=\"forecastState('saved', u.id)\" \r\n                  matTooltip=\"{{getValue('history', u.id)}}\" matTooltipPosition=\"above\" matTooltipDisabled=\"{{!getValue('history', u.id)}}\">\r\n                  save</mat-icon>\r\n                  <mat-icon *ngIf=\"forecastState('edited', u.id)\" class=\"icon-edited\">radio_button_checked</mat-icon>\r\n                </span>\r\n                <span class=\"mat-cell\">{{getValue('totaldays', u.id) | number: '1.0-2': 'de'}}</span>\r\n                <span class=\"mat-cell\">{{getValue('projectdays', u.id) | number: '1.0-2': 'de'}}</span>\r\n                <span class=\"mat-cell\">{{getValue('billabledays', u.id) | number: '1.0-2': 'de'}}</span>\r\n                <span class=\"mat-cell\">{{getValue('vacationdays', u.id) | number: '1.0-2': 'de'}}</span>\r\n\r\n                <span class=\"mat-cell\">{{getValue('benchdays', u.id) | number: '1.0-2': 'de'}}</span>\r\n                <span class=\"mat-cell\">{{getValue('trainingdays', u.id) | number: '1.0-2': 'de'}}</span>\r\n                <span class=\"mat-cell\">{{getValue('businessdays', u.id) | number: '1.0-2': 'de'}}</span>\r\n                \r\n                <span class=\"mat-cell\">{{getValue('arve', u.id) | number: '1.0-2': 'de'}}%</span>\r\n                <span class=\"mat-cell\">{{getValue('urve', u.id) | number: '1.0-2': 'de'}}%</span>\r\n                <span class=\"mat-cell\">&euro; {{getValue('revenue',u.id) | number:'1.0-2':'de' }}</span>\r\n            </mat-panel-description>\r\n          </mat-expansion-panel-header>\r\n        \r\n          <ng-template matExpansionPanelContent>\r\n            <app-fc-entry class=\"tab-container\" [userId]=\"u.id\" [singleView]=\"false\" [month]=\"month\"></app-fc-entry>\r\n          </ng-template>\r\n          \r\n          <mat-action-row>\r\n            <button mat-button color=\"warn\" (click)=\"prevStep()\" *ngIf=\"i > 0\">Previous</button>\r\n            <button mat-button color=\"primary\" (click)=\"nextStep()\" *ngIf=\"i < (team.length-1)\">Next</button>\r\n          </mat-action-row>\r\n        </mat-expansion-panel>\r\n      </mat-accordion>\r\n    </div>\r\n\r\n    <div flex=\"100\" flex-gt-md=\"25\" class=\"summary-box-container\">\r\n      <app-teamlead-summary [role]=\"role\" [month]=\"month\"></app-teamlead-summary>\r\n    </div>\r\n  </div>\r\n</div>"
        },
        {
            "name": "TeamleadSummaryComponent",
            "id": "component-TeamleadSummaryComponent-fce9568e721a10f801c3bb7a756f5223",
            "file": "src/app/forecast/components/teamlead-summary/teamlead-summary.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-teamlead-summary",
            "styleUrls": [
                "./teamlead-summary.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./teamlead-summary.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "month",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "month (received as input)",
                    "description": "<p>month (received as input)</p>\n",
                    "line": 40,
                    "type": "Month"
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fcEntries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FcEntry[]",
                    "optional": false,
                    "description": "<p>list of all forecast entries for teamlead + month</p>\n",
                    "line": 46,
                    "rawdescription": "\n\nlist of all forecast entries for teamlead + month\n"
                },
                {
                    "name": "fcSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>forecast subscription</p>\n",
                    "line": 76,
                    "rawdescription": "\n\nforecast subscription\n"
                },
                {
                    "name": "months",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "<p>months list</p>\n",
                    "line": 56,
                    "rawdescription": "\n\nmonths list\n"
                },
                {
                    "name": "projects",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Project[]",
                    "optional": false,
                    "description": "<p>project list</p>\n",
                    "line": 51,
                    "rawdescription": "\n\nproject list\n"
                },
                {
                    "name": "summaryData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SummaryData",
                    "optional": false,
                    "description": "<p>contains summary-data (calculated in teamlead-summary service)</p>\n",
                    "line": 66,
                    "rawdescription": "\n\ncontains summary-data (calculated in teamlead-summary service)\n"
                },
                {
                    "name": "summaryProjects",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTableDataSource<SummaryDataProject>",
                    "optional": false,
                    "description": "<p>provides summary-data projects in &#39;MatTableDataSource&#39; format</p>\n",
                    "line": 71,
                    "rawdescription": "\n\nprovides summary-data projects in 'MatTableDataSource' format\n"
                },
                {
                    "name": "team",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User[]",
                    "optional": false,
                    "description": "<p>team member list</p>\n",
                    "line": 61,
                    "rawdescription": "\n\nteam member list\n"
                },
                {
                    "name": "teamSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>team subscription</p>\n",
                    "line": 81,
                    "rawdescription": "\n\nteam subscription\n"
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 83
                }
            ],
            "methodsClass": [
                {
                    "name": "allForecastsValid",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "exportPeriodForecastToCSV",
                    "args": [
                        {
                            "name": "csvExportMonths",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 303,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExport forecasts for team for the selected months\n",
                    "description": "<p>Export forecasts for team for the selected months</p>\n",
                    "jsdoctags": [
                        {
                            "name": "csvExportMonths",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasPracticeLeadRole",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 279,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns whether the logged in user has a practice lead role\n",
                    "description": "<p>Returns whether the logged in user has a practice lead role</p>\n"
                },
                {
                    "name": "isUserRelevantForMonth",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnsubscribe services when component gets destroyed\n",
                    "description": "<p>Unsubscribe services when component gets destroyed</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInit summaryDays\nSet Utilities\nCalc Total workingDays\nSubscribe forecast at ForecastService for updates\n",
                    "description": "<p>Init summaryDays\nSet Utilities\nCalc Total workingDays\nSubscribe forecast at ForecastService for updates</p>\n"
                },
                {
                    "name": "numberToString",
                    "args": [
                        {
                            "name": "no",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "precision",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 488,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "no",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "precision",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openCSVExportModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 286,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpen csv export modal to choose which data to export\n",
                    "description": "<p>Open csv export modal to choose which data to export</p>\n"
                },
                {
                    "name": "percentageValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturn for giving VALUE percentage value.\n",
                    "description": "<p>Return for giving VALUE percentage value.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5854,
                                "end": 5859,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "value"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5848,
                                "end": 5853,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setLockState",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "role",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "messageSuccess",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "messageFail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 254,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReset all forecasts to initial state DEACTIVATED\n",
                    "description": "<p>Reset all forecasts to initial state DEACTIVATED</p>\n",
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "role",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "messageSuccess",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "messageFail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "submitAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 199,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSubmit all forecasts at once\n",
                    "description": "<p>Submit all forecasts at once</p>\n"
                },
                {
                    "name": "unlockAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>teamlead summary component</p>\n",
            "rawdescription": "\n\nteamlead summary component\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, OnChanges, OnDestroy, Inject } from \"@angular/core\";\r\nimport { DatePipe } from '@angular/common';\r\nimport { MatDialog, MatDialogRef } from \"@angular/material/dialog\";\r\nimport { MatSnackBar } from \"@angular/material/snack-bar\";\r\nimport { MatTableDataSource } from \"@angular/material/table\";\r\n\r\nimport { UtilitiesService } from \"../../../core/services/utilities.service\";\r\nimport { ForecastService } from \"../../../core/services/forecasts/forecast.service\";\r\nimport { UserService } from \"../../../core/services/user.service\";\r\nimport { AuthService } from \"../../../core/security/auth.service\";\r\n\r\nimport { FcEntry } from \"../../../core/interfaces/fcEntry\";\r\nimport { Project } from \"../../../core/interfaces/project\";\r\nimport { Month } from \"../../../core/interfaces/month\";\r\nimport { User } from \"../../../core/interfaces/user\";\r\nimport { Grade } from \"../../../core/interfaces/grade\";\r\nimport { SummaryData, SummaryDataProject } from '../../../core/interfaces/summaryData';\r\n\r\nimport { TeamForecastService } from \"../../../core/services/forecasts/team-forecasts.service\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { PageStateService } from \"../../../core/shared/page-state.service\";\r\nimport { environment as env } from '../../../../environments/environment';\r\nimport { TeamUserService } from \"../../../core/services/forecasts/team-user.service\";\r\nimport { ExportCsvDialog } from \"../../dialogs/export-csv/export-csv.dialog\";\r\nimport { ConfirmMessageDialog } from \"../../dialogs/confirm-message/confirm-message.dialog\";\r\nimport { FcProject } from \"../../../core/interfaces/fcProject\";\r\n\r\n/**\r\n * teamlead summary component\r\n */\r\n@Component({\r\n  selector: \"app-teamlead-summary\",\r\n  templateUrl: \"./teamlead-summary.component.html\",\r\n  styleUrls: [\"./teamlead-summary.component.scss\"]\r\n})\r\nexport class TeamleadSummaryComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * month (received as input)\r\n   */\r\n  @Input('month') month: Month;\r\n  @Input('role') role: string;\r\n\r\n  /**\r\n   * list of all forecast entries for teamlead + month\r\n   */\r\n  fcEntries: FcEntry[];\r\n\r\n  /**\r\n   * project list\r\n   */\r\n  projects: Project[] = [];\r\n\r\n  /**\r\n   * months list\r\n   */\r\n  months: Month[] = [];\r\n  \r\n  /**\r\n   * team member list\r\n   */\r\n  team: User[] = [];\r\n\r\n  /**\r\n   * contains summary-data (calculated in teamlead-summary service)\r\n   */\r\n  summaryData: SummaryData;\r\n\r\n  /**\r\n   * provides summary-data projects in 'MatTableDataSource' format\r\n   */\r\n  summaryProjects: MatTableDataSource<SummaryDataProject>;\r\n\r\n  /**\r\n   * forecast subscription\r\n   */\r\n  fcSubscription: Subscription;\r\n\r\n  /**\r\n   * team subscription\r\n   */\r\n  teamSubscription: Subscription;\r\n\r\n  userId: number;\r\n\r\n  /**\r\n   * constructor for teamlead-summary component\r\n   * @param datePipe\r\n   * @param dialog\r\n   * @param utilitiesService\r\n   * @param forecastService\r\n   * @param teamForecastService\r\n   * @param userService\r\n   * @param pageState\r\n   */\r\n  constructor(\r\n    private datePipe: DatePipe,\r\n    private dialog: MatDialog,\r\n    private snackBar: MatSnackBar,\r\n    private utilitiesService: UtilitiesService,\r\n    private forecastService: ForecastService,\r\n    private teamForecastService: TeamForecastService,\r\n    private userService: UserService,\r\n    private teamService: TeamUserService,\r\n    private authService: AuthService,\r\n    private pageState: PageStateService,\r\n  ) {\r\n    this.fcEntries = [];\r\n    this.summaryProjects = new MatTableDataSource([]);\r\n    this.userId = this.authService.getUserId();\r\n  }\r\n\r\n  /**\r\n   * Init summaryDays\r\n   * Set Utilities\r\n   * Calc Total workingDays\r\n   * Subscribe forecast at ForecastService for updates\r\n   */\r\n  ngOnInit(): void {\r\n    this.projects = this.utilitiesService.getProjects();\r\n    this.months = this.utilitiesService.getMonths();\r\n\r\n    if (this.role === 'practice') {\r\n      this.teamSubscription = this.teamService.teamPL$\r\n        .subscribe((team: User[]) => {\r\n          this.team = team;\r\n        });\r\n    } else {\r\n      this.teamSubscription = this.teamService.teamPDL$\r\n        .subscribe((team: User[]) => {\r\n          this.team = team;\r\n        });\r\n    }\r\n\r\n    this.fcSubscription = this.forecastService.forecasts$\r\n      .subscribe((forecasts: FcEntry[]) => {\r\n        let relevantUsers: User[] = this.team.filter((u: User) => this.isUserRelevantForMonth(u, this.month));\r\n        let userIds: number[] = relevantUsers.map((u: User) => u.id);\r\n        this.fcEntries = forecasts.filter((fc: FcEntry) => fc.monthId === this.month.id && userIds.indexOf(fc.userId) >= 0);\r\n        this.summaryData = this.teamForecastService.getSummaryData(this.fcEntries, parseInt(this.month.workingdays, 10), relevantUsers);\r\n        this.summaryProjects = new MatTableDataSource(this.summaryData.days);\r\n      });\r\n  }\r\n\r\n  isUserRelevantForMonth(user: User, month: Month) : boolean {\r\n    if(user.endDate && user.startDate && month.time) {\r\n      var endMonth = new Date(user.endDate);\r\n      endMonth = new Date(endMonth.getFullYear(), endMonth.getMonth(), 1);\r\n      var startMonth = new Date(user.startDate);\r\n      startMonth = new Date(startMonth.getFullYear(), endMonth.getMonth(), 1);\r\n      var monthMonth = new Date(month.time);\r\n      monthMonth = new Date(monthMonth.getFullYear(), monthMonth.getMonth(), 1)\r\n      if(startMonth <= endMonth) {\r\n        if(monthMonth > endMonth) {\r\n          return false;\r\n        }\r\n      } else if(startMonth > endMonth) {\r\n        if(monthMonth <= startMonth && monthMonth >= endMonth) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe services when component gets destroyed\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.fcSubscription.unsubscribe();\r\n    this.teamSubscription.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * Return for giving VALUE percentage value.\r\n   * @param value\r\n   */\r\n  percentageValue(value: number): number {\r\n    return parseFloat((value * 100).toFixed(0));\r\n  }\r\n\r\n  allForecastsValid(): boolean {\r\n    let disbaled = false;\r\n    this.fcEntries.forEach((e: FcEntry)=> {\r\n      e.projects.forEach((p: FcProject) =>{\r\n        if(p.probabilityId === null || e.updated){\r\n          disbaled = true;\r\n        }\r\n      })\r\n      if(e.fte === null || e.updated){\r\n        disbaled = true;\r\n      }\r\n    });\r\n    return disbaled;\r\n  }\r\n\r\n  /**\r\n   * Submit all forecasts at once\r\n   */\r\n  submitAll(): void {\r\n    let dialogRef: MatDialogRef<ConfirmMessageDialog> = this.dialog.open(ConfirmMessageDialog, {\r\n      data: {\r\n        message: 'Are you sure you want to submit all forecasts?',\r\n        button: { cancel: 'No', submit: 'Yes' },\r\n      },\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((submit: boolean) => {\r\n      if (submit === true) {\r\n        this.pageState.showSpinner();\r\n        this.setLockState(true, this.userId, 'All forecast entries are successfully submitted.', 'Forecast entries could not be submitted. Please try again later.');\r\n      }\r\n      \r\n    });\r\n  }\r\n\r\n  unlockAll(): void {\r\n    let dialogRef: MatDialogRef<ConfirmMessageDialog> = this.dialog.open(ConfirmMessageDialog, {\r\n      data: {\r\n        message: 'Are you sure you want to unlock all forecasts?',\r\n        button: { cancel: 'No', submit: 'Yes' },\r\n      },\r\n    });\r\n    dialogRef.afterClosed().subscribe((submit: boolean) => {\r\n      if (submit === true) {\r\n        this.pageState.showSpinner();\r\n        for(let member of this.team) {\r\n          this.forecastService.unlockForecast(this.month.id, member.id);\r\n        }\r\n        this.forecastService.unlockForecast(this.month.id, this.userId);\r\n        this.pageState.hideSpinner();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reset all forecasts to initial state DEACTIVATED\r\n   */\r\n  // resetAll(): void {\r\n  //   let dialogRef: MatDialogRef<ConfirmMessageDialog> = this.dialog.open(ConfirmMessageDialog, {\r\n  //     data: {\r\n  //       message: 'Are you sure you want to re-initialize all forecasts?',\r\n  //       button: { cancel: 'No', submit: 'Yes' },\r\n  //     },\r\n  //   });\r\n\r\n  //   dialogRef.afterClosed().subscribe((submit: boolean) => {\r\n  //     if (submit === true) {\r\n  //       this.pageState.showSpinner();\r\n  //       this.setLockState(false, -1, 'All forecast entries are successfully re-initialized.', 'Forecast entries could not be re-initialized. Please try again later.');\r\n  //     }\r\n  //   });\r\n  // }\r\n\r\n  setLockState(locked: boolean, role: number, messageSuccess: string, messageFail: string): void {\r\n    let level: number = 1;\r\n    if (this.role === 'practice') {\r\n      level = 2;\r\n    }\r\n\r\n    this.teamForecastService.setForecastsLockState(this.month.id, level, locked)\r\n      .then((forecasts: FcEntry[]) => {\r\n        if (forecasts) {\r\n          this.forecastService.addForecasts(forecasts, true);\r\n        } else {\r\n          this.forecastService.setTeamLockState(this.month.id, level, role);\r\n        }\r\n\r\n        this.snackBar.open(messageSuccess, 'OK', { duration: 10000, });\r\n        this.pageState.hideSpinner();\r\n      }).catch(() => {\r\n        this.snackBar.open(messageFail, 'OK', { duration: 10000, });\r\n        this.pageState.hideSpinner();\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Returns whether the logged in user has a practice lead role\r\n   */\r\n  hasPracticeLeadRole(): boolean {\r\n    return this.authService.hasRole(env.roles.pl);\r\n  }\r\n\r\n  /**\r\n   * Open csv export modal to choose which data to export\r\n   */\r\n  openCSVExportModal(): void {\r\n    let dialogRef: any = this.dialog.open(ExportCsvDialog, {\r\n      width: '30vw',\r\n      maxHeight: '80vh',\r\n      data: { months: this.months.filter((m: Month) => m.active === true) },\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((csvExportMonths: number[]) => {\r\n      if (csvExportMonths) {\r\n        this.exportPeriodForecastToCSV(csvExportMonths);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Export forecasts for team for the selected months\r\n   */\r\n  exportPeriodForecastToCSV(csvExportMonths: number[]): void {\r\n    this.pageState.showSpinner();\r\n    let openRequests: number = csvExportMonths.length;\r\n\r\n    let level: number = 1;\r\n    if (this.role === 'practice') {\r\n      level = 2;\r\n    }\r\n    let summaryMap = new Map();\r\n    let monthSummaries: string[] = [];\r\n    let lineEnding = \"\\r\\n\";\r\n    let header = \"Name;Grade;FTE;Paid Days;Project Days;Billable Days;Vacation Days;Training Days;Business Development Days;Bench Days;ARVE;URVE;External Revenue;Internal Revenue;Revenue;Weighted COR\" + lineEnding;\r\n    let summaryHeader = \"FTE;Paid Days;Project Days;Billable Days;Vacation Days;Training Days;Business Development Days;Bench Days;ARVE;URVE;External Revenue;Internal Revenue;Revenue;Weighted COR\" + lineEnding;\r\n\r\n    this.utilitiesService.getMonths().filter((m: Month) => m.active === true).forEach((month: Month) => {\r\n      if (csvExportMonths.includes(month.id)) {\r\n        this.teamForecastService.getTeamForecastPromise(this.userId, month.id, level).then((fcEntries: FcEntry[]) => {\r\n          let monthSummary: string = \"Month;\" + month.name + lineEnding + \"Working Days;\" + month.workingdays + lineEnding;\r\n          monthSummary += header;\r\n\r\n          let totalExternal: number = 0;\r\n          let totalInternal: number = 0;\r\n          let totalRevenue: number = 0;\r\n\r\n          let totalFTE: number = 0;\r\n\r\n          let totalBDD: number = 0;\r\n          let totalVaction: number = 0;\r\n          let totalTraining: number = 0;\r\n          let totalBench: number = 0;\r\n          let totalProject: number = 0;\r\n          let totalBillable: number = 0;\r\n          let totalPaid: number = 0;\r\n          let totalNonBillable: number = 0;\r\n\r\n          let totalCOR: number = 0;\r\n\r\n          for(var fc of fcEntries) {\r\n            if(fc.forecastId == -1)\r\n              continue;\r\n            let user = this.userService.getUser(fc.userId);\r\n            let userName = user.firstName + \" \" + user.lastName;\r\n            \r\n            let grade = this.userService.getGrades().find((grade: Grade) => grade.gradeId === fc.gradeId);\r\n            let gradeName = grade.name;\r\n\r\n            let externalRevenue: number = 0;\r\n            let internalRevenue: number = 0;\r\n            let revenue: number = 0;\r\n\r\n            let bddDays: number = 0;\r\n            let vacationDays: number = 0;\r\n            let trainingDays: number = 0;\r\n            let benchDays: number = 0;\r\n            let projectDays: number = 0;\r\n            let billableDays: number = 0;\r\n            let nonBillableDays: number = 0;\r\n\r\n            let paidDays: number = parseInt(month.workingdays) * fc.fte;\r\n\r\n            let cor: number = 0;\r\n\r\n            for(var pj of fc.projects) {\r\n              if(pj.projectType === 1 || pj.projectType === 6) {\r\n                projectDays += pj.plannedProjectDays;\r\n              }\r\n\r\n              if(pj.projectType === 2) {\r\n                bddDays += pj.plannedProjectDays;\r\n              } else if(pj.projectType === 3) {\r\n                trainingDays += pj.plannedProjectDays;\r\n              } else if(pj.projectType === 4) {\r\n                vacationDays += pj.plannedProjectDays;\r\n              } else if(pj.projectType === 5) {\r\n                benchDays += pj.plannedProjectDays;\r\n              }\r\n\r\n              if(pj.billable && (pj.projectType === 1 || pj.projectType === 6)) {\r\n                let rev = pj.cor * pj.plannedProjectDays;\r\n                cor += rev;\r\n                if(pj.externalRevenue) {\r\n                  externalRevenue += rev;\r\n                } else {\r\n                  internalRevenue += rev;\r\n                }\r\n\r\n                billableDays += pj.plannedProjectDays;\r\n                revenue += rev;\r\n              } else if(!pj.billable && (pj.projectType === 1 || pj.projectType === 6)) {\r\n                nonBillableDays += pj.plannedProjectDays;\r\n              }\r\n            }\r\n\r\n            let monthEntry: string = userName + \";\" + \r\n              gradeName + \";\" + \r\n              this.numberToString(fc.fte) + \";\" + \r\n              this.numberToString(paidDays) + \";\" + \r\n              this.numberToString(projectDays) + \";\" + \r\n              this.numberToString(billableDays) + \";\" + \r\n              this.numberToString(vacationDays) + \";\" + \r\n              this.numberToString(trainingDays) + \";\" + \r\n              this.numberToString(bddDays) + \";\" + \r\n              this.numberToString(benchDays) + \";\" + \r\n              this.numberToString((billableDays + nonBillableDays)/(paidDays - vacationDays), 4) + \";\" + \r\n              this.numberToString((billableDays)/(paidDays - vacationDays), 4) + \";\" + \r\n              this.numberToString(externalRevenue) + \";\" + \r\n              this.numberToString(internalRevenue) + \";\" + \r\n              this.numberToString(revenue) + \";\" +\r\n              this.numberToString(cor / billableDays) +\r\n              lineEnding;\r\n\r\n            totalExternal += externalRevenue;\r\n            totalInternal += internalRevenue;\r\n            totalRevenue += revenue;\r\n\r\n            totalFTE += fc.fte;\r\n\r\n            totalBDD += bddDays;\r\n            totalVaction += vacationDays;\r\n            totalTraining += trainingDays;\r\n            totalBench += benchDays;\r\n            totalProject += projectDays;\r\n            totalBillable += billableDays;\r\n            totalNonBillable += nonBillableDays;\r\n\r\n            totalPaid += paidDays;\r\n\r\n            totalCOR += cor;\r\n\r\n            monthSummary += monthEntry;\r\n          }\r\n\r\n          let monthTotalEntry = this.numberToString(totalFTE) + \";\" + \r\n            this.numberToString(totalPaid) + \";\" + \r\n            this.numberToString(totalProject) + \";\" + \r\n            this.numberToString(totalBillable) + \";\" + \r\n            this.numberToString(totalVaction) + \";\" + \r\n            this.numberToString(totalTraining) + \";\" + \r\n            this.numberToString(totalBDD) + \";\" + \r\n            this.numberToString(totalBench) + \";\" + \r\n            this.numberToString((totalBillable + totalNonBillable) / (totalPaid - totalVaction), 4) + \";\" + \r\n            this.numberToString((totalBillable) / (totalPaid - totalVaction), 4) + \";\" + \r\n            this.numberToString(totalExternal) + \";\" + \r\n            this.numberToString(totalInternal) + \";\" + \r\n            this.numberToString(totalRevenue) + \";\" +\r\n            this.numberToString(totalCOR / totalBillable) +\r\n            lineEnding;\r\n\r\n          monthSummary += \"\\n\\n\" + \"Summary\\n\" + summaryHeader + monthTotalEntry + \"\\n\";\r\n          openRequests--;\r\n          summaryMap = summaryMap.set(month.id, monthSummary);\r\n\r\n          if (openRequests === 0) {\r\n            this.pageState.hideSpinner();\r\n            let keys = Array.from(summaryMap.keys()).sort();\r\n\r\n            for(var key of keys) {\r\n              monthSummaries.push(summaryMap.get(key));\r\n            }\r\n\r\n            const data = monthSummaries.join(\"\\n\\n\");\r\n            const blob: Blob = new Blob([data], { type: \"text/csv\" });\r\n            const filename: string = this.datePipe.transform(new Date(), \"yyyyMMdd\") + \"-Summary.csv\";    \r\n    \r\n            let navigator:any = window.navigator;\r\n            if (navigator.msSaveOrOpenBlob) {\r\n              navigator.msSaveOrOpenBlob(blob, filename);\r\n            } else {\r\n              const url: string = window.URL.createObjectURL(blob);\r\n        \r\n              let a: HTMLAnchorElement = document.createElement(\"a\");\r\n              a.href = url;\r\n              a.download = filename;\r\n        \r\n              document.body.appendChild(a);\r\n              a.click();\r\n              document.body.removeChild(a);\r\n              window.URL.revokeObjectURL(url);\r\n            }\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  numberToString(no: number, precision: number = 2): string {\r\n    return no.toLocaleString(\"de\",  { minimumFractionDigits: precision } ).replace(\".\",\"\");\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-stroked-button {\r\n\tmargin: 5px;\r\n\tmargin-left: 0;\r\n}\r\n\r\n.button-rows {\r\n\tdisplay: flex;\r\n\t.button-row {\r\n\t\twidth: 50%\r\n\t}\r\n}",
                    "styleUrl": "./teamlead-summary.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor for teamlead-summary component</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "teamForecastService",
                        "type": "TeamForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "teamService",
                        "type": "TeamUserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 83,
                "rawdescription": "\n\nconstructor for teamlead-summary component\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 2792,
                            "end": 2800,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "datePipe"
                        },
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2786,
                            "end": 2791,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 2814,
                            "end": 2820,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialog"
                        },
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2808,
                            "end": 2813,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 2834,
                            "end": 2850,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "utilitiesService"
                        },
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2828,
                            "end": 2833,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 2864,
                            "end": 2879,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "forecastService"
                        },
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2858,
                            "end": 2863,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 2893,
                            "end": 2912,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "teamForecastService"
                        },
                        "type": "TeamForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2887,
                            "end": 2892,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 2926,
                            "end": 2937,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "userService"
                        },
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2920,
                            "end": 2925,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "teamService",
                        "type": "TeamUserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 2951,
                            "end": 2960,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "pageState"
                        },
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2945,
                            "end": 2950,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<mat-card class=\"summary-box\">\r\n  <mat-card-title>\r\n    Summary {{month.name}}\r\n  </mat-card-title>\r\n\r\n  <mat-card-content>\r\n    <table mat-table [dataSource]=\"summaryProjects\">\r\n      <ng-container matColumnDef=\"name\">\r\n        <th mat-header-cell *matHeaderCellDef>Project name</th>\r\n        <td mat-cell *matCellDef=\"let project\">{{ project.title }}</td>\r\n        <td mat-footer-cell *matFooterCellDef>\r\n          Billable days<br>\r\n          Non-billable days<br>\r\n          <span class=\"total\">Total days</span><br>\r\n          <span class=\"note\">Expected days</span>\r\n        </td>\r\n      </ng-container>\r\n\r\n      <ng-container matColumnDef=\"days\">\r\n        <th mat-header-cell *matHeaderCellDef>Days</th>\r\n        <td mat-cell *matCellDef=\"let project\">{{ project.days | number: '1.0-2' :'de'}}</td>\r\n        <td mat-footer-cell *matFooterCellDef>\r\n          {{summaryData.billableDays | number: '1.0-2':'de'}}<br>\r\n          {{summaryData.nonbillableDays | number: '1.0-2':'de'}}<br>\r\n          <span class=\"total\">{{(summaryData.billableDays + summaryData.nonbillableDays) | number: '1.0-2':'de'}}</span><br>\r\n          <span class=\"note\">{{ summaryData.workingDays | number: '1.0-2':'de' }}</span>\r\n        </td>\r\n      </ng-container>\r\n      <tr mat-header-row *matHeaderRowDef=\"['name', 'days']\"></tr>\r\n      <tr mat-row *matRowDef=\"let row; columns: ['name', 'days']\"></tr>\r\n      <tr mat-footer-row *matFooterRowDef=\"['name', 'days']\"></tr>\r\n    </table>\r\n\r\n\t\t<div class=\"card-section\">\r\n      <mat-chip-list>\r\n        <mat-chip><mat-icon>timeline</mat-icon>ARVE {{summaryData.arve * 100 | number: '1.0-2': 'de'}}%</mat-chip>\r\n        <mat-chip><mat-icon>timeline</mat-icon>URVE {{summaryData.urve * 100 | number: '1.0-2': 'de'}}%</mat-chip>\r\n        <mat-chip><mat-icon>trending_up</mat-icon>External Revenue € {{summaryData.extRevenue | number:'':'de' }}</mat-chip>\r\n        <mat-chip><mat-icon>trending_up</mat-icon>Internal Revenue € {{summaryData.intRevenue | number:'':'de' }}</mat-chip>\r\n        <mat-chip><mat-icon>trending_up</mat-icon>ROS € {{summaryData.revenue | number:'':'de' }}</mat-chip>\r\n      </mat-chip-list>\r\n    </div>\r\n    <div class=\"card-section\">\r\n    <!-- <div class=\"card-section button-rows\"> -->\r\n      <button mat-stroked-button [disabled]= allForecastsValid() class=\"mat-primary-reversed button-row\" *ngIf=\"role == 'practice' && hasPracticeLeadRole()\" (click)=\"submitAll()\">\r\n        <mat-icon>lock</mat-icon> Submit all forecasts\r\n      </button>\r\n      <!-- <button mat-stroked-button class=\"mat-primary-reversed button-row\" *ngIf=\"role == 'practice' && hasPracticeLeadRole()\" (click)=\"resetAll()\"> DEACTIVATED\r\n        <mat-icon>restore</mat-icon> Reset to initial values\r\n      </button> -->\r\n    </div>\r\n\r\n    <div class=\"card-section\">\r\n    <!-- <div class=\"card-section button-rows\"> -->\r\n      <button mat-stroked-button class=\"mat-primary-reversed button-row\" *ngIf=\"role == 'practice' && hasPracticeLeadRole()\" (click)=\"unlockAll()\">\r\n          <mat-icon>lock_open</mat-icon> Unlock all forecasts\r\n      </button>\r\n      <button mat-stroked-button class=\"mat-primary-reversed\" [ngClass]=\"{'button-row': role == 'practice' && hasPracticeLeadRole()}\" (click)=\"openCSVExportModal()\">\r\n        <mat-icon>insert_drive_file</mat-icon> CSV Export\r\n      </button>\r\n    </div>\r\n  </mat-card-content>\r\n</mat-card>\r\n"
        },
        {
            "name": "TeamsComponent",
            "id": "component-TeamsComponent-9c26abe8cf6fa127d0dcef79bb6a11dc",
            "file": "src/app/admin/components/teams/teams.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-admin-teams",
            "styleUrls": [
                "../../admin.component.scss",
                "./teams.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./teams.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Role[]",
                    "optional": false,
                    "description": "<p>role list</p>\n",
                    "line": 48,
                    "rawdescription": "\n\nrole list\n"
                },
                {
                    "name": "roleSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>role list subscription</p>\n",
                    "line": 58,
                    "rawdescription": "\n\nrole list subscription\n"
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSort",
                    "optional": false,
                    "description": "<p>Sort variable for angular material table sort method</p>\n",
                    "line": 28,
                    "rawdescription": "\n\nSort variable for angular material table sort method\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSort"
                        }
                    ]
                },
                {
                    "name": "teamleads",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User[]",
                    "optional": false,
                    "description": "<p>teamlead list</p>\n",
                    "line": 43,
                    "rawdescription": "\n\nteamlead list\n"
                },
                {
                    "name": "teams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Team[]",
                    "optional": false,
                    "description": "<p>team list</p>\n",
                    "line": 33,
                    "rawdescription": "\n\nteam list\n"
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User[]",
                    "optional": false,
                    "description": "<p>user list</p>\n",
                    "line": 38,
                    "rawdescription": "\n\nuser list\n"
                },
                {
                    "name": "userSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>user list subscription</p>\n",
                    "line": 53,
                    "rawdescription": "\n\nuser list subscription\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "addTeam",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteTeam",
                    "args": [
                        {
                            "name": "team",
                            "type": "Team",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "team",
                            "type": "Team",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRole",
                    "args": [
                        {
                            "name": "roleId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | boolean",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns user role description\n",
                    "description": "<p>returns user role description</p>\n",
                    "jsdoctags": [
                        {
                            "name": "roleId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTeamMembers",
                    "args": [
                        {
                            "name": "parentId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "MatTableDataSource<User>",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns teammember-list as MatDataTableSource\n",
                    "description": "<p>Returns teammember-list as MatDataTableSource</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3343,
                                "end": 3351,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "parentId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3337,
                                "end": 3342,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemove project subscription when component gets destroyed\n",
                    "description": "<p>Remove project subscription when component gets destroyed</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSubscribe to user at component init\n",
                    "description": "<p>Subscribe to user at component init</p>\n"
                },
                {
                    "name": "showEditDialog",
                    "args": [
                        {
                            "name": "team",
                            "type": "Team",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpens add/edit team dialog window\n",
                    "description": "<p>Opens add/edit team dialog window</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4128,
                                "end": 4132,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "team"
                            },
                            "type": "Team",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4122,
                                "end": 4127,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "updateTeam",
                    "args": [
                        {
                            "name": "team",
                            "type": "Team",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "team",
                            "type": "Team",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>project-admin component</p>\n",
            "rawdescription": "\n\nproject-admin component\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSort } from '@angular/material/sort';\r\n\r\nimport { Subscription } from 'rxjs';\r\nimport { UserService } from '../../../core/services/user.service';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { User } from '../../../core/interfaces/user';\r\nimport { Role } from '../../../core/interfaces/role';\r\nimport { environment } from '../../../../environments/environment';\r\nimport { TeamService } from '../../../core/services/admin/team.service';\r\nimport { Team } from '../../../core/interfaces/team';\r\nimport { AddTeamDialog } from '../../dialogs/add-team/add-team.dialog';\r\nimport { ConfirmMessageDialog } from '../../dialogs/confirm-message/confirm-message.dialog';\r\n\r\n/**\r\n * project-admin component\r\n */\r\n@Component({\r\n  selector: 'app-admin-teams',\r\n  templateUrl: './teams.component.html',\r\n  styleUrls: ['../../admin.component.scss', './teams.component.scss'],\r\n})\r\nexport class TeamsComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * Sort variable for angular material table sort method\r\n   */\r\n  @ViewChild(MatSort) sort: MatSort;\r\n\r\n  /**\r\n   * team list\r\n   */\r\n  teams: Team[];\r\n\r\n  /**\r\n   * user list\r\n   */\r\n  user: User[];\r\n\r\n  /**\r\n   * teamlead list\r\n   */\r\n  teamleads: User[];\r\n\r\n  /**\r\n   * role list\r\n   */\r\n  roles: Role[];\r\n\r\n  /**\r\n   * user list subscription\r\n   */\r\n  userSubscription: Subscription;\r\n\r\n  /**\r\n   * role list subscription\r\n   */\r\n  roleSubscription: Subscription;\r\n\r\n  /**\r\n   * team service constructor\r\n   * @param userService\r\n   */\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private userService: UserService,\r\n    private teamService: TeamService,\r\n  ) {}\r\n\r\n  /**\r\n   * Subscribe to user at component init\r\n   */\r\n\tngOnInit(): void {\r\n    this.teamService.initTeams();\r\n\r\n    this.teamService.teams$\r\n      .subscribe((teams: Team[]) => {\r\n        this.teams = teams;\r\n        //console.log(teams);\r\n      });\r\n\r\n    this.userSubscription = this.userService.allUsers$\r\n      .subscribe((user: User[]) => {\r\n\t\t\t\tthis.user = user;\r\n\t\t\t\tlet teamleadIDs: number[] = user.filter((u: User) => u.permission >= environment.roles.pdl).map((u: User) => u.id);\r\n\t\t\t\tthis.teamleads = user.filter((u: User) => teamleadIDs.indexOf(u.id) >= 0);\r\n      });\r\n\r\n    this.roleSubscription = this.userService.roles$\r\n      .subscribe((roles: Role[]) => {\r\n        this.roles = roles;\r\n      });\r\n  }\r\n\r\n  addTeam(): void {\r\n    this.showEditDialog(new Team());\r\n  }\r\n\r\n  updateTeam(team: Team): void {\r\n    this.showEditDialog(team);\r\n  }\r\n\r\n  deleteTeam(team: Team): void {\r\n    let dialogRef: MatDialogRef<ConfirmMessageDialog> = this.dialog.open(ConfirmMessageDialog, {\r\n      data: {\r\n        message: 'Are you sure you want to delete the team \"' + team.name + '\"?',\r\n        button: { cancel: 'Cancel', submit: 'Delete' },\r\n      },\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((remove: boolean) => {\r\n      if (remove) {\r\n        this.teamService.deleteTeam(team.teamId);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Remove project subscription when component gets destroyed\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.userSubscription.unsubscribe();\r\n\t}\r\n\r\n  /**\r\n   * Returns teammember-list as MatDataTableSource\r\n   * @param parentId\r\n   */\r\n\tgetTeamMembers(parentId: number): MatTableDataSource<User> {\r\n    let teamlead: User = this.user.find((u: User) => u.id === parentId);\r\n    let team: User[] = this.user.filter((u: User) => u.parentId === parentId);\r\n\r\n    team = [...team, ...this.user.filter((u: User) => team.map((us: User) => us.id).indexOf(u.parentId) >= 0)]; // max 2 levels (PDL + PL-level)\r\n    team.unshift(teamlead);\r\n\r\n\t\treturn new MatTableDataSource(team);\r\n  }\r\n  \r\n  /**\r\n   * returns user role description\r\n   */\r\n  getRole(roleId: number): string | boolean {\r\n    if (this.roles.find((r: Role) => r.roleId === roleId)) {\r\n      return this.roles.find((r: Role) => r.roleId === roleId).name;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Opens add/edit team dialog window\r\n   * @param team\r\n   */\r\n  showEditDialog(team: Team): void {\r\n    let dialogRef: any = this.dialog.open(AddTeamDialog, {\r\n      data: {\r\n        team: team,\r\n        user: this.user,\r\n      },\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((t: Team | boolean) => {\r\n      if (t) {\r\n        this.teamService.setTeam(<Team>t);\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../assets/styles/variables.scss';\r\n\r\n.mat-sidenav-container{\r\n\tbackground: transparent;\r\n\tmargin: 0 10px;\r\n}\r\n\r\n.mat-drawer {\r\n\tdisplay: none;\r\n\tbackground: transparent;\r\n\twidth: 50px;\r\n\tborder-right-width: 0px;\r\n}\r\n\r\n.nav-button-container {\r\n\tmargin: 4px 0;\r\n\r\n\t.mat-icon-button {\r\n\t\twidth: 50px;\r\n\t\theight: 50px;\r\n\t\tmargin-bottom: 10px;\r\n\t\tpadding: 0;\r\n\r\n\t\t&.active, &.active .mat-icon {\r\n\t\t\tcolor: map-get($font-colors, blue);\r\n\t\t}\r\n\t}\r\n\r\n\t.mat-icon {\r\n\t\twidth: 1em;\r\n\t\theight: 1em;\r\n\t\tline-height: 1rem;\r\n\t\tfont-size: 2rem;\r\n\t}\r\n}\r\n\r\n\r\ntd.mat-cell:first-of-type, td.mat-footer-cell:first-of-type, th.mat-header-cell:first-of-type {\r\n\tpadding-left: 0;\r\n}\r\n\r\ntd.mat-cell:last-of-type, td.mat-footer-cell:last-of-type, th.mat-header-cell:last-of-type {\r\n\tpadding-right: 0;\r\n}\r\n\r\n.action-button {\r\n\twidth: 50px;\r\n\ttext-align: center;\r\n}\r\n\r\n.flag-button {\r\n\twidth: 70px;\r\n\ttext-align: center;\r\n}\r\n\r\n.button-row {\r\n\tmargin: 50px;\r\n\r\n\t.mat-raised-button {\r\n\t\tposition: fixed;\r\n\t\tz-index: 100;\r\n\t\tbottom: 32px;\r\n\t\tright: 30px;\r\n\t\tbox-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\r\n\t}\r\n}\r\n\r\n.mat-form-field {\r\n\tmargin: 5px 0;\r\n}\r\n\r\ntr.mat-row.inactive td {\r\n\tcolor: map-get($font-colors, grey-label);\r\n\r\n\t.flag-inactive {\r\n\t\tbackground: map-get($font-colors, red);\r\n\t\tcolor: map-get($font-colors, white);\r\n\t\tpadding: 3px 6px;\r\n\t\tborder-radius: 4px;\r\n\t}\r\n}\r\n\r\n.mat-table tr.mat-row:last-child td {\r\n\tborder-bottom: 0;\r\n}",
                    "styleUrl": "../../admin.component.scss"
                },
                {
                    "data": "@import '../../../../assets/styles/variables.scss';\r\n\r\n.mat-expansion-panel {\r\n\t.mat-expansion-panel-header {\r\n\t\theight: 44px;\r\n\t\tfont-size: $font-size;\r\n\t}\r\n\r\n\ttable {\r\n\t\tbox-shadow: none;\r\n\t}\r\n\r\n\ttd.mat-cell {\r\n\t\tpadding: 0 16px;\r\n\t}\r\n\t\r\n\t.mat-table tr.mat-row {\r\n\t\theight: 40px;\r\n\t}\r\n}\r\n\r\n.mat-expansion-panel-header-description, .mat-expansion-panel-header-title {\r\n\tline-height: 24px;\r\n}\r\n\r\n.mat-expansion-panel-header-description {\r\n\tflex-direction: row-reverse;\r\n\r\n\t.mat-icon {\r\n\t\tpadding: 0 10px;\r\n\t}\r\n}",
                    "styleUrl": "./teams.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>team service constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "teamService",
                        "type": "TeamService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 58,
                "rawdescription": "\n\nteam service constructor\n",
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 1634,
                            "end": 1645,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "userService"
                        },
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1628,
                            "end": 1633,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "teamService",
                        "type": "TeamService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<mat-accordion displayMode=\"flat\" multi>\r\n  <mat-expansion-panel *ngFor=\"let team of teams\">\r\n    <mat-expansion-panel-header>\r\n      <mat-panel-title>\r\n        {{team.name}}\r\n      </mat-panel-title>\r\n      <mat-panel-description class=\"mat-row\">\r\n        <mat-icon (click)=\"deleteTeam(team)\">delete</mat-icon>\r\n        <mat-icon (click)=\"updateTeam(team)\">edit</mat-icon>\r\n      </mat-panel-description>\r\n    </mat-expansion-panel-header>\r\n\r\n    <table mat-table [dataSource]=\"getTeamMembers(team.teamLeadId)\" class=\"mat-elevation-z8\">\r\n\t\t\t\t<ng-container matColumnDef=\"name\">\r\n\t\t\t\t\t<td mat-cell *matCellDef=\"let user; let i = index\"> {{user.lastName}}, {{user.firstName}} \r\n            <ng-container *ngIf=\"i == 0\">(Teamlead)</ng-container>\r\n          </td>\r\n\t\t\t\t</ng-container>\r\n\r\n\t\t\t\t<tr mat-row *matRowDef=\"let row; columns: ['name'];\"></tr>\r\n\t\t\t</table>\r\n\t</mat-expansion-panel>\r\n</mat-accordion>\r\n\r\n<div class=\"button-row\">\r\n  <button mat-raised-button color=\"primary\" (click)=\"addTeam()\">\r\n    <mat-icon>playlist_add</mat-icon> Add Team\r\n  </button>\r\n</div>"
        },
        {
            "name": "UsersComponent",
            "id": "component-UsersComponent-b66c126df25351ceedf7d6f78798fee4",
            "file": "src/app/admin/components/users/users.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-admin-users",
            "styleUrls": [
                "../../admin.component.scss",
                "./users.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./users.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "filterValues",
                    "defaultValue": "{\r\n    name:'', //used for id as well\r\n    teamlead: [],\r\n    role: [],\r\n    grade: []\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "gradeFilter",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "grades",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Grade[]",
                    "optional": false,
                    "description": "<p>Defined grades</p>\n",
                    "line": 47,
                    "rawdescription": "\n\nDefined grades\n"
                },
                {
                    "name": "gradeSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>grade update subscription</p>\n",
                    "line": 70,
                    "rawdescription": "\n\ngrade update subscription\n"
                },
                {
                    "name": "roleFilter",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Role[]",
                    "optional": false,
                    "description": "<p>Defined roles</p>\n",
                    "line": 42,
                    "rawdescription": "\n\nDefined roles\n"
                },
                {
                    "name": "roleSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>role update subscription</p>\n",
                    "line": 65,
                    "rawdescription": "\n\nrole update subscription\n"
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSort",
                    "optional": false,
                    "description": "<p>sort for angular material table</p>\n",
                    "line": 26,
                    "rawdescription": "\n\nsort for angular material table\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSort, {static: true}"
                        }
                    ]
                },
                {
                    "name": "teamleadFilter",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "teamleads",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User[]",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTableDataSource<User>",
                    "optional": false,
                    "description": "<p>User array as MatTableDataSource (needed for auto updates on table)</p>\n",
                    "line": 52,
                    "rawdescription": "\n\nUser array as MatTableDataSource (needed for auto updates on table)\n"
                },
                {
                    "name": "userSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>user update subscription</p>\n",
                    "line": 60,
                    "rawdescription": "\n\nuser update subscription\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "addNewUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nopen add user dialog\n",
                    "description": "<p>open add user dialog</p>\n"
                },
                {
                    "name": "applyFilter",
                    "args": [
                        {
                            "name": "filterValue",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filterValue",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 253,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createFilter",
                    "args": [],
                    "optional": false,
                    "returnType": "(user: any, filter: any) => boolean",
                    "typeParameters": [],
                    "line": 211,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "fieldListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "getGrade",
                    "args": [
                        {
                            "name": "gradeId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns user grade\n",
                    "description": "<p>returns user grade</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4322,
                                "end": 4329,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "gradeId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4316,
                                "end": 4321,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getRole",
                    "args": [
                        {
                            "name": "roleId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns user role\n",
                    "description": "<p>returns user role</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4094,
                                "end": 4100,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "roleId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4088,
                                "end": 4093,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getTeamlead",
                    "args": [
                        {
                            "name": "parentId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns teamlead name\n",
                    "description": "<p>returns teamlead name</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4565,
                                "end": 4573,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "parentId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4559,
                                "end": 4564,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnsubscribe services when component gets destroyed\n",
                    "description": "<p>Unsubscribe services when component gets destroyed</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ninit method to load users + roles\n",
                    "description": "<p>init method to load users + roles</p>\n"
                },
                {
                    "name": "openUserDialog",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nopen update user dialog\n",
                    "description": "<p>open update user dialog</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3532,
                                "end": 3536,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "user"
                            },
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3526,
                                "end": 3531,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setUserActiveState",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "active",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate user active state\n",
                    "description": "<p>Update user active state</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3895,
                                "end": 3897,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3889,
                                "end": 3894,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 3911,
                                "end": 3917,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "active"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3905,
                                "end": 3910,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Component for admin user-list</p>\n",
            "rawdescription": "\n\nComponent for admin user-list\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\r\nimport { User } from '../../../core/interfaces/user';\r\nimport { UserService } from '../../../core/services/user.service';\r\nimport { Subscription } from 'rxjs';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { AddUserDialog } from '../../dialogs/add-user/add-user.dialog';\r\nimport { Role } from '../../../core/interfaces/role';\r\nimport { Grade } from '../../../core/interfaces/grade';\r\nimport { UserAdminService } from '../../../core/services/admin/user.service';\r\nimport { FormControl } from '@angular/forms';\r\nimport { environment } from '../../../../environments/environment';\r\n/**\r\n * Component for admin user-list\r\n */\r\n@Component({\r\n  selector: 'app-admin-users',\r\n  templateUrl: './users.component.html',\r\n  styleUrls: ['../../admin.component.scss', './users.component.scss'],\r\n})\r\nexport class UsersComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * sort for angular material table\r\n   */\r\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\r\n\r\n\r\n  roleFilter = new FormControl('');\r\n  gradeFilter = new FormControl('');\r\n  teamleadFilter = new FormControl('');\r\n  filterValues : any = {\r\n    name:'', //used for id as well\r\n    teamlead: [],\r\n    role: [],\r\n    grade: []\r\n  }\r\n\r\n  /**\r\n   * Defined roles\r\n   */\r\n  roles: Role[];\r\n\r\n  /**\r\n   * Defined grades\r\n   */\r\n  grades: Grade[];\r\n\r\n  /**\r\n   * User array as MatTableDataSource (needed for auto updates on table)\r\n   */\r\n  user: MatTableDataSource<User>;\r\n\r\n\r\n  teamleads: User[];\r\n\r\n  /**\r\n   * user update subscription\r\n   */\r\n  userSubscription: Subscription;\r\n\r\n  /**\r\n   * role update subscription\r\n   */\r\n  roleSubscription: Subscription;\r\n\r\n  /**\r\n   * grade update subscription\r\n   */\r\n  gradeSubscription: Subscription;\r\n\r\n  /**\r\n   * constructor to init user datasource\r\n   * @param dialog\r\n   * @param userService\r\n   */\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private userService: UserService,\r\n    private userAdminService: UserAdminService,\r\n  ) {\r\n    this.user = new MatTableDataSource([]);\r\n  }\r\n\r\n  /**\r\n   * init method to load users + roles\r\n   */\r\n  ngOnInit(): void {\r\n    this.userAdminService.initData();\r\n\r\n    this.userSubscription = this.userService.allUsers$\r\n      .subscribe((user: User[]) => {\r\n        //getting all teamleads\r\n        let teamleadIDs: number[] = user.filter((u: User) => u.permission >= environment.roles.pdl).map((u: User) => u.id);\r\n        this.teamleads = user.filter((u: User) => teamleadIDs.indexOf(u.id) >= 0);\r\n        this.user = new MatTableDataSource(user);\r\n        this.user.sort = this.sort;\r\n        this.user.filterPredicate = this.createFilter(); // custom filter\r\n      });\r\n\r\n    this.roleSubscription = this.userService.roles$\r\n      .subscribe((roles: Role[]) => {\r\n        this.roles = roles;\r\n      });\r\n\r\n    this.gradeSubscription = this.userService.grades$\r\n      .subscribe((grades: Grade[]) => {\r\n        this.grades = grades;\r\n      });\r\n\r\n      this.fieldListener();\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe services when component gets destroyed\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.userSubscription.unsubscribe();\r\n    this.roleSubscription.unsubscribe();\r\n    this.gradeSubscription.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * open add user dialog\r\n   */\r\n  addNewUser(): void {\r\n    this.openUserDialog(new User());\r\n  }\r\n\r\n  /**\r\n   * open update user dialog\r\n   * @param user\r\n   */\r\n  openUserDialog(user: User): void {\r\n    let dialogRef: any = this.dialog.open(AddUserDialog, { height: 'auto', width: '50vw', data: user });\r\n\r\n    dialogRef.afterClosed().subscribe((u: User | boolean) => {\r\n      if (u) {\r\n        this.userAdminService.setUser(<User>u);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update user active state\r\n   * @param id\r\n   * @param active\r\n   */\r\n  setUserActiveState(id: number, active: boolean): void {\r\n    this.userAdminService.setUserActiveState(id, active);\r\n  }\r\n\r\n  /**\r\n   * returns user role\r\n   * @param roleId\r\n   */\r\n  getRole(roleId: number): string {\r\n    return this.roles.find((r: Role) => r.roleId === roleId) ? this.roles.find((r: any) => r.roleId === roleId).name : '-';\r\n  }\r\n\r\n  /**\r\n   * returns user grade\r\n   * @param gradeId\r\n   */\r\n  getGrade(gradeId: number): string {\r\n    return this.grades.find((g: Grade) => g.gradeId === gradeId) ? this.grades.find((g: Grade) => g.gradeId === gradeId).name : '-';\r\n  }\r\n\r\n  /**\r\n   * returns teamlead name\r\n   * @param parentId\r\n   */\r\n  getTeamlead(parentId: number): string {\r\n    let parent: User = this.user.data.find((u: User) => u.id === parentId);\r\n    return parent ? (parent.lastName + ', ' + parent.firstName) : '';\r\n  }\r\n\r\n\r\n  // Filters\r\n  applyFilter(filterValue) {\r\n    this.filterValues.name = filterValue.trim().toLowerCase();\r\n    this.user.filter = JSON.stringify(this.filterValues);\r\n\r\n  }\r\n\r\n  private fieldListener() {\r\n    this.roleFilter.valueChanges\r\n      .subscribe(\r\n        roleId => {\r\n          this.filterValues.role = roleId;\r\n          this.user.filter = JSON.stringify(this.filterValues);\r\n        }\r\n      )\r\n    this.gradeFilter.valueChanges\r\n      .subscribe(\r\n        gradeId => {\r\n          this.filterValues.grade = gradeId;\r\n          this.user.filter = JSON.stringify(this.filterValues);\r\n        }\r\n      )\r\n    this.teamleadFilter.valueChanges\r\n      .subscribe(\r\n        teamleadId => {\r\n          this.filterValues.teamlead = teamleadId;\r\n          this.user.filter = JSON.stringify(this.filterValues);\r\n        }\r\n      )\r\n  }\r\n\r\n    // custom filter to overwrite the filter predicate\r\n    private createFilter(){\r\n      const filterFunction = function (user: User, filter): boolean {\r\n        //match different filters with user\r\n        let match = true;\r\n        let matchTeamlead = false;\r\n        let matchRole = false;\r\n        let matchGrade = false;\r\n        // User's inputs\r\n        let searchTerms = JSON.parse(filter);\r\n\r\n        if(searchTerms.name){\r\n          return (user.firstName.toLowerCase() + user.lastName.toLowerCase() + user.globalId.toString()).split(' ').join('')\r\n          .includes(searchTerms.name);\r\n        } \r\n        if(searchTerms.teamlead.length>0){\r\n          searchTerms.teamlead.forEach(element => {\r\n            if(element)\r\n                matchTeamlead = matchTeamlead || user.parentId == element;\r\n          });\r\n         match = match && (matchTeamlead);\r\n        }\r\n        if(searchTerms.role.length>0){\r\n          searchTerms.role.forEach(element => {\r\n            if(element)\r\n                matchRole = matchRole || user.roleId == element;\r\n          }); \r\n          match = match && (matchRole);\r\n        }\r\n        if(searchTerms.grade.length>0){\r\n        searchTerms.grade.forEach(element => {\r\n            if(element != null)\r\n            matchGrade = matchGrade || user.gradeId == element;\r\n          }); \r\n          match = match && (matchGrade);\r\n        }\r\n        console.log('from match', match);\r\n        return match;\r\n      }\r\n  \r\n      return filterFunction;\r\n    }\r\n\r\n    clearFilter(){\r\n      this.roleFilter.setValue([]);\r\n      this.gradeFilter.setValue([]);\r\n      this.teamleadFilter.setValue([]);\r\n    }\r\n    \r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../assets/styles/variables.scss';\r\n\r\n.mat-sidenav-container{\r\n\tbackground: transparent;\r\n\tmargin: 0 10px;\r\n}\r\n\r\n.mat-drawer {\r\n\tdisplay: none;\r\n\tbackground: transparent;\r\n\twidth: 50px;\r\n\tborder-right-width: 0px;\r\n}\r\n\r\n.nav-button-container {\r\n\tmargin: 4px 0;\r\n\r\n\t.mat-icon-button {\r\n\t\twidth: 50px;\r\n\t\theight: 50px;\r\n\t\tmargin-bottom: 10px;\r\n\t\tpadding: 0;\r\n\r\n\t\t&.active, &.active .mat-icon {\r\n\t\t\tcolor: map-get($font-colors, blue);\r\n\t\t}\r\n\t}\r\n\r\n\t.mat-icon {\r\n\t\twidth: 1em;\r\n\t\theight: 1em;\r\n\t\tline-height: 1rem;\r\n\t\tfont-size: 2rem;\r\n\t}\r\n}\r\n\r\n\r\ntd.mat-cell:first-of-type, td.mat-footer-cell:first-of-type, th.mat-header-cell:first-of-type {\r\n\tpadding-left: 0;\r\n}\r\n\r\ntd.mat-cell:last-of-type, td.mat-footer-cell:last-of-type, th.mat-header-cell:last-of-type {\r\n\tpadding-right: 0;\r\n}\r\n\r\n.action-button {\r\n\twidth: 50px;\r\n\ttext-align: center;\r\n}\r\n\r\n.flag-button {\r\n\twidth: 70px;\r\n\ttext-align: center;\r\n}\r\n\r\n.button-row {\r\n\tmargin: 50px;\r\n\r\n\t.mat-raised-button {\r\n\t\tposition: fixed;\r\n\t\tz-index: 100;\r\n\t\tbottom: 32px;\r\n\t\tright: 30px;\r\n\t\tbox-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\r\n\t}\r\n}\r\n\r\n.mat-form-field {\r\n\tmargin: 5px 0;\r\n}\r\n\r\ntr.mat-row.inactive td {\r\n\tcolor: map-get($font-colors, grey-label);\r\n\r\n\t.flag-inactive {\r\n\t\tbackground: map-get($font-colors, red);\r\n\t\tcolor: map-get($font-colors, white);\r\n\t\tpadding: 3px 6px;\r\n\t\tborder-radius: 4px;\r\n\t}\r\n}\r\n\r\n.mat-table tr.mat-row:last-child td {\r\n\tborder-bottom: 0;\r\n}",
                    "styleUrl": "../../admin.component.scss"
                },
                {
                    "data": "@import '../../../../assets/styles/variables.scss';\r\n\r\n.form-field-toggle {\r\n  margin: 10px;\r\n}\r\n\r\n\r\n.accordion-header {\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  padding: 15px 24px;\r\n  color: map-get($font-colors, grey-dark);\r\n  margin-right: 8px;\r\n\r\n  div {\r\n    display: flex;\r\n    flex-grow: 1;\r\n    width: 0;\r\n    margin-right: 16px;\r\n\r\n    &:last-child {\r\n      flex-grow: 2;\r\n      text-align: center;\r\n    }\r\n\r\n    span {\r\n      flex: 1;\r\n      word-break: break-word;\r\n    }\r\n  }\r\n}\r\n\r\n.mat-accordion .mat-expansion-panel {\r\n  border-radius: 0;\r\n\r\n  .mat-expansion-panel-header-description, .mat-expansion-panel-header-title {\r\n    width: 0;\r\n    line-height: 15px;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n  }\r\n  \r\n  .mat-expansion-panel-header-description {\r\n    text-align: center; \r\n    flex-grow: 2;\r\n  }\r\n\r\n  .mat-cell, .mat-header-cell {\r\n    flex: 1;\r\n    color: map-get($font-colors, grey-dark);\r\n  }\r\n}\r\n\r\n.mat-raised-button{\r\n    margin-top: 20px;\r\n}\r\n\r\n.button-margin {\r\n  margin: 10px,\r\n}\r\n\r\n.clicked {\r\n  background-color: #f9fafb;\r\n}\r\n\r\n\r\ntd.mat-cell:last-of-type, td.mat-footer-cell:last-of-type, th.mat-header-cell:last-of-type {\r\n\tpadding-right: 5;\r\n}\r\n\r\n",
                    "styleUrl": "./users.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor to init user datasource</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userAdminService",
                        "type": "UserAdminService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 70,
                "rawdescription": "\n\nconstructor to init user datasource\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1969,
                            "end": 1975,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialog"
                        },
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1963,
                            "end": 1968,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1989,
                            "end": 2000,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "userService"
                        },
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1983,
                            "end": 1988,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "userAdminService",
                        "type": "UserAdminService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div>\r\n  <mat-form-field>\r\n    <input matInput (keyup)=\"applyFilter($event.target.value)\" placeholder=\"search by Name or ID\">\r\n  </mat-form-field>\r\n  <mat-form-field appearance=\"fill\" class=\"no-label-field\">\r\n      <mat-label>Roles</mat-label>\r\n      <mat-select [formControl]=\"roleFilter\" multiple>\r\n        <mat-option *ngFor=\"let role of roles\" [value]=\"role.roleId\">{{role.shortcut}}</mat-option>\r\n      </mat-select>\r\n  </mat-form-field>\r\n  <mat-form-field appearance=\"fill\" class=\"no-label-field\">\r\n      <mat-label>Grades</mat-label>\r\n      <mat-select [formControl]=\"gradeFilter\" multiple>\r\n        <mat-option *ngFor=\"let grade of grades\" [value]=\"grade.gradeId\">{{grade.shortcut}}</mat-option>\r\n      </mat-select>\r\n  </mat-form-field>\r\n  <mat-form-field appearance=\"fill\" class=\"no-label-field\">\r\n    <mat-label>Teamleads</mat-label>\r\n    <mat-select [formControl]=\"teamleadFilter\" multiple>\r\n      <mat-option *ngFor=\"let teamlead of teamleads\" [value]=\"teamlead.id\">\r\n        {{teamlead.lastName}}, {{teamlead.firstName}} \r\n      </mat-option>\r\n    </mat-select>\r\n  </mat-form-field>\r\n  <button mat-raised-button color=\"primary\" (click)=\"clearFilter()\"> Clear Filter</button>\r\n</div>\r\n\r\n<table mat-table matSort [dataSource]=\"user\">\r\n  <ng-container matColumnDef=\"active\">\r\n    <th mat-header-cell mat-sort-header *matHeaderCellDef></th>\r\n    <td mat-cell *matCellDef=\"let user\" class=\"flag-button\">\r\n      <mat-slide-toggle color=\"primary\" [checked]=\"user.active\" [(ngModel)]=\"user.active\" (change)=\"setUserActiveState(user.id, user.active)\"></mat-slide-toggle>\r\n    </td>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"globalId\">\r\n    <th mat-header-cell  mat-sort-header *matHeaderCellDef>Capgemini ID</th>\r\n    <td mat-cell  *matCellDef=\"let user\">{{user.globalId}}</td>\r\n  </ng-container>\r\n\r\n  <ng-container  matColumnDef=\"lastName\">\r\n    <th mat-header-cell  mat-sort-header *matHeaderCellDef>Name</th>\r\n    <td mat-cell  *matCellDef=\"let user\">{{user.lastName}}, {{user.firstName}}</td>\r\n  </ng-container>\r\n\r\n  <ng-container  matColumnDef=\"email\">\r\n    <th mat-header-cell  mat-sort-header *matHeaderCellDef>Email</th>\r\n    <td mat-cell  *matCellDef=\"let user\">{{ user.email }}</td>\r\n  </ng-container>\r\n\r\n<!--   <ng-container  matColumnDef=\"fte\">\r\n    <th mat-header-cell  mat-sort-header *matHeaderCellDef>FTE</th>\r\n    <td mat-cell *matCellDef=\"let user\">{{ user.fte }}</td>\r\n  </ng-container> -->\r\n\r\n  <ng-container  matColumnDef=\"roleId\">\r\n    <th mat-header-cell  mat-sort-header *matHeaderCellDef>Role</th>\r\n    <td mat-cell *matCellDef=\"let user\">{{ getRole(user.roleId) }}</td>\r\n  </ng-container>\r\n\r\n  <ng-container  matColumnDef=\"gradeId\">\r\n    <th mat-header-cell  mat-sort-header *matHeaderCellDef>Grade</th>\r\n    <td mat-cell *matCellDef=\"let user\">{{ getGrade(user.gradeId) }}</td>\r\n  </ng-container>\r\n\r\n  <ng-container  matColumnDef=\"parentId\">\r\n    <th mat-header-cell  mat-sort-header *matHeaderCellDef>Teamlead</th>\r\n    <td mat-cell *matCellDef=\"let user\">{{ getTeamlead(user.parentId) }}</td>\r\n  </ng-container>\r\n\r\n  <ng-container  matColumnDef=\"admin\">\r\n    <th mat-header-cell  mat-sort-header *matHeaderCellDef>Permissions</th>\r\n    <td mat-cell *matCellDef=\"let user\">{{ user.admin ? 'Administrator' : '-' }}</td>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"edit\">\r\n    <th mat-header-cell *matHeaderCellDef class=\"action-button\"></th>\r\n    <td mat-cell *matCellDef=\"let user\" class=\"action-button\" (click)=\"openUserDialog(user)\"><mat-icon>edit</mat-icon></td>\r\n  </ng-container>\r\n\r\n  <tr mat-header-row *matHeaderRowDef=\"[ 'active', 'globalId', 'lastName', 'email', 'roleId', 'gradeId', 'parentId', 'admin', 'edit']\"></tr>\r\n  <tr mat-row  *matRowDef=\"let row; columns: [ 'active', 'globalId', 'lastName', 'email', 'roleId', 'gradeId', 'parentId', 'admin','edit'];\" ></tr>\r\n</table>\r\n\r\n<div class=\"button-row\">\r\n  <button mat-raised-button (click)=\"addNewUser()\" color=\"primary\">\r\n    <mat-icon>person_add</mat-icon> Add User\r\n  </button>\r\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AdminModule",
            "id": "module-AdminModule-6fd4c656fd7d40c10b3449e6a59937ce",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/admin/admin.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { AppRoutingModule } from '../app-routing.module';\r\nimport { CommonModule } from '@angular/common';\r\nimport { CoreModule } from '../core/core.module';\r\nimport { LayoutModule } from '../layout/layout.module';\r\n\r\nimport { AdminComponent } from './admin.component';\r\nimport { UsersComponent  } from './components/users/users.component';\r\nimport { ProjectsComponent } from './components/projects/projects.component';\r\nimport { MonthsComponent } from './components/months/months.component';\r\nimport { TeamsComponent } from './components/teams/teams.component';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { AddMonthDialog } from './dialogs/add-month/add-month.dialog';\r\nimport { AddProjectDialog } from './dialogs/add-project/add-project.dialog';\r\nimport { AddUserDialog } from './dialogs/add-user/add-user.dialog';\r\nimport { AddSubcoDialog } from './dialogs/add-subco/add-subco.dialog';\r\nimport { AddTeamDialog } from './dialogs/add-team/add-team.dialog';\r\nimport { ConfirmMessageDialog } from './dialogs/confirm-message/confirm-message.dialog';\r\nimport { SubcosComponent } from './components/subcos/subcos.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    CoreModule,\r\n    LayoutModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    AppRoutingModule,\r\n    MatDialogModule,\r\n  ],\r\n  providers: [],\r\n  declarations: [\r\n\t\tAdminComponent,\r\n\t\tUsersComponent,\r\n    ProjectsComponent,\r\n    MonthsComponent,\r\n    TeamsComponent,\r\n    AddProjectDialog,\r\n    AddMonthDialog,\r\n    AddUserDialog,\r\n    AddSubcoDialog,\r\n    AddTeamDialog,\r\n    ConfirmMessageDialog,\r\n    SubcosComponent\r\n  ],\r\n  exports: [\r\n    MatExpansionModule,\r\n  ],\r\n})\r\nexport class AdminModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddMonthDialog"
                        },
                        {
                            "name": "AddProjectDialog"
                        },
                        {
                            "name": "AddSubcoDialog"
                        },
                        {
                            "name": "AddTeamDialog"
                        },
                        {
                            "name": "AddUserDialog"
                        },
                        {
                            "name": "AdminComponent"
                        },
                        {
                            "name": "ConfirmMessageDialog"
                        },
                        {
                            "name": "MonthsComponent"
                        },
                        {
                            "name": "ProjectsComponent"
                        },
                        {
                            "name": "SubcosComponent"
                        },
                        {
                            "name": "TeamsComponent"
                        },
                        {
                            "name": "UsersComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "LayoutModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-8d32dcf1b6c48c24f160f5ec66f562e5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { AppRoutingModule } from \"./app-routing.module\";\r\nimport { CoreModule } from \"./core/core.module\";\r\nimport { LayoutModule } from \"./layout/layout.module\";\r\nimport { ForecastModule } from \"./forecast/forecast.module\";\r\nimport { AdminModule } from \"./admin/admin.module\";\r\nimport { TranslateModule, TranslateLoader } from \"@ngx-translate/core\";\r\nimport { TranslateHttpLoader } from \"@ngx-translate/http-loader\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\r\nimport { AppComponent } from \"./app.component\";\r\nimport { LoginComponent } from \"./login/login.component\";\r\nimport { DatePipe } from \"@angular/common\";\r\nimport { ReactiveFormsModule, FormsModule } from \"@angular/forms\";\r\nimport { SafeHtmlPipe } from \"./core/pipes/safe-html\";\r\nimport { ResetPasswordComponent } from \"./reset-password/reset-password.component\";\r\nimport { DeviceDetectorModule } from \"ngx-device-detector\";\r\n\r\n/**\r\n * AoT requires an exported function for factories\r\n */\r\nexport function HttpLoaderFactory(http: HttpClient): TranslateHttpLoader {\r\n  return new TranslateHttpLoader(http);\r\n}\r\n\r\n@NgModule({\r\n  declarations: [AppComponent, LoginComponent, ResetPasswordComponent],\r\n  imports: [\r\n    BrowserModule,\r\n    FlexLayoutModule,\r\n    BrowserAnimationsModule,\r\n    LayoutModule,\r\n    AppRoutingModule,\r\n    ReactiveFormsModule,\r\n    CoreModule,\r\n    ForecastModule,\r\n    AdminModule,\r\n    FormsModule,\r\n    DeviceDetectorModule.forRoot(),\r\n    TranslateModule.forRoot({\r\n      loader: {\r\n        provide: TranslateLoader,\r\n        useFactory: HttpLoaderFactory,\r\n        deps: [HttpClient]\r\n      }\r\n    })\r\n  ],\r\n  providers: [DatePipe],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "ResetPasswordComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AdminModule"
                        },
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "ForecastModule"
                        },
                        {
                            "name": "LayoutModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-ff10e2a89831812cdb93607f6addd941",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { RoleGuard } from './core/security/role-guard.service';\r\n\r\nimport { LoginComponent } from './login/login.component';\r\nimport { ForecastComponent } from './forecast/forecast.component';\r\nimport { AdminComponent } from './admin/admin.component';\r\n\r\nimport { IndividualComponent } from './forecast/pages/individual/individual.component';\r\nimport { TeamComponent } from './forecast/pages/team/team.component';\r\n\r\n// Currently (June 2019) not possible to use ENV variable in routing module because compodoc doc-generation would fail otherwise\r\nimport { environment as env } from '../environments/environment';\r\nimport { PracticeComponent } from './forecast/pages/practice/practice.component';\r\nimport { ExecutiveComponent } from './forecast/pages/executive/executive.component';\r\nimport { SubcosComponent } from './forecast/pages/subcos/subcos.component'\r\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\r\nimport { StaffingComponent } from './forecast/pages/staffing/staffing.component';\r\nimport { HeadOfPracticesComponent } from './forecast/pages/head-of-practices/head-of-practices.component';\r\nimport { PracticesComponent } from './forecast/pages/practices/practices.component';\r\nimport { CanActivate } from '@angular/router';\r\nimport { FinancialControllerComponent } from './forecast/pages/financial-controller/financial-controller.component';\r\nimport { SubcosExecutiveComponent } from './forecast/pages/subcos-executive/subcos-executive.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: 'login',\r\n    component: LoginComponent,\r\n  },\r\n  {\r\n    path: 'reset-password/:token',\r\n    component: ResetPasswordComponent,\r\n  },\r\n  {\r\n    path: 'admin', // env.routes.admin\r\n    component: AdminComponent,\r\n    canActivate: [RoleGuard],\r\n    data: {\r\n      expectedRole: 100, // env.roles.admin,\r\n    },\r\n  },\r\n  {\r\n    path: 'forecast',\r\n    component: ForecastComponent,\r\n    canActivate: [RoleGuard],\r\n    data: {\r\n      expectedRole: 0, // env.roles.css,\r\n    },\r\n    children: [\r\n      {\r\n        path: 'individual/:id',\r\n        component: IndividualComponent,\r\n      },\r\n      {\r\n        path: 'team/:id',\r\n        component: TeamComponent,\r\n        canActivate: [RoleGuard],\r\n        data: {\r\n          expectedRole: 1, // env.roles.pdl,\r\n        },\r\n      },\r\n      {\r\n        path: 'practice/:id',\r\n        component: PracticeComponent,\r\n        canActivate: [RoleGuard],\r\n        data: {\r\n          expectedRole: 2, // env.roles.pl,\r\n        },\r\n      },\r\n      {\r\n        path: 'executive/:id',\r\n        component: ExecutiveComponent,\r\n        canActivate: [RoleGuard],\r\n        data: {\r\n          expectedRole: 3, // env.roles.msl,\r\n        },\r\n      },\r\n      {\r\n        path: 'executive-detail/:id',\r\n        component: ExecutiveComponent,\r\n        canActivate: [RoleGuard],\r\n        data: {\r\n          expectedRole: 3, // env.roles.msl,\r\n        },\r\n      },\r\n      {\r\n        path: 'staffing/:id',\r\n        component: StaffingComponent,\r\n        canActivate: [RoleGuard],\r\n        data: {\r\n          expectedRole : 3, //env.roles.sm,\r\n        },\r\n      },\r\n      {\r\n        path: \"head-of-practices/:id\",\r\n        component: HeadOfPracticesComponent,\r\n        canActivate: [RoleGuard],\r\n        data: {\r\n          expectedRole: 3, //env.roles.hop\r\n        },\r\n      },\r\n      {\r\n        path: \"practices/:id\",\r\n        component: PracticesComponent,\r\n        canActivate: [RoleGuard],\r\n        data: {\r\n          expectedRole: 3, //env.roles.hop | sm\r\n        },\r\n      },\r\n      {\r\n        path: \"financial-controller/:id\",\r\n        component: FinancialControllerComponent,\r\n        canActivate: [RoleGuard],\r\n        data: {\r\n          expectedRole: 4, //env.roles.fc\r\n        },\r\n      },\r\n      {\r\n        path: \"subcos/:id\",\r\n        component: SubcosComponent,\r\n        canActivate: [RoleGuard],\r\n        data: {\r\n          expectedRole:  0, // env.roles.css,\r\n        },\r\n      },\r\n      {\r\n        path: \"subcos-executive/:id\",\r\n        component: SubcosExecutiveComponent,\r\n        canActivate: [RoleGuard],\r\n        data: {\r\n          expectedRole: 3, //env.roles.hop | sm\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  {\r\n    path: '',\r\n    redirectTo: '/login',\r\n    pathMatch: 'full',\r\n  },\r\n  {\r\n    path: '**',\r\n    redirectTo: '/login',\r\n  },\r\n];\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AppRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-ac3f71945e0ae06e70f616f21771d8bd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/core/core.module.ts",
            "methods": [],
            "sourceCode": "import { \r\n  NgModule, \r\n  ErrorHandler,\r\n} from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport {\r\n  HttpClientModule,\r\n  HttpClientXsrfModule,\r\n  HTTP_INTERCEPTORS,\r\n} from '@angular/common/http';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatNativeDateModule, MatRippleModule } from '@angular/material/core';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatSliderModule } from '@angular/material/slider';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { CdkTableModule } from '@angular/cdk/table';\r\nimport { CovalentChipsModule } from '@covalent/core/chips';\r\nimport { CovalentLayoutModule } from '@covalent/core/layout';\r\nimport { CovalentExpansionPanelModule } from '@covalent/core/expansion-panel';\r\nimport { CovalentDataTableModule } from '@covalent/core/data-table';\r\nimport { CovalentSearchModule } from '@covalent/core/search';\r\nimport { CovalentPagingModule } from '@covalent/core/paging';\r\nimport { CovalentDialogsModule } from '@covalent/core/dialogs';\r\nimport { CovalentNotificationsModule } from '@covalent/core/notifications';\r\nimport { CovalentCommonModule } from '@covalent/core/common';\r\nimport 'hammerjs';\r\n\r\nimport { HttpRequestInterceptorService } from './security/httpRequestInterceptor.service';\r\nimport { RoleGuard } from './security/role-guard.service';\r\nimport { AuthService } from './security/auth.service';\r\nimport { BusinessOperationsService } from './shared/business-operations.service';\r\nimport { PageStateService } from './shared/page-state.service';\r\nimport { LoginService } from './security/login.service';\r\nimport { MyErrorHandler } from './errors/error.service';\r\nimport { DataSharingService } from './shared/data-sharing.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    HttpClientModule,\r\n    HttpClientXsrfModule,\r\n    CdkTableModule,\r\n    RouterModule,\r\n    BrowserAnimationsModule,\r\n  ],\r\n  exports: [\r\n    CommonModule,\r\n    MatAutocompleteModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatChipsModule,\r\n    MatDatepickerModule,\r\n    MatDialogModule,\r\n    MatExpansionModule,\r\n    MatGridListModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatMenuModule,\r\n    MatNativeDateModule,\r\n    MatPaginatorModule,\r\n    MatProgressBarModule,\r\n    MatProgressSpinnerModule,\r\n    MatRadioModule,\r\n    MatRippleModule,\r\n    MatSelectModule,\r\n    MatSidenavModule,\r\n    MatSliderModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n    MatSortModule,\r\n    MatTableModule,\r\n    MatTabsModule,\r\n    MatToolbarModule,\r\n    MatTooltipModule,\r\n    CdkTableModule,\r\n    CovalentChipsModule,\r\n    CovalentLayoutModule,\r\n    CovalentExpansionPanelModule,\r\n    CovalentDataTableModule,\r\n    CovalentSearchModule,\r\n    CovalentPagingModule,\r\n    CovalentNotificationsModule,\r\n    CovalentCommonModule,\r\n    CovalentDialogsModule,\r\n  ],\r\n  declarations: [],\r\n  providers: [\r\n    RoleGuard,\r\n    LoginService,\r\n    AuthService,\r\n    BusinessOperationsService,\r\n    PageStateService,\r\n    DataSharingService,\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: HttpRequestInterceptorService,\r\n      multi: true,\r\n    },\r\n    {\r\n      provide: ErrorHandler,\r\n      useClass: MyErrorHandler,\r\n    }\r\n  ],\r\n})\r\nexport class CoreModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthService"
                        },
                        {
                            "name": "BusinessOperationsService"
                        },
                        {
                            "name": "DataSharingService"
                        },
                        {
                            "name": "HttpRequestInterceptorService"
                        },
                        {
                            "name": "LoginService"
                        },
                        {
                            "name": "PageStateService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ForecastModule",
            "id": "module-ForecastModule-0a7f22c25886b8f125f818640618cdea",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/forecast/forecast.module.ts",
            "methods": [],
            "sourceCode": "import { TranslateModule } from \"@ngx-translate/core\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { AppRoutingModule } from \"../app-routing.module\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { CoreModule } from \"../core/core.module\";\r\nimport { LayoutModule } from \"../layout/layout.module\";\r\nimport { MatBottomSheetModule } from \"@angular/material/bottom-sheet\";\r\nimport { MatDialogModule } from \"@angular/material/dialog\";\r\n\r\nimport { ForecastComponent } from \"./forecast.component\";\r\nimport { IndividualComponent } from \"./pages/individual/individual.component\";\r\nimport { TeamComponent } from \"./pages/team/team.component\";\r\nimport { SubcosComponent } from \"./pages/subcos/subcos.component\";\r\nimport { SubcosExecutiveComponent } from \"./pages/subcos-executive/subcos-executive.component\";\r\n\r\nimport { FcEntryComponent } from \"./components/fc-entry/fc-entry.component\";\r\nimport { FcProjectComponent } from \"./components/fc-project/fc-project.component\";\r\nimport { FcEntrySummaryComponent } from \"./components/fc-entry-summary/fc-entry-summary.component\";\r\nimport { TeamleadSummaryComponent } from \"./components/teamlead-summary/teamlead-summary.component\";\r\nimport { TeamleadMonthComponent } from \"./components/teamlead-month/teamlead-month.component\";\r\nimport { SubcoMonthComponent } from \"./components/subco-month/subco-month.component\";\r\nimport { SubcoSummaryComponent } from \"./components/subco-summary/subco-summary.component\";\r\nimport { SubcoFcEntryComponent } from \"./components/subco-fc-entry/subco-fc-entry.component\"\r\nimport { SubcoFcProjectComponent } from \"./components/subco-fc-project/subco-fc-project.component\"\r\nimport { SubcoExecutiveDetailComponent } from \"./components/subco-executive-detail/subco-executive-detail.component\"\r\nimport { PracticeComponent } from \"./pages/practice/practice.component\";\r\n\r\nimport { ConfirmMessageDialog } from \"./dialogs/confirm-message/confirm-message.dialog\";\r\nimport { ExportCsvDialog } from \"./dialogs/export-csv/export-csv.dialog\";\r\nimport { ProjectRequestDialog } from \"./dialogs/add-project/project-request.dialog\";\r\nimport { AddSubcoDialogEm} from \"./dialogs/add-subco-em/add-subco-em.dialog\";\r\nimport { ExecutiveComponent } from \"./pages/executive/executive.component\";\r\nimport { ExecutiveDetailComponent } from \"./components/executive-detail/executive-detail.component\";\r\nimport { ExecutiveSummaryComponent } from \"./components/executive-summary/executive-summary.component\";\r\n\r\nimport { NgxPowerBiModule } from \"ngx-powerbi\";\r\nimport { ExecutiveFcEntryComponent } from \"./dialogs/executive-fc-entry/executive-fc-entry.component\";\r\nimport { FcEntryDetailDialogComponent } from \"./components/executive-detail/fc-entry-detail-dialog.component\";\r\nimport { ExecutiveChartComponent } from \"./components/executive-chart/executive-chart.component\";\r\nimport { ExecutiveChartPdlComponent} from \"./components/executive-chart-pdl/executive-chart-pdl.component\";\r\nimport { ExecutiveChartPlComponent} from \"./components/executive-chart-pl/executive-chart-pl.component\";\r\nimport { ExecutiveStatsComponent } from './components/executive-stats/executive-stats.component';\r\n\r\nimport { StaffingComponent } from \"./pages/staffing/staffing.component\";\r\nimport { StaffingOverviewComponent } from \"./components/staffing-overview/staffing-overview.component\";\r\nimport { HeadOfPracticesComponent } from \"./pages/head-of-practices/head-of-practices.component\";\r\nimport { PracticesComponent } from \"./pages/practices/practices.component\";\r\nimport { FinancialControllerComponent } from \"./pages/financial-controller/financial-controller.component\";\r\nimport { FinancialControllerOverviewComponent } from \"./components/financial-controller-overview/financial-controller-overview.component\";\r\nimport { FcEntrySummaryVacationWarningComponent } from \"./components/fc-entry-summary/vacation-warning/fc-entry-summary-vacation-warning.component\";\r\nimport { PowerBi } from \"./components/power-bi/power-bi.component\";\r\n\r\nimport { FcEntrySummaryRemDaysWarningComponent } from \"./components/fc-entry-summary/remdays-warning/fc-entry-summary-remdays-warning.component\";\r\nimport { SubcoExecutiveChartComponent } from \"./components/subco-executive-chart/subco-executive-chart.component\";\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatDialogModule,\r\n    MatBottomSheetModule,\r\n    CoreModule,\r\n    LayoutModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    AppRoutingModule,\r\n    TranslateModule,\r\n    NgxPowerBiModule\r\n  ],\r\n  providers: [],\r\n  declarations: [\r\n    ForecastComponent,\r\n    IndividualComponent,\r\n    TeamComponent,\r\n    SubcosComponent,\r\n    SubcosExecutiveComponent,\r\n    PracticeComponent,\r\n    FcEntryComponent,\r\n    FcProjectComponent,\r\n    FcEntrySummaryComponent,\r\n    TeamleadMonthComponent,\r\n    SubcoFcEntryComponent,\r\n    SubcoFcProjectComponent,\r\n    SubcoExecutiveDetailComponent,\r\n    SubcoMonthComponent,\r\n    SubcoSummaryComponent,\r\n    TeamleadSummaryComponent,\r\n    ExecutiveComponent,\r\n    ExecutiveDetailComponent,\r\n    ExecutiveSummaryComponent,\r\n    ConfirmMessageDialog,\r\n    ExportCsvDialog,\r\n    ProjectRequestDialog,\r\n    AddSubcoDialogEm,\r\n    ExecutiveFcEntryComponent,\r\n    FcEntryDetailDialogComponent,\r\n    FcEntrySummaryVacationWarningComponent,\r\n    FcEntrySummaryRemDaysWarningComponent,\r\n    PracticesComponent,\r\n    ExecutiveChartComponent,\r\n    ExecutiveChartPdlComponent,\r\n    ExecutiveChartPlComponent,\r\n    ExecutiveStatsComponent,\r\n    StaffingComponent,\r\n    StaffingOverviewComponent,\r\n    HeadOfPracticesComponent,\r\n    FinancialControllerComponent,\r\n    FinancialControllerOverviewComponent,\r\n    PowerBi,\r\n    SubcoExecutiveChartComponent,\r\n  ],\r\n  exports: []\r\n})\r\nexport class ForecastModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddSubcoDialogEm"
                        },
                        {
                            "name": "ConfirmMessageDialog"
                        },
                        {
                            "name": "ExecutiveChartComponent"
                        },
                        {
                            "name": "ExecutiveChartPdlComponent"
                        },
                        {
                            "name": "ExecutiveChartPlComponent"
                        },
                        {
                            "name": "ExecutiveComponent"
                        },
                        {
                            "name": "ExecutiveDetailComponent"
                        },
                        {
                            "name": "ExecutiveFcEntryComponent"
                        },
                        {
                            "name": "ExecutiveStatsComponent"
                        },
                        {
                            "name": "ExecutiveSummaryComponent"
                        },
                        {
                            "name": "ExportCsvDialog"
                        },
                        {
                            "name": "FcEntryComponent"
                        },
                        {
                            "name": "FcEntryDetailDialogComponent"
                        },
                        {
                            "name": "FcEntrySummaryComponent"
                        },
                        {
                            "name": "FcEntrySummaryRemDaysWarningComponent"
                        },
                        {
                            "name": "FcEntrySummaryVacationWarningComponent"
                        },
                        {
                            "name": "FcProjectComponent"
                        },
                        {
                            "name": "FinancialControllerComponent"
                        },
                        {
                            "name": "FinancialControllerOverviewComponent"
                        },
                        {
                            "name": "ForecastComponent"
                        },
                        {
                            "name": "HeadOfPracticesComponent"
                        },
                        {
                            "name": "IndividualComponent"
                        },
                        {
                            "name": "PowerBi"
                        },
                        {
                            "name": "PracticeComponent"
                        },
                        {
                            "name": "PracticesComponent"
                        },
                        {
                            "name": "ProjectRequestDialog"
                        },
                        {
                            "name": "StaffingComponent"
                        },
                        {
                            "name": "StaffingOverviewComponent"
                        },
                        {
                            "name": "SubcoExecutiveChartComponent"
                        },
                        {
                            "name": "SubcoExecutiveDetailComponent"
                        },
                        {
                            "name": "SubcoFcEntryComponent"
                        },
                        {
                            "name": "SubcoFcProjectComponent"
                        },
                        {
                            "name": "SubcoMonthComponent"
                        },
                        {
                            "name": "SubcoSummaryComponent"
                        },
                        {
                            "name": "SubcosExecutiveComponent"
                        },
                        {
                            "name": "TeamComponent"
                        },
                        {
                            "name": "TeamleadMonthComponent"
                        },
                        {
                            "name": "TeamleadSummaryComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "LayoutModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LayoutModule",
            "id": "module-LayoutModule-340ddc99c5a471b55f4c19f2c103f8b0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/layout/layout.module.ts",
            "methods": [],
            "sourceCode": "import { TranslateModule } from \"@ngx-translate/core\";\r\nimport { CoreModule } from \"../core/core.module\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\n\r\nimport { AppRoutingModule } from \"../app-routing.module\";\r\n\r\nimport { HeaderComponent } from \"./header/header.component\";\r\nimport { FooterComponent } from \"./footer/footer.component\";\r\nimport { TdMediaService } from \"@covalent/core/media\";\r\nimport { GetStarted } from \"./getStartedModal/get-started.component\";\r\nimport { MatDialogModule } from \"@angular/material/dialog\";\r\nimport { MatStepperModule } from \"@angular/material/stepper\";\r\nimport { FaqModalComponent } from \"./faq-modal/faq-modal.component\";\r\nimport { SafeHtmlPipe } from \"../core/pipes/safe-html\";\r\nimport { OrganizationDialogComponent } from \"./organizationModal/organization-dialog.component\";\r\nimport { CdkTreeModule } from \"@angular/cdk/tree\";\r\nimport { MatTreeModule } from \"@angular/material/tree\";\r\nimport { FeedBackDialogComponent } from \"./dialogs/feedback/feedback-dialog.component\";\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatDialogModule,\r\n    CoreModule,\r\n    AppRoutingModule,\r\n    TranslateModule,\r\n    MatStepperModule,\r\n    CdkTreeModule,\r\n    MatTreeModule,\r\n  ],\r\n  providers: [TdMediaService],\r\n  declarations: [\r\n    HeaderComponent,\r\n    FooterComponent,\r\n    GetStarted,\r\n    FaqModalComponent,\r\n    SafeHtmlPipe,\r\n    OrganizationDialogComponent,\r\n    FeedBackDialogComponent,\r\n  ],\r\n  exports: [HeaderComponent, FooterComponent],\r\n})\r\nexport class LayoutModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FaqModalComponent"
                        },
                        {
                            "name": "FeedBackDialogComponent"
                        },
                        {
                            "name": "FooterComponent"
                        },
                        {
                            "name": "GetStarted"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "OrganizationDialogComponent"
                        },
                        {
                            "name": "SafeHtmlPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FooterComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "defaultValue": "{\r\n  production: true,\r\n  version: 'prod',\r\n  api: 'https://forecastr-test.at.capgemini.com/forecastr-api/api/v1/',\r\n  security: 'jwt',\r\n  authPath: 'auth',\r\n  usersPath: 'users',\r\n  utilsPath: 'utilities',\r\n  teamUtilsPath: 'teams',\r\n  projectsPath: 'projects',\r\n  monthsPath: 'months',\r\n  rolePath: 'roles',\r\n  gradePath: 'grades',\r\n  forecastsPath: 'forecasts',\r\n  lockedPath: 'locked',\r\n  savedPath: 'saved',\r\n  teamPath: 'team',\r\n  executivePath: 'company',\r\n  resetPasswordPath: 'password/reset',\r\n  roles: {\r\n    css: 0,\r\n    pdl: 1,\r\n    pl: 2,\r\n    msl: 3,\r\n    fc: 4,\r\n    admin: 100,\r\n  },\r\n  routes: {\r\n    admin: 'admin',\r\n  },\r\n  projectTypes: {\r\n    default: 0,\r\n    nonbillable: 5,\r\n    businessdays: 1,\r\n    trainingdays: 2,\r\n    vacationdays: 3,\r\n    benchdays: 4,\r\n  },\r\n}",
                "rawdescription": "Define global environment variables for prod version",
                "description": "<p>Define global environment variables for prod version</p>\n"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "defaultValue": "{\r\n  production: false,\r\n  version: 'dev',\r\n  api: 'https://defrvm02821533.corp.capgemini.com/forecastr-api/api/v1/',\r\n  // api: 'https://localhost:62345/api/v1/',\r\n  security: 'jwt',\r\n  authPath: 'auth',\r\n  usersPath: 'users',\r\n  utilsPath: 'utilities',\r\n  teamUtilsPath: 'teams',\r\n  projectsPath: 'projects',\r\n  monthsPath: 'months',\r\n  rolePath: 'roles',\r\n  gradePath: 'grades',\r\n  forecastsPath: 'forecasts',\r\n  lockedPath: 'locked',\r\n  savedPath: 'saved',\r\n  teamPath: 'team',\r\n  executivePath: 'company',\r\n  resetPasswordPath: 'password/reset',\r\n  roles: {\r\n    css: 0,\r\n    pdl: 1,\r\n    pl: 2,\r\n    msl: 3,\r\n    fc: 4,\r\n    sm: 5,\r\n    hop: 6,\r\n    admin: 100,\r\n  },\r\n  routes: {\r\n    admin: 'admin',\r\n  },\r\n  projectTypes: {\r\n    default: 0,\r\n    businessdays: 1,\r\n    trainingdays: 2,\r\n    vacationdays: 3,\r\n    benchdays: 4,\r\n    nonbillable: 5,\r\n  },\r\n}",
                "rawdescription": "Define global environment variables",
                "description": "<p>Define global environment variables</p>\n"
            },
            {
                "name": "faqData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/faq-modal/faqData.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n    {\r\n        \"question\": \"<p>1. What does <strong> FTE </strong> mean?</p>\",\r\n        \"answer\": `<ul>\r\n        <li>FTE stands for Full Time Equivalent and is calculated as follows:</li>\r\n        </ul>\r\n        <p><img class=\"image\" src=\"assets/img/faq/f0.png\" /></p>\r\n        <ul>\r\n        <li>\r\n        <p>For example:</p>\r\n        <p>If you work 4 full days per week (32 hours) you are a \"Full time equivalent\" of 0,8:</p>\r\n        <p>[32/40= 0,8 = 80%]. This means that you should slide the bar to 80.<br /><br /></p>\r\n        <img class=\"image\" src=\"assets/img/faq/f1.png\" /><br /> By doing this, also the number of expected working days on the right side above the comment field will change accordingly</li>\r\n        </ul>`,\r\n    },\r\n    {\r\n        \"question\": \"<p>2. What do <strong>ARVE</strong> and <strong>URVE</strong> mean? How are they calculated?</p>\",\r\n        \"answer\": `<ul>\r\n        <li><strong>ARVE </strong>(Assignment Rate Vacation Excluded): The percentage utilization of an employee on both internal and external projects. Vacation days are deducted beforehand from the possible workdays of the period.</li>\r\n        </ul>\r\n        <img class=\"image\" src=\"assets/img/faq/f4.png\" style=\"max-width: 50vw;\"/>\r\n        <ul>\r\n        <li><strong>URVE </strong>(Utilization Rate Vacation Excluded): The percentage workload of an employee on externally billable projects. Vacation days are deducted beforehand from the possible workdays in the period.</li>\r\n        </ul>\r\n        <img class=\"image\" src=\"assets/img/faq/f5.png\" style=\"max-width: 50vw;\"/>\r\n        <p>&nbsp;</p>\r\n        <ul>\r\n        <li>For example:<br /><br />\r\n        <table style=\"height: 226px;\" width=\"281\">\r\n        <tbody>\r\n        <tr>\r\n        <td style=\"width: 213px;\">\r\n        <p>Expected working days</p>\r\n        </td>\r\n        <td style=\"width: 52px;\">\r\n        <p>20</p>\r\n        </td>\r\n        </tr>\r\n        <tr>\r\n        <td style=\"width: 213px;\">\r\n        <p>Billable project days</p>\r\n        </td>\r\n        <td style=\"width: 52px;\">\r\n        <p>5</p>\r\n        </td>\r\n        </tr>\r\n        <tr>\r\n        <td style=\"width: 213px;\">\r\n        <p>Non-billable project days</p>\r\n        </td>\r\n        <td style=\"width: 52px;\">\r\n        <p>6</p>\r\n        </td>\r\n        </tr>\r\n        <tr>\r\n        <td style=\"width: 213px;\">\r\n        <p>Bench Time</p>\r\n        </td>\r\n        <td style=\"width: 52px;\">\r\n        <p>3</p>\r\n        </td>\r\n        </tr>\r\n        <tr>\r\n        <td style=\"width: 213px;\">\r\n        <p>Business Development Days</p>\r\n        </td>\r\n        <td style=\"width: 52px;\">\r\n        <p>4</p>\r\n        </td>\r\n        </tr>\r\n        <tr>\r\n        <td style=\"width: 213px;\">\r\n        <p>Vacation Days</p>\r\n        </td>\r\n        <td style=\"width: 52px;\">\r\n        <p>2</p>\r\n        </td>\r\n        </tr>\r\n        </tbody>\r\n        </table>\r\n        </li>\r\n        </ul>\r\n        <img class=\"ff\" src=\"assets/img/faq/f6.png\" style=\"max-width: 50vw;\"/>`,\r\n    },\r\n    {\r\n        \"question\": \"<p>3. What does <strong>ARVE/URVE Relevance</strong> mean?</p>\",\r\n        \"answer\": ` <p>If you are a Student Consultant and working on non-billable projects the <strong>ARVE/URVE Relevance</strong> button is automatically disabled. This means that your ARVE and URVE are set to 0. Check question 12 for further explanation.</p>`,\r\n    },\r\n    {\r\n        \"question\": \"<p>4. Why are <strong>Austria Vacation</strong>, <strong>AT_Training CSS</strong> and <strong>Bench Time_non-client_APPS </strong>default projects?</p>\",\r\n        \"answer\": `<p></p>This is been decided by the Development Team.</p>`,\r\n    },\r\n    {\r\n        \"question\": \"<p>5. What is the <strong>forecastr risk probability</strong>?</p>\",\r\n        \"answer\": ` <p><img class=\"image\" src=\"assets/img/faq/f2.png\" /></p><p>It is the chance that a risk will occur.</p>\r\n        <p>Here is an explanation of the three possible risk probabilities.</p>\r\n        <ul>\r\n        <li><strong>Firm</strong>: Firm is used for fixed (\"fixed\") commitments or tasks. This includes tasks and assignments that have already been confirmed by the customer and discussed with your PDL. For example: official confirmation by signing a contract or approval of leave in DPW.</li>\r\n        <li><strong>Named Likely</strong>: Named Likely is used when there is already a verbal commitment but the project formalities and onboarding are not yet completed. For example: ISOW has not yet been started.</li>\r\n        <li><strong>Unnamed</strong>: Unnamed is used if there are no concrete commitments yet. For example: bench time, training and business development, as well as interview processes are booked under Unnamed.</li>\r\n        </ul>\r\n        <p>&nbsp;</p>\r\n        <p>It is important to select one of the above-mentioned risk probabilities for each forecasted project.</p>`,\r\n    },\r\n    {\r\n        \"question\": \"<p>6. How do I forecast <strong>Austria Vacation </strong>if I am not (exactly) sure when I will be on vacation? Which risk probability do I choose?</p>\",\r\n        \"answer\": `\r\n        <p>If you are not sure when you will be on vacation, you should choose either</p>\r\n        <ul>\r\n        <li><strong>Named Likely</strong>, when you know when it will be, but it hasn&rsquo;t been confirmed yet or</li>\r\n        <li><strong>Unnamed</strong>, when you don&rsquo;t know when or if it will take place at all. (I might take a day off next month, but I am not sure yet.)</li>\r\n        </ul>\r\n       As soon as you have requested the exact vacation days in DPW and they have been approved by your PDL, you can change the risk probability to <strong>Firm</strong>.</strong>\r\n        `,\r\n    },\r\n    {\r\n        \"question\": \"<p>7. How do I forecast <strong>Bench Time_non-client_APPS</strong>? Which risk probability do I choose?</p>\",\r\n        \"answer\": `<p>If you are not involved in a project, you choose either <strong>AT_CSS_billable time interco.</strong> or <strong>AT_CSS_billable time external</strong>\r\n                   <ul>\r\n                   <li><i>First Month</i>: 5 days</li>\r\n                   <li><i>Second Month</i>: 10 days</li>\r\n                   <li><i>Third Month</i>: 15 days</li>\r\n                   <li><i>Other Months</i>: 15 days</li>\r\n                   </ul>\r\n                   The Risk Probability is <strong>Unnamed<strong>.</p>`,\r\n    },\r\n    {\r\n        \"question\": \"<p>8. How do I forecast a project I cannot find?</p>\",\r\n        \"answer\": `<p>There are two projects you can choose in that case:</p>\r\n        <ul>\r\n        <li><strong>AT_CSS_billable time interco. </strong>for projects outside Austria.</li>\r\n        <li><strong>AT_CSS_billable time external </strong>for projects in Austria.</li>\r\n        </ul>\r\n        <p>The project names may seem a bit confusing. Check question 10 for further explanation.</p>`,\r\n    },\r\n    {\r\n        \"question\": \"<p>9. How do I forecast a project when I don&rsquo;t know the exact number of days I will be working on this project?</p>\",\r\n        \"answer\": `<p><img class=\"image\" src=\"assets/img/faq/f3.png\" style=\"max-width: 50vw;\"/></p><p>If the days you work on a project vary each month depending on the workload, you can fill-in the number of fixed project days, mark if a project is billable or not, and choose the forecast probability <strong>Firm. </strong>After this, try to estimate the varying project days, mark if a project is billable or not and choose the forecast probability <strong>Named Likely </strong>as shown in the screenshot below.</p>`,\r\n    },\r\n    {\r\n        \"question\": \"<p>10. What is the difference between <strong>internal </strong>and<strong> external revenue</strong>?</p>\",\r\n        \"answer\": `<ul>\r\n        <li><strong>External revenue</strong>: Sales generated with projects <strong>in</strong> Austria.</li>\r\n        <li><strong>Internal revenue</strong>: Sales generated with projects <strong>outside</strong> Austria.</li>\r\n        </ul>`,\r\n    },\r\n    {\r\n        \"question\": \"<p>11. What is the difference between <strong>billable </strong>and<strong> non-billable projects</strong>?</p>\",\r\n        \"answer\": `<p>All externally chargeable project days. If days are booked on a customer project, but the customer does not pay for it (e.g.: overrun for fixed price project or training), they do not count as billable project days.</p>`,\r\n    },\r\n    {\r\n        \"question\": \"<p>12. Why does (sometimes) the number of <strong>Bench Time non-client APPS change</strong> after saving my forecast?</p>\",\r\n        \"answer\": `<p>If you forecasted less than expected working days, the system automatically adds the remaining days to the <strong>Bench Time non-client APPS change.</strong></p>`,\r\n    },\r\n    {\r\n        \"question\": \"<p>13. How do I forecast <strong>Team Meetings</strong>?</p>\",\r\n        \"answer\": `<p>Team Meetings are counted to the default project 100528772 - Bench Time_non-client_APPS.</p>\r\n        <p>As the forecast is done on a daily basis, you can use the following formula:</p>\r\n        <img class=\"ff\" src=\"assets/img/faq/f7.png\" style=\"max-width: 50vw;\"/>\r\n        <p>Use a decimal dot instead of a comma.</p>`,\r\n    },\r\n    {\r\n        \"question\": \"<p>14. How do I forecast <strong>sickness and educational absence</strong>?</p>\",\r\n        \"answer\" : \"<p>Sickness and educational absence should be forecasted as Bench Time_non_client_APPS.</p>\"\r\n    }\r\n]"
            },
            {
                "name": "getStartedData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/getStartedModal/getStartedData.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n\r\n    \"css\":[\r\n        {\r\n            \"title\":\"Get Started\",\r\n            \"html\": `<p><span>The following steps will help you get started on how to create your utilization forecast for the upcoming months.</span></p>`,\r\n            \"image\": \"0_css.png\"\r\n        },\r\n        {\r\n            \"title\":\"Select a month\",\r\n            \"html\": `<p><span>Choose the month for which the forecast will be created.<br /></span></p>`,\r\n            \"image\": \"1_css.png\"\r\n        },\r\n        {\r\n            \"title\":\"Forecast expected Vacation, Bench Time and Training Days\",\r\n            \"html\": `<p>Fill-in the number of <strong>Vacation, Bench Time  </strong>and<strong> Training</strong> days you have planned for the selected month, as well as the forecast probability.</p><br>\r\n            <p>Forecast Probabilities:</p>\r\n            <ul>\r\n            <li><strong>Firm</strong>: I am sure I will be part of this event.</li>\r\n            <li><strong>Named Likely</strong>: I know the event, but it hasn&rsquo;t been confirmed yet.</li>\r\n            <li><strong>Unnamed</strong>: I don&rsquo;t know the event, or if it will take place.</li>\r\n            </ul>`,\r\n            \"image\": \"2_css.png\"\r\n        },\r\n        {\r\n            \"title\":\"Forecast client projects\",\r\n            \"html\": `<p>Use the <strong>Add Project </strong>button to forecast additional client projects. Fill-in the number of project days, mark if a project is billable or not, and choose the forecast probability accordingly.</p><br>\r\n            <p>Forecast Probabilities:</p>\r\n            <ul>\r\n            <li><strong>Firm</strong>: I am sure I will be on this project;</li>\r\n            <li><strong>Named Likely</strong>: I know the opportunity, but the contract hasn&rsquo;t been signed yet;</li>\r\n            <li><strong>Unnamed</strong>: I don&rsquo;t know on which project I will be working.</li>\r\n            </ul>\r\n            <p><strong>Hint:</strong> Quickly navigate through the fields by only using the keyboard. E.g. use <strong>Tab </strong>to jump from one field to another, <strong>Enter</strong> to select a project and <strong>Space </strong>to select or deselect a choice field</p>`,\r\n            \"image\": \"3_css.png\"\r\n        },\r\n        {\r\n            \"title\":\"Review the forecast summary\",\r\n            \"html\": `<p>Review the summary panel before you <strong>Save and Submit </strong>your forecast entries.&nbsp;</p>\r\n            <ul>\r\n            <li><strong>ARVE</strong>: The percentage workload of an employee on externally billable projects.</li>\r\n            <li><strong>URVE</strong>: The percentage utilization of an employee on both internal and external projects (vacation days are deducted beforehand from the possible working days).\r\n            </li>\r\n            </ul>`,\r\n            \"image\": \"4_css.png\"\r\n        },\r\n    ],\r\n\r\n    \"pdl\" :[\r\n        {\r\n            \"title\":\"New\",\r\n            \"html\": `<p><span>While having an employee open in the Team-Tab, you can switch to the next month and the tab will scroll automatically to this employee.</span></p>`,\r\n            \"image\": \"-1_pdl.png\",\r\n            \"news\": \"1\",\r\n        },\r\n        {\r\n            \"title\":\"Get Started\",\r\n            \"html\": `<p><span lang=\"EN-US\">The following steps will help you get started on how to create the utilization forecast for yourself or for your team for the upcoming months.</span></p>`,\r\n            \"image\": \"0_pdl.png\"\r\n        },\r\n        {\r\n            \"title\":\"Select a month\",\r\n            \"html\": `<p>Choose the month for which the forecast will be created.</p>`,\r\n            \"image\": \"1_pdl.png\"\r\n        },\r\n        {\r\n            \"title\":\"Forecast expected Vacation, Bench Time and Training Days\",\r\n            \"html\": `<p>Fill-in the number of <strong>Vacation, Bench Time </strong>and<strong> Training</strong> days you have planned for the selected month, as well as the forecast probability.</p><br>\r\n            <p>Forecast Probabilities:</p>\r\n            <ul>\r\n            <li><strong>Firm</strong>: I am sure I will be part of this event.</li>\r\n            <li><strong>Named Likely</strong>: I know the event, but it hasn&rsquo;t been confirmed yet.</li>\r\n            <li><strong>Unnamed</strong>: I don&rsquo;t know the event, or if it will take place.</li>\r\n            </ul>`,\r\n            \"image\": \"2_pdl.png\"\r\n        },\r\n        {\r\n            \"title\":\"Forecast client projects\",\r\n            \"html\": `<p>Use the <strong>Add Project </strong>button to forecast additional client projects. Fill-in the number of project days, mark if a project is billable or not, fill-in the Charge Out Rate (COR), which is only visible for teamleads. Mark if a project is external or internal revenue, and choose the forecast probability accordingly.</p><br>\r\n            <p>Forecast Probabilities:</p>\r\n            <ul>\r\n            <li><strong>Firm</strong>: I am sure I will be on this project.</li>\r\n            <li><strong>Named Likely</strong>: I know the opportunity, but the contract hasn&rsquo;t been signed yet.</li>\r\n            <li><strong>Unnamed</strong>: I don&rsquo;t know on which project I will be working.</li>\r\n            </ul>\r\n            <p><strong>Hint:</strong> Quickly navigate through the fields by only using the keyboard. E.g. use <strong>Tab </strong>to jump from one field to another, <strong>Enter</strong> to select a project and <strong>Space </strong>to select or deselect a choice field.</p>`,\r\n            \"image\": \"3_pdl.png\"\r\n        },\r\n        {\r\n            \"title\":\"Review the forecast summary\",\r\n            \"html\": `<p>Review the summary panel before you <strong>Save and Submit </strong>your forecast entries. <br /></p>\r\n            <ul>\r\n            <li><strong>ARVE</strong>: The percentage workload of an employee on externally billable projects.</li>\r\n            <li><strong>URVE</strong>: The percentage utilization of an employee on both internal and external projects (vacation days are deducted beforehand from the possible working days).</li>\r\n            </ul>`,\r\n            \"image\": \"4_pdl.png\"\r\n        },\r\n        {\r\n            \"title\":\"Select the team view\",\r\n            \"html\": `<p>Switch between your individual view and the team view by using the upper-right corner toggle buttons.</p>`,\r\n            \"image\": \"5_pdl.png\"\r\n        },\r\n        {\r\n            \"title\":\"Review the locks\",\r\n            \"html\": `<p>The Lock icon with standing CSS below means, that you as the PDL must submit this Forecast. The Lock icon without any text means, that you have already submitted this Forecast.</p>`,\r\n            \"image\": \"6_pdl.png\"\r\n        },\r\n        {\r\n            \"title\":\"Review and update the team forecast\",\r\n            \"html\": `<p>Expand and update your team&rsquo;s utilization forecast. Fill-in the COR, mark if a project is external or internal revenue, and <strong>Submit</strong> the forecast for each team member individually.</p><br> <p> Once a forecast is submitted, it becomes <strong>locked</strong> and cannot be updated by the team member. Locked forecast entries can easily be unlocked using the <strong>Unlock </strong>button.</p>`,\r\n            \"image\": \"7_pdl.png\"\r\n        },\r\n        {\r\n            \"title\":\"Review the team forecast summary\",\r\n            \"html\": `<p>Review the summary panel before you <strong>Export </strong>your team&rsquo;s forecast entries. </p>\r\n            <ul>\r\n            <li>\r\n            <strong>ARVE</strong>: The average workload of all team members on externally billable projects.\r\n            </li>\r\n            <li><strong>URVE</strong>: The average utilization of all team members on both internal and external projects (vacation days are deducted beforehand from the possible working days).</li>\r\n            <li><strong>ROS</strong>: Revenue Own Staff.</li>\r\n            </ul>`,\r\n            \"image\": \"8_pdl.png\"\r\n        },\r\n       \r\n        \r\n    ],  \r\n    \"pl\":[\r\n        {\r\n            \"title\":\"New\",\r\n            \"html\": `<p><span>While having an employee open in the Team-Tab or Practice-Tab, you can switch to the next month and the tab will scroll automatically to this employee.</span></p>`,\r\n            \"image\": \"-1_pl.png\",\r\n            \"news\": \"1\",\r\n        },\r\n        {\r\n            \"title\":\"Get Started\",\r\n            \"html\": `<p><span>The following steps will help you get started on how to create the utilization forecast for yourself or for your team for the upcoming months.</span></p>`,\r\n            \"image\": \"0_pl.png\"\r\n        },\r\n        {\r\n            \"title\":\"Select a month\",\r\n            \"html\": `<p>Choose the month for which the forecast will be created.</p>`,\r\n            \"image\": \"1_pl.png\"\r\n        },\r\n        {\r\n            \"title\":\"Forecast expected Vacation, Bench Time and Training Days\",\r\n            \"html\": `<p>Fill-in the number of <strong>Vacation, Bench Time </strong>and<strong> Training</strong> days you have planned for the selected month, as well as the forecast probability.</p><br>`,\r\n            \"image\": \"2_pl.png\"\r\n        }, {\r\n            \"title\":\"Forecast client projects\",\r\n            \"html\": `<p>Use the <strong>Add Project</strong> button to forecast additional client projects. Fill-in the number of project days, mark if a project is billable or not, fill-in the Charge Out Rate (COR), which is only visible for you as a PDL/PL. Mark if a project is external or internal revenue and choose the forecast probability accordingly.</p>\r\n            <p><strong>Hint:</strong> Quickly navigate through the fields by only using the keyboard. E.g. use <strong>Tab </strong>to jump from one field to another, <strong>Enter</strong> to select a project and <strong>Space </strong>to select or deselect a choice field.</p>`,\r\n            \"image\": \"3_pl.png\"\r\n        }, {\r\n            \"title\":\"Review the forecast summary\",\r\n            \"html\": `<p>Review the summary panel before you <strong>Save </strong>your forecast entries. <br /></p>`,\r\n            \"image\": \"4_pl.png\"\r\n        },\r\n        {\r\n            \"title\":\"Select the team view\",\r\n            \"html\": `<p>Switch between your individual view and the team view by using the upper-right corner toggle buttons.</p>`,\r\n            \"image\": \"5_pl.png\"\r\n        },{\r\n            \"title\":\"Review and update the team forecast\",\r\n            \"html\": `<p>Expand and update your team&rsquo;s utilization forecast. Fill-in the COR, mark if a project is external or internal revenue, and <strong>Submit</strong> the forecast for each team member individually.</p><br> <p> Once a forecast is submitted, it becomes <strong>locked</strong> and cannot be updated by the team member. Locked forecast entries can easily be unlocked using the <strong>Unlock </strong>button.</p>`,\r\n            \"image\": \"6_pl.png\"\r\n        },\r\n        {\r\n            \"title\":\"Review the team forecast summary\",\r\n            \"html\": `<p>Review the summary panel before you <strong>Export </strong>your team&rsquo;s forecast entries. </p>`,\r\n            \"image\": \"7_pl.png\"\r\n        },\r\n        {\r\n            \"title\":\"Select the practice lead view\",\r\n            \"html\": `<p>Switch between your individual, team and practice lead view using the upper-right corner toggle buttons. </p>`,\r\n            \"image\": \"8_pl.png\"\r\n        },\r\n        {\r\n            \"title\":\"Review and update your team members’ forecasts.\",\r\n            \"html\": `<p>Expand to update the utilization forecasts. </p>`,\r\n            \"image\": \"9_pl.png\"\r\n        },\r\n        {\r\n            \"title\":\"Review the forecast summary and submit your team members’ forecasts.\",\r\n            \"html\": `<p>Review and submit all forecast entries to the Market Segment Lead.</p>`,\r\n            \"image\": \"10_pl.png\"\r\n        },\r\n    ]\r\n}",
                "rawdescription": "Data for getStarted",
                "description": "<p>Data for getStarted</p>\n"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "TREE_DATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/organizationModal/organization-dialog.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HierarchyNode[]",
                "defaultValue": "[]"
            }
        ],
        "functions": [
            {
                "name": "HttpLoaderFactory",
                "file": "src/app/app.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>AoT requires an exported function for factories</p>\n",
                "args": [
                    {
                        "name": "http",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "TranslateHttpLoader",
                "jsdoctags": [
                    {
                        "name": "http",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "passwordMatcherValidator",
                "file": "src/app/reset-password/reset-password.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "control",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "literal type | null",
                "jsdoctags": [
                    {
                        "name": "control",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "defaultValue": "{\r\n  production: true,\r\n  version: 'prod',\r\n  api: 'https://forecastr-test.at.capgemini.com/forecastr-api/api/v1/',\r\n  security: 'jwt',\r\n  authPath: 'auth',\r\n  usersPath: 'users',\r\n  utilsPath: 'utilities',\r\n  teamUtilsPath: 'teams',\r\n  projectsPath: 'projects',\r\n  monthsPath: 'months',\r\n  rolePath: 'roles',\r\n  gradePath: 'grades',\r\n  forecastsPath: 'forecasts',\r\n  lockedPath: 'locked',\r\n  savedPath: 'saved',\r\n  teamPath: 'team',\r\n  executivePath: 'company',\r\n  resetPasswordPath: 'password/reset',\r\n  roles: {\r\n    css: 0,\r\n    pdl: 1,\r\n    pl: 2,\r\n    msl: 3,\r\n    fc: 4,\r\n    admin: 100,\r\n  },\r\n  routes: {\r\n    admin: 'admin',\r\n  },\r\n  projectTypes: {\r\n    default: 0,\r\n    nonbillable: 5,\r\n    businessdays: 1,\r\n    trainingdays: 2,\r\n    vacationdays: 3,\r\n    benchdays: 4,\r\n  },\r\n}",
                    "rawdescription": "Define global environment variables for prod version",
                    "description": "<p>Define global environment variables for prod version</p>\n"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "defaultValue": "{\r\n  production: false,\r\n  version: 'dev',\r\n  api: 'https://defrvm02821533.corp.capgemini.com/forecastr-api/api/v1/',\r\n  // api: 'https://localhost:62345/api/v1/',\r\n  security: 'jwt',\r\n  authPath: 'auth',\r\n  usersPath: 'users',\r\n  utilsPath: 'utilities',\r\n  teamUtilsPath: 'teams',\r\n  projectsPath: 'projects',\r\n  monthsPath: 'months',\r\n  rolePath: 'roles',\r\n  gradePath: 'grades',\r\n  forecastsPath: 'forecasts',\r\n  lockedPath: 'locked',\r\n  savedPath: 'saved',\r\n  teamPath: 'team',\r\n  executivePath: 'company',\r\n  resetPasswordPath: 'password/reset',\r\n  roles: {\r\n    css: 0,\r\n    pdl: 1,\r\n    pl: 2,\r\n    msl: 3,\r\n    fc: 4,\r\n    sm: 5,\r\n    hop: 6,\r\n    admin: 100,\r\n  },\r\n  routes: {\r\n    admin: 'admin',\r\n  },\r\n  projectTypes: {\r\n    default: 0,\r\n    businessdays: 1,\r\n    trainingdays: 2,\r\n    vacationdays: 3,\r\n    benchdays: 4,\r\n    nonbillable: 5,\r\n  },\r\n}",
                    "rawdescription": "Define global environment variables",
                    "description": "<p>Define global environment variables</p>\n"
                }
            ],
            "src/app/layout/faq-modal/faqData.ts": [
                {
                    "name": "faqData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/faq-modal/faqData.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n    {\r\n        \"question\": \"<p>1. What does <strong> FTE </strong> mean?</p>\",\r\n        \"answer\": `<ul>\r\n        <li>FTE stands for Full Time Equivalent and is calculated as follows:</li>\r\n        </ul>\r\n        <p><img class=\"image\" src=\"assets/img/faq/f0.png\" /></p>\r\n        <ul>\r\n        <li>\r\n        <p>For example:</p>\r\n        <p>If you work 4 full days per week (32 hours) you are a \"Full time equivalent\" of 0,8:</p>\r\n        <p>[32/40= 0,8 = 80%]. This means that you should slide the bar to 80.<br /><br /></p>\r\n        <img class=\"image\" src=\"assets/img/faq/f1.png\" /><br /> By doing this, also the number of expected working days on the right side above the comment field will change accordingly</li>\r\n        </ul>`,\r\n    },\r\n    {\r\n        \"question\": \"<p>2. What do <strong>ARVE</strong> and <strong>URVE</strong> mean? How are they calculated?</p>\",\r\n        \"answer\": `<ul>\r\n        <li><strong>ARVE </strong>(Assignment Rate Vacation Excluded): The percentage utilization of an employee on both internal and external projects. Vacation days are deducted beforehand from the possible workdays of the period.</li>\r\n        </ul>\r\n        <img class=\"image\" src=\"assets/img/faq/f4.png\" style=\"max-width: 50vw;\"/>\r\n        <ul>\r\n        <li><strong>URVE </strong>(Utilization Rate Vacation Excluded): The percentage workload of an employee on externally billable projects. Vacation days are deducted beforehand from the possible workdays in the period.</li>\r\n        </ul>\r\n        <img class=\"image\" src=\"assets/img/faq/f5.png\" style=\"max-width: 50vw;\"/>\r\n        <p>&nbsp;</p>\r\n        <ul>\r\n        <li>For example:<br /><br />\r\n        <table style=\"height: 226px;\" width=\"281\">\r\n        <tbody>\r\n        <tr>\r\n        <td style=\"width: 213px;\">\r\n        <p>Expected working days</p>\r\n        </td>\r\n        <td style=\"width: 52px;\">\r\n        <p>20</p>\r\n        </td>\r\n        </tr>\r\n        <tr>\r\n        <td style=\"width: 213px;\">\r\n        <p>Billable project days</p>\r\n        </td>\r\n        <td style=\"width: 52px;\">\r\n        <p>5</p>\r\n        </td>\r\n        </tr>\r\n        <tr>\r\n        <td style=\"width: 213px;\">\r\n        <p>Non-billable project days</p>\r\n        </td>\r\n        <td style=\"width: 52px;\">\r\n        <p>6</p>\r\n        </td>\r\n        </tr>\r\n        <tr>\r\n        <td style=\"width: 213px;\">\r\n        <p>Bench Time</p>\r\n        </td>\r\n        <td style=\"width: 52px;\">\r\n        <p>3</p>\r\n        </td>\r\n        </tr>\r\n        <tr>\r\n        <td style=\"width: 213px;\">\r\n        <p>Business Development Days</p>\r\n        </td>\r\n        <td style=\"width: 52px;\">\r\n        <p>4</p>\r\n        </td>\r\n        </tr>\r\n        <tr>\r\n        <td style=\"width: 213px;\">\r\n        <p>Vacation Days</p>\r\n        </td>\r\n        <td style=\"width: 52px;\">\r\n        <p>2</p>\r\n        </td>\r\n        </tr>\r\n        </tbody>\r\n        </table>\r\n        </li>\r\n        </ul>\r\n        <img class=\"ff\" src=\"assets/img/faq/f6.png\" style=\"max-width: 50vw;\"/>`,\r\n    },\r\n    {\r\n        \"question\": \"<p>3. What does <strong>ARVE/URVE Relevance</strong> mean?</p>\",\r\n        \"answer\": ` <p>If you are a Student Consultant and working on non-billable projects the <strong>ARVE/URVE Relevance</strong> button is automatically disabled. This means that your ARVE and URVE are set to 0. Check question 12 for further explanation.</p>`,\r\n    },\r\n    {\r\n        \"question\": \"<p>4. Why are <strong>Austria Vacation</strong>, <strong>AT_Training CSS</strong> and <strong>Bench Time_non-client_APPS </strong>default projects?</p>\",\r\n        \"answer\": `<p></p>This is been decided by the Development Team.</p>`,\r\n    },\r\n    {\r\n        \"question\": \"<p>5. What is the <strong>forecastr risk probability</strong>?</p>\",\r\n        \"answer\": ` <p><img class=\"image\" src=\"assets/img/faq/f2.png\" /></p><p>It is the chance that a risk will occur.</p>\r\n        <p>Here is an explanation of the three possible risk probabilities.</p>\r\n        <ul>\r\n        <li><strong>Firm</strong>: Firm is used for fixed (\"fixed\") commitments or tasks. This includes tasks and assignments that have already been confirmed by the customer and discussed with your PDL. For example: official confirmation by signing a contract or approval of leave in DPW.</li>\r\n        <li><strong>Named Likely</strong>: Named Likely is used when there is already a verbal commitment but the project formalities and onboarding are not yet completed. For example: ISOW has not yet been started.</li>\r\n        <li><strong>Unnamed</strong>: Unnamed is used if there are no concrete commitments yet. For example: bench time, training and business development, as well as interview processes are booked under Unnamed.</li>\r\n        </ul>\r\n        <p>&nbsp;</p>\r\n        <p>It is important to select one of the above-mentioned risk probabilities for each forecasted project.</p>`,\r\n    },\r\n    {\r\n        \"question\": \"<p>6. How do I forecast <strong>Austria Vacation </strong>if I am not (exactly) sure when I will be on vacation? Which risk probability do I choose?</p>\",\r\n        \"answer\": `\r\n        <p>If you are not sure when you will be on vacation, you should choose either</p>\r\n        <ul>\r\n        <li><strong>Named Likely</strong>, when you know when it will be, but it hasn&rsquo;t been confirmed yet or</li>\r\n        <li><strong>Unnamed</strong>, when you don&rsquo;t know when or if it will take place at all. (I might take a day off next month, but I am not sure yet.)</li>\r\n        </ul>\r\n       As soon as you have requested the exact vacation days in DPW and they have been approved by your PDL, you can change the risk probability to <strong>Firm</strong>.</strong>\r\n        `,\r\n    },\r\n    {\r\n        \"question\": \"<p>7. How do I forecast <strong>Bench Time_non-client_APPS</strong>? Which risk probability do I choose?</p>\",\r\n        \"answer\": `<p>If you are not involved in a project, you choose either <strong>AT_CSS_billable time interco.</strong> or <strong>AT_CSS_billable time external</strong>\r\n                   <ul>\r\n                   <li><i>First Month</i>: 5 days</li>\r\n                   <li><i>Second Month</i>: 10 days</li>\r\n                   <li><i>Third Month</i>: 15 days</li>\r\n                   <li><i>Other Months</i>: 15 days</li>\r\n                   </ul>\r\n                   The Risk Probability is <strong>Unnamed<strong>.</p>`,\r\n    },\r\n    {\r\n        \"question\": \"<p>8. How do I forecast a project I cannot find?</p>\",\r\n        \"answer\": `<p>There are two projects you can choose in that case:</p>\r\n        <ul>\r\n        <li><strong>AT_CSS_billable time interco. </strong>for projects outside Austria.</li>\r\n        <li><strong>AT_CSS_billable time external </strong>for projects in Austria.</li>\r\n        </ul>\r\n        <p>The project names may seem a bit confusing. Check question 10 for further explanation.</p>`,\r\n    },\r\n    {\r\n        \"question\": \"<p>9. How do I forecast a project when I don&rsquo;t know the exact number of days I will be working on this project?</p>\",\r\n        \"answer\": `<p><img class=\"image\" src=\"assets/img/faq/f3.png\" style=\"max-width: 50vw;\"/></p><p>If the days you work on a project vary each month depending on the workload, you can fill-in the number of fixed project days, mark if a project is billable or not, and choose the forecast probability <strong>Firm. </strong>After this, try to estimate the varying project days, mark if a project is billable or not and choose the forecast probability <strong>Named Likely </strong>as shown in the screenshot below.</p>`,\r\n    },\r\n    {\r\n        \"question\": \"<p>10. What is the difference between <strong>internal </strong>and<strong> external revenue</strong>?</p>\",\r\n        \"answer\": `<ul>\r\n        <li><strong>External revenue</strong>: Sales generated with projects <strong>in</strong> Austria.</li>\r\n        <li><strong>Internal revenue</strong>: Sales generated with projects <strong>outside</strong> Austria.</li>\r\n        </ul>`,\r\n    },\r\n    {\r\n        \"question\": \"<p>11. What is the difference between <strong>billable </strong>and<strong> non-billable projects</strong>?</p>\",\r\n        \"answer\": `<p>All externally chargeable project days. If days are booked on a customer project, but the customer does not pay for it (e.g.: overrun for fixed price project or training), they do not count as billable project days.</p>`,\r\n    },\r\n    {\r\n        \"question\": \"<p>12. Why does (sometimes) the number of <strong>Bench Time non-client APPS change</strong> after saving my forecast?</p>\",\r\n        \"answer\": `<p>If you forecasted less than expected working days, the system automatically adds the remaining days to the <strong>Bench Time non-client APPS change.</strong></p>`,\r\n    },\r\n    {\r\n        \"question\": \"<p>13. How do I forecast <strong>Team Meetings</strong>?</p>\",\r\n        \"answer\": `<p>Team Meetings are counted to the default project 100528772 - Bench Time_non-client_APPS.</p>\r\n        <p>As the forecast is done on a daily basis, you can use the following formula:</p>\r\n        <img class=\"ff\" src=\"assets/img/faq/f7.png\" style=\"max-width: 50vw;\"/>\r\n        <p>Use a decimal dot instead of a comma.</p>`,\r\n    },\r\n    {\r\n        \"question\": \"<p>14. How do I forecast <strong>sickness and educational absence</strong>?</p>\",\r\n        \"answer\" : \"<p>Sickness and educational absence should be forecasted as Bench Time_non_client_APPS.</p>\"\r\n    }\r\n]"
                }
            ],
            "src/app/layout/getStartedModal/getStartedData.ts": [
                {
                    "name": "getStartedData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/getStartedModal/getStartedData.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n\r\n    \"css\":[\r\n        {\r\n            \"title\":\"Get Started\",\r\n            \"html\": `<p><span>The following steps will help you get started on how to create your utilization forecast for the upcoming months.</span></p>`,\r\n            \"image\": \"0_css.png\"\r\n        },\r\n        {\r\n            \"title\":\"Select a month\",\r\n            \"html\": `<p><span>Choose the month for which the forecast will be created.<br /></span></p>`,\r\n            \"image\": \"1_css.png\"\r\n        },\r\n        {\r\n            \"title\":\"Forecast expected Vacation, Bench Time and Training Days\",\r\n            \"html\": `<p>Fill-in the number of <strong>Vacation, Bench Time  </strong>and<strong> Training</strong> days you have planned for the selected month, as well as the forecast probability.</p><br>\r\n            <p>Forecast Probabilities:</p>\r\n            <ul>\r\n            <li><strong>Firm</strong>: I am sure I will be part of this event.</li>\r\n            <li><strong>Named Likely</strong>: I know the event, but it hasn&rsquo;t been confirmed yet.</li>\r\n            <li><strong>Unnamed</strong>: I don&rsquo;t know the event, or if it will take place.</li>\r\n            </ul>`,\r\n            \"image\": \"2_css.png\"\r\n        },\r\n        {\r\n            \"title\":\"Forecast client projects\",\r\n            \"html\": `<p>Use the <strong>Add Project </strong>button to forecast additional client projects. Fill-in the number of project days, mark if a project is billable or not, and choose the forecast probability accordingly.</p><br>\r\n            <p>Forecast Probabilities:</p>\r\n            <ul>\r\n            <li><strong>Firm</strong>: I am sure I will be on this project;</li>\r\n            <li><strong>Named Likely</strong>: I know the opportunity, but the contract hasn&rsquo;t been signed yet;</li>\r\n            <li><strong>Unnamed</strong>: I don&rsquo;t know on which project I will be working.</li>\r\n            </ul>\r\n            <p><strong>Hint:</strong> Quickly navigate through the fields by only using the keyboard. E.g. use <strong>Tab </strong>to jump from one field to another, <strong>Enter</strong> to select a project and <strong>Space </strong>to select or deselect a choice field</p>`,\r\n            \"image\": \"3_css.png\"\r\n        },\r\n        {\r\n            \"title\":\"Review the forecast summary\",\r\n            \"html\": `<p>Review the summary panel before you <strong>Save and Submit </strong>your forecast entries.&nbsp;</p>\r\n            <ul>\r\n            <li><strong>ARVE</strong>: The percentage workload of an employee on externally billable projects.</li>\r\n            <li><strong>URVE</strong>: The percentage utilization of an employee on both internal and external projects (vacation days are deducted beforehand from the possible working days).\r\n            </li>\r\n            </ul>`,\r\n            \"image\": \"4_css.png\"\r\n        },\r\n    ],\r\n\r\n    \"pdl\" :[\r\n        {\r\n            \"title\":\"New\",\r\n            \"html\": `<p><span>While having an employee open in the Team-Tab, you can switch to the next month and the tab will scroll automatically to this employee.</span></p>`,\r\n            \"image\": \"-1_pdl.png\",\r\n            \"news\": \"1\",\r\n        },\r\n        {\r\n            \"title\":\"Get Started\",\r\n            \"html\": `<p><span lang=\"EN-US\">The following steps will help you get started on how to create the utilization forecast for yourself or for your team for the upcoming months.</span></p>`,\r\n            \"image\": \"0_pdl.png\"\r\n        },\r\n        {\r\n            \"title\":\"Select a month\",\r\n            \"html\": `<p>Choose the month for which the forecast will be created.</p>`,\r\n            \"image\": \"1_pdl.png\"\r\n        },\r\n        {\r\n            \"title\":\"Forecast expected Vacation, Bench Time and Training Days\",\r\n            \"html\": `<p>Fill-in the number of <strong>Vacation, Bench Time </strong>and<strong> Training</strong> days you have planned for the selected month, as well as the forecast probability.</p><br>\r\n            <p>Forecast Probabilities:</p>\r\n            <ul>\r\n            <li><strong>Firm</strong>: I am sure I will be part of this event.</li>\r\n            <li><strong>Named Likely</strong>: I know the event, but it hasn&rsquo;t been confirmed yet.</li>\r\n            <li><strong>Unnamed</strong>: I don&rsquo;t know the event, or if it will take place.</li>\r\n            </ul>`,\r\n            \"image\": \"2_pdl.png\"\r\n        },\r\n        {\r\n            \"title\":\"Forecast client projects\",\r\n            \"html\": `<p>Use the <strong>Add Project </strong>button to forecast additional client projects. Fill-in the number of project days, mark if a project is billable or not, fill-in the Charge Out Rate (COR), which is only visible for teamleads. Mark if a project is external or internal revenue, and choose the forecast probability accordingly.</p><br>\r\n            <p>Forecast Probabilities:</p>\r\n            <ul>\r\n            <li><strong>Firm</strong>: I am sure I will be on this project.</li>\r\n            <li><strong>Named Likely</strong>: I know the opportunity, but the contract hasn&rsquo;t been signed yet.</li>\r\n            <li><strong>Unnamed</strong>: I don&rsquo;t know on which project I will be working.</li>\r\n            </ul>\r\n            <p><strong>Hint:</strong> Quickly navigate through the fields by only using the keyboard. E.g. use <strong>Tab </strong>to jump from one field to another, <strong>Enter</strong> to select a project and <strong>Space </strong>to select or deselect a choice field.</p>`,\r\n            \"image\": \"3_pdl.png\"\r\n        },\r\n        {\r\n            \"title\":\"Review the forecast summary\",\r\n            \"html\": `<p>Review the summary panel before you <strong>Save and Submit </strong>your forecast entries. <br /></p>\r\n            <ul>\r\n            <li><strong>ARVE</strong>: The percentage workload of an employee on externally billable projects.</li>\r\n            <li><strong>URVE</strong>: The percentage utilization of an employee on both internal and external projects (vacation days are deducted beforehand from the possible working days).</li>\r\n            </ul>`,\r\n            \"image\": \"4_pdl.png\"\r\n        },\r\n        {\r\n            \"title\":\"Select the team view\",\r\n            \"html\": `<p>Switch between your individual view and the team view by using the upper-right corner toggle buttons.</p>`,\r\n            \"image\": \"5_pdl.png\"\r\n        },\r\n        {\r\n            \"title\":\"Review the locks\",\r\n            \"html\": `<p>The Lock icon with standing CSS below means, that you as the PDL must submit this Forecast. The Lock icon without any text means, that you have already submitted this Forecast.</p>`,\r\n            \"image\": \"6_pdl.png\"\r\n        },\r\n        {\r\n            \"title\":\"Review and update the team forecast\",\r\n            \"html\": `<p>Expand and update your team&rsquo;s utilization forecast. Fill-in the COR, mark if a project is external or internal revenue, and <strong>Submit</strong> the forecast for each team member individually.</p><br> <p> Once a forecast is submitted, it becomes <strong>locked</strong> and cannot be updated by the team member. Locked forecast entries can easily be unlocked using the <strong>Unlock </strong>button.</p>`,\r\n            \"image\": \"7_pdl.png\"\r\n        },\r\n        {\r\n            \"title\":\"Review the team forecast summary\",\r\n            \"html\": `<p>Review the summary panel before you <strong>Export </strong>your team&rsquo;s forecast entries. </p>\r\n            <ul>\r\n            <li>\r\n            <strong>ARVE</strong>: The average workload of all team members on externally billable projects.\r\n            </li>\r\n            <li><strong>URVE</strong>: The average utilization of all team members on both internal and external projects (vacation days are deducted beforehand from the possible working days).</li>\r\n            <li><strong>ROS</strong>: Revenue Own Staff.</li>\r\n            </ul>`,\r\n            \"image\": \"8_pdl.png\"\r\n        },\r\n       \r\n        \r\n    ],  \r\n    \"pl\":[\r\n        {\r\n            \"title\":\"New\",\r\n            \"html\": `<p><span>While having an employee open in the Team-Tab or Practice-Tab, you can switch to the next month and the tab will scroll automatically to this employee.</span></p>`,\r\n            \"image\": \"-1_pl.png\",\r\n            \"news\": \"1\",\r\n        },\r\n        {\r\n            \"title\":\"Get Started\",\r\n            \"html\": `<p><span>The following steps will help you get started on how to create the utilization forecast for yourself or for your team for the upcoming months.</span></p>`,\r\n            \"image\": \"0_pl.png\"\r\n        },\r\n        {\r\n            \"title\":\"Select a month\",\r\n            \"html\": `<p>Choose the month for which the forecast will be created.</p>`,\r\n            \"image\": \"1_pl.png\"\r\n        },\r\n        {\r\n            \"title\":\"Forecast expected Vacation, Bench Time and Training Days\",\r\n            \"html\": `<p>Fill-in the number of <strong>Vacation, Bench Time </strong>and<strong> Training</strong> days you have planned for the selected month, as well as the forecast probability.</p><br>`,\r\n            \"image\": \"2_pl.png\"\r\n        }, {\r\n            \"title\":\"Forecast client projects\",\r\n            \"html\": `<p>Use the <strong>Add Project</strong> button to forecast additional client projects. Fill-in the number of project days, mark if a project is billable or not, fill-in the Charge Out Rate (COR), which is only visible for you as a PDL/PL. Mark if a project is external or internal revenue and choose the forecast probability accordingly.</p>\r\n            <p><strong>Hint:</strong> Quickly navigate through the fields by only using the keyboard. E.g. use <strong>Tab </strong>to jump from one field to another, <strong>Enter</strong> to select a project and <strong>Space </strong>to select or deselect a choice field.</p>`,\r\n            \"image\": \"3_pl.png\"\r\n        }, {\r\n            \"title\":\"Review the forecast summary\",\r\n            \"html\": `<p>Review the summary panel before you <strong>Save </strong>your forecast entries. <br /></p>`,\r\n            \"image\": \"4_pl.png\"\r\n        },\r\n        {\r\n            \"title\":\"Select the team view\",\r\n            \"html\": `<p>Switch between your individual view and the team view by using the upper-right corner toggle buttons.</p>`,\r\n            \"image\": \"5_pl.png\"\r\n        },{\r\n            \"title\":\"Review and update the team forecast\",\r\n            \"html\": `<p>Expand and update your team&rsquo;s utilization forecast. Fill-in the COR, mark if a project is external or internal revenue, and <strong>Submit</strong> the forecast for each team member individually.</p><br> <p> Once a forecast is submitted, it becomes <strong>locked</strong> and cannot be updated by the team member. Locked forecast entries can easily be unlocked using the <strong>Unlock </strong>button.</p>`,\r\n            \"image\": \"6_pl.png\"\r\n        },\r\n        {\r\n            \"title\":\"Review the team forecast summary\",\r\n            \"html\": `<p>Review the summary panel before you <strong>Export </strong>your team&rsquo;s forecast entries. </p>`,\r\n            \"image\": \"7_pl.png\"\r\n        },\r\n        {\r\n            \"title\":\"Select the practice lead view\",\r\n            \"html\": `<p>Switch between your individual, team and practice lead view using the upper-right corner toggle buttons. </p>`,\r\n            \"image\": \"8_pl.png\"\r\n        },\r\n        {\r\n            \"title\":\"Review and update your team members’ forecasts.\",\r\n            \"html\": `<p>Expand to update the utilization forecasts. </p>`,\r\n            \"image\": \"9_pl.png\"\r\n        },\r\n        {\r\n            \"title\":\"Review the forecast summary and submit your team members’ forecasts.\",\r\n            \"html\": `<p>Review and submit all forecast entries to the Market Segment Lead.</p>`,\r\n            \"image\": \"10_pl.png\"\r\n        },\r\n    ]\r\n}",
                    "rawdescription": "Data for getStarted",
                    "description": "<p>Data for getStarted</p>\n"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/app/layout/organizationModal/organization-dialog.component.ts": [
                {
                    "name": "TREE_DATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/organizationModal/organization-dialog.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HierarchyNode[]",
                    "defaultValue": "[]"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/app.module.ts": [
                {
                    "name": "HttpLoaderFactory",
                    "file": "src/app/app.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>AoT requires an exported function for factories</p>\n",
                    "args": [
                        {
                            "name": "http",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "TranslateHttpLoader",
                    "jsdoctags": [
                        {
                            "name": "http",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/reset-password/reset-password.component.ts": [
                {
                    "name": "passwordMatcherValidator",
                    "file": "src/app/reset-password/reset-password.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "control",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "literal type | null",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "login",
                        "component": "LoginComponent"
                    },
                    {
                        "path": "reset-password/:token",
                        "component": "ResetPasswordComponent"
                    },
                    {
                        "path": "admin",
                        "component": "AdminComponent",
                        "canActivate": [
                            "RoleGuard"
                        ],
                        "data": {
                            "expectedRole": "100"
                        }
                    },
                    {
                        "path": "forecast",
                        "component": "ForecastComponent",
                        "canActivate": [
                            "RoleGuard"
                        ],
                        "data": {
                            "expectedRole": "0"
                        },
                        "children": [
                            {
                                "path": "individual/:id",
                                "component": "IndividualComponent"
                            },
                            {
                                "path": "team/:id",
                                "component": "TeamComponent",
                                "canActivate": [
                                    "RoleGuard"
                                ],
                                "data": {
                                    "expectedRole": "1"
                                }
                            },
                            {
                                "path": "practice/:id",
                                "component": "PracticeComponent",
                                "canActivate": [
                                    "RoleGuard"
                                ],
                                "data": {
                                    "expectedRole": "2"
                                }
                            },
                            {
                                "path": "executive/:id",
                                "component": "ExecutiveComponent",
                                "canActivate": [
                                    "RoleGuard"
                                ],
                                "data": {
                                    "expectedRole": "3"
                                }
                            },
                            {
                                "path": "executive-detail/:id",
                                "component": "ExecutiveComponent",
                                "canActivate": [
                                    "RoleGuard"
                                ],
                                "data": {
                                    "expectedRole": "3"
                                }
                            },
                            {
                                "path": "staffing/:id",
                                "component": "StaffingComponent",
                                "canActivate": [
                                    "RoleGuard"
                                ],
                                "data": {
                                    "expectedRole": "3"
                                }
                            },
                            {
                                "path": "head-of-practices/:id",
                                "component": "HeadOfPracticesComponent",
                                "canActivate": [
                                    "RoleGuard"
                                ],
                                "data": {
                                    "expectedRole": "3"
                                }
                            },
                            {
                                "path": "practices/:id",
                                "component": "PracticesComponent",
                                "canActivate": [
                                    "RoleGuard"
                                ],
                                "data": {
                                    "expectedRole": "3"
                                }
                            },
                            {
                                "path": "financial-controller/:id",
                                "component": "FinancialControllerComponent",
                                "canActivate": [
                                    "RoleGuard"
                                ],
                                "data": {
                                    "expectedRole": "4"
                                }
                            },
                            {
                                "path": "subcos/:id",
                                "component": "SubcosComponent",
                                "canActivate": [
                                    "RoleGuard"
                                ],
                                "data": {
                                    "expectedRole": "0"
                                }
                            },
                            {
                                "path": "subcos-executive/:id",
                                "component": "SubcosExecutiveComponent",
                                "canActivate": [
                                    "RoleGuard"
                                ],
                                "data": {
                                    "expectedRole": "3"
                                }
                            }
                        ]
                    },
                    {
                        "path": "",
                        "redirectTo": "/login",
                        "pathMatch": "full"
                    },
                    {
                        "path": "**",
                        "redirectTo": "/login"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 44,
        "status": "medium",
        "files": [
            {
                "filePath": "e2e_testing/login/login.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoginPage",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/admin.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdminComponent",
                "coveragePercent": 100,
                "coverageCount": "3/3",
                "status": "very-good"
            },
            {
                "filePath": "src/app/admin/components/months/months.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MonthsComponent",
                "coveragePercent": 100,
                "coverageCount": "11/11",
                "status": "very-good"
            },
            {
                "filePath": "src/app/admin/components/projects/projects.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProjectsComponent",
                "coveragePercent": 52,
                "coverageCount": "10/19",
                "status": "good"
            },
            {
                "filePath": "src/app/admin/components/subcos/subcos.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SubcosComponent",
                "coveragePercent": 55,
                "coverageCount": "5/9",
                "status": "good"
            },
            {
                "filePath": "src/app/admin/components/teams/teams.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TeamsComponent",
                "coveragePercent": 82,
                "coverageCount": "14/17",
                "status": "very-good"
            },
            {
                "filePath": "src/app/admin/components/users/users.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UsersComponent",
                "coveragePercent": 65,
                "coverageCount": "17/26",
                "status": "good"
            },
            {
                "filePath": "src/app/admin/dialogs/add-month/add-month.dialog.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddMonthDialog",
                "coveragePercent": 77,
                "coverageCount": "7/9",
                "status": "very-good"
            },
            {
                "filePath": "src/app/admin/dialogs/add-month/add-month.dialog.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AppDateAdapter",
                "coveragePercent": 100,
                "coverageCount": "2/2",
                "status": "very-good"
            },
            {
                "filePath": "src/app/admin/dialogs/add-project/add-project.dialog.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddProjectDialog",
                "coveragePercent": 55,
                "coverageCount": "5/9",
                "status": "good"
            },
            {
                "filePath": "src/app/admin/dialogs/add-subco/add-subco.dialog.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddSubcoDialog",
                "coveragePercent": 61,
                "coverageCount": "8/13",
                "status": "good"
            },
            {
                "filePath": "src/app/admin/dialogs/add-team/add-team.dialog.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddTeamDialog",
                "coveragePercent": 71,
                "coverageCount": "5/7",
                "status": "good"
            },
            {
                "filePath": "src/app/admin/dialogs/add-user/add-user.dialog.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddUserDialog",
                "coveragePercent": 72,
                "coverageCount": "13/18",
                "status": "good"
            },
            {
                "filePath": "src/app/admin/dialogs/confirm-message/confirm-message.dialog.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmMessageDialog",
                "coveragePercent": 50,
                "coverageCount": "2/4",
                "status": "medium"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 100,
                "coverageCount": "2/2",
                "status": "very-good"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/errors/error.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MyErrorHandler",
                "coveragePercent": 100,
                "coverageCount": "2/2",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/interfaces/SubcoSummaryData.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SubcoSummaryData",
                "coveragePercent": 100,
                "coverageCount": "5/5",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/interfaces/exportCSV/entry.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Entry",
                "coveragePercent": 100,
                "coverageCount": "6/6",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/interfaces/exportCSV/export.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Export",
                "coveragePercent": 100,
                "coverageCount": "5/5",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/interfaces/exportCSV/summary.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Summary",
                "coveragePercent": 100,
                "coverageCount": "11/11",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/interfaces/fcEntry.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FcEntry",
                "coveragePercent": 45,
                "coverageCount": "14/31",
                "status": "medium"
            },
            {
                "filePath": "src/app/core/interfaces/fcProject.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FcProject",
                "coveragePercent": 58,
                "coverageCount": "7/12",
                "status": "good"
            },
            {
                "filePath": "src/app/core/interfaces/financialAppsSummary.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FinancialControllerSummaryAPPS",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interfaces/financialSummary.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FincancialControllerSummary",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interfaces/grade.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Grade",
                "coveragePercent": 50,
                "coverageCount": "2/4",
                "status": "medium"
            },
            {
                "filePath": "src/app/core/interfaces/graphicData.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GraphicSummaryProbabilityEntry",
                "coveragePercent": 100,
                "coverageCount": "3/3",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/interfaces/graphicData.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GraphicSummaryProjectTypeEntry",
                "coveragePercent": 100,
                "coverageCount": "3/3",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/interfaces/graphicData.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GraphicSummaryReport",
                "coveragePercent": 100,
                "coverageCount": "10/10",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/interfaces/hierarchyNode.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HierarchyNode",
                "coveragePercent": 85,
                "coverageCount": "6/7",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/interfaces/kpiData.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MonthlySummaryReport",
                "coveragePercent": 100,
                "coverageCount": "12/12",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/interfaces/lockedMonth.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LockedMonth",
                "coveragePercent": 100,
                "coverageCount": "4/4",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/interfaces/month.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Month",
                "coveragePercent": 100,
                "coverageCount": "10/10",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/interfaces/perGrade.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PerGrade",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interfaces/probability.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Probability",
                "coveragePercent": 100,
                "coverageCount": "3/3",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/interfaces/probabilityRecord.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProbabilityRecord",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interfaces/probabilitySummary.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProbabilitySummary",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interfaces/project.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Project",
                "coveragePercent": 100,
                "coverageCount": "10/10",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/interfaces/projectRequest.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProjectRequest",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interfaces/role.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Role",
                "coveragePercent": 85,
                "coverageCount": "6/7",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/interfaces/savedMonth.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SavedMonth",
                "coveragePercent": 100,
                "coverageCount": "4/4",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/interfaces/subCoDetailTotals.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SubCoDetailTotals",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interfaces/subCoDetails.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SubCoDetails",
                "coveragePercent": 8,
                "coverageCount": "2/24",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interfaces/subCoFcIntExt.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SubCoFcIntExt",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interfaces/subCoFcOffshore.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SubCoFcOffshore",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interfaces/subCoPreview.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SubCoPreview",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interfaces/subCoTotals.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SubCoTotals",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interfaces/subCoType.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SubCoType",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/core/interfaces/suggestion.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Suggestion",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interfaces/summaryData.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SummaryData",
                "coveragePercent": 100,
                "coverageCount": "10/10",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/interfaces/summaryData.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SummaryDataProject",
                "coveragePercent": 100,
                "coverageCount": "4/4",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/interfaces/team.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Team",
                "coveragePercent": 71,
                "coverageCount": "5/7",
                "status": "good"
            },
            {
                "filePath": "src/app/core/interfaces/user.ts",
                "type": "class",
                "linktype": "classe",
                "name": "User",
                "coveragePercent": 63,
                "coverageCount": "12/19",
                "status": "good"
            },
            {
                "filePath": "src/app/core/pipes/safe-html.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "SafeHtmlPipe",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/security/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 93,
                "coverageCount": "27/29",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/security/httpRequestInterceptor.service.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "HttpRequestInterceptorService",
                "coveragePercent": 100,
                "coverageCount": "3/3",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/security/login.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoginService",
                "coveragePercent": 77,
                "coverageCount": "7/9",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/security/resetPassword.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ResetPasswordService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/security/role-guard.service.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "RoleGuard",
                "coveragePercent": 100,
                "coverageCount": "3/3",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/services/admin/months.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MonthService",
                "coveragePercent": 63,
                "coverageCount": "7/11",
                "status": "good"
            },
            {
                "filePath": "src/app/core/services/admin/projects.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProjectService",
                "coveragePercent": 66,
                "coverageCount": "6/9",
                "status": "good"
            },
            {
                "filePath": "src/app/core/services/admin/team.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TeamService",
                "coveragePercent": 57,
                "coverageCount": "4/7",
                "status": "good"
            },
            {
                "filePath": "src/app/core/services/admin/user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserAdminService",
                "coveragePercent": 100,
                "coverageCount": "7/7",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/services/forecasts/calculation.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CalculationService",
                "coveragePercent": 4,
                "coverageCount": "1/23",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/forecasts/executive-forecasts.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ExecutiveForecastsService",
                "coveragePercent": 5,
                "coverageCount": "2/38",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/forecasts/executive-forecasts.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProValues",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/forecasts/executive-forecasts.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SummaryValues",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/forecasts/forecast.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ForecastService",
                "coveragePercent": 78,
                "coverageCount": "22/28",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/services/forecasts/team-forecasts.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TeamForecastService",
                "coveragePercent": 71,
                "coverageCount": "10/14",
                "status": "good"
            },
            {
                "filePath": "src/app/core/services/forecasts/team-user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TeamUserService",
                "coveragePercent": 66,
                "coverageCount": "8/12",
                "status": "good"
            },
            {
                "filePath": "src/app/core/services/subCo.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SubCoService",
                "coveragePercent": 46,
                "coverageCount": "13/28",
                "status": "medium"
            },
            {
                "filePath": "src/app/core/services/subCoFinancialController.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SubCoFinancialControllerService",
                "coveragePercent": 53,
                "coverageCount": "7/13",
                "status": "good"
            },
            {
                "filePath": "src/app/core/services/subCoForecast.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SubCoForecastService",
                "coveragePercent": 60,
                "coverageCount": "9/15",
                "status": "good"
            },
            {
                "filePath": "src/app/core/services/user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 81,
                "coverageCount": "13/16",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/services/utilities.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UtilitiesService",
                "coveragePercent": 65,
                "coverageCount": "13/20",
                "status": "good"
            },
            {
                "filePath": "src/app/core/shared/business-operations.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BusinessOperationsService",
                "coveragePercent": 41,
                "coverageCount": "30/72",
                "status": "medium"
            },
            {
                "filePath": "src/app/core/shared/data-sharing.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DataSharingService",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/core/shared/page-state.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PageStateService",
                "coveragePercent": 62,
                "coverageCount": "5/8",
                "status": "good"
            },
            {
                "filePath": "src/app/forecast/components/executive-chart-pdl/executive-chart-pdl.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExecutiveChartPdlComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/components/executive-chart-pdl/executive-chart-pdl.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SummaryValues",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/components/executive-chart-pl/executive-chart-pl.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExecutiveChartPlComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/components/executive-chart-pl/executive-chart-pl.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SummaryValues",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/components/executive-chart/executive-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExecutiveChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/components/executive-chart/executive-chart.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SummaryValues",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/components/executive-detail/executive-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExecutiveDetailComponent",
                "coveragePercent": 25,
                "coverageCount": "10/39",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/components/executive-detail/fc-entry-detail-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FcEntryDetailDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/components/executive-stats/executive-stats.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExecutiveStatsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/components/executive-summary/executive-summary.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExecutiveSummaryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/components/executive-summary/executive-summary.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PeriodicElement",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/components/executive-summary/executive-summary.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SummaryValues",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/components/fc-entry-summary/fc-entry-summary.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FcEntrySummaryComponent",
                "coveragePercent": 51,
                "coverageCount": "17/33",
                "status": "good"
            },
            {
                "filePath": "src/app/forecast/components/fc-entry-summary/remdays-warning/fc-entry-summary-remdays-warning.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FcEntrySummaryRemDaysWarningComponent",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "src/app/forecast/components/fc-entry-summary/vacation-warning/fc-entry-summary-vacation-warning.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FcEntrySummaryVacationWarningComponent",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "src/app/forecast/components/fc-entry/fc-entry.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FcEntryComponent",
                "coveragePercent": 40,
                "coverageCount": "18/45",
                "status": "medium"
            },
            {
                "filePath": "src/app/forecast/components/fc-project/fc-project.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FcProjectComponent",
                "coveragePercent": 51,
                "coverageCount": "20/39",
                "status": "good"
            },
            {
                "filePath": "src/app/forecast/components/financial-controller-overview/financial-controller-overview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FinancialControllerOverviewComponent",
                "coveragePercent": 4,
                "coverageCount": "1/22",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/components/power-bi/power-bi.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PowerBi",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/components/staffing-overview/staffing-overview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StaffingOverviewComponent",
                "coveragePercent": 11,
                "coverageCount": "3/26",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/components/staffing-overview/staffing-overview.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProjectHelper",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/components/subco-executive-chart/subco-executive-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SubcoExecutiveChartComponent",
                "coveragePercent": 3,
                "coverageCount": "1/30",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/components/subco-executive-detail/subco-executive-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SubcoExecutiveDetailComponent",
                "coveragePercent": 34,
                "coverageCount": "14/41",
                "status": "medium"
            },
            {
                "filePath": "src/app/forecast/components/subco-fc-entry/subco-fc-entry.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SubcoFcEntryComponent",
                "coveragePercent": 56,
                "coverageCount": "14/25",
                "status": "good"
            },
            {
                "filePath": "src/app/forecast/components/subco-fc-intExt/subco-fc-intExt.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SubcoExecutiveIntExtDetailComponent",
                "coveragePercent": 25,
                "coverageCount": "10/39",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/components/subco-fc-project/subco-fc-project.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SubcoFcProjectComponent",
                "coveragePercent": 55,
                "coverageCount": "15/27",
                "status": "good"
            },
            {
                "filePath": "src/app/forecast/components/subco-month/subco-month.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SubcoMonthComponent",
                "coveragePercent": 62,
                "coverageCount": "20/32",
                "status": "good"
            },
            {
                "filePath": "src/app/forecast/components/subco-summary/subco-summary.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SubcoSummaryComponent",
                "coveragePercent": 76,
                "coverageCount": "19/25",
                "status": "very-good"
            },
            {
                "filePath": "src/app/forecast/components/teamlead-month/teamlead-month.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TeamleadMonthComponent",
                "coveragePercent": 58,
                "coverageCount": "18/31",
                "status": "good"
            },
            {
                "filePath": "src/app/forecast/components/teamlead-summary/teamlead-summary.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TeamleadSummaryComponent",
                "coveragePercent": 76,
                "coverageCount": "19/25",
                "status": "very-good"
            },
            {
                "filePath": "src/app/forecast/dialogs/add-project/project-request.dialog.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProjectRequestDialog",
                "coveragePercent": 25,
                "coverageCount": "2/8",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/dialogs/add-subco-em/add-subco-em.dialog.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddSubcoDialogEm",
                "coveragePercent": 61,
                "coverageCount": "8/13",
                "status": "good"
            },
            {
                "filePath": "src/app/forecast/dialogs/confirm-message/confirm-message.dialog.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmMessageDialog",
                "coveragePercent": 50,
                "coverageCount": "2/4",
                "status": "medium"
            },
            {
                "filePath": "src/app/forecast/dialogs/executive-fc-entry/executive-fc-entry.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExecutiveFcEntryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/dialogs/export-csv/export-csv.dialog.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExportCsvDialog",
                "coveragePercent": 87,
                "coverageCount": "7/8",
                "status": "very-good"
            },
            {
                "filePath": "src/app/forecast/forecast.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ForecastComponent",
                "coveragePercent": 51,
                "coverageCount": "15/29",
                "status": "good"
            },
            {
                "filePath": "src/app/forecast/pages/executive/executive.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExecutiveComponent",
                "coveragePercent": 75,
                "coverageCount": "15/20",
                "status": "good"
            },
            {
                "filePath": "src/app/forecast/pages/financial-controller/financial-controller.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FinancialControllerComponent",
                "coveragePercent": 18,
                "coverageCount": "2/11",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/pages/head-of-practices/head-of-practices.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeadOfPracticesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/pages/individual/individual.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IndividualComponent",
                "coveragePercent": 63,
                "coverageCount": "7/11",
                "status": "good"
            },
            {
                "filePath": "src/app/forecast/pages/practice/practice.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PracticeComponent",
                "coveragePercent": 15,
                "coverageCount": "2/13",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/pages/practices/practices.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PracticesComponent",
                "coveragePercent": 20,
                "coverageCount": "3/15",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/pages/staffing/staffing.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StaffingComponent",
                "coveragePercent": 46,
                "coverageCount": "7/15",
                "status": "medium"
            },
            {
                "filePath": "src/app/forecast/pages/subcos-executive/subcos-executive.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SubcosExecutiveComponent",
                "coveragePercent": 20,
                "coverageCount": "3/15",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/pages/subcos/subcos.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SubcosComponent",
                "coveragePercent": 23,
                "coverageCount": "3/13",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/pages/team/team.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TeamComponent",
                "coveragePercent": 61,
                "coverageCount": "8/13",
                "status": "good"
            },
            {
                "filePath": "src/app/layout/dialogs/feedback/feedback-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FeedBackDialogComponent",
                "coveragePercent": 22,
                "coverageCount": "2/9",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/faq-modal/faq-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FaqModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/faq-modal/faqData.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "faqData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/layout/getStartedModal/get-started.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GetStarted",
                "coveragePercent": 71,
                "coverageCount": "5/7",
                "status": "good"
            },
            {
                "filePath": "src/app/layout/getStartedModal/getStartedData.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getStartedData",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/layout/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 63,
                "coverageCount": "14/22",
                "status": "good"
            },
            {
                "filePath": "src/app/layout/organizationModal/organization-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OrganizationDialogComponent",
                "coveragePercent": 11,
                "coverageCount": "1/9",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/organizationModal/organization-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ExampleFlatNode",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/organizationModal/organization-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FoodNode",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/layout/organizationModal/organization-dialog.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TREE_DATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 64,
                "coverageCount": "9/14",
                "status": "good"
            },
            {
                "filePath": "src/app/reset-password/reset-password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResetPasswordComponent",
                "coveragePercent": 45,
                "coverageCount": "5/11",
                "status": "medium"
            },
            {
                "filePath": "src/app/reset-password/reset-password.component.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "passwordMatcherValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}