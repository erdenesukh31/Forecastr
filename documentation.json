{
    "pipes": [
        {
            "name": "SafeHtmlPipe",
            "id": "pipe-SafeHtmlPipe-ba9fbb168f8fd04251007d524f42a32e",
            "file": "src/app/core/pipes/safe-html.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Generated class for the SafeHtmlPipe pipe.</p>\n<p>See <a href=\"https://angular.io/api/core/Pipe\">https://angular.io/api/core/Pipe</a> for more info on Angular Pipes.</p>\n",
            "rawdescription": "\n\nGenerated class for the SafeHtmlPipe pipe.\n\nSee https://angular.io/api/core/Pipe for more info on Angular Pipes.\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "html",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "html",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "safeHtml",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\nimport {DomSanitizer} from \"@angular/platform-browser\";\n\n/**\n * Generated class for the SafeHtmlPipe pipe.\n *\n * See https://angular.io/api/core/Pipe for more info on Angular Pipes.\n */\n@Pipe({\n  name: 'safeHtml',\n})\nexport class SafeHtmlPipe implements PipeTransform {\n\n  constructor(private sanitizer:DomSanitizer){}\n\n  transform(html) {\n    return this.sanitizer.bypassSecurityTrustHtml(html);\n  }\n\n}"
        }
    ],
    "interfaces": [
        {
            "name": "ExampleFlatNode",
            "id": "interface-ExampleFlatNode-7828de646e3d6929852a35835313745d",
            "file": "src/app/layout/organizationModal/organization-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, Inject } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { MatDialogRef, MatDialog, MAT_DIALOG_DATA } from \"@angular/material/dialog\";\nimport { FlatTreeControl } from \"@angular/cdk/tree\";\nimport {\n  MatTreeFlatDataSource,\n  MatTreeFlattener,\n} from \"@angular/material/tree\";\nimport { ExecutiveForecastsService } from \"../../core/services/forecasts/executive-forecasts.service\";\nimport { BusinessOperationsService } from \"../../core/shared/business-operations.service\";\nimport { HierarchyNode } from \"../../core/interfaces/hierarchyNode\";\n\n/**\n * Food data with nested structure.\n * Each node has a name and an optional list of children.\n */\ninterface FoodNode {\n  name: string;\n  children?: FoodNode[];\n}\n\nconst TREE_DATA: HierarchyNode[] = [];\n\n/** Flat node with expandable and level information */\ninterface ExampleFlatNode {\n  expandable: boolean;\n  name: string;\n  level: number;\n}\n\n@Component({\n  templateUrl: \"./organization-dialog.component.html\",\n  styleUrls: [\"./organization-dialog.component.scss\"],\n})\nexport class OrganizationDialogComponent {\n  // tslint:disable: member-ordering\n  // tslint:disable: typedef\n  private _transformer = (node: HierarchyNode, level: number) => {\n    return {\n      expandable: !!node.children && node.children.length > 0,\n      name:\n        \"Name: \" +\n        node.firstName +\n        \"  \" +\n        node.lastName +\n        \" |  Role: \" +\n        node.role +\n        \"  | Grade: \" +\n        node.grade,\n      level: level,\n    };\n  };\n\n  treeControl = new FlatTreeControl<ExampleFlatNode>(\n    (node) => node.level,\n    (node) => node.expandable\n  );\n\n  treeFlattener = new MatTreeFlattener(\n    this._transformer,\n    (node) => node.level,\n    (node) => node.expandable,\n    (node) => node.children\n  );\n\n  dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) private data: any,\n    private http: HttpClient,\n    private dialogRef: MatDialogRef<OrganizationDialogComponent>,\n    private BO: BusinessOperationsService,\n    private executiveForecastsService: ExecutiveForecastsService\n  ) {\n    this.dataSource.data = TREE_DATA;\n  }\n\n  /**\n   * init method\n   */\n  // tslint:disable: use-life-cycle-interface\n  ngOnInit(): void {\n    console.log(\"component initialized\");\n    this.http\n      .get(this.BO.companyHierarchy())\n      .subscribe((hierarchy: HierarchyNode) => {\n        console.log(hierarchy);\n        this.dataSource.data = [hierarchy];\n      });\n  }\n\n  hasChild = (_: number, node: ExampleFlatNode) => node.expandable;\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n}\n",
            "properties": [
                {
                    "name": "expandable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "level",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<p>Flat node with expandable and level information</p>\n",
            "rawdescription": "\nFlat node with expandable and level information",
            "methods": []
        },
        {
            "name": "FoodNode",
            "id": "interface-FoodNode-7828de646e3d6929852a35835313745d",
            "file": "src/app/layout/organizationModal/organization-dialog.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, Inject } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { MatDialogRef, MatDialog, MAT_DIALOG_DATA } from \"@angular/material/dialog\";\nimport { FlatTreeControl } from \"@angular/cdk/tree\";\nimport {\n  MatTreeFlatDataSource,\n  MatTreeFlattener,\n} from \"@angular/material/tree\";\nimport { ExecutiveForecastsService } from \"../../core/services/forecasts/executive-forecasts.service\";\nimport { BusinessOperationsService } from \"../../core/shared/business-operations.service\";\nimport { HierarchyNode } from \"../../core/interfaces/hierarchyNode\";\n\n/**\n * Food data with nested structure.\n * Each node has a name and an optional list of children.\n */\ninterface FoodNode {\n  name: string;\n  children?: FoodNode[];\n}\n\nconst TREE_DATA: HierarchyNode[] = [];\n\n/** Flat node with expandable and level information */\ninterface ExampleFlatNode {\n  expandable: boolean;\n  name: string;\n  level: number;\n}\n\n@Component({\n  templateUrl: \"./organization-dialog.component.html\",\n  styleUrls: [\"./organization-dialog.component.scss\"],\n})\nexport class OrganizationDialogComponent {\n  // tslint:disable: member-ordering\n  // tslint:disable: typedef\n  private _transformer = (node: HierarchyNode, level: number) => {\n    return {\n      expandable: !!node.children && node.children.length > 0,\n      name:\n        \"Name: \" +\n        node.firstName +\n        \"  \" +\n        node.lastName +\n        \" |  Role: \" +\n        node.role +\n        \"  | Grade: \" +\n        node.grade,\n      level: level,\n    };\n  };\n\n  treeControl = new FlatTreeControl<ExampleFlatNode>(\n    (node) => node.level,\n    (node) => node.expandable\n  );\n\n  treeFlattener = new MatTreeFlattener(\n    this._transformer,\n    (node) => node.level,\n    (node) => node.expandable,\n    (node) => node.children\n  );\n\n  dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) private data: any,\n    private http: HttpClient,\n    private dialogRef: MatDialogRef<OrganizationDialogComponent>,\n    private BO: BusinessOperationsService,\n    private executiveForecastsService: ExecutiveForecastsService\n  ) {\n    this.dataSource.data = TREE_DATA;\n  }\n\n  /**\n   * init method\n   */\n  // tslint:disable: use-life-cycle-interface\n  ngOnInit(): void {\n    console.log(\"component initialized\");\n    this.http\n      .get(this.BO.companyHierarchy())\n      .subscribe((hierarchy: HierarchyNode) => {\n        console.log(hierarchy);\n        this.dataSource.data = [hierarchy];\n      });\n  }\n\n  hasChild = (_: number, node: ExampleFlatNode) => node.expandable;\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n}\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FoodNode[]",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<p>Food data with nested structure.\nEach node has a name and an optional list of children.</p>\n",
            "rawdescription": "\n\nFood data with nested structure.\nEach node has a name and an optional list of children.\n",
            "methods": []
        },
        {
            "name": "Grade",
            "id": "interface-Grade-81c9c2e2762b687f3bc46ec1634a745f",
            "file": "src/app/core/interfaces/grade.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Grade {\n\t/**\n\t * unique system id\n\t */\n\tgradeId: number;\n\t\n\tname: string;\n}\n",
            "properties": [
                {
                    "name": "gradeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>unique system id</p>\n",
                    "line": 8,
                    "rawdescription": "\n\nunique system id\n"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<p>grade types structure</p>\n",
            "rawdescription": "\n\ngrade types structure\n",
            "methods": []
        },
        {
            "name": "GraphicSummaryProbabilityEntry",
            "id": "interface-GraphicSummaryProbabilityEntry-7e25d891940226607e28739c1882c5c6",
            "file": "src/app/core/interfaces/graphicData.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GraphicSummaryReport {\n\n    /**\n     * Name of the team (e. g. CSD)\n     */\n    team: string;\n\n    /**\n     * ARVE for this period\n     */\n    arve: number;\n\n    /**\n     * URVE for this period\n     */\n    urve: number;\n\n    /**\n     * Working Days in this Period\n     */\n    workingDays: number\n\n    /**\n     * revenue for this month\n     */\n    ros: number;\n\n    /**\n     * external revenue for this period\n     */\n    externalRevenue: number;\n\n    /**\n     * cor for this period\n     */\n    cor: number;\n\n    /**\n     * Project Type entries\n     */\n    projectTypes: GraphicSummaryProjectTypeEntry[];\n\n    /**\n     * Probability entries\n     */\n    probabilities: GraphicSummaryProbabilityEntry[];\n}\n\n/**\n * Simple Structure for Probability Entries\n */\nexport interface GraphicSummaryProbabilityEntry {\n\n    /**\n     * name of probability\n     */\n    probability: string;\n\n    /**\n     * days entered for the probability\n     */\n    days: number;\n}\n\n/**\n * Simple Structure for Project Type Entries\n */\nexport interface GraphicSummaryProjectTypeEntry {\n\n    /**\n     * Name of Project Type\n     */\n    projectType: string;\n\n    /**\n     * days entered for the project type\n     */\n    days: number;\n}",
            "properties": [
                {
                    "name": "days",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>days entered for the probability</p>\n",
                    "line": 65,
                    "rawdescription": "\n\ndays entered for the probability\n"
                },
                {
                    "name": "probability",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>name of probability</p>\n",
                    "line": 60,
                    "rawdescription": "\n\nname of probability\n"
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<p>Simple Structure for Probability Entries</p>\n",
            "rawdescription": "\n\nSimple Structure for Probability Entries\n",
            "methods": []
        },
        {
            "name": "GraphicSummaryProjectTypeEntry",
            "id": "interface-GraphicSummaryProjectTypeEntry-7e25d891940226607e28739c1882c5c6",
            "file": "src/app/core/interfaces/graphicData.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GraphicSummaryReport {\n\n    /**\n     * Name of the team (e. g. CSD)\n     */\n    team: string;\n\n    /**\n     * ARVE for this period\n     */\n    arve: number;\n\n    /**\n     * URVE for this period\n     */\n    urve: number;\n\n    /**\n     * Working Days in this Period\n     */\n    workingDays: number\n\n    /**\n     * revenue for this month\n     */\n    ros: number;\n\n    /**\n     * external revenue for this period\n     */\n    externalRevenue: number;\n\n    /**\n     * cor for this period\n     */\n    cor: number;\n\n    /**\n     * Project Type entries\n     */\n    projectTypes: GraphicSummaryProjectTypeEntry[];\n\n    /**\n     * Probability entries\n     */\n    probabilities: GraphicSummaryProbabilityEntry[];\n}\n\n/**\n * Simple Structure for Probability Entries\n */\nexport interface GraphicSummaryProbabilityEntry {\n\n    /**\n     * name of probability\n     */\n    probability: string;\n\n    /**\n     * days entered for the probability\n     */\n    days: number;\n}\n\n/**\n * Simple Structure for Project Type Entries\n */\nexport interface GraphicSummaryProjectTypeEntry {\n\n    /**\n     * Name of Project Type\n     */\n    projectType: string;\n\n    /**\n     * days entered for the project type\n     */\n    days: number;\n}",
            "properties": [
                {
                    "name": "days",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>days entered for the project type</p>\n",
                    "line": 81,
                    "rawdescription": "\n\ndays entered for the project type\n"
                },
                {
                    "name": "projectType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Name of Project Type</p>\n",
                    "line": 76,
                    "rawdescription": "\n\nName of Project Type\n"
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<p>Simple Structure for Project Type Entries</p>\n",
            "rawdescription": "\n\nSimple Structure for Project Type Entries\n",
            "methods": []
        },
        {
            "name": "GraphicSummaryReport",
            "id": "interface-GraphicSummaryReport-7e25d891940226607e28739c1882c5c6",
            "file": "src/app/core/interfaces/graphicData.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GraphicSummaryReport {\n\n    /**\n     * Name of the team (e. g. CSD)\n     */\n    team: string;\n\n    /**\n     * ARVE for this period\n     */\n    arve: number;\n\n    /**\n     * URVE for this period\n     */\n    urve: number;\n\n    /**\n     * Working Days in this Period\n     */\n    workingDays: number\n\n    /**\n     * revenue for this month\n     */\n    ros: number;\n\n    /**\n     * external revenue for this period\n     */\n    externalRevenue: number;\n\n    /**\n     * cor for this period\n     */\n    cor: number;\n\n    /**\n     * Project Type entries\n     */\n    projectTypes: GraphicSummaryProjectTypeEntry[];\n\n    /**\n     * Probability entries\n     */\n    probabilities: GraphicSummaryProbabilityEntry[];\n}\n\n/**\n * Simple Structure for Probability Entries\n */\nexport interface GraphicSummaryProbabilityEntry {\n\n    /**\n     * name of probability\n     */\n    probability: string;\n\n    /**\n     * days entered for the probability\n     */\n    days: number;\n}\n\n/**\n * Simple Structure for Project Type Entries\n */\nexport interface GraphicSummaryProjectTypeEntry {\n\n    /**\n     * Name of Project Type\n     */\n    projectType: string;\n\n    /**\n     * days entered for the project type\n     */\n    days: number;\n}",
            "properties": [
                {
                    "name": "arve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>ARVE for this period</p>\n",
                    "line": 14,
                    "rawdescription": "\n\nARVE for this period\n"
                },
                {
                    "name": "cor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>cor for this period</p>\n",
                    "line": 39,
                    "rawdescription": "\n\ncor for this period\n"
                },
                {
                    "name": "externalRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>external revenue for this period</p>\n",
                    "line": 34,
                    "rawdescription": "\n\nexternal revenue for this period\n"
                },
                {
                    "name": "probabilities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GraphicSummaryProbabilityEntry[]",
                    "optional": false,
                    "description": "<p>Probability entries</p>\n",
                    "line": 49,
                    "rawdescription": "\n\nProbability entries\n"
                },
                {
                    "name": "projectTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GraphicSummaryProjectTypeEntry[]",
                    "optional": false,
                    "description": "<p>Project Type entries</p>\n",
                    "line": 44,
                    "rawdescription": "\n\nProject Type entries\n"
                },
                {
                    "name": "ros",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>revenue for this month</p>\n",
                    "line": 29,
                    "rawdescription": "\n\nrevenue for this month\n"
                },
                {
                    "name": "team",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Name of the team (e. g. CSD)</p>\n",
                    "line": 9,
                    "rawdescription": "\n\nName of the team (e. g. CSD)\n"
                },
                {
                    "name": "urve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>URVE for this period</p>\n",
                    "line": 19,
                    "rawdescription": "\n\nURVE for this period\n"
                },
                {
                    "name": "workingDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Working Days in this Period</p>\n",
                    "line": 24,
                    "rawdescription": "\n\nWorking Days in this Period\n"
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<p>data structure for graphic data</p>\n",
            "rawdescription": "\n\ndata structure for graphic data\n",
            "methods": []
        },
        {
            "name": "HierarchyNode",
            "id": "interface-HierarchyNode-9e45322520c436a05c70bcddb321b6ab",
            "file": "src/app/core/interfaces/hierarchyNode.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface HierarchyNode {\n\n    /**\n     * GGID\n     */\n    id: string\n\n    /**\n     * First Name for the Node\n     */\n    firstName: string;\n\n    /**\n     * Last Name for the Node\n     */\n    lastName: string;\n\n    /**\n     * Role Shortcut (e.g. CSS, PDL, etc...)\n     */\n    role: string;\n\n    /**\n     * Grade Shortcutr\n     */\n    grade: string;\n\n    /**\n     * Children of the node (represents sub employees)\n     */\n    children: HierarchyNode[];\n}",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HierarchyNode[]",
                    "optional": false,
                    "description": "<p>Children of the node (represents sub employees)</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nChildren of the node (represents sub employees)\n"
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>First Name for the Node</p>\n",
                    "line": 11,
                    "rawdescription": "\n\nFirst Name for the Node\n"
                },
                {
                    "name": "grade",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Grade Shortcutr</p>\n",
                    "line": 26,
                    "rawdescription": "\n\nGrade Shortcutr\n"
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>GGID</p>\n",
                    "line": 6,
                    "rawdescription": "\n\nGGID\n"
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Last Name for the Node</p>\n",
                    "line": 16,
                    "rawdescription": "\n\nLast Name for the Node\n"
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Role Shortcut (e.g. CSS, PDL, etc...)</p>\n",
                    "line": 21,
                    "rawdescription": "\n\nRole Shortcut (e.g. CSS, PDL, etc...)\n"
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "MonthlySummaryReport",
            "id": "interface-MonthlySummaryReport-11642cf4177990059c684d053714af27",
            "file": "src/app/core/interfaces/kpiData.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MonthlySummaryReport {\n\n    /**\n     * Shortend name of the month (e. g. April = apr)\n     */\n    month: string;\n\n    /**\n     * Id of this month\n     */\n    monthId: number;\n\n    /**\n     * Number of this month in the year (e. g. August = 8)\n     */\n    monthNumber: string;\n\n    /**\n     * Year of this Month\n     */\n    year: number;\n\n    /**\n     * revenue for this month\n     */\n    ros: number;\n\n    /**\n     * external revenue for this month\n     */\n    externalRevenue: number;\n\n    /**\n     * internal revenue for this month\n     */\n    internalRevenue: number;\n\n    /**\n     * cor for this month\n     */\n    cor: number;\n\n    /**\n     * arve for this month\n     */\n    arve: number;\n\n    /**\n     * urve for this month\n     */\n    urve: number;\n\n    /**\n     * fte for this month\n     */\n    fte: number;\n}",
            "properties": [
                {
                    "name": "arve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>arve for this month</p>\n",
                    "line": 49,
                    "rawdescription": "\n\narve for this month\n"
                },
                {
                    "name": "cor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>cor for this month</p>\n",
                    "line": 44,
                    "rawdescription": "\n\ncor for this month\n"
                },
                {
                    "name": "externalRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>external revenue for this month</p>\n",
                    "line": 34,
                    "rawdescription": "\n\nexternal revenue for this month\n"
                },
                {
                    "name": "fte",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>fte for this month</p>\n",
                    "line": 59,
                    "rawdescription": "\n\nfte for this month\n"
                },
                {
                    "name": "internalRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>internal revenue for this month</p>\n",
                    "line": 39,
                    "rawdescription": "\n\ninternal revenue for this month\n"
                },
                {
                    "name": "month",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Shortend name of the month (e. g. April = apr)</p>\n",
                    "line": 9,
                    "rawdescription": "\n\nShortend name of the month (e. g. April = apr)\n"
                },
                {
                    "name": "monthId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Id of this month</p>\n",
                    "line": 14,
                    "rawdescription": "\n\nId of this month\n"
                },
                {
                    "name": "monthNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Number of this month in the year (e. g. August = 8)</p>\n",
                    "line": 19,
                    "rawdescription": "\n\nNumber of this month in the year (e. g. August = 8)\n"
                },
                {
                    "name": "ros",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>revenue for this month</p>\n",
                    "line": 29,
                    "rawdescription": "\n\nrevenue for this month\n"
                },
                {
                    "name": "urve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>urve for this month</p>\n",
                    "line": 54,
                    "rawdescription": "\n\nurve for this month\n"
                },
                {
                    "name": "year",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Year of this Month</p>\n",
                    "line": 24,
                    "rawdescription": "\n\nYear of this Month\n"
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<p>data structure for kpi dialog</p>\n",
            "rawdescription": "\n\ndata structure for kpi dialog\n",
            "methods": []
        },
        {
            "name": "PeriodicElement",
            "id": "interface-PeriodicElement-ac20f4385d75b1185bf257f4675587a0",
            "file": "src/app/forecast/components/executive-summary/executive-summary.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, Input, ChangeDetectorRef } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { PageStateService } from '../../../core/shared/page-state.service';\n\nimport { CalculationService } from \"../../../core/services/forecasts/calculation.service\";\nimport { ProbabilitySummary } from \"../../../core/interfaces/probabilitySummary\";\nimport { ProbabilityRecord } from \"../../../core/interfaces/probabilityRecord\";\nimport { DatePipe } from '@angular/common';\n\n@Component({\n  selector: 'app-executive-summary',\n  templateUrl: './executive-summary.component.html',\n  styleUrls: ['./executive-summary.component.scss']\n})\nexport class ExecutiveSummaryComponent implements OnInit {\n  @Input('summary') summary: any;\n\n  loaded = false;\n\n  probabilitySummary: ProbabilitySummary;\n  \n  probabilitySource: MatTableDataSource<ProbabilityRecord>;\n\n  displayedColumns: string[] = [\n    \"probabilityId\",\n    \"total\",\n    \"billableDays\",\n    \"vacationDays\",\n    \"workingDays\",\n    \"cor\",\n    \"ros\",\n    \"ext\",\n    \"int\",\n    \"arve\",\n    \"urve\"\n  ];\n\n  constructor(\n    private pageState: PageStateService,\n    private changeDetectorRefs: ChangeDetectorRef,\n    private calculationService: CalculationService,\n    private datePipe: DatePipe,\n  ) {}\n\n  ngOnInit(): void {\n    this.calculationService.probabilitySummary$.subscribe((summ: ProbabilitySummary) => {\n      if(!this.loaded) {\n        this.loaded = true;\n      } else {\n        this.probabilitySummary = summ;\n        this.probabilitySource = new MatTableDataSource(summ.probabilites);\n        this.changeDetectorRefs.detectChanges();\n        setTimeout(() => {\n          this.pageState.hideSpinner();\n        }, 500);\n      }\n    });\n  }\n\n  exportCSV(): void {\n    this.pageState.showSpinner();\n    let lineEnding = \"\\r\\n\";\n\n    let header = \"KPI;\" + this.probabilitySummary.probabilites.map(x => x.name).join(\";\") + \";Total\" + lineEnding;\n    let body = \"ARVE;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.arve)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.arve) + lineEnding\n      + \"URVE;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.urve)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.urve) + lineEnding\n      + \"ROS;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.revenue)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.revenue) + lineEnding\n      + \"Int. Revenue;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.internalRevenue)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.internalRevenue) + lineEnding\n      + \"Ext. Revenue;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.externalRevenue)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.externalRevenue) + lineEnding\n      + \"COR;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.cor)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.cor) + lineEnding\n      + \"Paid Days;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.paidDays)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.paidDays) + lineEnding\n      + \"Vacation Days;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.vacationDays)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.vacationDays) + lineEnding\n      + \"Billable Days;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.billableDays)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.billableDays) + lineEnding\n      + \"Project Days;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.billableDays + x.nonBillableDays)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.nonBillableDays + this.probabilitySummary.billableDays) + lineEnding;\n\n    const data = header + body;\n    const blob: Blob = new Blob([data], { type: \"text/csv\" });\n    const filename: string = this.datePipe.transform(new Date(), \"yyyyMMdd\") + \"-SummaryProbabilities.csv\";    \n    this.pageState.hideSpinner();\n\n    if (window.navigator.msSaveOrOpenBlob) {\n      window.navigator.msSaveOrOpenBlob(blob, filename);\n    } else {\n      const url: string = window.URL.createObjectURL(blob);\n\n      let a: HTMLAnchorElement = document.createElement(\"a\");\n      a.href = url;\n      a.download = filename;\n\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n    }\n  }\n\n  numberToString(no: number): string {\n    return no.toLocaleString(\"de\",  { minimumFractionDigits: 2 } ).replace(\".\",\"\");\n  }\n}\n\nexport interface PeriodicElement {\n  name: string;\n  firm: number;\n  weight: number;\n  symbol: string;\n}\n\nexport interface SummaryValues {\n  monthId: number;\n  probabilityId: number;\n  billableDays: number;\n  nonBillableDays: number;\n  vacationDays: number;\n  trainingDays: number;\n  businessDays: number;\n  benchDays: number;\n  workingDays: number;\n  fteCss: number;\n  cor: number;\n  arve: number;\n  urve: number;\n  ros: number;\n  external: number;\n}",
            "properties": [
                {
                    "name": "firm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 103
                },
                {
                    "name": "symbol",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 106
                },
                {
                    "name": "weight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 105
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Probability",
            "id": "interface-Probability-a5a5df2f1c9613989228cfcc4803dce3",
            "file": "src/app/core/interfaces/probability.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Probability {\n\t/**\n\t * unique system id\n\t */\n\tid: number;\n\t\n\t/**\n\t * probability name\n\t */\n\tname: string;\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>unique system id</p>\n",
                    "line": 8,
                    "rawdescription": "\n\nunique system id\n"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>probability name</p>\n",
                    "line": 13,
                    "rawdescription": "\n\nprobability name\n"
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<p>probability types structure</p>\n",
            "rawdescription": "\n\nprobability types structure\n",
            "methods": []
        },
        {
            "name": "ProValues",
            "id": "interface-ProValues-554d26b131b83075f60650a4679472ca",
            "file": "src/app/core/services/forecasts/executive-forecasts.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { BusinessOperationsService } from \"../../shared/business-operations.service\";\r\nimport { BehaviorSubject, Observable } from \"rxjs\";\r\nimport { UtilitiesService } from \"../utilities.service\";\r\nimport { Month } from \"../../interfaces/month\";\r\nimport { ForecastService } from \"./forecast.service\";\r\nimport { FcEntry } from \"../../interfaces/fcEntry\";\r\nimport { User } from \"../../interfaces/user\";\r\nimport { FcProject } from \"../../interfaces/fcProject\";\r\nimport { Project } from \"../../interfaces/project\";\r\nimport { environment } from \"../../../../environments/environment\";\r\nimport { Team } from \"../../interfaces/team\";\r\nimport { MonthlySummaryReport } from \"../../interfaces/kpiData\";\r\nimport { GraphicSummaryReport } from \"../../interfaces/graphicData\";\r\nimport { HierarchyNode } from \"../../interfaces/hierarchyNode\";\r\nimport { FinancialControllerSummaryAPPS } from \"../../interfaces/financialAppsSummary\";\r\nimport { PageStateService } from '../../shared/page-state.service';\r\nimport { reject } from \"q\";\r\n/**\r\n * executive service\r\n */\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class ExecutiveForecastsService {\r\n  summaryValues$: BehaviorSubject<SummaryValues[]>;\r\n  monthValues$: BehaviorSubject<SummaryValues[]>;\r\n  kpiData$: BehaviorSubject<MonthlySummaryReport[]>;\r\n  graphicData$: BehaviorSubject<GraphicSummaryReport[]>;\r\n  hierarchy$: BehaviorSubject<HierarchyNode>;\r\n  financialData$: BehaviorSubject<FinancialControllerSummaryAPPS[]>;\r\n\r\n  monthId: number = 1;\r\n  months: Month[];\r\n  projects: Project[];\r\n  teams: Team[];\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private BO: BusinessOperationsService,\r\n    private us: UtilitiesService,\r\n    private pageState: PageStateService,\r\n    private forecastService: ForecastService,\r\n    private utilitiesService: UtilitiesService\r\n  ) {\r\n    this.summaryValues$ = new BehaviorSubject([]);\r\n    this.monthValues$ = new BehaviorSubject([]);\r\n    this.kpiData$ = new BehaviorSubject([]);\r\n    this.graphicData$ = new BehaviorSubject([]);\r\n    this.financialData$ = new BehaviorSubject([]);\r\n\r\n    this.initProjects();\r\n    this.initTeams();\r\n    this.initHierarchy();\r\n  }\r\n\r\n  initProjects(): void {\r\n    this.utilitiesService.projects$.subscribe((projects: Project[]) => {\r\n      this.projects = projects;\r\n    });\r\n  }\r\n\r\n  initTeams(): void {\r\n    this.utilitiesService.teams$.subscribe((teams: Team[]) => {\r\n      this.teams = teams;\r\n    });\r\n  }\r\n\r\n  initHierarchy(): void {\r\n    this.http\r\n      .get(this.BO.companyHierarchy())\r\n      .subscribe((hierarchy: HierarchyNode) => {\r\n        this.hierarchy$.next(hierarchy);\r\n      });\r\n  }\r\n\r\n  getHierarchy(): any {\r\n    return this.hierarchy$.getValue;\r\n  }\r\n\r\n  getCurrentMonth(): void {\r\n    this.months = this.us.getMonths();\r\n  }\r\n\r\n  resetSummaryValues(): void {\r\n    this.summaryValues$.next([]);\r\n    this.monthValues$.next([]);\r\n  }\r\n\r\n  initializeKpiValues(): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.http\r\n      .get<MonthlySummaryReport[]>(this.BO.companyKpiStats())\r\n      .subscribe((reports: MonthlySummaryReport[]) => {\r\n        this.kpiData$.next(reports);\r\n        resolve();\r\n      }, () => reject());\r\n    });\r\n  }\r\n\r\n  initalizeGraphicData(monthIdFrom: number, monthIdTo: number): void {\r\n    this.http\r\n      .get(this.BO.companyGraphicStats(monthIdFrom, monthIdTo))\r\n      .subscribe((reports: GraphicSummaryReport[]) => {\r\n        this.graphicData$.next(reports);\r\n      });\r\n  }\r\n\r\n  initializeSummaryValues(monthIdFrom: number, monthIdTo: number): void {\r\n    this.http\r\n      .get(this.BO.companySummary(monthIdFrom, monthIdTo))\r\n      .subscribe((values: ProValues) => {\r\n        this.summaryValues$.next(values.period);\r\n        this.monthValues$.next(values.months);\r\n      });\r\n  }\r\n\r\n  initializeDetailValues(monthId: number): Promise<FcEntry[]> {\r\n    let promise = new Promise<FcEntry[]>((resolve: any, reject: any) => {\r\n      this.http\r\n        .get(this.BO.companyDetails(monthId))\r\n        .subscribe((forecasts: FcEntry[]) => {\r\n          this.forecastService.addForecasts(forecasts);\r\n          resolve(forecasts);\r\n        });\r\n    });\r\n    return promise;\r\n  }\r\n\r\n  initializeProbabilityDetailValues(monthId: number): Promise<FcEntry[]> {\r\n    let promise = new Promise<FcEntry[]>((resolve: any, reject: any) => {\r\n      this.http\r\n      .get<FcEntry[]>(this.BO.companyDetails(monthId))\r\n      .subscribe((forecasts: FcEntry[]) => {\r\n        resolve(forecasts);\r\n      });\r\n    });\r\n\r\n    return promise;\r\n  }\r\n\r\n  initializeFinancialData(monthIdFrom: number, monthIdTo): Promise<FinancialControllerSummaryAPPS[]> {​​​​​​​​\r\n    let promise = new Promise<FinancialControllerSummaryAPPS[]>((resolve: any, reject: any) => {​​​​​​​​\r\n    this.http\r\n          .get<FinancialControllerSummaryAPPS[]>(this.BO.financialSummary(monthIdFrom,monthIdTo))\r\n          .subscribe((financialSummary: FinancialControllerSummaryAPPS[]) => {​​​​​​​​\r\n          this.financialData$.next(financialSummary);\r\n          resolve(financialSummary);\r\n          }​​​​​​​​);\r\n        }​​​​​​​​);\r\n    return promise;\r\n  }\r\n  \r\n  \r\n\r\n  getGraphicData(): GraphicSummaryReport[] {\r\n    return this.graphicData$.getValue();\r\n  }\r\n\r\n  getKpiData(): MonthlySummaryReport[] {\r\n    return this.kpiData$.getValue();\r\n  }\r\n\r\n  getSummaryValues(): SummaryValues[] {\r\n    return this.summaryValues$.getValue();\r\n  }\r\n\r\n  getMonthValues(): SummaryValues[] {\r\n    return this.monthValues$.getValue();\r\n  }\r\n\r\n  getFinancialData(): FinancialControllerSummaryAPPS[] {\r\n    return this.financialData$.getValue();\r\n  }\r\n\r\n  calculateTeamleadValues(filter: string, team: any[]): any[] {\r\n    let teamleads: any[] = [];\r\n\r\n    if (filter === \"pl\") {\r\n      team\r\n        .filter((u: User) => u.permission === environment.roles.pl || u.roleId === 7 ) //pl or hop\r\n        .forEach((p: User) => {\r\n          let childs: number[] = team\r\n            .filter((c: User) => c.parentId === p.id)\r\n            .map((c: User) => c.id);\r\n          this.getTeamnameForPL(p.id, p.firstName + \" \" + p.lastName);\r\n          \r\n          teamleads.push({\r\n            id: p.id,\r\n            name: this.getTeamnameForPL(p.id, p.firstName + \" \" + p.lastName),\r\n            prodUnitCode : p.prodUnitCode,\r\n            childs: [p.id].concat(\r\n              team\r\n                .filter((c: User) => childs.indexOf(c.parentId) >= 0)\r\n                .map((c: User) => c.id)\r\n                .concat(childs)\r\n            ),\r\n          });\r\n        });\r\n    } else {\r\n      team\r\n        .filter(\r\n          (u: User) =>\r\n            u.permission === environment.roles.pdl ||\r\n            u.permission === environment.roles.pl\r\n        )\r\n        .forEach((p: User) => {\r\n          teamleads.push({\r\n            id: p.id,\r\n            name: p.firstName + \" \" + p.lastName,\r\n            prodUnitCode : p.prodUnitCode,\r\n            childs: [p.id].concat(\r\n              team\r\n                .filter((c: User) => c.parentId === p.id)\r\n                .map((c: User) => c.id)\r\n            ),\r\n          });\r\n        });\r\n    }\r\n\r\n    teamleads.forEach((teamlead: any) => {\r\n      teamlead.projectDays = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => u.projectDays)\r\n        .reduce((a, b) => a + b, 0);\r\n\r\n      teamlead.billableDays = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => u.billableDays)\r\n        .reduce((a, b) => a + b, 0);\r\n\r\n      teamlead.vacationDays = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => u.vacationDays)\r\n        .reduce((a, b) => a + b, 0);\r\n\r\n      teamlead.totalDays = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => u.totalDays)\r\n        .reduce((a, b) => a + b, 0);\r\n\r\n      teamlead.ros = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => u.ros)\r\n        .reduce((a, b) => a + b, 0);\r\n\r\n      let fteCss: number = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => u.fte)\r\n        .reduce((a, b) => a + b, 0);\r\n      \r\n      teamlead.fte = fteCss;\r\n\r\n      teamlead.cor = teamlead.ros / teamlead.billableDays;\r\n\r\n      teamlead.arve = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => parseInt(u.arve, 10))\r\n        .reduce((a, b) => a + b, 0);\r\n      teamlead.arve = (teamlead.arve / fteCss).toFixed(0);\r\n\r\n      teamlead.urve = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => parseInt(u.urve, 10))\r\n        .reduce((a, b) => a + b, 0);\r\n      teamlead.urve = (teamlead.urve / fteCss).toFixed(0);\r\n    });\r\n\r\n    return teamleads;\r\n  }\r\n\r\n  getTeamnameForPL(teamLeadId: number, teamLeadName: string): string {\r\n    let t: Team[] = this.teams.filter(\r\n      (team: Team) => team.teamLeadId == teamLeadId\r\n    );\r\n    if (t.length > 0) {\r\n      return t[0].name;\r\n    } else {\r\n      return teamLeadName;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns an observable of the period forecast data for the company\r\n   * Used for csv export\r\n   *\r\n   * @param exportValues\r\n   */\r\n  getCsvExportData(monthIdFrom: number, monthIdTo: number): Observable<any> {\r\n    const httpOptions: object = {\r\n      responseType: \"blob\" as \"json\",\r\n    };\r\n\r\n    return this.http.get<any>(\r\n      this.BO.companyCsvExport(monthIdFrom, monthIdTo),\r\n      httpOptions\r\n    );\r\n  }\r\n}\r\n\r\nexport interface ProValues {\r\n  period: SummaryValues[];\r\n  months: SummaryValues[];\r\n}\r\n\r\nexport interface SummaryValues {\r\n  monthId: number;\r\n  probabilityId: number;\r\n  billableDays: number;\r\n  nonBillableDays: number;\r\n  vacationDays: number;\r\n  trainingDays: number;\r\n  businessDays: number;\r\n  benchDays: number;\r\n  workingDays: number;\r\n  fteCss: number;\r\n  cor: number;\r\n  arve: number;\r\n  urve: number;\r\n  ros: number;\r\n  external: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "months",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SummaryValues[]",
                    "optional": false,
                    "description": "",
                    "line": 304
                },
                {
                    "name": "period",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SummaryValues[]",
                    "optional": false,
                    "description": "",
                    "line": 303
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Role",
            "id": "interface-Role-ebfd77c90a4acdd380e223caac8c7e90",
            "file": "src/app/core/interfaces/role.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Role {\n\t/**\n\t * unique system id\n\t */\n\troleId: number;\n\t\n\t/**\n\t * role name\n\t */\n\tname: string;\n\n\t/**\n\t * role shortcut\n\t */\n\tshortcut: string;\n\n\t/**\n\t * role description\n\t */\n\tdescription: string;\n\n\tpermissionType: any;\n\n\t/**\n\t * role active attribute (currently ignored for roles)\n\t */\n\tactive: boolean;\n}\n",
            "properties": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>role active attribute (currently ignored for roles)</p>\n",
                    "line": 30,
                    "rawdescription": "\n\nrole active attribute (currently ignored for roles)\n"
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>role description</p>\n",
                    "line": 23,
                    "rawdescription": "\n\nrole description\n"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>role name</p>\n",
                    "line": 13,
                    "rawdescription": "\n\nrole name\n"
                },
                {
                    "name": "permissionType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "roleId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>unique system id</p>\n",
                    "line": 8,
                    "rawdescription": "\n\nunique system id\n"
                },
                {
                    "name": "shortcut",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>role shortcut</p>\n",
                    "line": 18,
                    "rawdescription": "\n\nrole shortcut\n"
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<p>role types structure</p>\n",
            "rawdescription": "\n\nrole types structure\n",
            "methods": []
        },
        {
            "name": "SummaryData",
            "id": "interface-SummaryData-1b79be463035855f6c7d03f9ef2c6d11",
            "file": "src/app/core/interfaces/summaryData.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SummaryData {\n  /**\n   * SummaryDataProject array with calculated values\n   */\n  days: SummaryDataProject[];\n\n  /**\n   * total revenue of all employees in one month\n   */\n  revenue: number;\n\n  /**\n   * external revenue of all employees in one month\n   */\n  extRevenue : number;\n\n  /**\n   * internal revenue of all employees in one month\n   */\n  intRevenue : number;\n\n  /**\n   * total working days per month\n   */\n  workingDays: number;\n\n  /**\n   * number of billable working days\n   */\n  billableDays: number;\n\n  /**\n   * total possible days - billable working days\n   */\n  nonbillableDays: number;\n\n  /**\n   * weighted average of team-member arve values\n   */\n  arve: number;\n\n  /**\n   * weighted average of team-member urve values\n   */\n  urve: number;\n}\n\n/**\n * summary-data projects structure\n */\nexport interface SummaryDataProject {\n  /**\n   * days title (e.g. 'Vacation', 'Training', 'Projects')\n   */\n  title: string;\n\n  /**\n   * Number of total days\n   */\n  days: number;\n\n  /**\n   * type equal to project-type\n   */\n  type: number;\n}\n",
            "properties": [
                {
                    "name": "arve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>weighted average of team-member arve values</p>\n",
                    "line": 43,
                    "rawdescription": "\n\nweighted average of team-member arve values\n"
                },
                {
                    "name": "billableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>number of billable working days</p>\n",
                    "line": 33,
                    "rawdescription": "\n\nnumber of billable working days\n"
                },
                {
                    "name": "days",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SummaryDataProject[]",
                    "optional": false,
                    "description": "<p>SummaryDataProject array with calculated values</p>\n",
                    "line": 8,
                    "rawdescription": "\n\nSummaryDataProject array with calculated values\n"
                },
                {
                    "name": "extRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>external revenue of all employees in one month</p>\n",
                    "line": 18,
                    "rawdescription": "\n\nexternal revenue of all employees in one month\n"
                },
                {
                    "name": "intRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>internal revenue of all employees in one month</p>\n",
                    "line": 23,
                    "rawdescription": "\n\ninternal revenue of all employees in one month\n"
                },
                {
                    "name": "nonbillableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>total possible days - billable working days</p>\n",
                    "line": 38,
                    "rawdescription": "\n\ntotal possible days - billable working days\n"
                },
                {
                    "name": "revenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>total revenue of all employees in one month</p>\n",
                    "line": 13,
                    "rawdescription": "\n\ntotal revenue of all employees in one month\n"
                },
                {
                    "name": "urve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>weighted average of team-member urve values</p>\n",
                    "line": 48,
                    "rawdescription": "\n\nweighted average of team-member urve values\n"
                },
                {
                    "name": "workingDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>total working days per month</p>\n",
                    "line": 28,
                    "rawdescription": "\n\ntotal working days per month\n"
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<p>summary-data structure</p>\n",
            "rawdescription": "\n\nsummary-data structure\n",
            "methods": []
        },
        {
            "name": "SummaryDataProject",
            "id": "interface-SummaryDataProject-1b79be463035855f6c7d03f9ef2c6d11",
            "file": "src/app/core/interfaces/summaryData.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SummaryData {\n  /**\n   * SummaryDataProject array with calculated values\n   */\n  days: SummaryDataProject[];\n\n  /**\n   * total revenue of all employees in one month\n   */\n  revenue: number;\n\n  /**\n   * external revenue of all employees in one month\n   */\n  extRevenue : number;\n\n  /**\n   * internal revenue of all employees in one month\n   */\n  intRevenue : number;\n\n  /**\n   * total working days per month\n   */\n  workingDays: number;\n\n  /**\n   * number of billable working days\n   */\n  billableDays: number;\n\n  /**\n   * total possible days - billable working days\n   */\n  nonbillableDays: number;\n\n  /**\n   * weighted average of team-member arve values\n   */\n  arve: number;\n\n  /**\n   * weighted average of team-member urve values\n   */\n  urve: number;\n}\n\n/**\n * summary-data projects structure\n */\nexport interface SummaryDataProject {\n  /**\n   * days title (e.g. 'Vacation', 'Training', 'Projects')\n   */\n  title: string;\n\n  /**\n   * Number of total days\n   */\n  days: number;\n\n  /**\n   * type equal to project-type\n   */\n  type: number;\n}\n",
            "properties": [
                {
                    "name": "days",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Number of total days</p>\n",
                    "line": 63,
                    "rawdescription": "\n\nNumber of total days\n"
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>days title (e.g. &#39;Vacation&#39;, &#39;Training&#39;, &#39;Projects&#39;)</p>\n",
                    "line": 58,
                    "rawdescription": "\n\ndays title (e.g. 'Vacation', 'Training', 'Projects')\n"
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>type equal to project-type</p>\n",
                    "line": 68,
                    "rawdescription": "\n\ntype equal to project-type\n"
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "description": "<p>summary-data projects structure</p>\n",
            "rawdescription": "\n\nsummary-data projects structure\n",
            "methods": []
        },
        {
            "name": "SummaryValues",
            "id": "interface-SummaryValues-554d26b131b83075f60650a4679472ca",
            "file": "src/app/core/services/forecasts/executive-forecasts.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { BusinessOperationsService } from \"../../shared/business-operations.service\";\r\nimport { BehaviorSubject, Observable } from \"rxjs\";\r\nimport { UtilitiesService } from \"../utilities.service\";\r\nimport { Month } from \"../../interfaces/month\";\r\nimport { ForecastService } from \"./forecast.service\";\r\nimport { FcEntry } from \"../../interfaces/fcEntry\";\r\nimport { User } from \"../../interfaces/user\";\r\nimport { FcProject } from \"../../interfaces/fcProject\";\r\nimport { Project } from \"../../interfaces/project\";\r\nimport { environment } from \"../../../../environments/environment\";\r\nimport { Team } from \"../../interfaces/team\";\r\nimport { MonthlySummaryReport } from \"../../interfaces/kpiData\";\r\nimport { GraphicSummaryReport } from \"../../interfaces/graphicData\";\r\nimport { HierarchyNode } from \"../../interfaces/hierarchyNode\";\r\nimport { FinancialControllerSummaryAPPS } from \"../../interfaces/financialAppsSummary\";\r\nimport { PageStateService } from '../../shared/page-state.service';\r\nimport { reject } from \"q\";\r\n/**\r\n * executive service\r\n */\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class ExecutiveForecastsService {\r\n  summaryValues$: BehaviorSubject<SummaryValues[]>;\r\n  monthValues$: BehaviorSubject<SummaryValues[]>;\r\n  kpiData$: BehaviorSubject<MonthlySummaryReport[]>;\r\n  graphicData$: BehaviorSubject<GraphicSummaryReport[]>;\r\n  hierarchy$: BehaviorSubject<HierarchyNode>;\r\n  financialData$: BehaviorSubject<FinancialControllerSummaryAPPS[]>;\r\n\r\n  monthId: number = 1;\r\n  months: Month[];\r\n  projects: Project[];\r\n  teams: Team[];\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private BO: BusinessOperationsService,\r\n    private us: UtilitiesService,\r\n    private pageState: PageStateService,\r\n    private forecastService: ForecastService,\r\n    private utilitiesService: UtilitiesService\r\n  ) {\r\n    this.summaryValues$ = new BehaviorSubject([]);\r\n    this.monthValues$ = new BehaviorSubject([]);\r\n    this.kpiData$ = new BehaviorSubject([]);\r\n    this.graphicData$ = new BehaviorSubject([]);\r\n    this.financialData$ = new BehaviorSubject([]);\r\n\r\n    this.initProjects();\r\n    this.initTeams();\r\n    this.initHierarchy();\r\n  }\r\n\r\n  initProjects(): void {\r\n    this.utilitiesService.projects$.subscribe((projects: Project[]) => {\r\n      this.projects = projects;\r\n    });\r\n  }\r\n\r\n  initTeams(): void {\r\n    this.utilitiesService.teams$.subscribe((teams: Team[]) => {\r\n      this.teams = teams;\r\n    });\r\n  }\r\n\r\n  initHierarchy(): void {\r\n    this.http\r\n      .get(this.BO.companyHierarchy())\r\n      .subscribe((hierarchy: HierarchyNode) => {\r\n        this.hierarchy$.next(hierarchy);\r\n      });\r\n  }\r\n\r\n  getHierarchy(): any {\r\n    return this.hierarchy$.getValue;\r\n  }\r\n\r\n  getCurrentMonth(): void {\r\n    this.months = this.us.getMonths();\r\n  }\r\n\r\n  resetSummaryValues(): void {\r\n    this.summaryValues$.next([]);\r\n    this.monthValues$.next([]);\r\n  }\r\n\r\n  initializeKpiValues(): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.http\r\n      .get<MonthlySummaryReport[]>(this.BO.companyKpiStats())\r\n      .subscribe((reports: MonthlySummaryReport[]) => {\r\n        this.kpiData$.next(reports);\r\n        resolve();\r\n      }, () => reject());\r\n    });\r\n  }\r\n\r\n  initalizeGraphicData(monthIdFrom: number, monthIdTo: number): void {\r\n    this.http\r\n      .get(this.BO.companyGraphicStats(monthIdFrom, monthIdTo))\r\n      .subscribe((reports: GraphicSummaryReport[]) => {\r\n        this.graphicData$.next(reports);\r\n      });\r\n  }\r\n\r\n  initializeSummaryValues(monthIdFrom: number, monthIdTo: number): void {\r\n    this.http\r\n      .get(this.BO.companySummary(monthIdFrom, monthIdTo))\r\n      .subscribe((values: ProValues) => {\r\n        this.summaryValues$.next(values.period);\r\n        this.monthValues$.next(values.months);\r\n      });\r\n  }\r\n\r\n  initializeDetailValues(monthId: number): Promise<FcEntry[]> {\r\n    let promise = new Promise<FcEntry[]>((resolve: any, reject: any) => {\r\n      this.http\r\n        .get(this.BO.companyDetails(monthId))\r\n        .subscribe((forecasts: FcEntry[]) => {\r\n          this.forecastService.addForecasts(forecasts);\r\n          resolve(forecasts);\r\n        });\r\n    });\r\n    return promise;\r\n  }\r\n\r\n  initializeProbabilityDetailValues(monthId: number): Promise<FcEntry[]> {\r\n    let promise = new Promise<FcEntry[]>((resolve: any, reject: any) => {\r\n      this.http\r\n      .get<FcEntry[]>(this.BO.companyDetails(monthId))\r\n      .subscribe((forecasts: FcEntry[]) => {\r\n        resolve(forecasts);\r\n      });\r\n    });\r\n\r\n    return promise;\r\n  }\r\n\r\n  initializeFinancialData(monthIdFrom: number, monthIdTo): Promise<FinancialControllerSummaryAPPS[]> {​​​​​​​​\r\n    let promise = new Promise<FinancialControllerSummaryAPPS[]>((resolve: any, reject: any) => {​​​​​​​​\r\n    this.http\r\n          .get<FinancialControllerSummaryAPPS[]>(this.BO.financialSummary(monthIdFrom,monthIdTo))\r\n          .subscribe((financialSummary: FinancialControllerSummaryAPPS[]) => {​​​​​​​​\r\n          this.financialData$.next(financialSummary);\r\n          resolve(financialSummary);\r\n          }​​​​​​​​);\r\n        }​​​​​​​​);\r\n    return promise;\r\n  }\r\n  \r\n  \r\n\r\n  getGraphicData(): GraphicSummaryReport[] {\r\n    return this.graphicData$.getValue();\r\n  }\r\n\r\n  getKpiData(): MonthlySummaryReport[] {\r\n    return this.kpiData$.getValue();\r\n  }\r\n\r\n  getSummaryValues(): SummaryValues[] {\r\n    return this.summaryValues$.getValue();\r\n  }\r\n\r\n  getMonthValues(): SummaryValues[] {\r\n    return this.monthValues$.getValue();\r\n  }\r\n\r\n  getFinancialData(): FinancialControllerSummaryAPPS[] {\r\n    return this.financialData$.getValue();\r\n  }\r\n\r\n  calculateTeamleadValues(filter: string, team: any[]): any[] {\r\n    let teamleads: any[] = [];\r\n\r\n    if (filter === \"pl\") {\r\n      team\r\n        .filter((u: User) => u.permission === environment.roles.pl || u.roleId === 7 ) //pl or hop\r\n        .forEach((p: User) => {\r\n          let childs: number[] = team\r\n            .filter((c: User) => c.parentId === p.id)\r\n            .map((c: User) => c.id);\r\n          this.getTeamnameForPL(p.id, p.firstName + \" \" + p.lastName);\r\n          \r\n          teamleads.push({\r\n            id: p.id,\r\n            name: this.getTeamnameForPL(p.id, p.firstName + \" \" + p.lastName),\r\n            prodUnitCode : p.prodUnitCode,\r\n            childs: [p.id].concat(\r\n              team\r\n                .filter((c: User) => childs.indexOf(c.parentId) >= 0)\r\n                .map((c: User) => c.id)\r\n                .concat(childs)\r\n            ),\r\n          });\r\n        });\r\n    } else {\r\n      team\r\n        .filter(\r\n          (u: User) =>\r\n            u.permission === environment.roles.pdl ||\r\n            u.permission === environment.roles.pl\r\n        )\r\n        .forEach((p: User) => {\r\n          teamleads.push({\r\n            id: p.id,\r\n            name: p.firstName + \" \" + p.lastName,\r\n            prodUnitCode : p.prodUnitCode,\r\n            childs: [p.id].concat(\r\n              team\r\n                .filter((c: User) => c.parentId === p.id)\r\n                .map((c: User) => c.id)\r\n            ),\r\n          });\r\n        });\r\n    }\r\n\r\n    teamleads.forEach((teamlead: any) => {\r\n      teamlead.projectDays = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => u.projectDays)\r\n        .reduce((a, b) => a + b, 0);\r\n\r\n      teamlead.billableDays = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => u.billableDays)\r\n        .reduce((a, b) => a + b, 0);\r\n\r\n      teamlead.vacationDays = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => u.vacationDays)\r\n        .reduce((a, b) => a + b, 0);\r\n\r\n      teamlead.totalDays = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => u.totalDays)\r\n        .reduce((a, b) => a + b, 0);\r\n\r\n      teamlead.ros = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => u.ros)\r\n        .reduce((a, b) => a + b, 0);\r\n\r\n      let fteCss: number = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => u.fte)\r\n        .reduce((a, b) => a + b, 0);\r\n      \r\n      teamlead.fte = fteCss;\r\n\r\n      teamlead.cor = teamlead.ros / teamlead.billableDays;\r\n\r\n      teamlead.arve = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => parseInt(u.arve, 10))\r\n        .reduce((a, b) => a + b, 0);\r\n      teamlead.arve = (teamlead.arve / fteCss).toFixed(0);\r\n\r\n      teamlead.urve = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => parseInt(u.urve, 10))\r\n        .reduce((a, b) => a + b, 0);\r\n      teamlead.urve = (teamlead.urve / fteCss).toFixed(0);\r\n    });\r\n\r\n    return teamleads;\r\n  }\r\n\r\n  getTeamnameForPL(teamLeadId: number, teamLeadName: string): string {\r\n    let t: Team[] = this.teams.filter(\r\n      (team: Team) => team.teamLeadId == teamLeadId\r\n    );\r\n    if (t.length > 0) {\r\n      return t[0].name;\r\n    } else {\r\n      return teamLeadName;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns an observable of the period forecast data for the company\r\n   * Used for csv export\r\n   *\r\n   * @param exportValues\r\n   */\r\n  getCsvExportData(monthIdFrom: number, monthIdTo: number): Observable<any> {\r\n    const httpOptions: object = {\r\n      responseType: \"blob\" as \"json\",\r\n    };\r\n\r\n    return this.http.get<any>(\r\n      this.BO.companyCsvExport(monthIdFrom, monthIdTo),\r\n      httpOptions\r\n    );\r\n  }\r\n}\r\n\r\nexport interface ProValues {\r\n  period: SummaryValues[];\r\n  months: SummaryValues[];\r\n}\r\n\r\nexport interface SummaryValues {\r\n  monthId: number;\r\n  probabilityId: number;\r\n  billableDays: number;\r\n  nonBillableDays: number;\r\n  vacationDays: number;\r\n  trainingDays: number;\r\n  businessDays: number;\r\n  benchDays: number;\r\n  workingDays: number;\r\n  fteCss: number;\r\n  cor: number;\r\n  arve: number;\r\n  urve: number;\r\n  ros: number;\r\n  external: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "arve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 319
                },
                {
                    "name": "benchDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 315
                },
                {
                    "name": "billableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 310
                },
                {
                    "name": "businessDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 314
                },
                {
                    "name": "cor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 318
                },
                {
                    "name": "external",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 322
                },
                {
                    "name": "fteCss",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 317
                },
                {
                    "name": "monthId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 308
                },
                {
                    "name": "nonBillableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 311
                },
                {
                    "name": "probabilityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 309
                },
                {
                    "name": "ros",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 321
                },
                {
                    "name": "trainingDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 313
                },
                {
                    "name": "urve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 320
                },
                {
                    "name": "vacationDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 312
                },
                {
                    "name": "workingDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 316
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "SummaryValues",
            "id": "interface-SummaryValues-20658b50bbffaab2c6cd09809dc5ceb9-1",
            "file": "src/app/forecast/components/executive-chart/executive-chart.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, OnInit, Inject } from \"@angular/core\";\nimport { Chart } from \"chart.js\";\nimport {\n  MatDialogRef,\n  MAT_DIALOG_DATA\n} from \"@angular/material/dialog\";\nimport { ExecutiveForecastsService } from \"../../../core/services/forecasts/executive-forecasts.service\";\nimport { MonthlySummaryReport } from \"../../../core/interfaces/kpiData\";\nimport { PageStateService } from \"../../../core/shared/page-state.service\";\nimport { DatePipe } from '@angular/common';\n\n@Component({\n  selector: \"app-executive-chart\",\n  templateUrl: \"./executive-chart.component.html\",\n  styleUrls: [\"./executive-chart.component.scss\"]\n})\nexport class ExecutiveChartComponent implements OnInit {\n\n  showComponent: boolean = false;\n  \n  summaryValuesArray: SummaryValues[];\n  \n  reports: MonthlySummaryReport[];\n\n  monthLabels: string[];\n\n  /*\n   *ChartJs object which will render the ARVE/URVE chart\n   */\n  arveUrveChart;\n  /*\n   * ARVE set for total ARVE/month for the next 6 months\n   */\n  arve: number[];\n  /*\n   * URVE set for total URVE/month for the next 6 months\n   */\n  urve: number[];\n\n  /*\n   *ChartJs object which will render the COR chart\n   */\n  corChart;\n  /*\n   * COR set for total COR/month for the next 6 months\n   */\n  cor: number[];\n\n  /*\n   *ChartJs object which will render the Revenue chart\n   */\n  revenueChart;\n  /*\n   * Internal revenue set for internal revenue/month for the next 6 months\n   */\n  intRev: number[];\n  /*\n   * External revenue set for external revenue/month for the next 6 months\n   */\n  extRev: number[];\n  /*\n   * Total revenue set for total revenue/month for the next 6 months\n   */\n  totalRev: number[];\n\n  fte: number[];\n\n  constructor(\n    public dialogRef: MatDialogRef<ExecutiveChartComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private executiveService: ExecutiveForecastsService,\n    private pageState: PageStateService,\n    private datePipe: DatePipe,\n  ) {}\n\n  ngOnInit() {\n    this.reports = this.executiveService.getKpiData();\n    this.reports = this.reports.sort(function(a, b) { return a.monthId-b.monthId });\n    \n    /**initialize arve to empty set */\n    this.arve = [];\n    \n    /**initialize urve to empty set */\n    this.urve = [];\n    \n    /**initialize cor to empty set */\n    this.cor = [];\n    \n    /**initialize extRev to empty set */\n    this.extRev = [];\n    \n    /**initialize intRev to empty set */\n    this.intRev = [];\n    \n    /**initialize totalRev to empty set */\n    this.totalRev = [];\n\n    this.monthLabels = [];\n\n    this.fte = [];\n\n    if (this.reports.length > 0) {\n      this.processTableData(this.reports);\n      this.showComponent = true;    \n    }   \n  }\n\n  processTableData(reports: MonthlySummaryReport[]) : void {\n    for (let report of reports) {\n      this.arve.push(report.arve * 100);\n      this.urve.push(report.urve * 100);\n      this.cor.push(report.cor);\n      this.intRev.push(report.internalRevenue);\n      this.fte.push(report.fte);\n      this.extRev.push(report.externalRevenue);\n      this.totalRev.push(report.ros);\n      this.monthLabels.push(report.month.charAt(0).toUpperCase() + report.month.slice(1) + ' \\'' + (report.year % 100).toString());\n    }\n\n    this.arveUrveChart = new Chart(\"arve-urve\", {\n      type: \"bar\",\n      data: {\n        labels: this.monthLabels,\n        datasets: [\n          {\n            label: \"ARVE\",\n            backgroundColor: \"#95E616\",\n            data: this.arve\n          },\n          {\n            label: \"URVE\",\n            backgroundColor: \"#FF304C\",\n            data: this.urve\n          }\n        ]\n      },\n      options: {\n        legend: {\n          display: false\n        },\n        scales: {\n          xAxes: [\n            {\n              display: true,\n              gridLines: {\n                display: false\n              },\n              barPercentage: 0.7,\n              categoryPercentage: 0.5\n            }\n          ],\n          yAxes: [\n            {\n              display: true,\n              gridLines: {\n                display: false\n              },\n              ticks: {\n                min: 0,\n                max: 100\n              }\n            }\n          ]\n        }\n      }\n    });\n\n    this.corChart = new Chart(\"cor\", {\n      type: \"line\",\n      data: {\n        labels: this.monthLabels,\n        datasets: [\n          {\n            data: this.cor,\n            borderColor: \"#7e39ba\",\n            fill: false\n          }\n        ]\n      },\n      options: {\n        legend: {\n          display: false\n        },\n        scales: {\n          xAxes: [\n            {\n              display: true,\n              gridLines: {\n                display: false\n              },\n              barPercentage: 0.5,\n              categoryPercentage: 0.5\n            }\n          ],\n          yAxes: [\n            {\n              display: true,\n              gridLines: {\n                display: false\n              },\n              ticks: {\n                min: 0\n              }\n            }\n          ]\n        }\n      }\n    });\n\n    this.revenueChart = this.arveUrveChart = new Chart(\"revenue\", {\n      type: \"bar\",\n      data: {\n        labels: this.monthLabels,\n        datasets: [\n          {\n            label: \"INT\",\n            backgroundColor: \"#12abdb\",\n            data: this.intRev\n          },\n          {\n            label: \"EXT\",\n            backgroundColor: \"#0070ad\",\n            data: this.extRev\n          },\n          {\n            label: \"TOTAL\",\n            backgroundColor: \"#2b0a3d\",\n            data: this.totalRev\n          }\n        ]\n      },\n      options: {\n        legend: {\n          display: true\n        },\n        scales: {\n          xAxes: [\n            {\n              display: true,\n              gridLines: {\n                display: false\n              },\n              barPercentage: 0.7,\n              categoryPercentage: 0.5\n            }\n          ],\n          yAxes: [\n            {\n              display: true,\n              gridLines: {\n                display: false\n              },\n              ticks: {\n                min: 0\n              }\n            }\n          ]\n        }\n      }\n    });\n  }\n\n  total(numArray: number[]) {\n    return numArray.reduce(function(a, b) {\n      return a + b;\n    }, 0);\n  }\n\n  average(numArray: number[]) : number {\n    return this.total(numArray) / numArray.length;\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  exportCSV(): void {\n    this.pageState.showSpinner();\n    let lineEnding = \"\\r\\n\";\n    let header = \"KPI;\" + this.monthLabels.join(\";\") + lineEnding;\n    let body: string = \"ARVE;\" + this.arve.map(this.numberToString).join(\";\") + lineEnding + \n      \"URVE;\" + this.urve.map(this.numberToString).join(\";\") + lineEnding +\n      \"COR;\" + this.cor.map(this.numberToString).join(\";\") + lineEnding +\n      \"Int. Revenue;\" + this.intRev.map(this.numberToString).join(\";\") + lineEnding + \n      \"Ext. Revenue;\" + this.extRev.map(this.numberToString).join(\";\") + lineEnding +\n      \"Total Revenue;\" + this.totalRev.map(this.numberToString).join(\";\") + lineEnding +\n      \"FTE;\" + this.fte.map(this.numberToString).join(\";\") + lineEnding;\n    const data = header + body;\n    const blob: Blob = new Blob([data], { type: \"text/csv\" });\n    const filename: string = this.datePipe.transform(new Date(), \"yyyyMMdd\") + \"-KPIOverview.csv\";    \n    this.pageState.hideSpinner();\n\n    if (window.navigator.msSaveOrOpenBlob) {\n      window.navigator.msSaveOrOpenBlob(blob, filename);\n    } else {\n      const url: string = window.URL.createObjectURL(blob);\n\n      let a: HTMLAnchorElement = document.createElement(\"a\");\n      a.href = url;\n      a.download = filename;\n\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n    }\n  }\n\n  numberToString(no: number): string {\n    return no.toLocaleString(\"de\",  { minimumFractionDigits: 2 } ).replace(\".\",\"\");\n  }\n}\n\nexport interface SummaryValues {\n  monthId: number;\n  probabilityId: number;\n  billableDays: number;\n  nonBillableDays: number;\n  vacationDays: number;\n  trainingDays: number;\n  businessDays: number;\n  benchDays: number;\n  workingDays: number;\n  fteCss: number;\n  cor: number;\n  arve: number;\n  fte: number;\n  urve: number;\n  ros: number;\n  external: number;\n}\n",
            "properties": [
                {
                    "name": "arve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 326
                },
                {
                    "name": "benchDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 322
                },
                {
                    "name": "billableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 317
                },
                {
                    "name": "businessDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 321
                },
                {
                    "name": "cor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 325
                },
                {
                    "name": "external",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 330
                },
                {
                    "name": "fte",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 327
                },
                {
                    "name": "fteCss",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 324
                },
                {
                    "name": "monthId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 315
                },
                {
                    "name": "nonBillableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 318
                },
                {
                    "name": "probabilityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 316
                },
                {
                    "name": "ros",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 329
                },
                {
                    "name": "trainingDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 320
                },
                {
                    "name": "urve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 328
                },
                {
                    "name": "vacationDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 319
                },
                {
                    "name": "workingDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 323
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "SummaryValues-1"
        },
        {
            "name": "SummaryValues",
            "id": "interface-SummaryValues-ac20f4385d75b1185bf257f4675587a0-2",
            "file": "src/app/forecast/components/executive-summary/executive-summary.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnInit, Input, ChangeDetectorRef } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { PageStateService } from '../../../core/shared/page-state.service';\n\nimport { CalculationService } from \"../../../core/services/forecasts/calculation.service\";\nimport { ProbabilitySummary } from \"../../../core/interfaces/probabilitySummary\";\nimport { ProbabilityRecord } from \"../../../core/interfaces/probabilityRecord\";\nimport { DatePipe } from '@angular/common';\n\n@Component({\n  selector: 'app-executive-summary',\n  templateUrl: './executive-summary.component.html',\n  styleUrls: ['./executive-summary.component.scss']\n})\nexport class ExecutiveSummaryComponent implements OnInit {\n  @Input('summary') summary: any;\n\n  loaded = false;\n\n  probabilitySummary: ProbabilitySummary;\n  \n  probabilitySource: MatTableDataSource<ProbabilityRecord>;\n\n  displayedColumns: string[] = [\n    \"probabilityId\",\n    \"total\",\n    \"billableDays\",\n    \"vacationDays\",\n    \"workingDays\",\n    \"cor\",\n    \"ros\",\n    \"ext\",\n    \"int\",\n    \"arve\",\n    \"urve\"\n  ];\n\n  constructor(\n    private pageState: PageStateService,\n    private changeDetectorRefs: ChangeDetectorRef,\n    private calculationService: CalculationService,\n    private datePipe: DatePipe,\n  ) {}\n\n  ngOnInit(): void {\n    this.calculationService.probabilitySummary$.subscribe((summ: ProbabilitySummary) => {\n      if(!this.loaded) {\n        this.loaded = true;\n      } else {\n        this.probabilitySummary = summ;\n        this.probabilitySource = new MatTableDataSource(summ.probabilites);\n        this.changeDetectorRefs.detectChanges();\n        setTimeout(() => {\n          this.pageState.hideSpinner();\n        }, 500);\n      }\n    });\n  }\n\n  exportCSV(): void {\n    this.pageState.showSpinner();\n    let lineEnding = \"\\r\\n\";\n\n    let header = \"KPI;\" + this.probabilitySummary.probabilites.map(x => x.name).join(\";\") + \";Total\" + lineEnding;\n    let body = \"ARVE;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.arve)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.arve) + lineEnding\n      + \"URVE;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.urve)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.urve) + lineEnding\n      + \"ROS;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.revenue)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.revenue) + lineEnding\n      + \"Int. Revenue;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.internalRevenue)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.internalRevenue) + lineEnding\n      + \"Ext. Revenue;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.externalRevenue)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.externalRevenue) + lineEnding\n      + \"COR;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.cor)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.cor) + lineEnding\n      + \"Paid Days;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.paidDays)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.paidDays) + lineEnding\n      + \"Vacation Days;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.vacationDays)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.vacationDays) + lineEnding\n      + \"Billable Days;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.billableDays)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.billableDays) + lineEnding\n      + \"Project Days;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.billableDays + x.nonBillableDays)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.nonBillableDays + this.probabilitySummary.billableDays) + lineEnding;\n\n    const data = header + body;\n    const blob: Blob = new Blob([data], { type: \"text/csv\" });\n    const filename: string = this.datePipe.transform(new Date(), \"yyyyMMdd\") + \"-SummaryProbabilities.csv\";    \n    this.pageState.hideSpinner();\n\n    if (window.navigator.msSaveOrOpenBlob) {\n      window.navigator.msSaveOrOpenBlob(blob, filename);\n    } else {\n      const url: string = window.URL.createObjectURL(blob);\n\n      let a: HTMLAnchorElement = document.createElement(\"a\");\n      a.href = url;\n      a.download = filename;\n\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n    }\n  }\n\n  numberToString(no: number): string {\n    return no.toLocaleString(\"de\",  { minimumFractionDigits: 2 } ).replace(\".\",\"\");\n  }\n}\n\nexport interface PeriodicElement {\n  name: string;\n  firm: number;\n  weight: number;\n  symbol: string;\n}\n\nexport interface SummaryValues {\n  monthId: number;\n  probabilityId: number;\n  billableDays: number;\n  nonBillableDays: number;\n  vacationDays: number;\n  trainingDays: number;\n  businessDays: number;\n  benchDays: number;\n  workingDays: number;\n  fteCss: number;\n  cor: number;\n  arve: number;\n  urve: number;\n  ros: number;\n  external: number;\n}",
            "properties": [
                {
                    "name": "arve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 121
                },
                {
                    "name": "benchDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 117
                },
                {
                    "name": "billableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 112
                },
                {
                    "name": "businessDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 116
                },
                {
                    "name": "cor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 120
                },
                {
                    "name": "external",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 124
                },
                {
                    "name": "fteCss",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 119
                },
                {
                    "name": "monthId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 110
                },
                {
                    "name": "nonBillableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 113
                },
                {
                    "name": "probabilityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 111
                },
                {
                    "name": "ros",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 123
                },
                {
                    "name": "trainingDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 115
                },
                {
                    "name": "urve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 122
                },
                {
                    "name": "vacationDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 114
                },
                {
                    "name": "workingDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 118
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "SummaryValues-2"
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-b6ace57de69f22f228dba4df25a6a302",
            "file": "src/app/core/security/auth.service.ts",
            "properties": [
                {
                    "name": "admin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>user isAdmin flag (extracted from token)</p>\n",
                    "line": 40,
                    "rawdescription": "\n\nuser isAdmin flag (extracted from token)\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "expireDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>token expire date (extracted from token)</p>\n",
                    "line": 35,
                    "rawdescription": "\n\ntoken expire date (extracted from token)\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "getstarted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>getstated (extracted from token)\ntrue if user loggs in the first time or hasn&#39;t logged in for 2 months</p>\n",
                    "line": 46,
                    "rawdescription": "\n\ngetstated (extracted from token)\ntrue if user loggs in the first time or hasn't logged in for 2 months\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "logged",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>Locked state</p>\n",
                    "line": 15,
                    "rawdescription": "\n\nLocked state\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "loginScreenTimeout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>timeout which triggers when token expires</p>\n",
                    "line": 51,
                    "rawdescription": "\n\ntimeout which triggers when token expires\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "roleId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>roleid [updated role variable] (extracted from token)</p>\n",
                    "line": 30,
                    "rawdescription": "\n\nroleid [updated role variable] (extracted from token)\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>JWT token</p>\n",
                    "line": 20,
                    "rawdescription": "\n\nJWT token\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>userId (extracted from token)</p>\n",
                    "line": 25,
                    "rawdescription": "\n\nuserId (extracted from token)\n",
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getExpireDate",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nget token expire date\n",
                    "description": "<p>get token expire date</p>\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "getRoleId",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nget role id\n",
                    "description": "<p>get role id</p>\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "getToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nget token\n",
                    "description": "<p>get token</p>\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "getUserId",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nget user id\n",
                    "description": "<p>get user id</p>\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "hasAdminPermission",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nget admin permission flag\n",
                    "description": "<p>get admin permission flag</p>\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "hasRole",
                    "args": [
                        {
                            "name": "expectedRole",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTests if user has a specific role\nRole has to be equal or more powerful than expected role\nRoles: CSS: Client Serving Staff, PDL: People Development Lead, TL: Team Lead, PL: Practice Lead, MSL: Market Segment Lead, FC: Financial Controller\n",
                    "description": "<p>Tests if user has a specific role\nRole has to be equal or more powerful than expected role\nRoles: CSS: Client Serving Staff, PDL: People Development Lead, TL: Team Lead, PL: Practice Lead, MSL: Market Segment Lead, FC: Financial Controller</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2993,
                                "end": 3005,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "expectedRole"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2987,
                                "end": 2992,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "isLogged",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTest if user is logged in\n",
                    "description": "<p>Test if user is logged in</p>\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "setAdminPermission",
                    "args": [
                        {
                            "name": "admin",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 218,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nset admin permission flag\n",
                    "description": "<p>set admin permission flag</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4383,
                                "end": 4388,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "admin"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4377,
                                "end": 4382,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setExpireDate",
                    "args": [
                        {
                            "name": "expireDate",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nset token expire date\n",
                    "description": "<p>set token expire date</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4226,
                                "end": 4236,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "expireDate"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4220,
                                "end": 4225,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setGetStarted",
                    "args": [
                        {
                            "name": "getstarted",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "getstarted",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setLogged",
                    "args": [
                        {
                            "name": "login",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nset logged state\nif logged false: set token to empty string\n",
                    "description": "<p>set logged state\nif logged false: set token to empty string</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2579,
                                "end": 2584,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "login"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2573,
                                "end": 2578,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setRoleId",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 202,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nset role id\n",
                    "description": "<p>set role id</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4105,
                                "end": 4107,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4099,
                                "end": 4104,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 226,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nset token (variable + localstorage)\n",
                    "description": "<p>set token (variable + localstorage)</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4536,
                                "end": 4541,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "token"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4530,
                                "end": 4535,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setUserId",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nset user id\n",
                    "description": "<p>set user id</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3994,
                                "end": 3996,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3988,
                                "end": 3993,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "showGetStarted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "useToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nApply token and set auth variables if token is valid.\nOtherwise: set logged in to false.\n",
                    "description": "<p>Apply token and set auth variables if token is valid.\nOtherwise: set logged in to false.</p>\n",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1461,
                                "end": 1466,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "token"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1455,
                                "end": 1460,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Handles token authentication</p>\n",
            "rawdescription": "\n\nHandles token authentication\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { environment as env } from '../../../environments/environment';\nimport * as jwt_decode from 'jwt-decode';\n\n/**\n * Handles token authentication\n */\n@Injectable()\nexport class AuthService {\n\n  /**\n   * Locked state\n   */\n  private logged: boolean = false;\n\n  /**\n   * JWT token\n   */\n  private token: string;\n\n  /**\n   * userId (extracted from token)\n   */\n  private userId: number;\n\n  /**\n   * roleid [updated role variable] (extracted from token)\n   */\n  private roleId: number;\n\n  /**\n   * token expire date (extracted from token)\n   */\n  private expireDate: number;\n\n  /**\n   * user isAdmin flag (extracted from token)\n   */\n  private admin: boolean;\n\n  /**\n   * getstated (extracted from token)\n   * true if user loggs in the first time or hasn't logged in for 2 months\n   */\n  private getstarted: boolean = false;\n\n  /**\n   * timeout which triggers when token expires\n   */\n  private loginScreenTimeout: any;\n\n  /**\n   * constructor for router\n   */\n  constructor(private router: Router) {}\n\n  /**\n   * Test if user is logged in\n   */\n  public isLogged(): boolean {\n    if (!this.logged && localStorage.getItem('v-token')) {\n      return this.useToken(localStorage.getItem('v-token'));\n    } else {\n      return this.logged || false;\n    }\n  }\n\n  /**\n   * Apply token and set auth variables if token is valid. \n   * Otherwise: set logged in to false.\n   * @param token\n   */\n  public useToken(token: string): boolean {\n    if (this.loginScreenTimeout) {\n      clearTimeout(this.loginScreenTimeout);\n    }\n    try {\n      const tokenContent: any = jwt_decode(token);\n      //console.log(tokenContent);\n\n      const time: number = tokenContent.exp - (new Date().getTime() / 1000);\n\n      if (time < 0) {\n        this.setToken('');\n        this.setLogged(false);\n\n        return false;\n      } else {\n        this.loginScreenTimeout = setTimeout(() => {\n          this.router.navigate(['/login']);\n          this.setToken('');\n          this.setLogged(false);\n        }, (time * 1000));\n      }\n\n      this.setUserId(tokenContent.userId);\n      this.setRoleId(tokenContent.permission);\n      this.setExpireDate(tokenContent.exp);\n      this.setAdminPermission(tokenContent.admin ? tokenContent.admin : false);\n      this.setLogged(true);\n      this.setToken(token);\n\n      return true;\n    } catch (e) {\n        this.setToken('');\n        this.setLogged(false);\n\n        return false;\n    }\n  }\n\n  /**\n   * set logged state\n   * if logged false: set token to empty string\n   * @param login\n   */\n  public setLogged(login: boolean): void {\n    this.logged = login;\n\n    if (!this.logged) {\n      this.setToken('');\n    }\n  }\n\n  /**\n   * Tests if user has a specific role\n   * Role has to be equal or more powerful than expected role\n   * Roles: CSS: Client Serving Staff, PDL: People Development Lead, TL: Team Lead, PL: Practice Lead, MSL: Market Segment Lead, FC: Financial Controller\n   * @param expectedRole\n   */\n  public hasRole(expectedRole: number): boolean {\n    if (expectedRole === env.roles.admin) {\n      return this.hasAdminPermission();\n    } else if (expectedRole <= this.roleId) {\n      return true;\n    }\n\n    return false;\n  }\n\n  public setGetStarted(getstarted: boolean): void {\n    this.getstarted = getstarted;\n  }\n\n  public showGetStarted(): boolean {\n    if (this.getstarted) {\n      this.getstarted = false;\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * get user id\n   */\n  public getUserId(): number {\n    return this.userId;\n  }\n\n  /**\n   * get role id\n   */\n  public getRoleId(): number {\n    return this.roleId;\n  }\n\n  /**\n   * get token expire date\n   */\n  public getExpireDate(): number {\n    return this.expireDate;\n  }\n\n  /**\n   * get token\n   */\n  public getToken(): string {\n    return this.token;\n  }\n\n  /**\n   * get admin permission flag\n   */\n  private hasAdminPermission(): boolean {\n    return this.admin;\n  }\n\n  /**\n   * set user id\n   * @param id\n   */\n  private setUserId(id: number): void {\n    this.userId = id;\n  }\n\n  /**\n   * set role id\n   * @param id\n   */\n  private setRoleId(id: number): void {\n    this.roleId = id;\n  }\n\n  /**\n   * set token expire date\n   * @param expireDate\n   */\n  private setExpireDate(expireDate: number): void {\n    this.expireDate = expireDate;\n  }\n\n  /**\n   * set admin permission flag\n   * @param admin\n   */\n  private setAdminPermission(admin: boolean): void {\n    this.admin = admin;\n  }\n\n  /**\n   * set token (variable + localstorage)\n   * @param token\n   */\n  private setToken(token: string): void {\n    localStorage.setItem('v-token', token);\n    this.token = token;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor for router</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 51,
                "rawdescription": "\n\nconstructor for router\n",
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "BusinessOperationsService",
            "id": "injectable-BusinessOperationsService-cda3f69046c9d0dc9ea98c61a6d98af3",
            "file": "src/app/core/shared/business-operations.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "companyCsvExport",
                    "args": [
                        {
                            "name": "monthIdFrom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthIdTo",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 217,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns csv with summarized company data\n",
                    "description": "<p>returns csv with summarized company data</p>\n",
                    "jsdoctags": [
                        {
                            "name": "monthIdFrom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthIdTo",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "companyDetails",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns company data details for executive view\n",
                    "description": "<p>returns company data details for executive view</p>\n",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "companyGraphicStats",
                    "args": [
                        {
                            "name": "monthIdFrom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthIdTo",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 231,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns graphic stats path\n",
                    "description": "<p>returns graphic stats path</p>\n",
                    "jsdoctags": [
                        {
                            "name": "monthIdFrom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthIdTo",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "companyHierarchy",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 238,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns hierarchy path\n",
                    "description": "<p>returns hierarchy path</p>\n"
                },
                {
                    "name": "companyKpiStats",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 224,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns kpi stats path\n",
                    "description": "<p>returns kpi stats path</p>\n"
                },
                {
                    "name": "companySummary",
                    "args": [
                        {
                            "name": "monthIdFrom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthIdTo",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 203,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns company data summary for executive view\n",
                    "description": "<p>returns company data summary for executive view</p>\n",
                    "jsdoctags": [
                        {
                            "name": "monthIdFrom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthIdTo",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createUser",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteTeam",
                    "args": [
                        {
                            "name": "teamId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "teamId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "financialSummary",
                    "args": [
                        {
                            "name": "monthIdFrom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthIdTo",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 256,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthIdFrom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthIdTo",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "forecast",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns get single forecast path\n",
                    "description": "<p>returns get single forecast path</p>\n",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "forecastHistory",
                    "args": [
                        {
                            "name": "forecastId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns get forecast history path\n",
                    "description": "<p>returns get forecast history path</p>\n",
                    "jsdoctags": [
                        {
                            "name": "forecastId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAdminMonths",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns get months path\n",
                    "description": "<p>returns get months path</p>\n"
                },
                {
                    "name": "getAdminProjects",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns get projects path\n",
                    "description": "<p>returns get projects path</p>\n"
                },
                {
                    "name": "getGrades",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns get grades path\n",
                    "description": "<p>returns get grades path</p>\n"
                },
                {
                    "name": "getLockedMonths",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getOwnUser",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns get own user path\n",
                    "description": "<p>returns get own user path</p>\n"
                },
                {
                    "name": "getProbabilities",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns get probabilities path\n",
                    "description": "<p>returns get probabilities path</p>\n"
                },
                {
                    "name": "getRoles",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns get roles path\n",
                    "description": "<p>returns get roles path</p>\n"
                },
                {
                    "name": "getSavedMonths",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTeam",
                    "args": [
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTeams",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUser",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns get user by id path\n",
                    "description": "<p>returns get user by id path</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1124,
                                "end": 1130,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "userId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1118,
                                "end": 1123,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getUsers",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns get all team-members path\n",
                    "description": "<p>returns get all team-members path</p>\n"
                },
                {
                    "name": "getUtilMonths",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns get months path\n",
                    "description": "<p>returns get months path</p>\n"
                },
                {
                    "name": "getUtilProjects",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns get projects path\n",
                    "description": "<p>returns get projects path</p>\n"
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns login-path\n",
                    "description": "<p>returns login-path</p>\n"
                },
                {
                    "name": "monthlyForecast",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns get monthly forecast path\n",
                    "description": "<p>returns get monthly forecast path</p>\n"
                },
                {
                    "name": "periodForecast",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 189,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns get period forecast path\n",
                    "description": "<p>returns get period forecast path</p>\n"
                },
                {
                    "name": "renewToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns token-refresh path\n",
                    "description": "<p>returns token-refresh path</p>\n"
                },
                {
                    "name": "requestProject",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 245,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturn reqeust path for projects\n",
                    "description": "<p>return reqeust path for projects</p>\n"
                },
                {
                    "name": "setMonths",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nadd/update a project\n",
                    "description": "<p>add/update a project</p>\n"
                },
                {
                    "name": "setMonthState",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setProject",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nadd/update a project\n",
                    "description": "<p>add/update a project</p>\n"
                },
                {
                    "name": "setProjectState",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setTeam",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setTeamLockState",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setUserState",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "staffingForecasts",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 252,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns forcasts for staffing for month\n",
                    "description": "<p>returns forcasts for staffing for month</p>\n",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "teamForecast",
                    "args": [
                        {
                            "name": "teamleadId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "levelId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns get forecasts for all team-members path\n",
                    "description": "<p>returns get forecasts for all team-members path</p>\n",
                    "jsdoctags": [
                        {
                            "name": "teamleadId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "levelId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "0",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unlockForecast",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 175,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\n",
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateUser",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>business-operations service: provides the urls for all possible requests</p>\n",
            "rawdescription": "\n\nbusiness-operations service: provides the urls for all possible requests\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { environment as env } from '../../../environments/environment';\n\n/**\n * business-operations service: provides the urls for all possible requests\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class BusinessOperationsService {\n  /**\n   * returns login-path\n   */\n  login(): string {\n    return env.api + env.authPath + '/login';\n  }\n\n  /**\n   * returns token-refresh path\n   */\n  renewToken(): string {\n    return env.api + env.authPath + '/refresh-token';\n  }\n\n  /**\n   * returns get all team-members path\n   */\n  getUsers(): string {\n    return env.api + env.usersPath;\n  }\n\n  getTeam(level: number): string {\n    return env.api + env.teamPath + '/level/' + level;\n  }\n\n  setTeamLockState(monthId: number, level: number): string {\n    return env.api + env.teamPath + '/level/' + level + '/month/' + monthId + '/lock';\n  }\n\n  getLockedMonths(): string {\n    return env.api + env.forecastsPath + '/' + env.lockedPath;\n  }\n\n  getSavedMonths(): string {\n    return env.api + env.forecastsPath + '/' + env.savedPath;\n  }\n\n  /**\n   * returns get user by id path\n   * @param userId\n   */\n  getUser(userId: number): string {\n    return env.api + env.usersPath + '/' + userId;\n  }\n\n  /**\n   * returns get own user path\n   */\n  getOwnUser(): string {\n    return env.api + 'user/me';\n  }\n\n  updateUser(userId: number): string {\n    return env.api + env.usersPath + '/' + userId;\n  }\n\n  createUser(): string {\n    return env.api + env.usersPath\n  }\n\n  setUserState(userId: number): string {\n    return env.api + env.usersPath + '/' + userId + '/active';\n  }\n\n  /**\n   * returns get roles path\n   */\n  getRoles(): string {\n    return env.api + env.rolePath;\n  }\n\n  /**\n   * returns get grades path\n   */\n  getGrades(): string {\n    return env.api + env.gradePath;\n  }\n\n  /**\n   * returns get months path\n   */\n  getUtilMonths(): string {\n    return env.api + env.utilsPath + '/months';\n  }\n\n  /**\n   * returns get months path\n   */\n  getAdminMonths(): string {\n    return env.api + env.monthsPath;\n  }\n\n  /**\n   * add/update a project\n   */\n  setMonths(): string {\n    return env.api + env.monthsPath;\n  }\n\n  setMonthState(): string {\n    return env.api + env.monthsPath + '/active';\n  }\n\n  /**\n   * returns get projects path\n   */\n  getUtilProjects(): string {\n    return env.api + env.utilsPath + '/projects';\n  }\n\n  /**\n   * returns get projects path\n   */\n  getAdminProjects(): string {\n    return env.api + env.projectsPath;\n  }\n\n  /**\n   * add/update a project\n   */\n  setProject(): string {\n    return env.api + env.projectsPath;\n  }\n\n  setProjectState(): string {\n    return env.api + env.projectsPath + '/active';\n  }\n\n  getTeams(): string {\n    return env.api + env.utilsPath + '/' + env.teamUtilsPath;\n  }\n\n  setTeam(): string {\n    return env.api + env.utilsPath + '/' + env.teamUtilsPath;\n  }\n\n  deleteTeam(teamId: number): string {\n    return env.api + env.utilsPath + '/' + env.teamUtilsPath + '/' + teamId;\n  }\n\n  /**\n   * returns get probabilities path\n   */\n  getProbabilities(): string {\n    return env.api + env.utilsPath + '/probabilities';\n  }\n\n  /**\n   * returns get single forecast path\n   */\n  forecast(userId: number, monthId: number): string {\n    return env.api + env.forecastsPath + '/user/' + userId + '/months/' + monthId;\n  }\n\n  /**\n   * returns get forecasts for all team-members path\n   */\n  teamForecast(teamleadId: number, monthId: number, levelId: number = 0): string {\n    return env.api + env.forecastsPath + '/team/' + teamleadId + '/months/' + monthId + '/level/' + levelId;\n  }\n\n  /**\n   * \n   */\n  unlockForecast(userId: number, monthId: number): string {\n    return env.api + env.forecastsPath + '/user/' + userId + '/months/' + monthId + '/unlock';\n  }\n\n  /**\n   * returns get monthly forecast path\n   */\n  monthlyForecast(): string {\n    return env.api + env.forecastsPath + '/export';\n  }\n\n  /**\n   * returns get period forecast path\n   */\n  periodForecast(): string {\n    return env.api + env.forecastsPath + '/export-team';\n  }\n\n  /**\n   * returns get forecast history path\n   */\n  forecastHistory(forecastId: number): string {\n    return env.api + env.forecastsPath + '/' + forecastId + '/history';\n  }\n\n  /**\n   * returns company data summary for executive view\n   */\n  companySummary(monthIdFrom: number, monthIdTo: number): string {\n    return env.api + env.forecastsPath + '/' + env.executivePath + '/summary/' + monthIdFrom + '/' + monthIdTo;\n  }\n\n  /**\n   * returns company data details for executive view\n   */\n  companyDetails(monthId: number): string {\n    return env.api + env.forecastsPath + '/' + env.executivePath + '/detail/' + monthId;\n  }\n\n  /**\n   * returns csv with summarized company data\n   */\n  companyCsvExport(monthIdFrom: number, monthIdTo: number): string {\n    return env.api + env.forecastsPath + '/export-summary/month/' + monthIdFrom + '/' + monthIdTo;\n  }\n\n  /**\n   * returns kpi stats path\n   */\n  companyKpiStats(): string {\n    return env.api + env.forecastsPath + '/' + env.executivePath + '/kpi-stats';\n  }\n\n  /**\n   * returns graphic stats path\n   */\n  companyGraphicStats(monthIdFrom: number, monthIdTo: number): string {\n    return env.api + env.forecastsPath + '/' + env.executivePath + '/graphics-data/' + monthIdFrom + '/' + monthIdTo;\n  }\n\n  /**\n   * returns hierarchy path\n   */\n  companyHierarchy(): string {\n    return env.api + env.forecastsPath + '/' + env.executivePath + '/hierarchy';\n  }\n\n  /**\n   * return reqeust path for projects\n   */\n  requestProject(): string {\n    return env.api + env.projectsPath + '/request';\n  }\n\n  /**\n   * returns forcasts for staffing for month\n  */\n  staffingForecasts(monthId: number): string {\n    return env.api + env.forecastsPath + '/' + env.executivePath + '/' + monthId;\n  }\n\n  financialSummary(monthIdFrom: number, monthIdTo: number): string {\n   return env.api + env.forecastsPath + '/' + env.executivePath + '/financial-summary/' + monthIdFrom + '/' + monthIdTo;\n}\n}\n",
            "type": "injectable"
        },
        {
            "name": "CalculationService",
            "id": "injectable-CalculationService-97f6f3123bad8843d2152591a6f6635a",
            "file": "src/app/core/services/forecasts/calculation.service.ts",
            "properties": [
                {
                    "name": "periodLength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "periodMonths",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "probabilityForecasts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FcEntry[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "probabilityForecastsPerMonth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | FcEntry[]>",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "probabilitySummary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProbabilitySummary",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "probabilitySummary$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<ProbabilitySummary>",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "probabilitySummaryPerMonth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | ProbabilitySummary>",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "probabilitySummaryPerMonth$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Map<number, ProbabilitySummary>>",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methods": [
                {
                    "name": "calculateFcProbabilitySummary",
                    "args": [
                        {
                            "name": "entry",
                            "type": "FcEntry",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "summary",
                            "type": "ProbabilitySummary",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ProbabilitySummary",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entry",
                            "type": "FcEntry",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "summary",
                            "type": "ProbabilitySummary",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calculateProbabilitySummary",
                    "args": [
                        {
                            "name": "entries",
                            "type": "FcEntry[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ProbabilitySummary",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entries",
                            "type": "FcEntry[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calculateProjectEntryProbabilitySummary",
                    "args": [
                        {
                            "name": "entry",
                            "type": "FcProject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "summary",
                            "type": "ProbabilitySummary",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isRelevant",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "gradeId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ProbabilitySummary",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "entry",
                            "type": "FcProject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "summary",
                            "type": "ProbabilitySummary",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isRelevant",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "gradeId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkPeriodRequest",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 292,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "checkPeriodRequestPerMonth",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 286,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProbabilitySummary",
                    "args": [],
                    "optional": false,
                    "returnType": "ProbabilitySummary",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "init",
                    "args": [
                        {
                            "name": "from",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "to",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "from",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "to",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initProbabilitySummary",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initProbabilitySummaryPerMonth",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isUserRelevant",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "summarize",
                    "args": [
                        {
                            "name": "summary",
                            "type": "ProbabilitySummary",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ProbabilitySummary",
                    "typeParameters": [],
                    "line": 273,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "summary",
                            "type": "ProbabilitySummary",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "summarizeRecord",
                    "args": [
                        {
                            "name": "record",
                            "type": "ProbabilityRecord",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ProbabilityRecord",
                    "typeParameters": [],
                    "line": 253,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "record",
                            "type": "ProbabilityRecord",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "summarizeTotal",
                    "args": [
                        {
                            "name": "summary",
                            "type": "ProbabilitySummary",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ProbabilitySummary",
                    "typeParameters": [],
                    "line": 263,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "summary",
                            "type": "ProbabilitySummary",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>forecast service</p>\n",
            "rawdescription": "\n\nforecast service\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { FcProject } from '../../interfaces/fcProject';\nimport { FcEntry } from '../../interfaces/fcEntry';\nimport { BusinessOperationsService } from '../../shared/business-operations.service';\nimport { Month } from '../../interfaces/month';\nimport { UtilitiesService } from '../utilities.service';\nimport { PageStateService } from '../../shared/page-state.service';\nimport { UserService } from '../user.service';\nimport { ForecastService } from './forecast.service';\nimport { ProbabilitySummary } from '../../interfaces/probabilitySummary';\nimport { ProbabilityRecord } from '../../interfaces/probabilityRecord';\nimport { ExecutiveForecastsService } from '../forecasts/executive-forecasts.service';\nimport { BehaviorSubject } from 'rxjs';\nimport { PerGrade } from '../../interfaces/perGrade';\n\n/**\n * forecast service\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class CalculationService {\n    probabilitySummary: ProbabilitySummary;\n    probabilitySummaryPerMonth: Map<number, ProbabilitySummary>;\n    periodLength: number;\n    periodMonths: Month[];\n    probabilityForecasts: FcEntry[];\n    probabilityForecastsPerMonth: Map<number, FcEntry[]>;\n    probabilitySummary$: BehaviorSubject<ProbabilitySummary>;\n    probabilitySummaryPerMonth$: BehaviorSubject<Map<number, ProbabilitySummary>>;\n\n    constructor(\n        private utilitiesService: UtilitiesService,\n        private userService: UserService,\n        private executiveService: ExecutiveForecastsService\n      ) {\n          this.probabilitySummary = new ProbabilitySummary();\n          this.probabilitySummaryPerMonth = new Map();\n\n          let probabilities = this.utilitiesService.getProbabilities();\n          for(let probability of probabilities) {\n              let record = new ProbabilityRecord();\n              record.id = probability.id;\n              record.name = probability.name;\n              this.probabilitySummary.probabilites.push(record);\n          }\n\n          this.probabilityForecasts = [];\n          this.probabilityForecastsPerMonth = new Map<number, FcEntry[]>();\n          this.periodMonths = [];\n          this.periodLength = 0;\n          this.probabilitySummary$ = new BehaviorSubject(this.probabilitySummary);\n          this.probabilitySummaryPerMonth$ = new BehaviorSubject(this.probabilitySummaryPerMonth);\n      }\n\n      isUserRelevant(monthId: number, userId: number): boolean {\n          let monthIndex = this.utilitiesService.getMonths().findIndex(x => x.id === monthId);\n          let month = this.utilitiesService.getMonths()[monthIndex];\n          \n          if(monthIndex === undefined || monthIndex === -1) {\n              return false;\n          }\n\n          let user = this.userService.getUser(userId);\n\n          if(user === undefined) {\n              return false;\n          }\n\n          return true;\n      }\n\n      init(from: number, to: number) {\n          this.probabilityForecasts = [];\n          this.probabilityForecastsPerMonth = new Map<number, FcEntry[]>();\n          let months = this.utilitiesService\n            .getMonths()\n            .filter((m: Month) => m.id >= from && m.id <= to);\n          this.periodLength = months.length;\n          this.periodMonths = months;\n\n          for(let month of this.periodMonths) {\n              this.executiveService.initializeProbabilityDetailValues(month.id).then((entries: FcEntry[]) => {\n                  this.probabilityForecastsPerMonth.set(month.id,entries);\n                  this.probabilityForecasts = this.probabilityForecasts.concat(entries);\n                  this.checkPeriodRequest();\n                  this.checkPeriodRequestPerMonth(month.id);\n              }).catch(() => {\n                  this.checkPeriodRequest();\n                  this.checkPeriodRequestPerMonth(month.id);\n              });\n          }\n      }\n\n      initProbabilitySummaryPerMonth(monthId :number): void {\n        this.probabilitySummaryPerMonth.set(monthId, this.calculateProbabilitySummary(this.probabilityForecastsPerMonth.get(monthId)));\n        this.probabilitySummaryPerMonth$.next(this.probabilitySummaryPerMonth);\n      }\n\n      initProbabilitySummary(): void {\n          this.probabilitySummary = this.calculateProbabilitySummary(this.probabilityForecasts);\n          this.probabilitySummary$.next(this.probabilitySummary);\n      }\n\n      getProbabilitySummary(): ProbabilitySummary {\n          return this.probabilitySummary;\n      }\n\n      calculateProbabilitySummary(entries: FcEntry[]): ProbabilitySummary {\n          let probabilities = this.utilitiesService.getProbabilities();\n          let summary = new  ProbabilitySummary();\n\n          for(let probability of probabilities) {\n              let record = new ProbabilityRecord();\n              record.id = probability.id;\n              record.name = probability.name;\n              summary.probabilites.push(record);\n          }\n\n          for(let entry of entries) {\n            //   if(!entry.isRelevant) {\n            //       continue;\n            //   }\n              \n              if(!this.isUserRelevant(entry.monthId, entry.userId)) {\n                  continue;\n              }\n\n              summary = this.calculateFcProbabilitySummary(entry, summary);\n          }\n\n          Array.from(summary.avgVacationDaysPerGrade.keys()).forEach(key=>{\n              summary.avgVacationDaysPerGrade.get(key).getAverage();\n          })\n\n          Array.from(summary.avgFTEPerGrade.keys()).forEach(key=>{\n            summary.avgFTEPerGrade.get(key).getAverage();\n        })\n          \n\n          summary = this.summarize(summary);\n          return summary;\n      }\n\n      calculateFcProbabilitySummary(entry: FcEntry, summary: ProbabilitySummary): ProbabilitySummary {\n          if(!summary.avgVacationDaysPerGrade.has(entry.gradeId)){\n              summary.avgVacationDaysPerGrade.set(entry.gradeId, new PerGrade());\n          }\n          if(!summary.avgFTEPerGrade.has(entry.gradeId)){\n            summary.avgFTEPerGrade.set(entry.gradeId, new PerGrade());\n          }\n\n          for(let projectEntry of entry.projects) {\n              summary = this.calculateProjectEntryProbabilitySummary(projectEntry, summary, entry.isRelevant, entry.gradeId);\n          }\n\n\n          summary.avgFTEPerGrade.get(entry.gradeId).value += entry.fte;\n\n          summary.avgVacationDaysPerGrade.get(entry.gradeId).users.add(entry.userId);\n          summary.avgFTEPerGrade.get(entry.gradeId).users.add(entry.userId);\n\n          let monthIndex = this.utilitiesService.getMonths().findIndex(x => x.id === entry.monthId);\n          let month = this.utilitiesService.getMonths()[monthIndex];\n          if(entry.isRelevant) {\n              summary.paidDays += entry.fte * parseInt(month.workingdays);\n          }\n\n          return summary;\n      }\n\n      calculateProjectEntryProbabilitySummary(entry: FcProject, summary: ProbabilitySummary, isRelevant: boolean, gradeId: number): ProbabilitySummary {\n          let recordIndex = summary.probabilites.findIndex(x => x.id === entry.probabilityId);\n          \n          if(recordIndex === undefined || recordIndex === -1) {\n              return summary;\n          }\n\n          let record = summary.probabilites[recordIndex];\n          record.paidDays += entry.plannedProjectDays;\n\n          if(entry.projectType === 1) { //billable\n            if(!entry.billable) {\n                    if(isRelevant) {\n                        record.nonBillableDays += entry.plannedProjectDays;\n                        summary.nonBillableDays += entry.plannedProjectDays;\n                    }\n                    \n            } else { //billable\n                if (isRelevant) {\n                    record.billableDays += entry.plannedProjectDays;\n                    summary.billableDays += entry.plannedProjectDays;\n                }\n                if (entry.cor !== 0) {\n                    record.corDays += entry.plannedProjectDays;\n                    summary.corDays += entry.plannedProjectDays;\n                }\n\n                record.revenue += entry.cor * entry.plannedProjectDays;\n                summary.revenue += entry.cor * entry.plannedProjectDays;\n                \n                if(entry.externalRevenue) {\n                    record.externalRevenue += entry.cor * entry.plannedProjectDays;\n                    summary.externalRevenue += entry.cor * entry.plannedProjectDays;\n                } else {\n                    record.internalRevenue += entry.cor * entry.plannedProjectDays;\n                    summary.internalRevenue += entry.cor * entry.plannedProjectDays;\n                }\n            }\n        } else if(entry.projectType === 4) { //vacation days\n            if(isRelevant) {\n                record.vacationDays += entry.plannedProjectDays;\n                summary.vacationDays += entry.plannedProjectDays;\n                summary.avgVacationDaysPerGrade.get(gradeId).value += entry.plannedProjectDays;\n            }\n        } else if(entry.projectType === 6) { //non billable\n            if(!entry.billable) {\n                if (isRelevant) {\n                    record.nonBillableDays += entry.plannedProjectDays;\n                    summary.nonBillableDays += entry.plannedProjectDays;\n                }\n            } else {\n                if (isRelevant) {\n                    record.billableDays += entry.plannedProjectDays;\n                    summary.billableDays += entry.plannedProjectDays;\n                }\n                \n                if (entry.cor !== 0) {\n                    record.corDays += entry.plannedProjectDays;\n                    summary.corDays += entry.plannedProjectDays;\n                }\n\n                record.revenue += entry.cor * entry.plannedProjectDays;\n                summary.revenue += entry.cor * entry.plannedProjectDays;\n\n                if(entry.externalRevenue) {\n                    record.externalRevenue += entry.cor * entry.plannedProjectDays;\n                    summary.externalRevenue += entry.cor * entry.plannedProjectDays;\n                } else {\n                    record.internalRevenue += entry.cor * entry.plannedProjectDays;\n                    summary.internalRevenue += entry.cor * entry.plannedProjectDays;\n                }\n            }\n        }\n\n        summary.probabilites[recordIndex] = record;\n\n        return summary\n      }\n\n      summarizeRecord(record: ProbabilityRecord): ProbabilityRecord {\n          record.cor = record.corDays === 0 ? 0 : record.revenue / record.corDays;\n\n          let divisor = record.paidDays - record.vacationDays;\n          record.arve = divisor === 0 ? 1 : (record.billableDays + record.nonBillableDays) / (record.paidDays - record.vacationDays);\n          record.urve = divisor === 0 ? 1 : (record.billableDays) / (record.paidDays - record.vacationDays);\n\n          return record;\n      }\n\n      summarizeTotal(summary: ProbabilitySummary): ProbabilitySummary {\n          summary.cor = summary.corDays === 0 ? 0 : summary.revenue / summary.corDays;\n\n          let divisor = summary.paidDays - summary.vacationDays;\n          summary.arve = divisor === 0 ? 1 : (summary.billableDays + summary.nonBillableDays) / (summary.paidDays - summary.vacationDays);\n          summary.urve = divisor === 0 ? 1 : (summary.billableDays) / (summary.paidDays - summary.vacationDays)\n\n          return summary;\n      }\n\n      summarize(summary: ProbabilitySummary): ProbabilitySummary {\n          summary = this.summarizeTotal(summary);\n          let records = [];\n          \n          for(let record of summary.probabilites) {\n              records.push(this.summarizeRecord(record));\n          }\n\n          summary.probabilites = records;\n\n          return summary;\n      }\n\n      checkPeriodRequestPerMonth(monthId: number): void {\n        if(monthId > 0) {\n            this.initProbabilitySummaryPerMonth(monthId);\n        }\n      }\n\n      checkPeriodRequest(): void {\n          this.periodLength = this.periodLength - 1;\n          if(this.periodLength <= 0) {\n              this.initProbabilitySummary();\n          }\n      }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DataSharingService",
            "id": "injectable-DataSharingService-e2641e95bbbd447b26a85859d4a06f9c",
            "file": "src/app/core/shared/data-sharing.service.ts",
            "properties": [
                {
                    "name": "corValueBiggerThanZero",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "hasInputFocus",
                    "defaultValue": "this.projectInputFocus.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "invalidInputs",
                    "defaultValue": "this.noOfInvalidInputs.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "isCorBiggerThanZero",
                    "defaultValue": "this.corValueBiggerThanZero.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "isProjectValid",
                    "defaultValue": "this.projectInputValid.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "noOfInvalidInputs",
                    "defaultValue": "new BehaviorSubject<number>(0)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "projectInputFocus",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "projectInputValid",
                    "defaultValue": "new BehaviorSubject<boolean>(true)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "hasProjectInputFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isCorValueBiggerThanZero",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isProjectInputValid",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "numberOfInvalidInputs",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setCorValueBiggerThanZero",
                    "args": [
                        {
                            "name": "corBiggerThanZero",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "corBiggerThanZero",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setNumberOfInvalidInputs",
                    "args": [
                        {
                            "name": "invalidInputsNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "invalidInputsNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setProjectInputFocus",
                    "args": [
                        {
                            "name": "projectFocus",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "projectFocus",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setProjectInputValid",
                    "args": [
                        {
                            "name": "projectValid",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "projectValid",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { User } from '../interfaces/user';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DataSharingService {\n    private projectInputFocus = new BehaviorSubject<boolean>(false);\n    private projectInputValid = new BehaviorSubject<boolean>(true);\n    private corValueBiggerThanZero = new BehaviorSubject<boolean>(false);\n    private noOfInvalidInputs = new BehaviorSubject<number>(0);\n    \n    private isProjectValid = this.projectInputValid.asObservable();\n    private hasInputFocus = this.projectInputFocus.asObservable();\n    private isCorBiggerThanZero = this.corValueBiggerThanZero.asObservable();\n    private invalidInputs = this.noOfInvalidInputs.asObservable();\n \n    constructor() {}\n\n    setProjectInputFocus(projectFocus: boolean): void {\n        this.projectInputFocus.next(projectFocus);\n    }\n\n    hasProjectInputFocus(): Observable<boolean> {\n        return this.hasInputFocus;\n    }\n\n    setNumberOfInvalidInputs(invalidInputsNumber: number): void {\n        this.noOfInvalidInputs.next(invalidInputsNumber);\n    }\n\n    numberOfInvalidInputs(): Observable<number> {\n        return this.invalidInputs;\n    }\n\n    setProjectInputValid(projectValid: boolean): void {\n        this.projectInputValid.next(projectValid);\n    }\n\n    isProjectInputValid(): Observable<boolean> {\n        return this.isProjectValid;\n    }\n\n    setCorValueBiggerThanZero(corBiggerThanZero: boolean): void {\n        this.corValueBiggerThanZero.next(corBiggerThanZero);\n    }\n\n    isCorValueBiggerThanZero(): Observable<boolean> {\n        return this.isCorBiggerThanZero;\n    }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 17
            },
            "type": "injectable"
        },
        {
            "name": "ExecutiveForecastsService",
            "id": "injectable-ExecutiveForecastsService-554d26b131b83075f60650a4679472ca",
            "file": "src/app/core/services/forecasts/executive-forecasts.service.ts",
            "properties": [
                {
                    "name": "financialData$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<FinancialControllerSummaryAPPS[]>",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "graphicData$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<GraphicSummaryReport[]>",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "hierarchy$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<HierarchyNode>",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "kpiData$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<MonthlySummaryReport[]>",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "monthId",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "months",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "monthValues$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<SummaryValues[]>",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "projects",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Project[]",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "summaryValues$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<SummaryValues[]>",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "teams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Team[]",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methods": [
                {
                    "name": "calculateTeamleadValues",
                    "args": [
                        {
                            "name": "filter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "team",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any[]",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "team",
                            "type": "any[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCsvExportData",
                    "args": [
                        {
                            "name": "monthIdFrom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthIdTo",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 290,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns an observable of the period forecast data for the company\nUsed for csv export\n\n",
                    "description": "<p>Returns an observable of the period forecast data for the company\nUsed for csv export</p>\n",
                    "jsdoctags": [
                        {
                            "name": "monthIdFrom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthIdTo",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCurrentMonth",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFinancialData",
                    "args": [],
                    "optional": false,
                    "returnType": "FinancialControllerSummaryAPPS[]",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getGraphicData",
                    "args": [],
                    "optional": false,
                    "returnType": "GraphicSummaryReport[]",
                    "typeParameters": [],
                    "line": 157,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getHierarchy",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getKpiData",
                    "args": [],
                    "optional": false,
                    "returnType": "MonthlySummaryReport[]",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMonthValues",
                    "args": [],
                    "optional": false,
                    "returnType": "SummaryValues[]",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSummaryValues",
                    "args": [],
                    "optional": false,
                    "returnType": "SummaryValues[]",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTeamnameForPL",
                    "args": [
                        {
                            "name": "teamLeadId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "teamLeadName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 273,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "teamLeadId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "teamLeadName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initalizeGraphicData",
                    "args": [
                        {
                            "name": "monthIdFrom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthIdTo",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthIdFrom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthIdTo",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initHierarchy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initializeDetailValues",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<FcEntry[]>",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeFinancialData",
                    "args": [
                        {
                            "name": "monthIdFrom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthIdTo",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<FinancialControllerSummaryAPPS[]>",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthIdFrom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthIdTo",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeKpiValues",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initializeProbabilityDetailValues",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<FcEntry[]>",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeSummaryValues",
                    "args": [
                        {
                            "name": "monthIdFrom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthIdTo",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthIdFrom",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthIdTo",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initProjects",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initTeams",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetSummaryValues",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>executive service</p>\n",
            "rawdescription": "\n\nexecutive service\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { BusinessOperationsService } from \"../../shared/business-operations.service\";\r\nimport { BehaviorSubject, Observable } from \"rxjs\";\r\nimport { UtilitiesService } from \"../utilities.service\";\r\nimport { Month } from \"../../interfaces/month\";\r\nimport { ForecastService } from \"./forecast.service\";\r\nimport { FcEntry } from \"../../interfaces/fcEntry\";\r\nimport { User } from \"../../interfaces/user\";\r\nimport { FcProject } from \"../../interfaces/fcProject\";\r\nimport { Project } from \"../../interfaces/project\";\r\nimport { environment } from \"../../../../environments/environment\";\r\nimport { Team } from \"../../interfaces/team\";\r\nimport { MonthlySummaryReport } from \"../../interfaces/kpiData\";\r\nimport { GraphicSummaryReport } from \"../../interfaces/graphicData\";\r\nimport { HierarchyNode } from \"../../interfaces/hierarchyNode\";\r\nimport { FinancialControllerSummaryAPPS } from \"../../interfaces/financialAppsSummary\";\r\nimport { PageStateService } from '../../shared/page-state.service';\r\nimport { reject } from \"q\";\r\n/**\r\n * executive service\r\n */\r\n@Injectable({\r\n  providedIn: \"root\",\r\n})\r\nexport class ExecutiveForecastsService {\r\n  summaryValues$: BehaviorSubject<SummaryValues[]>;\r\n  monthValues$: BehaviorSubject<SummaryValues[]>;\r\n  kpiData$: BehaviorSubject<MonthlySummaryReport[]>;\r\n  graphicData$: BehaviorSubject<GraphicSummaryReport[]>;\r\n  hierarchy$: BehaviorSubject<HierarchyNode>;\r\n  financialData$: BehaviorSubject<FinancialControllerSummaryAPPS[]>;\r\n\r\n  monthId: number = 1;\r\n  months: Month[];\r\n  projects: Project[];\r\n  teams: Team[];\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private BO: BusinessOperationsService,\r\n    private us: UtilitiesService,\r\n    private pageState: PageStateService,\r\n    private forecastService: ForecastService,\r\n    private utilitiesService: UtilitiesService\r\n  ) {\r\n    this.summaryValues$ = new BehaviorSubject([]);\r\n    this.monthValues$ = new BehaviorSubject([]);\r\n    this.kpiData$ = new BehaviorSubject([]);\r\n    this.graphicData$ = new BehaviorSubject([]);\r\n    this.financialData$ = new BehaviorSubject([]);\r\n\r\n    this.initProjects();\r\n    this.initTeams();\r\n    this.initHierarchy();\r\n  }\r\n\r\n  initProjects(): void {\r\n    this.utilitiesService.projects$.subscribe((projects: Project[]) => {\r\n      this.projects = projects;\r\n    });\r\n  }\r\n\r\n  initTeams(): void {\r\n    this.utilitiesService.teams$.subscribe((teams: Team[]) => {\r\n      this.teams = teams;\r\n    });\r\n  }\r\n\r\n  initHierarchy(): void {\r\n    this.http\r\n      .get(this.BO.companyHierarchy())\r\n      .subscribe((hierarchy: HierarchyNode) => {\r\n        this.hierarchy$.next(hierarchy);\r\n      });\r\n  }\r\n\r\n  getHierarchy(): any {\r\n    return this.hierarchy$.getValue;\r\n  }\r\n\r\n  getCurrentMonth(): void {\r\n    this.months = this.us.getMonths();\r\n  }\r\n\r\n  resetSummaryValues(): void {\r\n    this.summaryValues$.next([]);\r\n    this.monthValues$.next([]);\r\n  }\r\n\r\n  initializeKpiValues(): Promise<void> {\r\n    return new Promise<void>((resolve, reject) => {\r\n      this.http\r\n      .get<MonthlySummaryReport[]>(this.BO.companyKpiStats())\r\n      .subscribe((reports: MonthlySummaryReport[]) => {\r\n        this.kpiData$.next(reports);\r\n        resolve();\r\n      }, () => reject());\r\n    });\r\n  }\r\n\r\n  initalizeGraphicData(monthIdFrom: number, monthIdTo: number): void {\r\n    this.http\r\n      .get(this.BO.companyGraphicStats(monthIdFrom, monthIdTo))\r\n      .subscribe((reports: GraphicSummaryReport[]) => {\r\n        this.graphicData$.next(reports);\r\n      });\r\n  }\r\n\r\n  initializeSummaryValues(monthIdFrom: number, monthIdTo: number): void {\r\n    this.http\r\n      .get(this.BO.companySummary(monthIdFrom, monthIdTo))\r\n      .subscribe((values: ProValues) => {\r\n        this.summaryValues$.next(values.period);\r\n        this.monthValues$.next(values.months);\r\n      });\r\n  }\r\n\r\n  initializeDetailValues(monthId: number): Promise<FcEntry[]> {\r\n    let promise = new Promise<FcEntry[]>((resolve: any, reject: any) => {\r\n      this.http\r\n        .get(this.BO.companyDetails(monthId))\r\n        .subscribe((forecasts: FcEntry[]) => {\r\n          this.forecastService.addForecasts(forecasts);\r\n          resolve(forecasts);\r\n        });\r\n    });\r\n    return promise;\r\n  }\r\n\r\n  initializeProbabilityDetailValues(monthId: number): Promise<FcEntry[]> {\r\n    let promise = new Promise<FcEntry[]>((resolve: any, reject: any) => {\r\n      this.http\r\n      .get<FcEntry[]>(this.BO.companyDetails(monthId))\r\n      .subscribe((forecasts: FcEntry[]) => {\r\n        resolve(forecasts);\r\n      });\r\n    });\r\n\r\n    return promise;\r\n  }\r\n\r\n  initializeFinancialData(monthIdFrom: number, monthIdTo): Promise<FinancialControllerSummaryAPPS[]> {​​​​​​​​\r\n    let promise = new Promise<FinancialControllerSummaryAPPS[]>((resolve: any, reject: any) => {​​​​​​​​\r\n    this.http\r\n          .get<FinancialControllerSummaryAPPS[]>(this.BO.financialSummary(monthIdFrom,monthIdTo))\r\n          .subscribe((financialSummary: FinancialControllerSummaryAPPS[]) => {​​​​​​​​\r\n          this.financialData$.next(financialSummary);\r\n          resolve(financialSummary);\r\n          }​​​​​​​​);\r\n        }​​​​​​​​);\r\n    return promise;\r\n  }\r\n  \r\n  \r\n\r\n  getGraphicData(): GraphicSummaryReport[] {\r\n    return this.graphicData$.getValue();\r\n  }\r\n\r\n  getKpiData(): MonthlySummaryReport[] {\r\n    return this.kpiData$.getValue();\r\n  }\r\n\r\n  getSummaryValues(): SummaryValues[] {\r\n    return this.summaryValues$.getValue();\r\n  }\r\n\r\n  getMonthValues(): SummaryValues[] {\r\n    return this.monthValues$.getValue();\r\n  }\r\n\r\n  getFinancialData(): FinancialControllerSummaryAPPS[] {\r\n    return this.financialData$.getValue();\r\n  }\r\n\r\n  calculateTeamleadValues(filter: string, team: any[]): any[] {\r\n    let teamleads: any[] = [];\r\n\r\n    if (filter === \"pl\") {\r\n      team\r\n        .filter((u: User) => u.permission === environment.roles.pl || u.roleId === 7 ) //pl or hop\r\n        .forEach((p: User) => {\r\n          let childs: number[] = team\r\n            .filter((c: User) => c.parentId === p.id)\r\n            .map((c: User) => c.id);\r\n          this.getTeamnameForPL(p.id, p.firstName + \" \" + p.lastName);\r\n          \r\n          teamleads.push({\r\n            id: p.id,\r\n            name: this.getTeamnameForPL(p.id, p.firstName + \" \" + p.lastName),\r\n            prodUnitCode : p.prodUnitCode,\r\n            childs: [p.id].concat(\r\n              team\r\n                .filter((c: User) => childs.indexOf(c.parentId) >= 0)\r\n                .map((c: User) => c.id)\r\n                .concat(childs)\r\n            ),\r\n          });\r\n        });\r\n    } else {\r\n      team\r\n        .filter(\r\n          (u: User) =>\r\n            u.permission === environment.roles.pdl ||\r\n            u.permission === environment.roles.pl\r\n        )\r\n        .forEach((p: User) => {\r\n          teamleads.push({\r\n            id: p.id,\r\n            name: p.firstName + \" \" + p.lastName,\r\n            prodUnitCode : p.prodUnitCode,\r\n            childs: [p.id].concat(\r\n              team\r\n                .filter((c: User) => c.parentId === p.id)\r\n                .map((c: User) => c.id)\r\n            ),\r\n          });\r\n        });\r\n    }\r\n\r\n    teamleads.forEach((teamlead: any) => {\r\n      teamlead.projectDays = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => u.projectDays)\r\n        .reduce((a, b) => a + b, 0);\r\n\r\n      teamlead.billableDays = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => u.billableDays)\r\n        .reduce((a, b) => a + b, 0);\r\n\r\n      teamlead.vacationDays = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => u.vacationDays)\r\n        .reduce((a, b) => a + b, 0);\r\n\r\n      teamlead.totalDays = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => u.totalDays)\r\n        .reduce((a, b) => a + b, 0);\r\n\r\n      teamlead.ros = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => u.ros)\r\n        .reduce((a, b) => a + b, 0);\r\n\r\n      let fteCss: number = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => u.fte)\r\n        .reduce((a, b) => a + b, 0);\r\n      \r\n      teamlead.fte = fteCss;\r\n\r\n      teamlead.cor = teamlead.ros / teamlead.billableDays;\r\n\r\n      teamlead.arve = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => parseInt(u.arve, 10))\r\n        .reduce((a, b) => a + b, 0);\r\n      teamlead.arve = (teamlead.arve / fteCss).toFixed(0);\r\n\r\n      teamlead.urve = team\r\n        .filter((u: any) => teamlead.childs.indexOf(u.id) >= 0)\r\n        .map((u: any) => parseInt(u.urve, 10))\r\n        .reduce((a, b) => a + b, 0);\r\n      teamlead.urve = (teamlead.urve / fteCss).toFixed(0);\r\n    });\r\n\r\n    return teamleads;\r\n  }\r\n\r\n  getTeamnameForPL(teamLeadId: number, teamLeadName: string): string {\r\n    let t: Team[] = this.teams.filter(\r\n      (team: Team) => team.teamLeadId == teamLeadId\r\n    );\r\n    if (t.length > 0) {\r\n      return t[0].name;\r\n    } else {\r\n      return teamLeadName;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns an observable of the period forecast data for the company\r\n   * Used for csv export\r\n   *\r\n   * @param exportValues\r\n   */\r\n  getCsvExportData(monthIdFrom: number, monthIdTo: number): Observable<any> {\r\n    const httpOptions: object = {\r\n      responseType: \"blob\" as \"json\",\r\n    };\r\n\r\n    return this.http.get<any>(\r\n      this.BO.companyCsvExport(monthIdFrom, monthIdTo),\r\n      httpOptions\r\n    );\r\n  }\r\n}\r\n\r\nexport interface ProValues {\r\n  period: SummaryValues[];\r\n  months: SummaryValues[];\r\n}\r\n\r\nexport interface SummaryValues {\r\n  monthId: number;\r\n  probabilityId: number;\r\n  billableDays: number;\r\n  nonBillableDays: number;\r\n  vacationDays: number;\r\n  trainingDays: number;\r\n  businessDays: number;\r\n  benchDays: number;\r\n  workingDays: number;\r\n  fteCss: number;\r\n  cor: number;\r\n  arve: number;\r\n  urve: number;\r\n  ros: number;\r\n  external: number;\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "us",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "us",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ForecastService",
            "id": "injectable-ForecastService-47e5f2da71c82784bdc810cdfbf8c1f6",
            "file": "src/app/core/services/forecasts/forecast.service.ts",
            "properties": [
                {
                    "name": "forecasts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FcEntry[]",
                    "optional": false,
                    "description": "<p>contains all available forecasts which have already been loaded from the server</p>\n",
                    "line": 39,
                    "rawdescription": "\n\ncontains all available forecasts which have already been loaded from the server\n"
                },
                {
                    "name": "forecasts$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<FcEntry[]>",
                    "optional": false,
                    "description": "<p>observable which returns all available forecasts which have already been loaded from the server</p>\n",
                    "line": 34,
                    "rawdescription": "\n\nobservable which returns all available forecasts which have already been loaded from the server\n"
                },
                {
                    "name": "months",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "<p>contains all months</p>\n",
                    "line": 49,
                    "rawdescription": "\n\ncontains all months\n"
                },
                {
                    "name": "projects",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Project[]",
                    "optional": false,
                    "description": "<p>contains all projects</p>\n",
                    "line": 44,
                    "rawdescription": "\n\ncontains all projects\n"
                }
            ],
            "methods": [
                {
                    "name": "addForecasts",
                    "args": [
                        {
                            "name": "forecasts",
                            "type": "FcEntry[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "loadHistory",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nadds new forecasts\n",
                    "description": "<p>adds new forecasts</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2692,
                                "end": 2701,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "forecasts"
                            },
                            "type": "FcEntry[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2686,
                                "end": 2691,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2715,
                                "end": 2726,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "loadHistory"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "pos": 2709,
                                "end": 2714,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "addMandatoryProjects",
                    "args": [
                        {
                            "name": "fcProjects",
                            "type": "FcProject[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FcProject[]",
                    "typeParameters": [],
                    "line": 400,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTest if an available project is mandatory and has not been added to the forecast-projects yet\nIf it has not been added yet: adds it to projects\n",
                    "description": "<p>Test if an available project is mandatory and has not been added to the forecast-projects yet\nIf it has not been added yet: adds it to projects</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 13655,
                                "end": 13665,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "fcProjects"
                            },
                            "type": "FcProject[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 13649,
                                "end": 13654,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "addProject",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fcProject",
                            "type": "FcProject",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 418,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdd a project to a forecast entry\n",
                    "description": "<p>Add a project to a forecast entry</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 14234,
                                "end": 14241,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "monthId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 14228,
                                "end": 14233,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 14255,
                                "end": 14261,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "userId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 14249,
                                "end": 14254,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 14275,
                                "end": 14284,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "fcProject"
                            },
                            "type": "FcProject",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 14269,
                                "end": 14274,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "addProjectsToForecast",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "suggestedData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 244,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "suggestedData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calculateValues",
                    "args": [
                        {
                            "name": "forecast",
                            "type": "FcEntry",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FcEntry",
                    "typeParameters": [],
                    "line": 450,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalculate values: billable days, nonbillable days, projectDays, businessDays, vacationDays, arve, urve\n",
                    "description": "<p>Calculate values: billable days, nonbillable days, projectDays, businessDays, vacationDays, arve, urve</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 15301,
                                "end": 15309,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "forecast"
                            },
                            "type": "FcEntry",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 15295,
                                "end": 15300,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "checkForecastState",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 597,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nchecks state of forecast: currently \"locked\" and \"edited\" possible\n",
                    "description": "<p>checks state of forecast: currently &quot;locked&quot; and &quot;edited&quot; possible</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 20474,
                                "end": 20478,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "originalKeywordKind": 149,
                                "escapedText": "type"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 20468,
                                "end": 20473,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 20492,
                                "end": 20499,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "monthId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 20486,
                                "end": 20491,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 20513,
                                "end": 20519,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "userId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 20507,
                                "end": 20512,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "createNewForecast",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 229,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getForecastLockLevel",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number | boolean",
                    "typeParameters": [],
                    "line": 582,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMonthlyForecasts",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<FcEntry[]>",
                    "typeParameters": [],
                    "line": 627,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns promise of all forecasts for one month\nReturns data instantly if they already exist, otherwise: loads them from the server first\n",
                    "description": "<p>returns promise of all forecasts for one month\nReturns data instantly if they already exist, otherwise: loads them from the server first</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 21707,
                                "end": 21714,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "monthId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 21701,
                                "end": 21706,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "hasLeadRole",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 533,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initStaffingForecasts",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 645,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns forcasts for staffing component\n",
                    "description": "<p>returns forcasts for staffing component</p>\n",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadForecast",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 208,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoad a forecast from the server\n",
                    "description": "<p>Load a forecast from the server</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6922,
                                "end": 6928,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "userId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6916,
                                "end": 6921,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 6942,
                                "end": 6949,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "monthId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6936,
                                "end": 6941,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "loadForecastHistory",
                    "args": [
                        {
                            "name": "forecastId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<FcEntry[]>",
                    "typeParameters": [],
                    "line": 281,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoad the history of a forecast from the server\n",
                    "description": "<p>Load the history of a forecast from the server</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 9421,
                                "end": 9431,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "forecastId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 9415,
                                "end": 9420,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "removeProject",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 435,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemove a project from a forecast entry\n",
                    "description": "<p>Remove a project from a forecast entry</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 14768,
                                "end": 14775,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "monthId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 14762,
                                "end": 14767,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 14789,
                                "end": 14795,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "userId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 14783,
                                "end": 14788,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 14809,
                                "end": 14814,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 14803,
                                "end": 14808,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 528,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeletes all forecasts from application\n",
                    "description": "<p>Deletes all forecasts from application</p>\n"
                },
                {
                    "name": "saveForecast",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "submit",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 300,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSaves a forecast for a specific month\nIf submit param is set to true: Forecast gets locked\n",
                    "description": "<p>Saves a forecast for a specific month\nIf submit param is set to true: Forecast gets locked</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 9912,
                                "end": 9919,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "monthId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 9906,
                                "end": 9911,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 9933,
                                "end": 9939,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "userId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 9927,
                                "end": 9932,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 9953,
                                "end": 9959,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "submit"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "pos": 9947,
                                "end": 9952,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setForecast",
                    "args": [
                        {
                            "name": "forecast",
                            "type": "FcEntry",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "loadHistory",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "updated",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets forecast data\n",
                    "description": "<p>Sets forecast data</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2974,
                                "end": 2982,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "forecast"
                            },
                            "type": "FcEntry",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2968,
                                "end": 2973,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2996,
                                "end": 3007,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "loadHistory"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2990,
                                "end": 2995,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": "updated",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setForecastComment",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "comment",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the comment of a forecast\n",
                    "description": "<p>Sets the comment of a forecast</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6516,
                                "end": 6523,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "monthId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6510,
                                "end": 6515,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 6537,
                                "end": 6543,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "userId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6531,
                                "end": 6536,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 6557,
                                "end": 6564,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "comment"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6551,
                                "end": 6556,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setForecastHistory",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fcHistory",
                            "type": "FcEntry[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds the forecast history to a single forecast\n",
                    "description": "<p>Adds the forecast history to a single forecast</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6075,
                                "end": 6081,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "userId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6069,
                                "end": 6074,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 6095,
                                "end": 6102,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "monthId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6089,
                                "end": 6094,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 6116,
                                "end": 6125,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "fcHistory"
                            },
                            "type": "FcEntry[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6110,
                                "end": 6115,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setTeamLockState",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lockState",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 384,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lockState",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unlockForecast",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 365,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnlocks a forecast: only possible for teamleads\n",
                    "description": "<p>Unlocks a forecast: only possible for teamleads</p>\n",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateProjects",
                    "args": [
                        {
                            "name": "forecast",
                            "type": "FcEntry",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FcEntry",
                    "typeParameters": [],
                    "line": 541,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nValidates projects before saving forecast\n",
                    "description": "<p>Validates projects before saving forecast</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 18757,
                                "end": 18765,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "forecast"
                            },
                            "type": "FcEntry",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 18751,
                                "end": 18756,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>forecast service</p>\n",
            "rawdescription": "\n\nforecast service\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\nimport { FcProject } from '../../interfaces/fcProject';\r\nimport { Project } from '../../interfaces/project';\r\nimport { FcEntry } from '../../interfaces/fcEntry';\r\nimport { BusinessOperationsService } from '../../shared/business-operations.service';\r\nimport { Month } from '../../interfaces/month';\r\nimport { UtilitiesService } from '../utilities.service';\r\nimport { AuthService } from '../../security/auth.service';\r\nimport { PageStateService } from '../../shared/page-state.service';\r\nimport { UserService } from '../user.service';\r\nimport { User } from '../../interfaces/user';\r\nimport { environment as env } from '../../../../environments/environment.prod';\r\nimport { TeamUserService } from './team-user.service';\r\nimport { cloneDeep } from 'lodash';\r\nimport { DataSharingService } from '../../shared/data-sharing.service';\r\nimport { Router } from '@angular/router';\r\nimport { Suggestion } from '../../interfaces/suggestion';\r\nimport { resolve } from 'url';\r\n\r\n/**\r\n * forecast service\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ForecastService {\r\n  /**\r\n   * observable which returns all available forecasts which have already been loaded from the server\r\n   */\r\n  forecasts$: BehaviorSubject<FcEntry[]>;\r\n\r\n  /**\r\n   * contains all available forecasts which have already been loaded from the server\r\n   */\r\n  forecasts: FcEntry[];\r\n\r\n  /**\r\n   * contains all projects\r\n   */\r\n  projects: Project[];\r\n\r\n  /**\r\n   * contains all months\r\n   */\r\n  months: Month[];\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private snackBar: MatSnackBar,\r\n    private BO: BusinessOperationsService,\r\n    private utilitiesService: UtilitiesService,\r\n    private authService: AuthService,\r\n    private pageState: PageStateService,\r\n    private userService: UserService,\r\n    private teamService: TeamUserService,\r\n    private dataSharingService: DataSharingService,\r\n    private router: Router,\r\n  ) {\r\n    this.forecasts = [];\r\n    this.forecasts$ = new BehaviorSubject([]);\r\n\r\n    this.utilitiesService.projects$\r\n      .subscribe((projects: Project[]) => {\r\n        this.projects = projects;\r\n\r\n        this.forecasts.forEach((forecast: FcEntry) => {\r\n          forecast.projects = this.addMandatoryProjects(forecast.projects);\r\n        });\r\n        this.forecasts$.next(this.forecasts);\r\n      });\r\n\r\n    this.utilitiesService.months$\r\n      .subscribe((months: Month[]) => {\r\n        this.months = months;\r\n      });\r\n    \r\n  }\r\n\r\n  /**\r\n   * adds new forecasts\r\n   * @param forecasts\r\n   * @param loadHistory\r\n   */\r\n  addForecasts(forecasts: FcEntry[], loadHistory: boolean = false): void {\r\n    forecasts.forEach((forecast: FcEntry) => {\r\n      this.setForecast(forecast, loadHistory, false);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sets forecast data\r\n   * @param forecast\r\n   * @param loadHistory\r\n   */\r\n  setForecast(forecast: FcEntry, loadHistory: boolean, updated: boolean = false): void {\r\n    if (!forecast.userId || !forecast.monthId) {\r\n      return;\r\n    }\r\n\r\n    let mandatoryProjects: FcProject[] = forecast.projects.filter((p: FcProject) => p.mandatory === 'Y');\r\n    let nonmandatoryProjects: FcProject[] = forecast.projects.filter((p: FcProject) => p.mandatory !== 'Y');\r\n    if (this.forecasts.find((fc: FcEntry) => fc.userId === forecast.userId && fc.monthId === forecast.monthId)) {\r\n      this.forecasts\r\n        .filter((fc: FcEntry) => fc.userId === forecast.userId && fc.monthId === forecast.monthId)\r\n        .forEach((fc: FcEntry) => {\r\n          fc.forecastId = forecast.forecastId;\r\n          if (typeof forecast.locked !== 'number') {\r\n            fc.locked = forecast.locked === true ? this.authService.getRoleId() : -1;\r\n          } else {\r\n            fc.locked = forecast.locked;\r\n          }\r\n          fc.comment = forecast.comment;\r\n          fc.fte = forecast.fte //? forecast.fte : 1; \r\n          fc.gradeId = forecast.gradeId;\r\n          fc.isRelevant = forecast.isRelevant;\r\n          fc.projects = mandatoryProjects;\r\n          fc.updated = updated;\r\n\r\n          // Adds all mandatory projects which are not already set\r\n          if (fc.locked <= this.authService.getRoleId()) {\r\n            fc.projects = this.addMandatoryProjects(fc.projects);\r\n          }\r\n\r\n          // Adds all non-mandatory projects which have been set\r\n          fc.projects = [...fc.projects, ...nonmandatoryProjects];\r\n\r\n          // Calculates summary values\r\n          fc = this.calculateValues(fc);\r\n\r\n          // Validates entries if there has already been an invalid validation before\r\n          if (forecast.instantValidation) {\r\n            fc.instantValidation = forecast.instantValidation;\r\n            fc = this.validateProjects(fc);\r\n          }\r\n        });\r\n    } else {\r\n      if (typeof forecast.locked !== 'number') {\r\n        forecast.locked = forecast.locked === true ? this.authService.getRoleId() : -1;\r\n      }\r\n      forecast.projects = mandatoryProjects;\r\n\r\n      if (!forecast.gradeId || forecast.gradeId === 0) {\r\n        let u: User = this.userService.getUser(forecast.userId);\r\n        forecast.gradeId = u ? u.gradeId : 0;\r\n      }\r\n\r\n      if (forecast.locked <= this.authService.getRoleId()) {\r\n        forecast.projects = this.addMandatoryProjects(forecast.projects);\r\n      }\r\n      forecast.projects = [...forecast.projects, ...nonmandatoryProjects];\r\n\r\n      forecast = this.calculateValues(forecast);\r\n\r\n      this.forecasts.push(forecast);\r\n    }\r\n\r\n    // If history is not set or outdated: reload history\r\n    if (forecast.forecastId && (!forecast.history || loadHistory)) {\r\n      this.loadForecastHistory(forecast.forecastId)\r\n      .then((fcHistory: FcEntry[]) => {\r\n        this.setForecastHistory(forecast.userId, forecast.monthId, fcHistory ? fcHistory : []);\r\n      });\r\n    }\r\n\r\n    this.forecasts$.next(this.forecasts);\r\n  }\r\n\r\n  /**\r\n   * Adds the forecast history to a single forecast\r\n   * @param userId\r\n   * @param monthId\r\n   * @param fcHistory\r\n   */\r\n  setForecastHistory(userId: number, monthId: number, fcHistory: FcEntry[]): void {\r\n    this.forecasts\r\n      .filter((fc: FcEntry) => fc.userId === userId && fc.monthId === monthId)\r\n      .forEach((fcEntry: FcEntry) => {\r\n        fcEntry.history = fcHistory;\r\n      });\r\n\r\n    this.forecasts$.next(this.forecasts);\r\n  }\r\n\r\n  /**\r\n   * Sets the comment of a forecast\r\n   * @param monthId\r\n   * @param userId\r\n   * @param comment\r\n   */\r\n  setForecastComment(monthId: number, userId: number, comment: string): void {\r\n    this.forecasts\r\n      .filter((fc: FcEntry) => fc.userId === userId && fc.monthId === monthId)\r\n      .forEach((fc: FcEntry) => {\r\n        fc.comment = comment;\r\n        fc.updated = true;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Load a forecast from the server\r\n   * @param userId\r\n   * @param monthId\r\n   */\r\n  loadForecast(userId: number, monthId: number): Promise<boolean> {\r\n    return new Promise((resolve: any, reject: any) => {\r\n      this.http.get<FcEntry>(this.BO.forecast(userId, monthId)).subscribe(\r\n        (fcEntry: any) => {\r\n          if (fcEntry && (<FcEntry>fcEntry).forecastId >= 0) {\r\n            this.setForecast(fcEntry, false, false);\r\n            resolve({showDialog: false});\r\n\r\n          } else {\r\n            this.createNewForecast(userId, monthId);\r\n\r\n            if (fcEntry && fcEntry.suggestedData) {\r\n              resolve({showDialog: true, suggestedData: fcEntry.suggestedData });\r\n            } else {\r\n              resolve({showDialog: false });\r\n            }\r\n          }\r\n        });\r\n    });\r\n  }\r\n\r\n  createNewForecast(userId: number, monthId: number): void {\r\n    let forecast: FcEntry = new FcEntry();\r\n    forecast.monthId = monthId;\r\n    forecast.userId = userId;\r\n\r\n    let u: User = this.userService.getUser(userId);\r\n    forecast.gradeId = u ? u.gradeId : 0;\r\n\r\n    if (u.gradeId === 7) {\r\n      forecast.isRelevant = false;\r\n    }\r\n\r\n    this.setForecast(forecast, false, false);\r\n  }\r\n\r\n  addProjectsToForecast(userId: number, monthId: number, suggestedData: any): void {\r\n    this.forecasts.filter((fc: FcEntry) => fc.userId === userId && fc.monthId === monthId).forEach((fc: FcEntry) => {\r\n      if (suggestedData.projects && (<Suggestion[]>suggestedData.projects).length > 0) {\r\n        suggestedData.projects.forEach((suggestion: Suggestion) => {\r\n          let fcProject: FcProject = new FcProject();\r\n          fcProject.projectId = suggestion.projectId;\r\n          \r\n          if (this.projects.find((p: Project) => p.id === suggestion.projectId && p.projectType !== 0)) {\r\n            fcProject.billable = false;\r\n            fcProject.externalRevenue = false;\r\n          } else {\r\n            fcProject.billable = suggestion.billable;\r\n            fcProject.externalRevenue = suggestion.externalRevenue;\r\n            fcProject.cor = suggestion.cor;\r\n            fcProject.probabilityId = suggestion.probabilityId;\r\n          }\r\n\r\n          this.addProject(monthId, userId, fcProject);\r\n        });\r\n      }\r\n\r\n      if (suggestedData.gradeId) {\r\n        fc.gradeId = suggestedData.gradeId;\r\n      }\r\n\r\n      if (suggestedData.fte) {\r\n        fc.fte = suggestedData.fte;\r\n      }\r\n    });\r\n\r\n    this.forecasts$.next(this.forecasts);\r\n  }\r\n\r\n  /**\r\n   * Load the history of a forecast from the server\r\n   * @param forecastId\r\n   */\r\n  loadForecastHistory(forecastId: number): Promise<FcEntry[]> {\r\n    return new Promise((resolve: any, reject: any) => {\r\n\r\n      this.http.get<FcEntry[]>(this.BO.forecastHistory(forecastId)).subscribe(\r\n        (fcEntries: FcEntry[]) => {\r\n          resolve(fcEntries);\r\n        }, (e: any) => {\r\n          reject([]);\r\n        });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Saves a forecast for a specific month\r\n   * If submit param is set to true: Forecast gets locked\r\n   * @param monthId\r\n   * @param userId\r\n   * @param submit\r\n   */\r\n  saveForecast(monthId: number, userId: number, submit: boolean = false): void {\r\n    let forecast: FcEntry = cloneDeep(this.forecasts.find((fc: FcEntry) => fc.userId === userId && fc.monthId === monthId));\r\n    if (!forecast) {\r\n      return;\r\n    }\r\n\r\n    forecast = this.validateProjects(forecast);\r\n    if (([].concat.apply([], forecast.projects.map((p: FcProject) => p.errors))).length > 0) {\r\n      forecast.instantValidation = true;\r\n      this.setForecast(forecast, false, true);\r\n\r\n      this.snackBar.open('Forecast cannot be saved due to one or more invalid data fields.', 'OK', { duration: 5000, });\r\n      return;\r\n    }\r\n\r\n    if (submit) {\r\n      forecast.locked = true;\r\n    } else {\r\n      forecast.locked = false;\r\n    }\r\n\r\n    forecast.history = undefined;\r\n\r\n    this.pageState.showSpinner();\r\n    \r\n    this.http.put(this.BO.forecast(userId, monthId), forecast)\r\n      .subscribe((fc: FcEntry) => {\r\n        this.setForecast(fc, true, false);\r\n        if(!submit) {\r\n          this.snackBar.open('Your forecast has been successfully saved.', 'OK', { duration: 5000, });\r\n        }\r\n        else {\r\n          this.snackBar.open('Your forecast has been successfully submitted.', 'OK', { duration: 5000, });\r\n        }\r\n        \r\n        this.pageState.hideSpinner();\r\n\r\n      }, (e: any) => {\r\n        if(e.status === 409) {\r\n          if(!this.hasLeadRole()) {\r\n            this.snackBar.open('Your forecast has already been submitted by your team lead. Please contact your supervisor. The page will be refreshed automatically.', 'OK', { duration: 10000, });\r\n          }\r\n          else {\r\n            this.snackBar.open('The forecast has already been submitted by your colleague. The page will be refreshed automatically.', 'OK', { duration: 10000, });\r\n          }\r\n\r\n          setTimeout(() => window.location.reload(), 5000);\r\n          \r\n        }\r\n        else {\r\n          if(!submit) {\r\n            this.snackBar.open('Your forecast could not be saved. Please try again later.', 'OK', { duration: 10000, });\r\n          }\r\n          else if(submit){\r\n            this.snackBar.open('Your forecast could not be submitted. Please try again later.', 'OK', { duration: 10000, });\r\n          }\r\n        }\r\n        this.pageState.hideSpinner();\r\n\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Unlocks a forecast: only possible for teamleads\r\n   */\r\n  unlockForecast(monthId: number, userId: number): void {\r\n    this.http.put(this.BO.unlockForecast(userId, monthId), {})\r\n      .subscribe((forecast: FcEntry) => {\r\n\r\n        this.forecasts\r\n          .filter((fc: FcEntry) => fc.userId === userId && fc.monthId === monthId)\r\n          .forEach((fc: FcEntry) => {\r\n            fc.locked = -1;\r\n          });\r\n        this.forecasts$.next(this.forecasts);\r\n        this.snackBar.open('Forecast has sucessfuly been unlocked', 'OK', { duration: 10000, });\r\n        this.pageState.hideSpinner();\r\n      }, (e: any) => {\r\n        this.snackBar.open('Your forecast could not be unlocked. Please try again later.', 'OK', { duration: 10000, });\r\n        this.pageState.hideSpinner();\r\n\r\n      });\r\n  }\r\n\r\n  setTeamLockState(monthId: number, level: number, lockState: number): void {\r\n    const parentId: number = this.authService.getUserId();\r\n    let user: number[] = this.teamService.getTeamChilds(level, parentId);\r\n\r\n    this.forecasts\r\n      .filter((fc: FcEntry) => fc.monthId === monthId && user.indexOf(fc.userId) >= 0)\r\n      .forEach((fc: FcEntry) => {\r\n        fc.locked = lockState;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Test if an available project is mandatory and has not been added to the forecast-projects yet\r\n   * If it has not been added yet: adds it to projects\r\n   * @param fcProjects\r\n   */\r\n  addMandatoryProjects(fcProjects: FcProject[]): FcProject[] {\r\n    let mandatory: number[] = this.projects.filter((p: Project) => p.active === true && p.mandatory === 'Y').map((p: Project) => p.id);\r\n\r\n    mandatory.forEach((mp: number) => {\r\n      if (!fcProjects.find((p: FcProject) => p.projectId === mp)) {\r\n        fcProjects.push({ projectId: mp, plannedProjectDays: 0, probabilityId: null, cor: 0, externalRevenue: false, mandatory: 'Y' });\r\n      }\r\n    });\r\n\r\n    return fcProjects;\r\n  }\r\n\r\n  /**\r\n   * Add a project to a forecast entry\r\n   * @param monthId\r\n   * @param userId\r\n   * @param fcProject\r\n   */\r\n  addProject(monthId: number, userId: number, fcProject: FcProject): void {\r\n    this.forecasts\r\n      .filter((fc: FcEntry) => fc.monthId === monthId && fc.userId === userId)\r\n      .forEach((fc: FcEntry) => {\r\n        fc.projects = fc.projects.filter((p: FcProject) => p.projectId !== fcProject.projectId);\r\n        fc.projects.push(fcProject);\r\n      });\r\n\r\n    this.forecasts$.next(this.forecasts);\r\n  }\r\n\r\n  /**\r\n   * Remove a project from a forecast entry\r\n   * @param monthId\r\n   * @param userId\r\n   * @param index\r\n   */\r\n  removeProject(monthId: number, userId: number, index: number): void {\r\n    this.forecasts\r\n      .filter((fc: FcEntry) => fc.monthId === monthId && fc.userId === userId)\r\n      .forEach((fc: FcEntry) => {\r\n        fc.projects.splice(index, 1);\r\n        fc = this.calculateValues(fc);\r\n      });\r\n\r\n    this.forecasts$.next(this.forecasts);\r\n  }\r\n\r\n  /**\r\n   * Calculate values: billable days, nonbillable days, projectDays, businessDays, vacationDays, arve, urve\r\n   * @param forecast\r\n   */\r\n  calculateValues(forecast: FcEntry): FcEntry {\r\n    var user = this.userService.getUser(forecast.userId);\r\n    forecast.totalDays = this.months.find((m: Month) => m.id === forecast.monthId) ? parseInt(this.months.find((m: Month) => m.id === forecast.monthId).workingdays, 10) : 0;\r\n\r\n    if (forecast.fte) {\r\n      forecast.totalDays *= forecast.fte;\r\n    } else {\r\n      forecast.totalDays = 0;\r\n    }\r\n\r\n    // calculate billable + non-billable days\r\n    forecast.billableDays = 0;\r\n    forecast.nonbillableDays = 0;\r\n    forecast.nonbillableProjectDays = 0;\r\n\r\n    forecast.projects.forEach((p: FcProject) => {\r\n      if (p.billable) {\r\n        forecast.billableDays += (p.plannedProjectDays ? p.plannedProjectDays : 0 );\r\n      } else {\r\n        forecast.nonbillableDays += (p.plannedProjectDays ? p.plannedProjectDays : 0 );\r\n        let project: Project = this.projects.find((pr: Project) => pr.id === p.projectId);\r\n        if(project && (project.projectType === 0 || project.projectType === 5)) {\r\n          forecast.nonbillableProjectDays += (p.plannedProjectDays ? p.plannedProjectDays : 0 );\r\n        }\r\n      }\r\n    });\r\n\r\n    // Calculate total project days (without vacation + business-development days)\r\n    forecast.projectDays = 0;\r\n    forecast.projects\r\n      .filter((p: FcProject) => this.projects.find((ap: Project) => ap.projectType === 0 && ap.id === p.projectId))\r\n      .forEach((p: FcProject) => forecast.projectDays += (p.plannedProjectDays ? p.plannedProjectDays : 0));\r\n\r\n    forecast.businessDays = 0;\r\n    forecast.vacationDays = 0;\r\n    if (this.projects.length > 0 && forecast.projects.length > 0) {\r\n\r\n      // Calculate vacation days\r\n      let vacationProject: Project = this.projects.find((ap: Project) => ap.projectType === 3);\r\n      if (vacationProject) {0\r\n        let project: FcProject = forecast.projects.find((p: FcProject) => p.projectId === vacationProject.id);\r\n        if (project && project.plannedProjectDays) {\r\n          forecast.vacationDays = project.plannedProjectDays;\r\n        }\r\n      }\r\n\r\n      // Calculate business development days\r\n      let businessProject: Project = this.projects.find((ap: Project) => ap.projectType === 1);\r\n      if (businessProject) {\r\n        let project: FcProject = forecast.projects.find((p: FcProject) => p.projectId === businessProject.id);\r\n        if (project && project.plannedProjectDays) {\r\n          forecast.businessDays = project.plannedProjectDays;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Calculate URVE + ARVE\r\n    if (!forecast.isRelevant) {\r\n      forecast.urve = 0;\r\n      forecast.arve = 0;\r\n    } else {\r\n      forecast.urve = (forecast.billableDays !== 0) ? ((forecast.billableDays) / (forecast.totalDays - forecast.vacationDays)) : 0;\r\n      if (forecast.urve < 0) {\r\n        forecast.urve = 0;\r\n      }\r\n\r\n      forecast.arve = (forecast.billableDays !== 0 || forecast.nonbillableProjectDays !== 0) ? ((forecast.billableDays + forecast.nonbillableProjectDays) / (forecast.totalDays - forecast.vacationDays)) : 0;\r\n      if (forecast.arve < 0) {\r\n        forecast.arve = 0;\r\n      }\r\n    }\r\n\r\n    return forecast;\r\n  }\r\n\r\n  /**\r\n   * Deletes all forecasts from application\r\n   */\r\n  reset(): void {\r\n    this.forecasts = [];\r\n    this.forecasts$.next(this.forecasts);\r\n  }\r\n\r\n  hasLeadRole(): boolean {\r\n    return this.authService.hasRole(env.roles.pdl);\r\n  }\r\n\r\n  /**\r\n   * Validates projects before saving forecast\r\n   * @param forecast\r\n   */\r\n  validateProjects(forecast: FcEntry): FcEntry {\r\n    forecast.projects.forEach((p: FcProject) => {\r\n      p.errors = [];\r\n\r\n      if (typeof p.projectId === 'undefined') {\r\n        p.errors.push('No project found.');\r\n      }\r\n\r\n\r\n\r\n      // if (typeof p.cor === 'undefined') {\r\n      //   if (this.authService.getRoleId() === env.roles.css) {\r\n      //     p.cor = 0;\r\n      //   } else {\r\n      //     p.errors.push('No COR value defined.');\r\n      //   }\r\n      // } else if (typeof p.cor !== 'number') {\r\n      //   p.errors.push('COR value has to be a number.');\r\n      // } else if (p.cor < 0) {\r\n      //   p.errors.push('COR value has to be a positive number.');\r\n      // }\r\n\r\n      if (typeof p.plannedProjectDays === 'undefined') {\r\n        p.errors.push('Number of project days not specified.');\r\n      } else if (typeof p.plannedProjectDays !== 'number') {\r\n        p.errors.push('Project days value has to be a number.');\r\n      } else if (p.plannedProjectDays < 0) {\r\n        p.errors.push('Project days value has to be a positive number.');\r\n      }\r\n\r\n      if (!p.probabilityId) {\r\n        p.errors.push('No probability defined.');\r\n      }\r\n      if(p.cor < 1 && p.billable && this.hasLeadRole()) {\r\n        p.errors.push(\"COR value cannot be 0 or empty.\");\r\n      }\r\n    });\r\n\r\n    return forecast;\r\n  }\r\n\r\n  getForecastLockLevel(monthId: number, userId: number): number | boolean {\r\n    let forecast: FcEntry = this.forecasts.find((fc: FcEntry) => fc.monthId === monthId && fc.userId === userId);\r\n    if (!forecast) {\r\n      return false;\r\n    }\r\n\r\n    return forecast.locked;\r\n  }\r\n\r\n  /**\r\n   * checks state of forecast: currently \"locked\" and \"edited\" possible\r\n   * @param type\r\n   * @param monthId\r\n   * @param userId\r\n   */\r\n  checkForecastState(type: string, monthId: number, userId: number): boolean {\r\n    let forecast: FcEntry = this.forecasts.find((fc: FcEntry) => fc.monthId === monthId && fc.userId === userId);\r\n    if (!forecast) {\r\n      return false;\r\n    }\r\n\r\n    if (type === 'locked' && forecast.locked >= this.authService.getRoleId()) {\r\n      return true;\r\n    } else if (type === 'locked-sub' && forecast.locked >= 0 && forecast.locked < this.authService.getRoleId()) {\r\n      return true;\r\n    } else if (type === 'edited' && forecast.updated) {\r\n      return true;\r\n    } else if (type === 'saved' && forecast.locked < 0) {\r\n      var members = this.teamService.getTeamChilds(1, this.authService.getUserId()).concat(this.teamService.getTeamChilds(2, this.authService.getUserId()));\r\n      for(var i = 0; i < members.length; i++) {\r\n        var user = this.userService.getUser(members[i]);\r\n        if(user.email == forecast.changedBy) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * returns promise of all forecasts for one month\r\n   * Returns data instantly if they already exist, otherwise: loads them from the server first\r\n   * @param monthId\r\n   */\r\n  getMonthlyForecasts(monthId: number): Promise<FcEntry[]> {\r\n    let promise: Promise<FcEntry[]> = new Promise((resolve: any, reject: any) => {\r\n      let fcEntries: FcEntry[] = this.forecasts$.getValue().filter((fc: FcEntry) => fc.monthId === monthId);\r\n      if (fcEntries.length > 0) {\r\n        resolve(fcEntries);\r\n      } else {\r\n        this.http.get<FcEntry[]>(this.BO.teamForecast(this.authService.getUserId(), monthId)).subscribe((fc: FcEntry[]) => {\r\n          resolve(fc);\r\n        });\r\n      }\r\n    });\r\n\r\n    return promise;\r\n  }\r\n\r\n  /**\r\n  * returns forcasts for staffing component\r\n  */\r\n  initStaffingForecasts(monthId: number): void {\r\n    this.pageState.showSpinner();\r\n\r\n    this.http\r\n    .get(this.BO.staffingForecasts(monthId))\r\n    .subscribe((forecasts: FcEntry[]) => {\r\n      this.addForecasts(forecasts);\r\n      this.pageState.hideSpinner();\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "teamService",
                        "type": "TeamUserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataSharingService",
                        "type": "DataSharingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "teamService",
                        "type": "TeamUserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataSharingService",
                        "type": "DataSharingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LoginService",
            "id": "injectable-LoginService-e2eaa6af98b888776236164240900d3a",
            "file": "src/app/core/security/login.service.ts",
            "properties": [
                {
                    "name": "location",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Location",
                    "optional": false,
                    "line": 40,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "optional": false,
                    "line": 39,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "tokenRenewActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>set to true when token renew request was already sent, but system is waiting for a response</p>\n",
                    "line": 24,
                    "rawdescription": "\n\nset to true when token renew request was already sent, but system is waiting for a response\n"
                }
            ],
            "methods": [
                {
                    "name": "deleteData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDeletes all data in services when called.\nTypically called at logout process.\n",
                    "description": "<p>Deletes all data in services when called.\nTypically called at logout process.</p>\n"
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles login tasks\n\n",
                    "description": "<p>Handles login tasks</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1725,
                                "end": 1730,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "email"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1719,
                                "end": 1724,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1743,
                                "end": 1751,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "password"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1737,
                                "end": 1742,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles logout tasks\n",
                    "description": "<p>Handles logout tasks</p>\n"
                },
                {
                    "name": "renewToken",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets new token from server\n",
                    "description": "<p>Gets new token from server</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>login service</p>\n",
            "rawdescription": "\n\nlogin service\n",
            "sourceCode": "import { Router } from '@angular/router';\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { BusinessOperationsService } from '../../core/shared/business-operations.service';\nimport { AuthService } from './auth.service';\nimport { UtilitiesService } from '../services/utilities.service';\nimport { ForecastService } from '../services/forecasts/forecast.service';\nimport { UserService } from '../services/user.service';\nimport { TeamUserService } from '../services/forecasts/team-user.service';\nimport { Location } from '@angular/common';\nimport { PageStateService } from '../shared/page-state.service';\nimport { ExecutiveForecastsService } from '../services/forecasts/executive-forecasts.service';\n\n/**\n * login service\n */\n@Injectable()\nexport class LoginService {\n  /**\n   * set to true when token renew request was already sent, but system is waiting for a response\n   */\n  tokenRenewActive: boolean = false;\n\n  /**\n   * login service constructor\n   * \n   * @param router\n   * @param location\n   * @param BO\n   * @param http\n   * @param auth\n   * @param utilitiesService\n   * @param forecastService\n   * @param userService\n   */\n  constructor(\n    public router: Router,\n    public location: Location,\n    private BO: BusinessOperationsService,\n    private http: HttpClient,\n    private auth: AuthService,\n    private utilitiesService: UtilitiesService,\n    private forecastService: ForecastService,\n    private userService: UserService,\n    private teamService: TeamUserService,\n    private executiveService: ExecutiveForecastsService,\n    private pageState: PageStateService,\n  ) {}\n\n  /**\n   * Handles login tasks\n   * \n   * @param email\n   * @param password\n   */\n  login(email: string, password: string): Observable<any> {\n    let options: any = {\n      observe: 'response',\n    };\n\n    return this.http.post(\n       this.BO.login(),\n       {\n         email: email,\n         password: password,\n       },\n       options,\n     );\n  }\n\n  /**\n   * Handles logout tasks\n   */\n  logout(): void {\n    this.auth.setLogged(false);\n    this.router.navigate(['/login']);\n\n    setTimeout(() => {\n      this.deleteData();\n    }, 500);\n  }\n\n  /**\n   * Gets new token from server\n   */\n  renewToken(): void {\n    if (this.auth.getExpireDate() < ((new Date().getTime() / 1000) + 1800) ) {\n\n      if (!this.tokenRenewActive) {\n        this.tokenRenewActive = true;\n        this.http.get(this.BO.renewToken())\n          .subscribe((token: string) => {\n            this.auth.useToken('Bearer ' + token);\n            this.tokenRenewActive = false;\n          });\n      }\n    }\n  }\n\n  /**\n   * Deletes all data in services when called.\n   * Typically called at logout process.\n   */\n  deleteData(): void {\n    this.userService.reset();\n    this.teamService.reset();\n    this.utilitiesService.reset();\n    this.forecastService.reset();\n    this.executiveService.resetSummaryValues();\n    this.pageState.resetForecastrReady();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>login service constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "teamService",
                        "type": "TeamUserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "rawdescription": "\n\nlogin service constructor\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1055,
                            "end": 1061,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "router"
                        },
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1049,
                            "end": 1054,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1074,
                            "end": 1082,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "location"
                        },
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1068,
                            "end": 1073,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1095,
                            "end": 1097,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "BO"
                        },
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1089,
                            "end": 1094,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1110,
                            "end": 1114,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "http"
                        },
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1104,
                            "end": 1109,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1127,
                            "end": 1131,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "auth"
                        },
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1121,
                            "end": 1126,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1144,
                            "end": 1160,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "utilitiesService"
                        },
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1138,
                            "end": 1143,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1173,
                            "end": 1188,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "forecastService"
                        },
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1167,
                            "end": 1172,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1201,
                            "end": 1212,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "userService"
                        },
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1195,
                            "end": 1200,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "teamService",
                        "type": "TeamUserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MonthService",
            "id": "injectable-MonthService-fc075a0723477580d2ee11c0d24d098f",
            "file": "src/app/core/services/admin/months.service.ts",
            "properties": [
                {
                    "name": "months$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Month[]>",
                    "optional": false,
                    "description": "<p>Observable which contains all months</p>\n",
                    "line": 20,
                    "rawdescription": "\n\nObservable which contains all months\n"
                }
            ],
            "methods": [
                {
                    "name": "addMonth",
                    "args": [
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLockedMonths",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMonths",
                    "args": [],
                    "optional": false,
                    "returnType": "Month[]",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns all months\n",
                    "description": "<p>returns all months</p>\n"
                },
                {
                    "name": "getSavedMonths",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initializeMonths",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInitializes months\n",
                    "description": "<p>Initializes months</p>\n"
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmpties month-data\nTypically called at logout\n",
                    "description": "<p>Empties month-data\nTypically called at logout</p>\n"
                },
                {
                    "name": "setMonth",
                    "args": [
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate or create month\n",
                    "description": "<p>Update or create month</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1817,
                                "end": 1822,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "month"
                            },
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1811,
                                "end": 1816,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setMonthActiveState",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\n",
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>months service</p>\n",
            "rawdescription": "\n\nmonths service\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nimport { Month } from '../../interfaces/month';\nimport { BusinessOperationsService } from '../../shared/business-operations.service';\nimport { PageStateService } from '../../shared/page-state.service';\n\n/**\n * months service\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class MonthService {\n  /**\n   * Observable which contains all months\n   */\n  months$: BehaviorSubject<Month[]>;\n\n  /**\n   * utilities service constructor\n   * \n   * @param http\n   * @param BO\n   * @param pageState\n   */\n  constructor(\n    private http: HttpClient,\n    private snackBar: MatSnackBar,\n    private BO: BusinessOperationsService,\n    private pageState: PageStateService,\n  ) {\n    this.months$ = new BehaviorSubject([]);\n  }\n\n  /**\n   * Initializes months\n   */\n  initializeMonths(): void {\n    this.http.get(this.BO.getAdminMonths()).subscribe((months: Month[]) => {\n      this.months$.next(months.sort((a, b) => (a.time > b.time) ? 1 : -1));\n    });\n  }\n\n  addMonth(month: Month): void {\n    let months: Month[] = this.months$.getValue();\n    months = months.filter((p: Month) => p.id !== month.id);\n    months.push(month);\n\n    this.months$.next(months);\n  }\n\n  getLockedMonths(): Observable<any> {\n    return this.http.get(this.BO.getLockedMonths());\n  }\n  \n  getSavedMonths(): Observable<any> {\n    return this.http.get(this.BO.getSavedMonths());\n  }\n\n  /**\n   * Empties month-data\n   * Typically called at logout\n   */\n  reset(): void {\n    this.months$.next([]);\n  }\n\n  /**\n   * returns all months\n   */\n  getMonths(): Month[] {\n    return this.months$.getValue();\n  }\n\n\t/**\n   * Update or create month\n   * @param month \n   */\n  setMonth(month: Month): void {\n    this.http.put(this.BO.setMonths(), month)\n      .subscribe((m: Month) => {\n        this.addMonth(m);\n        this.snackBar.open('Month successfully saved!', 'OK', { duration: 5000, });\n        this.pageState.hideSpinner();\n\n      }, (e: any) => {\n        this.snackBar.open('Month could not be saved!', 'OK', { duration: 10000, });\n        this.pageState.hideSpinner();\n\n      });\n  }\n\n  /**\n   * \n   */\n  setMonthActiveState(id: number, state: boolean): void {\n    this.http.put(this.BO.setMonthState(), {id: id, active: state })\n      .subscribe((m: Month) => {\n        this.addMonth(m);\n      });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>utilities service constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "rawdescription": "\n\nutilities service constructor\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 654,
                            "end": 658,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "http"
                        },
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 648,
                            "end": 653,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 671,
                            "end": 673,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "BO"
                        },
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 665,
                            "end": 670,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 686,
                            "end": 695,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "pageState"
                        },
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 680,
                            "end": 685,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MyErrorHandler",
            "id": "injectable-MyErrorHandler-ceecaa27e65e9616253f63f4c72fa783",
            "file": "src/app/core/errors/error.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMain error handling method. Is called automatically when an error occurs.\n\n",
                    "description": "<p>Main error handling method. Is called automatically when an error occurs.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 311,
                                "end": 316,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "error"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 305,
                                "end": 310,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Own error handler to extend the default angular error handler if needed</p>\n",
            "rawdescription": "\n\nOwn error handler to extend the default angular error handler if needed\n",
            "sourceCode": "import { ErrorHandler, Injectable } from '@angular/core';\n\n/**\n * Own error handler to extend the default angular error handler if needed\n */\n@Injectable()\nexport class MyErrorHandler implements ErrorHandler {\n\t\n\t/**\n\t * Main error handling method. Is called automatically when an error occurs.\n\t * \n\t * @param error \n\t */\n\thandleError(error: any): void {}\n}\n",
            "type": "injectable"
        },
        {
            "name": "PageStateService",
            "id": "injectable-PageStateService-6c1db4a0b8c759d87e635df2921f9af6",
            "file": "src/app/core/shared/page-state.service.ts",
            "properties": [
                {
                    "name": "forecastrReady$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "spinner$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "<p>Observable which contains the current spinner value (boolean)</p>\n",
                    "line": 14,
                    "rawdescription": "\n\nObservable which contains the current spinner value (boolean)\n"
                }
            ],
            "methods": [
                {
                    "name": "hideSpinner",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets spinner inactive when called\n",
                    "description": "<p>Sets spinner inactive when called</p>\n"
                },
                {
                    "name": "resetForecastrReady",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setForecastrReady",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showSpinner",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets spinner active when called\n",
                    "description": "<p>Sets spinner active when called</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>spinner-service</p>\n",
            "rawdescription": "\n\nspinner-service\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n/**\n * spinner-service\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class PageStateService {\n  /**\n   * Observable which contains the current spinner value (boolean)\n   */\n  spinner$: BehaviorSubject<boolean>;\n  forecastrReady$: BehaviorSubject<boolean>;\n\n  /**\n   * spinner-service constructor\n   */\n  constructor(\n  ) {\n    this.forecastrReady$ = new BehaviorSubject(false);\n    this.spinner$ = new BehaviorSubject(true);\n  }\n\n  /**\n   * Sets spinner active when called\n   */\n  showSpinner(): void {\n    this.spinner$.next(true);\n  }\n\n  /**\n   * Sets spinner inactive when called\n   */\n  hideSpinner(): void {\n    this.spinner$.next(false);\n  }\n\n  setForecastrReady(): void {\n    this.forecastrReady$.next(true);\n  }\n\n  resetForecastrReady(): void {\n    this.forecastrReady$.next(false);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>spinner-service constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15,
                "rawdescription": "\n\nspinner-service constructor\n"
            },
            "type": "injectable"
        },
        {
            "name": "ProjectService",
            "id": "injectable-ProjectService-912e39d972fede681e8328a36b0ee97d",
            "file": "src/app/core/services/admin/projects.service.ts",
            "properties": [
                {
                    "name": "projects$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Project[]>",
                    "optional": false,
                    "description": "<p>Observable which contains all projects</p>\n",
                    "line": 20,
                    "rawdescription": "\n\nObservable which contains all projects\n"
                }
            ],
            "methods": [
                {
                    "name": "addProject",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProjects",
                    "args": [],
                    "optional": false,
                    "returnType": "Project[]",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns all projects\n",
                    "description": "<p>returns all projects</p>\n"
                },
                {
                    "name": "initializeProjects",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInitializes projects\n",
                    "description": "<p>Initializes projects</p>\n"
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmpties project-data\nTypically called at logout\n",
                    "description": "<p>Empties project-data\nTypically called at logout</p>\n"
                },
                {
                    "name": "setProject",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\n",
                    "description": "",
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setProjectActiveState",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>projects service</p>\n",
            "rawdescription": "\n\nprojects service\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { Project } from '../../interfaces/project';\nimport { BusinessOperationsService } from '../../shared/business-operations.service';\nimport { PageStateService } from '../../shared/page-state.service';\n\n/**\n * projects service\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProjectService {\n  /**\n   * Observable which contains all projects\n   */\n  projects$: BehaviorSubject<Project[]>;\n\n  /**\n   * utilities service constructor\n   * \n   * @param http\n   * @param BO\n   * @param spinner\n   */\n  constructor(\n    private http: HttpClient,\n    private snackBar: MatSnackBar,\n    private BO: BusinessOperationsService,\n    private pageState: PageStateService,\n  ) {\n    this.projects$ = new BehaviorSubject([]);\n  }\n\n  /**\n   * Initializes projects\n   */\n  initializeProjects(): void {\n    this.http.get(this.BO.getAdminProjects()).subscribe((projects: Project[]) => {\n      this.projects$.next(projects.sort((a, b) => (b.mandatory === 'Y') ? 1 : -1));\n    });\n  }\n\n  addProject(project: Project): void {\n    let projects: Project[] = this.projects$.getValue();\n    projects = projects.filter((p: Project) => p.id !== project.id);\n    projects.push(project);\n    this.projects$.next(projects);\n  }\n\n  /**\n   * Empties project-data\n   * Typically called at logout\n   */\n  reset(): void {\n    this.projects$.next([]);\n  }\n\n  /**\n   * returns all projects\n   */\n  getProjects(): Project[] {\n    return this.projects$.getValue();\n  }\n\n\t/**\n\t * \n\t */\n  setProject(project: Project): void {\n    this.http.put(this.BO.setProject(), project)\n      .subscribe((p: Project) => {\n        this.addProject(p);\n        this.snackBar.open('Project successfully saved!', 'OK', { duration: 5000, });\n        this.pageState.hideSpinner();\n\n      }, (e: any) => {\n        this.snackBar.open('Project could not be saved!', 'OK', { duration: 10000, });\n        this.pageState.hideSpinner();\n\n      });\n  }\n\n  setProjectActiveState(id: number, state: boolean): void {\n    this.http.put(this.BO.setProjectState(), {id: id, active: state })\n      .subscribe((p: Project) => {\n        this.addProject(p);\n      });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>utilities service constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "rawdescription": "\n\nutilities service constructor\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 656,
                            "end": 660,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "http"
                        },
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 650,
                            "end": 655,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 673,
                            "end": 675,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "BO"
                        },
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 667,
                            "end": 672,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ResetPasswordService",
            "id": "injectable-ResetPasswordService-e8742c1fe307a7474947fb94b2c301ca",
            "file": "src/app/core/security/resetPassword.service.ts",
            "properties": [
                {
                    "name": "options",
                    "defaultValue": "{\n        headers: new HttpHeaders({\n            'Content-Type': 'application/json',\n        }),\n        observe: 'response',\n        responseType: 'blob',\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "optionsWithTokenRequest",
                    "defaultValue": "{\n        headers: new HttpHeaders({\n            'Content-Type': 'application/json',\n        }),\n        observe: 'response',\n        responseType: 'text',\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "resetPasswordApiUrl",
                    "defaultValue": "environment.api + environment.resetPasswordPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "resetPassword",
                    "args": [
                        {
                            "name": "emailAddress",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "emailAddress",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetPasswordWithToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newPassword",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newPassword",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { environment } from '../../../environments/environment';\nimport { map } from 'rxjs/operators';\n\n@Injectable({providedIn: 'root'})\nexport class ResetPasswordService {\n\n    resetPasswordApiUrl: string = environment.api + environment.resetPasswordPath;\n    options: any = {\n        headers: new HttpHeaders({\n            'Content-Type': 'application/json',\n        }),\n        observe: 'response',\n        responseType: 'blob',\n    };\n    optionsWithTokenRequest: any = {\n        headers: new HttpHeaders({\n            'Content-Type': 'application/json',\n        }),\n        observe: 'response',\n        responseType: 'text',\n    };\n\n    constructor(\n        private http: HttpClient,\n    ) {}\n\n    resetPassword(emailAddress: string) { \n        emailAddress = \"\\\"\" + emailAddress + \"\\\"\";\n        return this.http.post(this.resetPasswordApiUrl, emailAddress, this.options);\n    }\n    resetPasswordWithToken(token: string, newPassword: string) {\n        let resetPasswordUrlWithToken = this.resetPasswordApiUrl + \"/\" + token;\n        newPassword = \"\\\"\" + newPassword + \"\\\"\";\n        return this.http.put(resetPasswordUrlWithToken, newPassword, this.optionsWithTokenRequest);\n    }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TeamForecastService",
            "id": "injectable-TeamForecastService-7eecb9570c94ae151b00b9b7a839cd1b",
            "file": "src/app/core/services/forecasts/team-forecasts.service.ts",
            "properties": [
                {
                    "name": "projects",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Project[]",
                    "optional": false,
                    "description": "<p>contains all projects</p>\n",
                    "line": 25,
                    "rawdescription": "\n\ncontains all projects\n"
                }
            ],
            "methods": [
                {
                    "name": "getEmptyData",
                    "args": [],
                    "optional": false,
                    "returnType": "SummaryDataProject[]",
                    "typeParameters": [],
                    "line": 293,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ninits the summarydata-projects with empty data\n",
                    "description": "<p>inits the summarydata-projects with empty data</p>\n"
                },
                {
                    "name": "getMonthlyExportData",
                    "args": [
                        {
                            "name": "fcEntries",
                            "type": "FcEntry[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "user",
                            "type": "User[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "workingDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Export",
                    "typeParameters": [],
                    "line": 243,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns the export data for one months in the exact format the backend needs them to generate a csv file\n\n",
                    "description": "<p>Returns the export data for one months in the exact format the backend needs them to generate a csv file</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7523,
                                "end": 7532,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "fcEntries"
                            },
                            "type": "FcEntry[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7517,
                                "end": 7522,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 7545,
                                "end": 7549,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "user"
                            },
                            "type": "User[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7539,
                                "end": 7544,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 7562,
                                "end": 7569,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "monthId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7556,
                                "end": 7561,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 7582,
                                "end": 7593,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "workingDays"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7576,
                                "end": 7581,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getMonthlyForecast",
                    "args": [
                        {
                            "name": "exportValues",
                            "type": "Export",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Export>",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns an observable of the monthly forecast data for one team\nUsed for csv export\n\n",
                    "description": "<p>Returns an observable of the monthly forecast data for one team\nUsed for csv export</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2059,
                                "end": 2071,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "exportValues"
                            },
                            "type": "Export",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2053,
                                "end": 2058,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getPeriodForecast",
                    "args": [
                        {
                            "name": "exportValues",
                            "type": "Export[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Export[]>",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns an observable of the period forecast data for one team\nUsed for csv export\n\n",
                    "description": "<p>Returns an observable of the period forecast data for one team\nUsed for csv export</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2442,
                                "end": 2454,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "exportValues"
                            },
                            "type": "Export[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2436,
                                "end": 2441,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getSummaryData",
                    "args": [
                        {
                            "name": "fcEntries",
                            "type": "FcEntry[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "workingDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "team",
                            "type": "User[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "SummaryData",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreutrns the summarydata to the provided forecast-entries\n\n",
                    "description": "<p>reutrns the summarydata to the provided forecast-entries</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2798,
                                "end": 2807,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "fcEntries"
                            },
                            "type": "FcEntry[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2792,
                                "end": 2797,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2820,
                                "end": 2831,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "workingDays"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2814,
                                "end": 2819,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2844,
                                "end": 2848,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "team"
                            },
                            "type": "User[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2838,
                                "end": 2843,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getTeamForecast",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "levelId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<FcEntry[]>",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGet the TeamForecast from the Backend for giving userId & monthId\n\n",
                    "description": "<p>Get the TeamForecast from the Backend for giving userId &amp; monthId</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1337,
                                "end": 1343,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "userId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1331,
                                "end": 1336,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 1356,
                                "end": 1363,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "monthId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1350,
                                "end": 1355,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": "levelId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTeamForecastPromise",
                    "args": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "levelId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<FcEntry[]>",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "levelId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setForecastsLockState",
                    "args": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lockState",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 302,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lockState",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>team forecast service</p>\n",
            "rawdescription": "\n\nteam forecast service\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { FcProject } from '../../interfaces/fcProject';\nimport { Project } from '../../interfaces/project';\nimport { FcEntry } from '../../interfaces/fcEntry';\nimport { SummaryData, SummaryDataProject } from '../../interfaces/summaryData';\nimport { BusinessOperationsService } from '../../shared/business-operations.service';\nimport { UtilitiesService } from '../utilities.service';\nimport { Export } from '../../interfaces/exportCSV/export';\nimport { User } from '../../interfaces/user';\nimport { Entry } from '../../interfaces/exportCSV/entry';\n\n/**\n * team forecast service\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class TeamForecastService {\n  /**\n   * contains all projects\n   */\n  projects: Project[];\n\n  /**\n   * constructor for team-forecast service\n   * \n   * @param http\n   * @param BO\n   * @param utilitiesService\n   */\n  constructor(\n    private http: HttpClient,\n    private BO: BusinessOperationsService,\n    private utilitiesService: UtilitiesService,\n  ) {\n    this.utilitiesService.projects$\n      .subscribe((projects: Project[]) => {\n        this.projects = projects;\n      });\n  }\n\n  /**\n   * Get the TeamForecast from the Backend for giving userId & monthId\n   * \n   * @param userId\n   * @param monthId\n   */\n  getTeamForecast(userId: number, monthId: number, levelId: number): Observable<FcEntry[]> {\n    return this.http\n      .get<FcEntry[]>(this.BO.teamForecast(userId, monthId, levelId));\n  }\n\n  getTeamForecastPromise(userId: number, monthId: number, levelId: number): Promise<FcEntry[]> {\n    return new Promise<any>((resolve: any, reject: any) => {\n      this.http\n      .get<FcEntry[]>(this.BO.teamForecast(userId, monthId, levelId))\n      .subscribe((forecasts: FcEntry[]) => {\n        resolve(forecasts);\n      }, (e: any) => {\n        reject();\n      });\n    });\n  }\n\n  /**\n   * Returns an observable of the monthly forecast data for one team\n   * Used for csv export\n   * \n   * @param exportValues\n   */\n  getMonthlyForecast(exportValues: Export): Observable<Export> {\n    const httpOptions: object = {\n      responseType:  'blob' as 'json',\n    };\n\n    return this.http\n      .post<Export>(this.BO.monthlyForecast(), exportValues, httpOptions);\n  }\n\n  /**\n   * Returns an observable of the period forecast data for one team\n   * Used for csv export\n   * \n   * @param exportValues\n   */\n  getPeriodForecast(exportValues: Export[]): Observable<Export[]> {\n    const httpOptions: object = {\n      responseType:  'blob' as 'json',\n    };\n\n    return this.http\n      .post<Export[]>(this.BO.periodForecast(), exportValues, httpOptions);\n  }\n\n  /**\n   * reutrns the summarydata to the provided forecast-entries\n   * \n   * @param fcEntries\n   * @param workingDays\n   * @param team\n   */\n\tgetSummaryData(fcEntries: FcEntry[], workingDays: number, team: User[]): SummaryData {\n    let summaryData: SummaryData = {\n\t\t\tdays: this.getEmptyData(),\n\t\t\trevenue: 0,\n      workingDays: 0,\n      billableDays: 0,\n      nonbillableDays: 0,\n\t\t\tarve: 0,\n      urve: 0,\n      extRevenue : 0,\n      intRevenue : 0\n    };\n\n    team.forEach((user: User) => {\n      summaryData.workingDays += user.fte ? (user.fte * workingDays) : workingDays;\n    });\n\n    if (fcEntries.length === 0) {\n      return summaryData;\n    }\n\n    if (this.projects.length > 0) {\n      fcEntries.forEach((fcEntry: FcEntry) => {\n        if (fcEntry.fte && team.find((u: User) => u.id === fcEntry.userId)) {\n          summaryData.workingDays -= (team.find((u: User) => u.id === fcEntry.userId).fte - fcEntry.fte) * workingDays;\n        }\n\n        if (fcEntry.projects) {\n          fcEntry.projects.forEach((fcProject: FcProject) => {\n            summaryData.revenue += (fcProject.cor && fcProject.plannedProjectDays) ? (fcProject.cor * fcProject.plannedProjectDays) : 0;\n            let project: Project = this.projects.find((p: Project) => p.id === fcProject.projectId);\n\n            summaryData.days\n              .filter((sd: SummaryDataProject) => sd.type === (project ? project.projectType : 0))\n              .forEach((sd: SummaryDataProject) => {\n                sd.days += (fcProject.plannedProjectDays ? fcProject.plannedProjectDays : 0);\n              });\n            \n            \n            summaryData.extRevenue += (fcProject.externalRevenue && fcProject.cor && fcProject.plannedProjectDays) ? (fcProject.cor * fcProject.plannedProjectDays) : 0;;\n            summaryData.intRevenue += (!fcProject.externalRevenue && fcProject.cor && fcProject.plannedProjectDays) ? (fcProject.cor * fcProject.plannedProjectDays) : 0;;\n            \n\n            if (fcProject.billable ) {\n              summaryData.billableDays += (fcProject.plannedProjectDays ? fcProject.plannedProjectDays : 0);\n            } else {\n              summaryData.nonbillableDays += (fcProject.plannedProjectDays ? fcProject.plannedProjectDays : 0);\n            }\n          });\n        }\n      });\n    }\n\n    let totalDays: number = 0;\n    summaryData.days.forEach((sd: SummaryDataProject) => {\n      totalDays = totalDays + sd.days;\n    });\n\n    summaryData.arve = 0;\n    summaryData.urve = 0;\n    let teamsize: number = 0;\n    team.forEach((u: User) => {\n\n      let fcEntry: FcEntry = fcEntries.find((fc: FcEntry) => fc.userId === u.id);\n      if (fcEntry) {\n        teamsize += (fcEntry.fte ? fcEntry.fte : 0); //teamsize += (fcEntry.fte ? fcEntry.fte : 1); problem that ARVE URVE calc false when persons with 0 fte get 1 instead\n\n        if (fcEntry.isRelevant) {\n          summaryData.arve += fcEntry.arve ? (fcEntry.arve * (fcEntry.fte ? fcEntry.fte : 1)) : 0;\n          summaryData.urve += fcEntry.urve ? (fcEntry.urve * (fcEntry.fte ? fcEntry.fte : 1)) : 0;\n        }\n      } else {\n        teamsize += (u.fte ? u.fte : 0); //teamsize += (u.fte ? u.fte : 1); same problem then above\n      }\n    });\n\n    summaryData.arve /= teamsize;\n    summaryData.urve /= teamsize;\n\n//----------------------------------------------------------------------------------------\n\n    let proDays = 0\n    let bilDays = 0\n    let nobilDays = 0\n    let vacDays = 0\n\n    fcEntries.forEach((fe: FcEntry) => {\n      if(fe.isRelevant) \n      {\n        proDays += fe.projectDays\n        bilDays += fe.billableDays\n        nobilDays += fe.nonbillableDays\n        vacDays += fe.vacationDays\n      } \n    });\n\n   // console.log(\"billable Days: \" +bilDays)\n    //console.log(\"non Billable days: \" + nobilDays)\n    //console.log(\"project Days: \" + proDays)\n    //console.log(\"vacation Days: \" + vacDays)\n\n    let vacationDays = 0; \n    let projektDays = 0;\n\n    summaryData.days.forEach((vacD : SummaryDataProject) => {\n      if(vacD.title == \"Vacation days\")\n      {\n         vacationDays  = vacD.days;\n        \n      }\n      if (vacD.title == \"Project days\" ) {\n        projektDays= vacD.days;\n      }\n      \n    }\n    );\n\n\n    //console.log(\"2 billable Days: \" +summaryData.billableDays)\n    //console.log(\"2 non Billable days: \" + summaryData.nonbillableDays)\n    //console.log(\"2 project Days: \" + projektDays)\n    //console.log(\"2 vacation Days: \" + vacationDays)\n\n    let denominator = summaryData.billableDays + summaryData.nonbillableDays - vacationDays;\n    \n    summaryData.arve = projektDays / denominator;\n    summaryData.urve = summaryData.billableDays  / denominator;\n    return summaryData;\n  }\n\n  /**\n   * Returns the export data for one months in the exact format the backend needs them to generate a csv file\n   * \n   * @param fcEntries\n   * @param user\n   * @param monthId\n   * @param workingDays\n   */\n\tgetMonthlyExportData(fcEntries: FcEntry[], user: User[], monthId: number, workingDays: number): Export {\n\t\tlet csvExportItem: Export = new Export();\n    csvExportItem.monthId = monthId;\n\n    user.forEach((u: User) => {\n      let temp: Entry = new Entry();\n      temp.urve = 0;\n      temp.arve = 0;\n      temp.workingDays = 0;\n      temp.ros = 0;\n\n\t\t\tlet userForecast: FcEntry = fcEntries.find((fc: FcEntry) => fc.userId === u.id);\n\n\t\t\ttemp.name = u.firstName + ' ' + u.lastName;\n\t\t\tif (userForecast) {\n\t\t\t\ttemp.urve = parseFloat((userForecast.urve * 100).toFixed(0));\n\t\t\t\ttemp.arve = parseFloat((userForecast.arve * 100).toFixed(0));\n        \n        if(userForecast.projects.length > 0) {\n  \t\t\t\ttemp.workingDays = userForecast.projects\n  \t\t\t\t\t.map((p: FcProject) => (p.plannedProjectDays ? p.plannedProjectDays : 0))\n  \t\t\t\t\t.reduce((pSum: number, a: number) => pSum + a);\n  \t\t\t\ttemp.ros = userForecast.projects\n  \t\t\t\t\t.map((p: FcProject) => ((p.plannedProjectDays ? p.plannedProjectDays : 0) * (p.cor ? p.cor : 0)))\n            .reduce((pSum: number, a: number) => pSum + a);\n        }\n      }\n\t\t\t\n\t\t\tcsvExportItem.employeeEntry.push(temp);\n    });\n  \n\t\tlet summaryData: SummaryData = this.getSummaryData(fcEntries, workingDays, user);\n\t\tcsvExportItem.summary.projectDays = summaryData.days.find((sd: SummaryDataProject) => sd.type === 0).days;\n\t\tcsvExportItem.summary.businessDevelopmentDays = summaryData.days.find((sd: SummaryDataProject) => sd.type === 1).days;\n\t\tcsvExportItem.summary.trainingDays = summaryData.days.find((sd: SummaryDataProject) => sd.type === 2).days;\n    csvExportItem.summary.vacationDays = summaryData.days.find((sd: SummaryDataProject) => sd.type === 3).days;\n    csvExportItem.summary.billableDays = summaryData.billableDays;\n\t\tcsvExportItem.summary.nonbillableDays = summaryData.nonbillableDays;\n\n\t\tcsvExportItem.summary.totalWorkingDays = summaryData.workingDays;\n\t\tcsvExportItem.summary.arve = parseInt((summaryData.arve * 100).toFixed(0), 10);\n\t\tcsvExportItem.summary.urve = parseInt((summaryData.urve * 100).toFixed(0), 10);\n    csvExportItem.summary.ros = summaryData.revenue;\n\n\t\treturn csvExportItem;\n\t}\n\n\t/**\n   * inits the summarydata-projects with empty data\n   */\n  getEmptyData(): SummaryDataProject[] {\n    return [\n      { title: 'Project days', days: 0, type: 0 },\n      { title: 'Business development days', days: 0, type: 1 },\n      { title: 'Training days', days: 0, type: 2 },\n      { title: 'Vacation days', days: 0, type: 3 },\n    ];\n  }\n\n  setForecastsLockState(monthId: number, level: number, lockState: boolean): Promise<any> {\n    return new Promise<any>((resolve: any, reject: any) => {\n      this.http.put(this.BO.setTeamLockState(monthId, level), { lockState: lockState })\n      .subscribe((forecasts: FcEntry[]) => {\n        resolve(forecasts);\n      }, (e: any) => {\n        reject();\n      });\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor for team-forecast service</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "rawdescription": "\n\nconstructor for team-forecast service\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 916,
                            "end": 920,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "http"
                        },
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 910,
                            "end": 915,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 933,
                            "end": 935,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "BO"
                        },
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 927,
                            "end": 932,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 948,
                            "end": 964,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "utilitiesService"
                        },
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 942,
                            "end": 947,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TeamService",
            "id": "injectable-TeamService-186c9986e315f5863c2f4a2b4dd23a08",
            "file": "src/app/core/services/admin/team.service.ts",
            "properties": [
                {
                    "name": "teams$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<any>",
                    "optional": false,
                    "description": "<p>team array</p>\n",
                    "line": 20,
                    "rawdescription": "\n\nteam array\n"
                }
            ],
            "methods": [
                {
                    "name": "deleteTeam",
                    "args": [
                        {
                            "name": "teamId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "teamId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initTeams",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nResets team data\n",
                    "description": "<p>Resets team data</p>\n"
                },
                {
                    "name": "setTeam",
                    "args": [
                        {
                            "name": "team",
                            "type": "Team",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "team",
                            "type": "Team",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>team service</p>\n",
            "rawdescription": "\n\nteam service\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { BusinessOperationsService } from \"../../shared/business-operations.service\";\nimport { UserService } from \"../user.service\";\nimport { Team } from \"../../interfaces/team\";\nimport { MatSnackBar } from \"@angular/material/snack-bar\";\nimport { PageStateService } from \"../../shared/page-state.service\";\n\n/**\n * team service\n */\n@Injectable({\n  providedIn: \"root\",\n})\nexport class TeamService {\n  /**\n   * team array\n   */\n  teams$: BehaviorSubject<any>;\n\n  /**\n   * default constructor for teamservice\n   * @param http\n   * @param BO\n   * @param userService\n   */\n  constructor(\n    private snackBar: MatSnackBar,\n    private http: HttpClient,\n    private BO: BusinessOperationsService,\n    private userService: UserService,\n    private pageState: PageStateService,\n    ) {\n    this.teams$ = new BehaviorSubject([]);\n  }\n\n  initTeams(): void {\n    this.http.get(this.BO.getTeams()).subscribe((teams: Team[]) => {\n      this.teams$.next(teams);\n    });\n  }\n\n  setTeam(team: Team): void {\n    this.pageState.showSpinner();\n\n    if (typeof team.teamId !== 'number') {\n      this.http.put(this.BO.setTeam(), team)\n        .subscribe((t: Team) => {\n          let teams: Team[] = this.teams$.getValue();\n          teams.push(t);\n          this.teams$.next(teams);\n\n          this.snackBar.open('Team successfully added!', 'OK', { duration: 5000, });\n          this.pageState.hideSpinner();\n\n        }, (e: any) => {\n          this.snackBar.open('Team could not be added!', 'OK', { duration: 10000, });\n          this.pageState.hideSpinner();\n\n        });\n    } else {\n      this.http.put(this.BO.setTeam(), team)\n        .subscribe((t: Team) => {\n          let teams: Team[] = this.teams$.getValue();\n          teams\n            .filter((te: Team) => te.teamId === t.teamId)\n            .forEach((te: Team) => {\n              te.name = t.name;\n              te.teamLeadId = t.teamLeadId;\n            });\n          this.teams$.next(teams);\n\n          this.snackBar.open('Team successfully saved!', 'OK', { duration: 5000, });\n          this.pageState.hideSpinner();\n\n        }, (e: any) => {\n          this.snackBar.open('Team could not be saved!', 'OK', { duration: 10000, });\n          this.pageState.hideSpinner();\n\n        });\n    }\n  }\n\n  deleteTeam(teamId: number): void {\n    this.http.delete(this.BO.deleteTeam(teamId))\n      .subscribe(() => {\n        let teams: Team[] = this.teams$.getValue();\n        this.teams$.next(teams.filter((te: Team) => te.teamId !== teamId));\n\n        this.snackBar.open('Team successfully deleted!', 'OK', { duration: 5000, });\n        this.pageState.hideSpinner();\n\n      }, (e: any) => {\n        this.snackBar.open('Team could not be deleted!', 'OK', { duration: 10000, });\n        this.pageState.hideSpinner();\n\n      });\n  }\n\n  /**\n   * Resets team data\n   */\n  reset(): void {\n    this.teams$.next([]);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>default constructor for teamservice</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "rawdescription": "\n\ndefault constructor for teamservice\n",
                "jsdoctags": [
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 652,
                            "end": 656,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "http"
                        },
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 646,
                            "end": 651,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 669,
                            "end": 671,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "BO"
                        },
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 663,
                            "end": 668,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 684,
                            "end": 695,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "userService"
                        },
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 678,
                            "end": 683,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TeamUserService",
            "id": "injectable-TeamUserService-14caeca6d9f4415d43451f833bb33712",
            "file": "src/app/core/services/forecasts/team-user.service.ts",
            "properties": [
                {
                    "name": "practices",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | User[]>",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "prTeams$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Team[]>",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "teamPDL$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<User[]>",
                    "optional": false,
                    "description": "<p>pdl team array</p>\n",
                    "line": 21,
                    "rawdescription": "\n\npdl team array\n"
                },
                {
                    "name": "teamPL$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<User[]>",
                    "optional": false,
                    "description": "<p>pl team array</p>\n",
                    "line": 26,
                    "rawdescription": "\n\npl team array\n"
                }
            ],
            "methods": [
                {
                    "name": "getPrTeams",
                    "args": [],
                    "optional": false,
                    "returnType": "Team[]",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTeamChilds",
                    "args": [
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parentId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number[]",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns childs\nif level > 1: also returns childs of childs\n",
                    "description": "<p>Returns childs\nif level &gt; 1: also returns childs of childs</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3125,
                                "end": 3130,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "level"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3119,
                                "end": 3124,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 3143,
                                "end": 3151,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "parentId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3137,
                                "end": 3142,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "initializePDLTeam",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRequests PDL-team data from server\n",
                    "description": "<p>Requests PDL-team data from server</p>\n"
                },
                {
                    "name": "initializePLTeam",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRequest PL-team data from server\n",
                    "description": "<p>Request PL-team data from server</p>\n"
                },
                {
                    "name": "initializeTeams",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nResets team data\n",
                    "description": "<p>Resets team data</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>team service for PDL (team) + PL (practice)</p>\n",
            "rawdescription": "\n\nteam service for PDL (team) + PL (practice)\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { User } from \"../../interfaces/user\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { BusinessOperationsService } from \"../../shared/business-operations.service\";\nimport { UserService } from \"../user.service\";\nimport { AuthService } from \"../../security/auth.service\";\nimport { environment as env } from '../../../../environments/environment';\nimport { Team } from \"../../interfaces/team\";\n\n/**\n * team service for PDL (team) + PL (practice)\n */\n@Injectable({\n  providedIn: \"root\",\n})\nexport class TeamUserService {\n  /**\n   * pdl team array\n   */\n  teamPDL$: BehaviorSubject<User[]>;\n\n  /**\n   * pl team array\n   */\n  teamPL$: BehaviorSubject<User[]>;\n\n  prTeams$: BehaviorSubject<Team[]>;\n\n  practices: Map<number, User[]>;\n\n  /**\n   * default constructor for teamservice\n   * @param http\n   * @param BO\n   * @param userService\n   */\n  constructor(\n    private http: HttpClient,\n    private BO: BusinessOperationsService,\n    private userService: UserService,\n    private authService: AuthService,\n    ) {\n    this.teamPDL$ = new BehaviorSubject([]);\n    this.teamPL$ = new BehaviorSubject([]);\n    this.prTeams$ = new BehaviorSubject([]);\n  }\n\n  initializeTeams(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      this.http.get(this.BO.getTeams()).subscribe((ts: Team[]) => {\n        this.prTeams$.next(ts);\n      })\n      resolve();\n    })\n  }\n\n  getPrTeams(): Team[] {\n    return this.prTeams$.getValue();\n  }\n\n  /**\n   * Requests PDL-team data from server\n   */\n  initializePDLTeam(): void {\n    this.http.get<User[]>(this.BO.getTeam(1))\n      .subscribe((user: User[]) => {\n        this.teamPDL$.next(user.sort((a, b) => (a.lastName > b.lastName) ? 1 : -1));\n        this.userService.addUsers(user);\n      });\n  }\n\n  /**\n   * Request PL-team data from server\n   */\n  initializePLTeam(): void {\n    if(this.authService.hasRole(env.roles.msl)) {\n      this.http.get<User[]>(this.BO.getTeam(3)).subscribe((user: User[]) => {\n        let ts = this.getPrTeams().filter((t: Team) => t.teamLeadId !== this.authService.getUserId());\n        let tsUsers: number[] = [];\n\n        ts.forEach((t: Team) => {\n          let childs = [t.teamLeadId];\n          childs = [...childs, ...user.filter((u: User) => u.parentId === t.teamLeadId).map((u: User) => u.id)];\n          let tUsers = [...childs, ...user.filter((u: User) => childs.indexOf(u.parentId) >= 0).map((u: User) => u.id)];\n          tsUsers = tsUsers.concat(tUsers);\n        });\n\n        let users = user.filter((u: User) => tsUsers.findIndex((tU: number) => tU === u.id) === -1);\n\n        this.teamPL$.next(users.sort((a, b) => (a.lastName > b.lastName ? 1 : -1)));\n        this.userService.addUsers(users);\n      });\n    } else {\n      this.http.get<User[]>(this.BO.getTeam(2)).subscribe((user: User[]) => {\n        this.teamPL$.next(user.sort((a, b) => (a.lastName > b.lastName ? 1 : -1)));\n        this.userService.addUsers(user);\n      });\n    }\n  }\n\n  /**\n   * Returns childs\n   * if level > 1: also returns childs of childs\n   * @param level\n   * @param parentId\n   */\n  getTeamChilds(level: number, parentId: number): number[] {\n    let childs: number[] = [parentId];\n\n    if (level === 2) {\n      childs = [...childs, ...this.teamPL$.getValue().filter((u: User) => u.parentId === parentId).map((u: User) => u.id)];\n      return [...childs, ...this.teamPL$.getValue().filter((u: User) => childs.indexOf(u.parentId) >= 0).map((u: User) => u.id)];\n    }\n\n    return [...childs, ...this.teamPDL$.getValue().filter((u: User) => u.parentId === parentId).map((u: User) => u.id)];\n  }\n\n  /**\n   * Resets team data\n   */\n  reset(): void {\n    this.teamPDL$.next([]);\n    this.teamPL$.next([]);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>default constructor for teamservice</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "rawdescription": "\n\ndefault constructor for teamservice\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 890,
                            "end": 894,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "http"
                        },
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 884,
                            "end": 889,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 907,
                            "end": 909,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "BO"
                        },
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 901,
                            "end": 906,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 922,
                            "end": 933,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "userService"
                        },
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 916,
                            "end": 921,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserAdminService",
            "id": "injectable-UserAdminService-52afa1a889ab44fc101097778643f91a",
            "file": "src/app/core/services/admin/user.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds user to user-list\n",
                    "description": "<p>Adds user to user-list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1087,
                                "end": 1091,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "user"
                            },
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1081,
                                "end": 1086,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "editUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdates user in user-list\n",
                    "description": "<p>Updates user in user-list</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1369,
                                "end": 1373,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "user"
                            },
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1363,
                                "end": 1368,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "initData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ninit user service data\n",
                    "description": "<p>init user service data</p>\n"
                },
                {
                    "name": "setUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalls add or edit user request to server\n",
                    "description": "<p>Calls add or edit user request to server</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1981,
                                "end": 1985,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "user"
                            },
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1975,
                                "end": 1980,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setUserActiveState",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalls set active state request to server\n",
                    "description": "<p>Calls set active state request to server</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3050,
                                "end": 3052,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3044,
                                "end": 3049,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 3065,
                                "end": 3070,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "state"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3059,
                                "end": 3064,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>user service</p>\n",
            "rawdescription": "\n\nuser service\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { User } from '../../interfaces/user';\nimport { HttpClient } from '@angular/common/http';\nimport { BusinessOperationsService } from '../../shared/business-operations.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { PageStateService } from '../../shared/page-state.service';\nimport { UserService } from '../user.service';\n\n/**\n * user service\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserAdminService {\n  /**\n   * user service constructor\n   * @param http\n   * @param snackBar\n   * @param BO\n   * @param pageState\n   */\n  constructor(\n    private http: HttpClient,\n    private snackBar: MatSnackBar,\n    private BO: BusinessOperationsService,\n    private pageState: PageStateService,\n    private userService: UserService,\n  ) {}\n\n  /**\n   * init user service data\n   */\n  initData(): void {\n    this.userService.initializeAllUser().then(() => {\n      this.userService.initializeRoles();\n      this.userService.initializeGrades();    \n    });\n  }\n\n  /**\n   * Adds user to user-list\n   * @param user\n   */\n  addUser(user: User): void {\n    let users: User[] = this.userService.allUsers$.getValue();\n    users = users.filter((u: User) => u.id !== user.id);\n    users.push(user);\n\n    this.userService.allUsers$.next(users);\n  }\n\n  /**\n   * Updates user in user-list\n   * @param user\n   */\n  editUser(user: User): void {\n    let users: User[] = this.userService.allUsers$.getValue();\n    users\n      .filter((u: User) => u.id === user.id)\n      .forEach((u: User) => {\n        u.globalId = user.globalId;\n        u.firstName = user.firstName;\n        u.lastName = user.lastName;\n        u.email = user.email;\n        u.roleId = user.roleId;\n        u.gradeId = user.gradeId;\n        u.parentId = user.parentId;\n        u.fte = user.fte;\n        u.admin = user.admin;\n      });\n\n    this.userService.allUsers$.next(users);\n  }\n\n  /**\n   * Calls add or edit user request to server\n   * @param user\n   */\n  setUser(user: User): void {\n    if (user.id) {\n      this.http.put(this.BO.updateUser(user.id), user).subscribe(\n        (u: User) => {\n          this.editUser(u);\n          this.snackBar.open(\"User successfully saved!\", \"OK\", {\n            duration: 5000,\n          });\n          this.pageState.hideSpinner();\n        },\n        (e: any) => {\n          this.snackBar.open(\"User could not be saved!\", \"OK\", {\n            duration: 10000,\n          });\n          this.pageState.hideSpinner();\n        }\n      );\n    } else {\n      this.http.post(this.BO.createUser(), user).subscribe(\n        (u: User) => {\n          this.addUser(u);\n          this.snackBar.open(\"User successfully added!\", \"OK\", {\n            duration: 5000,\n          });\n          this.pageState.hideSpinner();\n        },\n        (e: any) => {\n          this.snackBar.open(\"User could not be added!\", \"OK\", {\n            duration: 10000,\n          });\n          this.pageState.hideSpinner();\n        }\n      );\n    }\n  }\n\n  /**\n   * Calls set active state request to server\n   * @param id\n   * @param state\n   */\n  setUserActiveState(id: number, state: boolean): void {\n    this.http\n      .put(this.BO.setUserState(id), { id: id, active: state })\n      .subscribe(() => {\n        let users: User[] = this.userService.allUsers$.getValue();\n        users\n          .filter((u: User) => u.id === id)\n          .forEach((u: User) => {\n            u.active = state;\n          });\n\n        this.userService.allUsers$.next(users);\n      });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>user service constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "rawdescription": "\n\nuser service constructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 545,
                            "end": 549,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "http"
                        },
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 539,
                            "end": 544,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 562,
                            "end": 570,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "snackBar"
                        },
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 556,
                            "end": 561,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 583,
                            "end": 585,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "BO"
                        },
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 577,
                            "end": 582,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 598,
                            "end": 607,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "pageState"
                        },
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 592,
                            "end": 597,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-b768ead3e3de30e0cc99b90efdccd21c",
            "file": "src/app/core/services/user.service.ts",
            "properties": [
                {
                    "name": "allUsers$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<User[]>",
                    "optional": false,
                    "description": "<p>Observable which contains all users (for admins only)</p>\n",
                    "line": 24,
                    "rawdescription": "\n\nObservable which contains all users (for admins only)\n"
                },
                {
                    "name": "grades$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Grade[]>",
                    "optional": false,
                    "description": "<p>Observable which contains all possible grades</p>\n",
                    "line": 34,
                    "rawdescription": "\n\nObservable which contains all possible grades\n"
                },
                {
                    "name": "roles$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Role[]>",
                    "optional": false,
                    "description": "<p>Observable which contains all possible roles</p>\n",
                    "line": 29,
                    "rawdescription": "\n\nObservable which contains all possible roles\n"
                },
                {
                    "name": "user$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<User>",
                    "optional": false,
                    "description": "<p>observable which contains the current user</p>\n",
                    "line": 19,
                    "rawdescription": "\n\nobservable which contains the current user\n"
                }
            ],
            "methods": [
                {
                    "name": "addUsers",
                    "args": [
                        {
                            "name": "newUsers",
                            "type": "User[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newUsers",
                            "type": "User[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGrades",
                    "args": [],
                    "optional": false,
                    "returnType": "Grade[]",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns possible grades\n",
                    "description": "<p>returns possible grades</p>\n"
                },
                {
                    "name": "getRole",
                    "args": [
                        {
                            "name": "roleId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Role",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roleId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRoleName",
                    "args": [
                        {
                            "name": "rolePermission",
                            "type": "number | boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rolePermission",
                            "type": "number | boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUser",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "User | undefined",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns user by a given id\n",
                    "description": "<p>returns user by a given id</p>\n",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeAllUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoads all user data from the server\n",
                    "description": "<p>Loads all user data from the server</p>\n"
                },
                {
                    "name": "initializeGrades",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRequests grade data from server\n",
                    "description": "<p>Requests grade data from server</p>\n"
                },
                {
                    "name": "initializeRoles",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRequests role data from server\n",
                    "description": "<p>Requests role data from server</p>\n"
                },
                {
                    "name": "initUser",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoads the current user data from the server\n",
                    "description": "<p>Loads the current user data from the server</p>\n"
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmpties userdata\nTypically called at logout\n",
                    "description": "<p>Empties userdata\nTypically called at logout</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>user service</p>\n",
            "rawdescription": "\n\nuser service\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { User } from '../interfaces/user';\nimport { HttpClient } from '@angular/common/http';\nimport { BusinessOperationsService } from '../shared/business-operations.service';\nimport { Role } from '../interfaces/role';\nimport { Grade } from '../interfaces/grade';\n\n/**\n * user service\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  /**\n   * observable which contains the current user\n   */\n  user$: BehaviorSubject<User>;\n\n  /**\n   * Observable which contains all users (for admins only)\n   */\n  allUsers$: BehaviorSubject<User[]>;\n  \n  /**\n   * Observable which contains all possible roles\n   */\n  roles$: BehaviorSubject<Role[]>;\n\n  /**\n   * Observable which contains all possible grades\n   */\n  grades$: BehaviorSubject<Grade[]>;\n\n  /**\n   * user service constructor\n   * @param http\n   * @param snackBar\n   * @param BO\n   * @param pageState\n   */\n  constructor(\n    private http: HttpClient,\n    private BO: BusinessOperationsService,\n  ) {\n    this.user$ = new BehaviorSubject(new User());\n    this.allUsers$ = new BehaviorSubject([]);\n    this.roles$ = new BehaviorSubject([]);\n    this.grades$ = new BehaviorSubject([]);\n  }\n\n  /**\n   * Loads the current user data from the server\n   */\n  initUser(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      this.http.get<User>(this.BO.getOwnUser())\n        .subscribe((user: User) => {\n          this.user$.next(user);\n          this.addUsers([user]);\n          resolve();\n        }, () => reject());\n    });\n  }\n\n  /**\n   * Loads all user data from the server\n   */\n  initializeAllUser(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      this.http.get<User[]>(this.BO.getUsers())\n        .subscribe((users: User[]) => {\n          this.allUsers$.next(users.sort((a, b) => (a.lastName > b.lastName) ? 1 : -1));\n          resolve();\n        }, () => reject());\n    });\n  }\n\n  /**\n   * Requests role data from server\n   */\n  initializeRoles(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      this.http.get<any[]>(this.BO.getRoles())\n      .subscribe((roles: any[]) => {\n        this.roles$.next(roles);\n        resolve();\n      }, () => reject());\n    });\n  }\n\n  /**\n   * Requests grade data from server\n   */\n  initializeGrades(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      this.http.get<Grade[]>(this.BO.getGrades())\n        .subscribe((grades: Grade[]) => {\n          this.grades$.next(grades);\n          resolve();\n        }, () => reject());\n    });\n  }\n\n  /**\n   * Empties userdata\n   * Typically called at logout\n   */\n  reset(): void {\n    this.allUsers$.next([]);\n    this.user$.next(new User());\n  }\n\n  /**\n   * returns user by a given id\n   */\n  getUser(id: number): User | undefined {\n    return this.allUsers$.getValue().find((u: User) => u.id === id);\n  }\n\n  addUsers(newUsers: User[]): void {\n    let users: User[] = this.allUsers$.getValue();\n    newUsers.forEach((u: User) => {\n      if (!users.find((us: User) => us.id === u.id)) {\n        users.push(u);\n      }\n    });\n\n    this.allUsers$.next(users);\n  }\n\n  getRoleName(rolePermission: number | boolean): string {\n    if (rolePermission !== false && this.roles$.getValue().find((role: Role) => role.permissionType === rolePermission)) {\n      return this.roles$.getValue().find((role: Role) => role.permissionType === rolePermission).shortcut;\n    } else {\n      return '';\n    }\n  }\n\n  /**\n   * returns possible grades\n   */\n  getGrades(): Grade[] {\n    return this.grades$.getValue();\n  }\n\n\n  getRole(roleId: number): Role {\n    return this.roles$.getValue().find((role: Role) => role.roleId === roleId);\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>user service constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "rawdescription": "\n\nuser service constructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 892,
                            "end": 896,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "http"
                        },
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 886,
                            "end": 891,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 930,
                            "end": 932,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "BO"
                        },
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 924,
                            "end": 929,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UtilitiesService",
            "id": "injectable-UtilitiesService-ea615041628b01a45b3b9ec63e581c1e",
            "file": "src/app/core/services/utilities.service.ts",
            "properties": [
                {
                    "name": "months$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Month[]>",
                    "optional": false,
                    "description": "<p>Observable which contains all months which are shown in the application</p>\n",
                    "line": 21,
                    "rawdescription": "\n\nObservable which contains all months which are shown in the application\n"
                },
                {
                    "name": "probabilities$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Probability[]>",
                    "optional": false,
                    "description": "<p>Observable which contains all probability types</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nObservable which contains all probability types\n"
                },
                {
                    "name": "projects$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Project[]>",
                    "optional": false,
                    "description": "<p>Observable which contains all projects</p>\n",
                    "line": 26,
                    "rawdescription": "\n\nObservable which contains all projects\n"
                },
                {
                    "name": "teams$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<Team[]>",
                    "optional": false,
                    "description": "<p>Observable which contains all teams</p>\n",
                    "line": 36,
                    "rawdescription": "\n\nObservable which contains all teams\n"
                }
            ],
            "methods": [
                {
                    "name": "addProject",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addTeam",
                    "args": [
                        {
                            "name": "team",
                            "type": "Team",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "team",
                            "type": "Team",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMonths",
                    "args": [],
                    "optional": false,
                    "returnType": "Month[]",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns all months\n",
                    "description": "<p>returns all months</p>\n"
                },
                {
                    "name": "getProbabilities",
                    "args": [],
                    "optional": false,
                    "returnType": "Probability[]",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns all probabilities\n",
                    "description": "<p>returns all probabilities</p>\n"
                },
                {
                    "name": "getProjects",
                    "args": [],
                    "optional": false,
                    "returnType": "Project[]",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns all projects\n",
                    "description": "<p>returns all projects</p>\n"
                },
                {
                    "name": "getTeams",
                    "args": [],
                    "optional": false,
                    "returnType": "Team[]",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns all teams\n",
                    "description": "<p>returns all teams</p>\n"
                },
                {
                    "name": "initMonths",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initProbabilities",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initProjects",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initTeams",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "reset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nEmpties utility-data\nTypically called at logout\n",
                    "description": "<p>Empties utility-data\nTypically called at logout</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>utilities services (for months + projects + probabilities)</p>\n",
            "rawdescription": "\n\nutilities services (for months + projects + probabilities)\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\n\nimport { Project } from '../interfaces/project';\nimport { Month } from '../interfaces/month';\nimport { Probability } from '../interfaces/probability';\nimport { Team } from '../interfaces/team';\nimport { BusinessOperationsService } from '../shared/business-operations.service';\n\n/**\n * utilities services (for months + projects + probabilities)\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class UtilitiesService {\n  /**\n   * Observable which contains all months which are shown in the application\n   */\n  months$: BehaviorSubject<Month[]>;\n\n  /**\n   * Observable which contains all projects\n   */\n  projects$: BehaviorSubject<Project[]>;\n\n  /**\n   * Observable which contains all probability types\n   */\n  probabilities$: BehaviorSubject<Probability[]>;\n\n  /**\n   * Observable which contains all teams\n   */\n  teams$: BehaviorSubject<Team[]>;\n\n\n  /**\n   * utilities service constructor\n    * @param http\n    * @param BO\n    */\n   constructor(\n    private http: HttpClient,\n    private BO: BusinessOperationsService,\n  ) {\n    this.months$ = new BehaviorSubject([]);\n    this.projects$ = new BehaviorSubject([]);\n    this.probabilities$ = new BehaviorSubject([]);\n    this.teams$ = new BehaviorSubject([]);\n  }\n\n  initMonths(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      this.http.get(this.BO.getUtilMonths()).subscribe((months: Month[]) => {\n        this.months$.next(months);\n        resolve();\n      }, () => reject());\n    });\n  }\n\n  initTeams(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      this.http.get(this.BO.getTeams()).subscribe((teams: Team[]) => {\n        this.teams$.next(teams);\n        resolve();\n      }, () => reject());\n    });\n  }\n\n  initProjects(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      this.http.get(this.BO.getUtilProjects()).subscribe((projects: Project[]) => {\n        this.projects$.next(projects.sort((a, b) => (b.mandatory === 'Y') ? 1 : -1));\n        resolve();\n      }, () => reject());\n    });\n  }\n\n  initProbabilities(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      this.http.get(this.BO.getProbabilities()).subscribe((probabilities: Probability[]) => {\n        this.probabilities$.next(probabilities);\n        resolve();\n      }, () => reject());\n    });\n  }\n\n  addProject(project: Project): void {\n    let projects: Project[] = this.projects$.getValue();\n    projects.push(project);\n    this.projects$.next(projects);\n  }\n\n  addTeam(team: Team): void {\n    let teams: Team[] = this.teams$.getValue();\n    teams.push(team);\n    this.teams$.next(teams);\n  }\n\n  /**\n   * Empties utility-data\n   * Typically called at logout\n   */\n  reset(): void {\n    this.months$.next([]);\n    this.projects$.next([]);\n    this.probabilities$.next([]);\n    this.teams$.next([]);\n  }\n\n  /**\n   * returns all months\n   */\n  getMonths(): Month[] {\n    return this.months$.getValue();\n  }\n\n  /**\n   * returns all projects\n   */\n  getProjects(): Project[] {\n    return this.projects$.getValue();\n  }\n\n  /**\n   * returns all probabilities\n   */\n  getProbabilities(): Probability[] {\n    return this.probabilities$.getValue();\n  }\n\n  /**\n   * returns all teams\n   */\n  getTeams(): Team[] {\n    return this.teams$.getValue();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>utilities service constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "rawdescription": "\n\nutilities service constructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1040,
                            "end": 1044,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "http"
                        },
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1034,
                            "end": 1039,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1058,
                            "end": 1060,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "BO"
                        },
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1052,
                            "end": 1057,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "RoleGuard",
            "id": "injectable-RoleGuard-072a300cd0e1160cff5f15fb97b227f8",
            "file": "src/app/core/security/role-guard.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIf user is logged in and is allowed to access page with his role: returns true.\nOtherwise: returns false. Additionally navigates to login page if user is not logged in at all.\n\n",
                    "description": "<p>If user is logged in and is allowed to access page with his role: returns true.\nOtherwise: returns false. Additionally navigates to login page if user is not logged in at all.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 682,
                                "end": 687,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "route"
                            },
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 676,
                                "end": 681,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 701,
                                "end": 706,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "state"
                            },
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 695,
                                "end": 700,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Tests if user is authenticated and fulfills specific role criteria</p>\n",
            "rawdescription": "\n\nTests if user is authenticated and fulfills specific role criteria\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  CanActivate, Router,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n} from '@angular/router';\nimport { AuthService } from './auth.service';\n\n/**\n * Tests if user is authenticated and fulfills specific role criteria\n */\n@Injectable()\nexport class RoleGuard implements CanActivate {\n  /**\n   * needs auth + route services\n   */\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n  ) {}\n\n  /**\n   * If user is logged in and is allowed to access page with his role: returns true.\n   * Otherwise: returns false. Additionally navigates to login page if user is not logged in at all.\n   * \n   * @param route \n   * @param state \n   */\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    if (this.authService.isLogged()) {\n      const expectedRole: number = route.data.expectedRole;\n      if (this.authService.hasRole(expectedRole)) {\n        return true;\n      }\n\n      this.router.navigate(['/']);\n      return false;\n    }\n\n    if (this.router.url === '/') {\n      this.router.navigate(['/login']);\n    }\n\n    return false;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>needs auth + route services</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "rawdescription": "\n\nneeds auth + route services\n",
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "HttpRequestInterceptorService",
            "id": "injectable-HttpRequestInterceptorService-d12eee8a4f478c9f17f655636ba1c6c3",
            "file": "src/app/core/security/httpRequestInterceptor.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nMethod called at every http request\n\n",
                    "description": "<p>Method called at every http request</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 931,
                                "end": 934,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "req"
                            },
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 925,
                                "end": 930,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 947,
                                "end": 951,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "next"
                            },
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 941,
                                "end": 946,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "<p>Request Interceptor for all http requests</p>\n",
            "rawdescription": "\n\nRequest Interceptor for all http requests\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest, HttpErrorResponse } from '@angular/common/http';\n\nimport { AuthService } from './auth.service';\nimport { LoginService } from './login.service';\nimport { catchError } from 'rxjs/operators';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { Router } from '@angular/router';\n\n/**\n * Request Interceptor for all http requests\n */\n@Injectable()\nexport class HttpRequestInterceptorService implements HttpInterceptor {\n  /**\n   * necessary service implementations\n   * \n   * @param auth\n   * @param login\n   * @param router\n   * @param snackBar\n   */\n  constructor(\n    private auth: AuthService,\n    private login: LoginService,\n    private router: Router,\n    private snackBar: MatSnackBar,\n  ) {}\n\n  /**\n   * Method called at every http request\n   * \n   * @param req\n   * @param next\n   */\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    // Get the auth header from the service.\n    const authHeader: string = this.auth.getToken();\n    if (authHeader) {\n      let authReq: HttpRequest<any>;\n      authReq = req.clone({\n        setHeaders: { Authorization: authHeader },\n      });\n\n      this.login.renewToken();\n      req = authReq;\n    }\n\n    return next.handle(req)\n      .pipe(\n        catchError((error: HttpErrorResponse, caught: Observable<HttpEvent<any>>) => {\n          console.log(error);\n\n          let errorStatus: number = (error.status ? error.status : 0);\n          let errorMessage: string = (error && error.error && error.error.error) ? error.error.error : 'An error occured.';\n\n          if (errorStatus === 401) {\n            this.auth.setLogged(false);\n            this.router.navigate(['/login']);\n          }\n\n          if (this.auth.isLogged()) {\n            this.snackBar.open(errorMessage, 'OK', { duration: 10000, });\n          }\n\n          return throwError(error);\n        })) as any;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>necessary service implementations</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "login",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "rawdescription": "\n\nnecessary service implementations\n\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 647,
                            "end": 651,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "auth"
                        },
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 641,
                            "end": 646,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 664,
                            "end": 669,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "login"
                        },
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 658,
                            "end": 663,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 682,
                            "end": 688,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "router"
                        },
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 676,
                            "end": 681,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 701,
                            "end": 709,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "snackBar"
                        },
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 695,
                            "end": 700,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "AppDateAdapter",
            "id": "class-AppDateAdapter-b2a1832ca7887d6a1a66c1c0c4958c4d",
            "file": "src/app/admin/dialogs/add-month/add-month.dialog.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { formatDate } from '@angular/common';\nimport { DateAdapter, NativeDateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material/core';\nimport { MatDatepicker } from '@angular/material/datepicker';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\n\n/**\n * Customized DateAdapter to show Date in the correct format\n */\nexport class AppDateAdapter extends NativeDateAdapter {\n  /**\n   * date format method\n   * @param date\n   * @param displayFormat\n   */\n  format(date: Date, displayFormat: Object): string {\n      return formatDate(date, 'MMMM yyyy', 'en');\n  }\n}\n\n/**\n * Month Dialog component for creating + updating months\n */\n@Component({\n  templateUrl: './add-month.dialog.html',\n  providers: [\n    {provide: DateAdapter, useClass: AppDateAdapter},\n  ],\n  styleUrls: ['../../admin.component.scss'],\n}) export class AddMonthDialog {\n  /**\n   * month form group for create + update\n   */\n  monthForm: FormGroup;\n\n  /**\n   * Initializes month formgroup\n   * @param dialogRef\n   * @param data\n   * @param fb\n   */\n\tconstructor(\n    public dialogRef: MatDialogRef<AddMonthDialog>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private fb: FormBuilder,\n  ) {\n    this.monthForm = this.fb.group({\n      id: this.fb.control(data.month.id),\n      name: this.fb.control(data.month.name, Validators.required),\n      workingdays: this.fb.control(data.month.workingdays, [Validators.required, Validators.min(0), Validators.max(31)]),\n      time: this.fb.control(data.month.time, Validators.required),\n      active: this.fb.control((typeof data.month.active !== 'undefined') ? data.month.active : true),\n    });\n  }\n\n  /**\n   * Called on 'Cancel' click\n   */\n  onNoClick(): void {\n    this.dialogRef.close(false);\n  }\n\n  /**\n   * Called on 'Save' click\n   */\n  onSaveClick(): void {\n    this.dialogRef.close(this.monthForm.getRawValue());\n  }\n\n  /**\n   * Sets form value after datepicker update (when closed after month selection)\n   * @param normalizedDate\n   * @param datepicker\n   */\n  chosenMonthHandler(normalizedDate: Date, datepicker: MatDatepicker<any>): void {\n    this.monthForm.get('time').setValue(normalizedDate);\n    datepicker.close();\n  }\n\n  /**\n   * Sets form value after datepicker update\n   */\n  datepickerClosed(): void {\n    let date: Date = new Date(this.monthForm.get('time').value);\n    date.setDate(1);\n    this.monthForm.get('time').setValue(new Date((date.getTime() - (date.getTimezoneOffset() * 60000))).toISOString().slice(0, -5));\n  }\n}\n",
            "properties": [],
            "description": "<p>Customized DateAdapter to show Date in the correct format</p>\n",
            "rawdescription": "\n\nCustomized DateAdapter to show Date in the correct format\n",
            "methods": [
                {
                    "name": "format",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "displayFormat",
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndate format method\n",
                    "description": "<p>date format method</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 578,
                                "end": 582,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "date"
                            },
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 572,
                                "end": 577,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 595,
                                "end": 608,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "displayFormat"
                            },
                            "type": "Object",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 589,
                                "end": 594,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "NativeDateAdapter",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Entry",
            "id": "class-Entry-14ec70d9d2c8c309e7a52657243303fd",
            "file": "src/app/core/interfaces/exportCSV/entry.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Entry {\n\n  /**\n   * entry (project) name\n   */\n  name: string;\n\n  /**\n   * number of working days (project + vacation + training + bdd days)\n   */\n  workingDays: number;\n\n  /**\n   * arve = (projectdays billable + non-billable) / (totalworkingdays - vacationdays)\n   */\n  arve: number;\n\n  /**\n   * urve = (projectdays billable) / (totalworkingdays - vacationdays)\n   */\n  urve: number;\n\n  /**\n   * Return on sales of all projects\n   */\n  ros: number;\n}\n",
            "properties": [
                {
                    "name": "arve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>arve = (projectdays billable + non-billable) / (totalworkingdays - vacationdays)</p>\n",
                    "line": 19,
                    "rawdescription": "\n\narve = (projectdays billable + non-billable) / (totalworkingdays - vacationdays)\n"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>entry (project) name</p>\n",
                    "line": 9,
                    "rawdescription": "\n\nentry (project) name\n"
                },
                {
                    "name": "ros",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Return on sales of all projects</p>\n",
                    "line": 29,
                    "rawdescription": "\n\nReturn on sales of all projects\n"
                },
                {
                    "name": "urve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>urve = (projectdays billable) / (totalworkingdays - vacationdays)</p>\n",
                    "line": 24,
                    "rawdescription": "\n\nurve = (projectdays billable) / (totalworkingdays - vacationdays)\n"
                },
                {
                    "name": "workingDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>number of working days (project + vacation + training + bdd days)</p>\n",
                    "line": 14,
                    "rawdescription": "\n\nnumber of working days (project + vacation + training + bdd days)\n"
                }
            ],
            "description": "<p>Single entry structure for csv export</p>\n",
            "rawdescription": "\n\nSingle entry structure for csv export\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Export",
            "id": "class-Export-cb42dedb85fa038eb9142fb517df18bc",
            "file": "src/app/core/interfaces/exportCSV/export.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Entry } from \"./entry\";\nimport { Summary } from \"./summary\";\n\n/**\n * Export item structure for csv export\n */\nexport class Export {\n  /**\n   * id of selected month\n   */\n  monthId: number;\n\n  /**\n   * constructor for Export class needed\n   */\n  constructor(\n    /**\n     * array of entries from all teammembers\n     */\n    public employeeEntry: Entry[] = [],\n\n    /**\n     * summary data of teammember\n     */\n    public summary: Summary = new Summary(),\n  ) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor for Export class needed</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "employeeEntry",
                        "type": "Entry[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]"
                    },
                    {
                        "name": "summary",
                        "type": "Summary",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "new Summary()"
                    }
                ],
                "line": 11,
                "rawdescription": "\n\nconstructor for Export class needed\n",
                "jsdoctags": [
                    {
                        "name": "employeeEntry",
                        "type": "Entry[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "[]",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "summary",
                        "type": "Summary",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "new Summary()",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "employeeEntry",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Entry[]",
                    "optional": false,
                    "description": "<p>array of entries from all teammembers</p>\n",
                    "line": 20,
                    "rawdescription": "\n\narray of entries from all teammembers\n",
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "monthId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>id of selected month</p>\n",
                    "line": 11,
                    "rawdescription": "\n\nid of selected month\n"
                },
                {
                    "name": "summary",
                    "defaultValue": "new Summary()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Summary",
                    "optional": false,
                    "description": "<p>summary data of teammember</p>\n",
                    "line": 25,
                    "rawdescription": "\n\nsummary data of teammember\n",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "description": "<p>Export item structure for csv export</p>\n",
            "rawdescription": "\n\nExport item structure for csv export\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FcEntry",
            "id": "class-FcEntry-2c1c6506e230ee08c996ecc0d8abdb81",
            "file": "src/app/core/interfaces/fcEntry.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { FcProject } from './fcProject';\n\n/**\n * main forecast entry class\n */\nexport class FcEntry {\n    forecastId?: number;\n    userId: number;\n    monthId: number;\n    comment: string;\n    projects: FcProject[];\n    fte: number;\n    gradeId: number;\n    isRelevant: boolean;\n\n    /**\n     * forecast entry cannot be edited if locked-level is >= permission-level\n     */\n    locked?: number | boolean;\n\n    /**\n     * created time for history\n     */\n    createdAt?: string;\n    /**\n     * changed by user for history\n     */\n    changedBy?: string;\n    updated?: boolean;\n    /**\n     * all historic entry values for a forecast with a specific id\n     */\n    history?: FcEntry[];\n\n    /**\n     * arve = (projectdays billable + non-billable) / (totalworkingdays - vacationdays)\n     */\n    arve?: number;\n\n    /**\n     * urve = (projectdays billable) / (totalworkingdays - vacationdays)\n     */\n    urve?: number;\n\n    /**\n     * all billable days\n     */\n    billableDays?: number;\n\n    /**\n     * all days that are set non-billable (can be != total - billable)\n     */\n    nonbillableDays?: number;\n\n    /**\n     * vacation days\n     */\n    vacationDays?: number;\n\n    /**\n     * all project days ( = days from projects where project-type = 0)\n     */\n    projectDays?: number;\n\n    /**\n     * business-development days\n     */\n    businessDays?: number;\n\n    /**\n     * total possible days in a month for a specific user (workingdays per month * user-fte)\n     */\n    totalDays?: number;\n    nonbillableProjectDays?: number;\n    cor?: number;\n    ros?: number;\n\n    /**\n     * if set to true, input fields in fc-entry will be validated instantly (otherwise only when \"Save\" is clicked)\n     */\n    instantValidation?: boolean;\n\n    constructor() {\n        this.forecastId = undefined;\n        this.monthId = undefined;\n        this.userId = undefined;\n        this.comment = '';\n        this.projects = [];\n        this.fte = undefined;\n        this.gradeId = undefined;\n        this.isRelevant = true;\n        this.locked = -1;\n        this.arve = 0;\n        this.urve = 0;\n        this.projectDays = 0;\n        this.billableDays = 0;\n        this.nonbillableDays = 0;\n        this.vacationDays = 0;\n        this.businessDays = 0;\n        this.totalDays = 0;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 81
            },
            "properties": [
                {
                    "name": "arve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>arve = (projectdays billable + non-billable) / (totalworkingdays - vacationdays)</p>\n",
                    "line": 38,
                    "rawdescription": "\n\narve = (projectdays billable + non-billable) / (totalworkingdays - vacationdays)\n"
                },
                {
                    "name": "billableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>all billable days</p>\n",
                    "line": 48,
                    "rawdescription": "\n\nall billable days\n"
                },
                {
                    "name": "businessDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>business-development days</p>\n",
                    "line": 68,
                    "rawdescription": "\n\nbusiness-development days\n"
                },
                {
                    "name": "changedBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>changed by user for history</p>\n",
                    "line": 28,
                    "rawdescription": "\n\nchanged by user for history\n"
                },
                {
                    "name": "comment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "cor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>created time for history</p>\n",
                    "line": 24,
                    "rawdescription": "\n\ncreated time for history\n"
                },
                {
                    "name": "forecastId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "fte",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "gradeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "history",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FcEntry[]",
                    "optional": true,
                    "description": "<p>all historic entry values for a forecast with a specific id</p>\n",
                    "line": 33,
                    "rawdescription": "\n\nall historic entry values for a forecast with a specific id\n"
                },
                {
                    "name": "instantValidation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>if set to true, input fields in fc-entry will be validated instantly (otherwise only when &quot;Save&quot; is clicked)</p>\n",
                    "line": 81,
                    "rawdescription": "\n\nif set to true, input fields in fc-entry will be validated instantly (otherwise only when \"Save\" is clicked)\n"
                },
                {
                    "name": "isRelevant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "locked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | boolean",
                    "optional": true,
                    "description": "<p>forecast entry cannot be edited if locked-level is &gt;= permission-level</p>\n",
                    "line": 19,
                    "rawdescription": "\n\nforecast entry cannot be edited if locked-level is >= permission-level\n"
                },
                {
                    "name": "monthId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "nonbillableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>all days that are set non-billable (can be != total - billable)</p>\n",
                    "line": 53,
                    "rawdescription": "\n\nall days that are set non-billable (can be != total - billable)\n"
                },
                {
                    "name": "nonbillableProjectDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "projectDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>all project days ( = days from projects where project-type = 0)</p>\n",
                    "line": 63,
                    "rawdescription": "\n\nall project days ( = days from projects where project-type = 0)\n"
                },
                {
                    "name": "projects",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FcProject[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "ros",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "totalDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>total possible days in a month for a specific user (workingdays per month * user-fte)</p>\n",
                    "line": 73,
                    "rawdescription": "\n\ntotal possible days in a month for a specific user (workingdays per month * user-fte)\n"
                },
                {
                    "name": "updated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "urve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>urve = (projectdays billable) / (totalworkingdays - vacationdays)</p>\n",
                    "line": 43,
                    "rawdescription": "\n\nurve = (projectdays billable) / (totalworkingdays - vacationdays)\n"
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "vacationDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>vacation days</p>\n",
                    "line": 58,
                    "rawdescription": "\n\nvacation days\n"
                }
            ],
            "description": "<p>main forecast entry class</p>\n",
            "rawdescription": "\n\nmain forecast entry class\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FcProject",
            "id": "class-FcProject-109bf7e9eb33f74391472dd3cebc2381",
            "file": "src/app/core/interfaces/fcProject.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class FcProject {\n    projectId: number;\n    plannedProjectDays: number;\n    probabilityId: number;\n\n    /**\n     * Is project billable?\n     * default: true\n     * Automatically set to false for vacation + training + business development days\n     */\n    billable?: boolean;\n\n    /**\n     * employee cor for project\n     */\n    cor: number;\n\n    /**\n     * Project generates external revenue\n     * default: true\n     * Automatically set to false for vacation + training + business development days\n     */\n    externalRevenue?: boolean;\n\n    /**\n     * project type\n     * default: 0, 1 - xx: special types (vacation, ...)\n     */\n    projectType?: number;\n\n    /**\n     * Is project mandatory?\n     * Set to true for vacation + training + business development days\n     */\n    mandatory?: string;\n\n    /**\n     * List of errors if validation was unsuccessful\n     */\n    errors?: string[];\n\n    constructor() {\n        this.projectId = undefined;\n        this.plannedProjectDays = 0;\n        this.probabilityId = null;\n        this.cor = 0;\n        this.externalRevenue = true;\n        this.billable = true;\n        this.mandatory = 'N';\n        this.projectType = 0;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 43
            },
            "properties": [
                {
                    "name": "billable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Is project billable?\ndefault: true\nAutomatically set to false for vacation + training + business development days</p>\n",
                    "line": 14,
                    "rawdescription": "\n\nIs project billable?\ndefault: true\nAutomatically set to false for vacation + training + business development days\n"
                },
                {
                    "name": "cor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>employee cor for project</p>\n",
                    "line": 19,
                    "rawdescription": "\n\nemployee cor for project\n"
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "<p>List of errors if validation was unsuccessful</p>\n",
                    "line": 43,
                    "rawdescription": "\n\nList of errors if validation was unsuccessful\n"
                },
                {
                    "name": "externalRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Project generates external revenue\ndefault: true\nAutomatically set to false for vacation + training + business development days</p>\n",
                    "line": 26,
                    "rawdescription": "\n\nProject generates external revenue\ndefault: true\nAutomatically set to false for vacation + training + business development days\n"
                },
                {
                    "name": "mandatory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>Is project mandatory?\nSet to true for vacation + training + business development days</p>\n",
                    "line": 38,
                    "rawdescription": "\n\nIs project mandatory?\nSet to true for vacation + training + business development days\n"
                },
                {
                    "name": "plannedProjectDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "probabilityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "projectId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "projectType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>project type\ndefault: 0, 1 - xx: special types (vacation, ...)</p>\n",
                    "line": 32,
                    "rawdescription": "\n\nproject type\ndefault: 0, 1 - xx: special types (vacation, ...)\n"
                }
            ],
            "description": "<p>forecast project structure (projects that have been assigned to a forecast)</p>\n",
            "rawdescription": "\n\nforecast project structure (projects that have been assigned to a forecast)\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FinancialControllerSummaryAPPS",
            "id": "class-FinancialControllerSummaryAPPS-01f1def1770f4cd70cd3071c802abeb8",
            "file": "src/app/core/interfaces/financialAppsSummary.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class FinancialControllerSummaryAPPS {\n    \n    ros: number;\n\n    internalRevenue: number;\n\n    externalRevenue: number;\n\n    avgVacation: number;\n\n    fte: number;\n\n    urve: number;\n\n    arve: number;\n\n    cor: number;\n\n    btu: number;\n\n    pror: number;\n\n    arvi: number;\n\n    urvi: number;\n\n    expectedRevenue: number;\n\n    monthId: number;\n\n    constructor() {\n        this.ros = 0;\n        this.internalRevenue = 0,\n        this.externalRevenue = 0,\n        this.avgVacation = 0;\n        this.fte = 0;\n        this.urve = 0;\n        this.arve = 0;\n        this.cor = 0;\n        this.btu = 0;\n        this.pror = 0;\n        this.arvi = 0;\n        this.urvi = 0;\n        this.expectedRevenue = 0;\n        this.monthId = 0;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 29
            },
            "properties": [
                {
                    "name": "arve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "arvi",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "avgVacation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "btu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "cor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "expectedRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "externalRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "fte",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "internalRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "monthId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "pror",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "ros",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "urve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "urvi",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "FincancialControllerSummary",
            "id": "class-FincancialControllerSummary-70799460518275c7e593bdf40cb5d3b7",
            "file": "src/app/core/interfaces/financialSummary.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class FincancialControllerSummary {\n\n    totalRevenue: number;\n\n    internalRevenue: number;\n\n    externalRevenue: number;\n\n    btu: number;\n\n    pror: number;\n\n    arvi: number;\n\n    urvi: number;\n\n    constructor() {\n        this.totalRevenue = 0;\n        this.internalRevenue = 0;\n        this.externalRevenue = 0;\n        this.btu = 0;\n        this.pror = 0;\n        this.arvi = 0;\n        this.urvi = 0;\n    }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "properties": [
                {
                    "name": "arvi",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "btu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "externalRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "internalRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "pror",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "totalRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "urvi",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LockedMonth",
            "id": "class-LockedMonth-838928c33fe750b6ffdc84b468a0ce3f",
            "file": "src/app/core/interfaces/lockedMonth.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class LockedMonth {\n    /**\n     * unique system id\n     */\n    id?: number;\n  \n    /**\n     * Value for whether the month is submitted and locked.\n     */\n    locked?: boolean;\n  \n    /**\n     * constructor with default values\n     */\n    constructor() {\n      \n    }\n  }",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor with default values</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13,
                "rawdescription": "\n\nconstructor with default values\n"
            },
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>unique system id</p>\n",
                    "line": 8,
                    "rawdescription": "\n\nunique system id\n"
                },
                {
                    "name": "locked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Value for whether the month is submitted and locked.</p>\n",
                    "line": 13,
                    "rawdescription": "\n\nValue for whether the month is submitted and locked.\n"
                }
            ],
            "description": "<p>locked month data structure</p>\n",
            "rawdescription": "\n\nlocked month data structure\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "LoginPage",
            "id": "class-LoginPage-e68572eb3374698071597223a1c221a3",
            "file": "e2e_testing/login/login.po.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { browser, by, element } from \"protractor\";\n\nclass LoginPage {\n    private credentials = {\n        username: \"michael.danninger@capgemini.com\",\n        password: \"Password1!\"\n    }\n\n    navigateTo() {\n        return browser.get(\"http://localhost:4200/forecast\")\n    }\n    fillCredentials(credentials: any = this.credentials) {\n        element(by.id(\"mat-input-0\")).sendKeys(credentials.username);\n        element(by.id(\"mat-input-1\")).sendKeys(credentials.password);\n        element(by.css(\"login-button\")).click();\n    }\n    getPageTitleText() {\n        return element(by.css(\"user\")).getText();\n    }\n    getErrorMessage() {\n        return element(by.id(\"mat-error-0\")).getText();\n    }\n}\n\nexport { LoginPage }",
            "properties": [
                {
                    "name": "credentials",
                    "defaultValue": "{\n        username: \"michael.danninger@capgemini.com\",\n        password: \"Password1!\"\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "fillCredentials",
                    "args": [
                        {
                            "name": "credentials",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.credentials"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "credentials",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "this.credentials",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getErrorMessage",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPageTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Month",
            "id": "class-Month-696b5dc5aabe14db08b04037d27942b4",
            "file": "src/app/core/interfaces/month.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Month {\n  /**\n   * unique system id\n   */\n  id: number;\n\n  /**\n   * month name\n   */\n  name: string;\n\n  /**\n   * possible working days for month\n   */\n  workingdays: string;\n\n  /**\n   * Time of start of month\n   * E.g. for April 2019: 20190401T00:00:00\n   */\n  time: string;\n\n  /**\n   * Used for csv export\n   */\n  checked?: boolean;\n\n  /**\n   * Active value for a month (only active months can be seen)\n   * Default: true\n   */\n  active?: boolean;\n\n  /**\n   * Value for whether the month is submitted and locked.\n   */\n  locked?: boolean;\n\n    /**\n   * Value for whether the month is submitted and saved.\n   */\n  saved?: boolean;\n\n  /**\n   * constructor with default values\n   */\n  constructor() {\n    let d: Date = new Date();\n    d.setDate(1);\n    d.setHours(0, 0, 0, 0);\n\n    this.name = \"\";\n    this.workingdays = \"0\";\n    this.time = d.toISOString();\n    this.active = true;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor with default values</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 45,
                "rawdescription": "\n\nconstructor with default values\n"
            },
            "properties": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Active value for a month (only active months can be seen)\nDefault: true</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nActive value for a month (only active months can be seen)\nDefault: true\n"
                },
                {
                    "name": "checked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Used for csv export</p>\n",
                    "line": 29,
                    "rawdescription": "\n\nUsed for csv export\n"
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>unique system id</p>\n",
                    "line": 8,
                    "rawdescription": "\n\nunique system id\n"
                },
                {
                    "name": "locked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Value for whether the month is submitted and locked.</p>\n",
                    "line": 40,
                    "rawdescription": "\n\nValue for whether the month is submitted and locked.\n"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>month name</p>\n",
                    "line": 13,
                    "rawdescription": "\n\nmonth name\n"
                },
                {
                    "name": "saved",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Value for whether the month is submitted and saved.</p>\n",
                    "line": 45,
                    "rawdescription": "\n\nValue for whether the month is submitted and saved.\n"
                },
                {
                    "name": "time",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Time of start of month\nE.g. for April 2019: 20190401T00:00:00</p>\n",
                    "line": 24,
                    "rawdescription": "\n\nTime of start of month\nE.g. for April 2019: 20190401T00:00:00\n"
                },
                {
                    "name": "workingdays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>possible working days for month</p>\n",
                    "line": 18,
                    "rawdescription": "\n\npossible working days for month\n"
                }
            ],
            "description": "<p>month data structure</p>\n",
            "rawdescription": "\n\nmonth data structure\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "PerGrade",
            "id": "class-PerGrade-1710b7efa9724d331e6474415adbebaf",
            "file": "src/app/core/interfaces/perGrade.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class PerGrade {\n    value : number;\n    count: number;\n    users: Set<number>;\n    average : number;\n\n    getAverage() : number{\n        this.average = this.value/this.users.size;\n        return this.average;\n    }\n    \n    constructor(){\n        this.value = 0;\n        this.count = 0;\n        this.average = 0;\n        this.users = new Set();\n    }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "properties": [
                {
                    "name": "average",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "users",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Set<number>",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [
                {
                    "name": "getAverage",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProbabilityRecord",
            "id": "class-ProbabilityRecord-a22833240bdc488bf400d5048300ef36",
            "file": "src/app/core/interfaces/probabilityRecord.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ProbabilityRecord {\n\n\tid: number;\n\n\tname: string;\n\n\tprojectDays: number;\n\n\tbillableDays: number;\n\n\tvacationDays: number;\n\n\tpaidDays: number;\n\n\tcorDays: number; \n\n\tcor: number;\n\n\texternalRevenue: number;\n\n\tinternalRevenue: number;\n\n\trevenue: number;\n\n\tarve: number;\n\n\turve: number;\n\n\tnonBillableDays: number;\n\t\n  constructor() {\n\t\tthis.nonBillableDays = 0;\n\t\tthis.id = 0;\n\t\tthis.name = \"\";\n\t\tthis.arve = 0;\n\t\tthis.urve = 0;\n\t\tthis.revenue = 0;\n\t\tthis.internalRevenue = 0;\n\t\tthis.vacationDays = 0;\n\t\tthis.externalRevenue = 0;\n\t\tthis.corDays = 0;\n\t\tthis.paidDays = 0;\n\t\tthis.billableDays = 0;\n\t\tthis.cor = 0;\n\t\tthis.projectDays = 0;\n    }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 29
            },
            "properties": [
                {
                    "name": "arve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "billableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "cor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "corDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "externalRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "internalRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "nonBillableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "paidDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "projectDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "revenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "urve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "vacationDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProbabilitySummary",
            "id": "class-ProbabilitySummary-db447c0434cda5ae0bd0924c0794fa02",
            "file": "src/app/core/interfaces/probabilitySummary.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { ProbabilityRecord } from \"./probabilityRecord\";\nimport { PerGrade } from \"./perGrade\";\n\nexport class ProbabilitySummary {\n\n\tprojectDays: number;\n\n\tbillableDays: number;\n\n\tvacationDays: number;\n\n\tavgVacationDaysPerGrade: Map<number, PerGrade>;\n\n\tavgFTEPerGrade: Map<number, PerGrade>;\n\n\tpaidDays: number;\n\n\tcorDays: number;\n\n\tcor: number;\n\n\texternalRevenue: number;\n\n\tinternalRevenue: number;\n\n\trevenue: number;\n\n\tarve: number;\n\n\turve: number;\n    \n    probabilites: ProbabilityRecord[];\n\n    nonBillableDays: number;\n\n    nonForecastedDays: number;\n\n    constructor() {\n        this.nonBillableDays = 0;\n        this.nonForecastedDays = 0;\n\t\tthis.corDays = 0;\n        this.arve = 0;\n\t\tthis.urve = 0;\n\t\tthis.revenue = 0;\n\t\tthis.internalRevenue = 0;\n\t\tthis.vacationDays = 0;\n\t\tthis.externalRevenue = 0;\n\t\tthis.paidDays = 0;\n\t\tthis.billableDays = 0;\n\t\tthis.cor = 0;\n        this.projectDays = 0;\n        this.probabilites = [];\n\t\tthis.avgVacationDaysPerGrade = new Map();\n\t\tthis.avgFTEPerGrade = new Map();\n    }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 36
            },
            "properties": [
                {
                    "name": "arve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "avgFTEPerGrade",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | PerGrade>",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "avgVacationDaysPerGrade",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | PerGrade>",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "billableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "cor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "corDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "externalRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "internalRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "nonBillableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "nonForecastedDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "paidDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "probabilites",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProbabilityRecord[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "projectDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "revenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "urve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "vacationDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Project",
            "id": "class-Project-563fb545254aca58cad76640efdb7bd4",
            "file": "src/app/core/interfaces/project.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Project {\n\t/**\n\t * unique id\n\t */\n\tid: number;\n\n\t/**\n\t * project code (imported from ctr)\n\t */\n\tcode?: string;\n\n\t/**\n\t * project name (imported from ctr)\n\t */\n\tname: string;\n\n\t/**\n\t * customer name (currently not set)\n\t */\n\tcustomer?: string;\n\n\t/**\n\t * billable default value\n\t */\n\tbillable?: boolean;\n\n\t/**\n\t * is project mandatory?\n\t * If yes: 'Y', if no: 'N'\n\t */\n\tmandatory: string;\n\n\t/**\n\t * Project type.\n\t * 0: default, 1 - xx: special types\n\t */\n\tprojectType: number;\n\n\t/**\n\t * if project is active or not (default: active)\n\t */\n\tactive?: boolean;\n\n\t/**\n\t * new project constructor with default values\n\t */\n\tconstructor() {\n\t\tthis.code = '';\n\t\tthis.name = '';\n\t\tthis.customer = '';\n\t\tthis.mandatory = 'N';\n\t\tthis.projectType = 0;\n\t\tthis.billable = true;\n\t\tthis.active = true;\n\t}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>new project constructor with default values</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 45,
                "rawdescription": "\n\nnew project constructor with default values\n"
            },
            "properties": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>if project is active or not (default: active)</p>\n",
                    "line": 45,
                    "rawdescription": "\n\nif project is active or not (default: active)\n"
                },
                {
                    "name": "billable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>billable default value</p>\n",
                    "line": 28,
                    "rawdescription": "\n\nbillable default value\n"
                },
                {
                    "name": "code",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>project code (imported from ctr)</p>\n",
                    "line": 13,
                    "rawdescription": "\n\nproject code (imported from ctr)\n"
                },
                {
                    "name": "customer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>customer name (currently not set)</p>\n",
                    "line": 23,
                    "rawdescription": "\n\ncustomer name (currently not set)\n"
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>unique id</p>\n",
                    "line": 8,
                    "rawdescription": "\n\nunique id\n"
                },
                {
                    "name": "mandatory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>is project mandatory?\nIf yes: &#39;Y&#39;, if no: &#39;N&#39;</p>\n",
                    "line": 34,
                    "rawdescription": "\n\nis project mandatory?\nIf yes: 'Y', if no: 'N'\n"
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>project name (imported from ctr)</p>\n",
                    "line": 18,
                    "rawdescription": "\n\nproject name (imported from ctr)\n"
                },
                {
                    "name": "projectType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Project type.\n0: default, 1 - xx: special types</p>\n",
                    "line": 40,
                    "rawdescription": "\n\nProject type.\n0: default, 1 - xx: special types\n"
                }
            ],
            "description": "<p>projects structure (projects that can be assigned to a forecast)</p>\n",
            "rawdescription": "\n\nprojects structure (projects that can be assigned to a forecast)\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProjectHelper",
            "id": "class-ProjectHelper-11a0308bf471a21eb09139f9f0c80562",
            "file": "src/app/forecast/components/staffing-overview/staffing-overview.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Component, OnInit, OnDestroy, Input, OnChanges, SimpleChange, SimpleChanges, AfterContentInit, AfterViewInit } from \"@angular/core\";\n\nimport { User } from \"../../../core/interfaces/user\";\nimport { Month } from \"../../../core/interfaces/month\";\nimport { FcEntry } from \"../../../core/interfaces/fcEntry\";\nimport { ForecastService } from \"../../../core/services/forecasts/forecast.service\";\nimport { UserService } from \"../../../core/services/user.service\";\nimport { DatePipe } from \"@angular/common\";\nimport { PageStateService } from \"../../../core/shared/page-state.service\";\nimport { MatTooltipModule } from \"@angular/material/tooltip\";\nimport { TooltipPosition } from '@angular/material/tooltip';\nimport { Subscription } from \"rxjs\";\nimport { Project } from \"../../../core/interfaces/project\";\nimport { UtilitiesService } from \"../../../core/services/utilities.service\";\nimport { parseHostBindings } from \"@angular/compiler\";\n\nclass ProjectHelper {\n    projectId: number;\n    days: number;\n    projectCode: String;\n\n    constructor() {\n        this.projectId = 0;\n        this.days = 0;\n        this.projectCode = undefined;\n    }\n\n}\n\n@Component({\n    selector: 'app-staffing-overview',\n    templateUrl: './staffing-overview.component.html',\n    styleUrls: ['./staffing-overview.component.scss'],\n})\nexport class StaffingOverviewComponent implements OnInit, OnDestroy, OnChanges {\n\n    @Input('months') months: Month[];\n\n    @Input('users') users: User[];\n\n    /**\n      * columns which are displayed\n     */\n    columnsToDisplay: String[] = [];\n\n    /**\n      * list of all forecast entries for all users\n     */\n    forecasts: FcEntry[] = [];\n\n    projects: Project[] = [];\n    // allForecast: FcEntry[] = [];\n\n    projectHelpers: ProjectHelper[] = [];\n\n    forecastrSubscription: Subscription;\n\n    isPageReady: boolean = false;\n\n     isFinished: boolean = false;\n    /**\n     * constructor for staffing-overview component\n     *  @param forecastService\n     */\n    constructor(\n        private forecastService: ForecastService,\n        private userService: UserService,\n        private datePipe: DatePipe,\n        private pageState: PageStateService,\n        private utilityService: UtilitiesService\n    ) {\n    }\n\n    ngOnInit(): void {\n        this.pageState.forecastrReady$.subscribe((ready: boolean) => {\n            if (ready) {\n                this.initStaffing();\n            }\n        });\n\n    }\n    ngOnChanges(): void {\n        this.pageState.forecastrReady$.subscribe((ready: boolean) => {\n            if (ready) {\n                this.initStaffing();\n            }\n        });\n    }\n\n    getTotalARVE(month: Month): string {\n        let projectDays = 0;\n        let totalDays = 0;\n        let vacationDays = 0;\n\n        for (let user of this.users) {\n            let forecast: FcEntry = this.forecastService.forecasts.find((fc: FcEntry) => {\n                return fc.monthId === month.id && fc.userId === user.id\n            });\n\n            if (user.active) {\n                if (user.active.valueOf) {\n                    if (forecast) {\n                        if (forecast.isRelevant) {\n                            if (forecast.projectDays) {\n                                projectDays += forecast.projectDays;\n                            }\n                            if (forecast.vacationDays) {\n                                vacationDays += forecast.vacationDays;\n                            }\n                            if (forecast.totalDays) {\n                                totalDays += forecast.totalDays;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        let arve = (projectDays) / (totalDays - vacationDays);\n        return (arve * 100).toFixed(2);\n    }\n\n    getTotalFTE(month: Month): string {\n        let fte = 0;\n\n        for (let user of this.users) {\n            let forecast: FcEntry = this.forecastService.forecasts.find((fc: FcEntry) => {\n                return fc.monthId === month.id && fc.userId === user.id\n            });\n\n            if (forecast) {\n                //if(forecast.isRelevant) {\n                fte += forecast.fte;\n                //}\n            }\n        }\n\n        return fte.toFixed(2);\n    }\n\n    getTeam(user: User): String {\n        if (user.id === -1) {\n            return \"\";\n        }\n\n        let team = user;\n\n        if (team === undefined) {\n            return \"-\";\n        }\n\n        let parentId = user.parentId;\n\n        if (parentId === undefined) {\n            return team.lastName + \", \" + team.firstName;\n        }\n\n        let parentUser = this.userService.getUser(parentId);\n        let parentRole = this.userService.getRole(parentUser.roleId);\n\n        if (parentUser !== undefined) {\n            team = parentUser;\n\n            while (parentUser !== undefined && parentRole !== undefined && (parentRole.shortcut === \"CSS\" || parentRole.shortcut === \"PDL\")) {\n                parentId = parentUser.parentId;\n\n                if (parentId === undefined) {\n                    return team.lastName + \", \" + team.firstName;\n                }\n\n                parentUser = this.userService.getUser(parentId);\n\n                if (parentUser !== undefined) {\n                    parentRole = this.userService.getRole(parentUser.roleId);\n                }\n\n                team = parentUser;\n            }\n        }\n\n        if (team === undefined) {\n            return \"-\";\n        }\n\n        return team.lastName + \", \" + team.firstName + \" (\" + parentRole.shortcut + \")\";\n    }\n\n    getProjectHelper(forecasts: FcEntry[]): ProjectHelper[] {\n\n        let projectHelpers: ProjectHelper[] = []\n        var check: boolean = false;\n        for (let fcEntry of forecasts) {\n            for (let project of fcEntry.projects) {\n\n                let helper = projectHelpers.find((helper: ProjectHelper) => {\n                    return helper.projectId === project.projectId;\n                });\n\n                if (helper) {\n                    helper.days += project.plannedProjectDays;\n                }\n                else {\n                    let projectTemp: Project = this.forecastService.projects.find((pro: Project) => {\n                        return pro.id === project.projectId\n                    });\n\n                    let projectHelperTemp: ProjectHelper = new ProjectHelper;\n                    projectHelperTemp.days = project.plannedProjectDays;\n                    projectHelperTemp.projectId = project.projectId;\n                    projectHelperTemp.projectCode = projectTemp.name.split('-')[0];\n                    projectHelpers.push(projectHelperTemp);\n                }\n            }\n        }\n        return projectHelpers;\n    }\n\n    getProjects(user: User, viewColumn: String): String {\n\n        const projectIds = []\n        if (user.id === -1) {\n            return \"\";\n        }\n\n        let forecasts: FcEntry[] = [];\n        let forecast: FcEntry;\n\n        for (let month of this.months) {\n            forecast = this.forecastService.forecasts.find((fc: FcEntry) => {\n                return fc.monthId === month.id && fc.userId === user.id\n            });\n\n            if (forecast) {\n                forecasts.push(forecast);\n            }\n            forecast = null;\n        }\n\n        if (forecast) {\n            forecasts.push(forecast);\n        }\n\n        let forecastHelpers = this.getProjectHelper(forecasts);\n\n        if (viewColumn === \"table\") {\n            return this.getProjectCode(forecastHelpers);\n        }\n        else {\n            return this.getProjectCodes(forecastHelpers);\n        }\n    }\n\n    getProjectCode(forecastHelpers: ProjectHelper[]): String {\n\n        if (forecastHelpers.length <= 0) {\n            return \"no project\";\n        }\n\n        forecastHelpers.sort(function (a, b) {\n            return a.days - b.days;\n        }).reverse();\n\n        return forecastHelpers[0].projectCode.toString();\n    }\n\n    getProjectCodes(forecastHelpers: ProjectHelper[]): String {\n\n        if (forecastHelpers.length <= 0) {\n            return \"no project\";\n        }\n\n        forecastHelpers.sort(function (a, b) {\n            return a.days - b.days;\n        }).reverse();\n\n        let returnString = \" \";\n\n        for (let helper of forecastHelpers) {\n            if (helper.days !== 0) {\n                returnString += helper.projectCode + \"\\n\";\n            }\n        }\n        return returnString;\n    }\n\n    initStaffing(): void {\n        this.projects = this.utilityService.getProjects();\n        this.columnsToDisplay = [];\n        this.columnsToDisplay.push('name');\n        this.columnsToDisplay.push('team');\n        this.columnsToDisplay.push(\"corp\");\n        this.columnsToDisplay.push(\"projects\");\n\n        for (let month of this.months) {\n            this.columnsToDisplay.push(month.name);\n        }\n\n        if (!this.users.find((u: User) => u.id === -1)) {\n            let user: User = new User();\n            user.id = -1;\n            user.firstName = \"\";\n            user.lastName = \"Total\";\n            user.globalId = -1;\n            user.fte = 0;\n            this.users.unshift(user);\n        }\n    }\n\n    exportCSV(): void {\n        this.pageState.showSpinner();\n\n        let lineEnding = \"\\r\\n\";\n        let header: string = \"Employee;Team;Corp Id;\" + this.months.map(x => x.name + \" ARVE;\" + x.name + \" FTE\").join(\";\") + lineEnding;\n\n        let body = \"\";\n\n        let teams = new Map<string, User[]>();\n\n        for (let u of this.users) {\n            if (u.id === -1) {\n                continue;\n            }\n\n            let team = this.getTeam(u);\n            let teamContent: User[] = teams.get(team.toString());\n\n            if (teamContent === undefined) {\n                teams = teams.set(team.toString(), [u]);\n            } else {\n                teamContent.push(u);\n                teams = teams.set(team.toString(), teamContent);\n            }\n        }\n\n        let teamNames = Array.from(teams.keys());\n\n        for (let team of teamNames) {\n            body += team + lineEnding;\n            body += header;\n            body += teams.get(team).map(u => u.lastName + \", \" + u.firstName + \";\" +\n                team + \";\" +\n                u.globalId.toString() + \";\" +\n                this.months.map(x => this.parseForCSV(this.getMonthARVEFromPerson(x, u), 4, 100) + \";\" +\n                    this.parseForCSV(this.getMonthFTEFromPerson(x, u), 0, 1)).join(\";\")).join(lineEnding);\n            body += lineEnding + lineEnding;\n        }\n        //summary\n        body += \"Summary\" + lineEnding;\n        body += this.months.map(x => x.name + \" ARVE;\" + x.name + \" FTE\").join(\";\") + lineEnding;\n        body += this.months.map(x => this.getTotalARVE(x) + \";\" + this.getTotalFTE(x)).join(\";\") + lineEnding;\n\n        const data = body;\n        const blob: Blob = new Blob([data], { type: \"text/csv\" });\n        const filename: string = this.datePipe.transform(new Date(), \"yyyyMMdd\") + \"-AllOverview.csv\";\n\n        this.pageState.hideSpinner();\n\n        if (window.navigator.msSaveOrOpenBlob) {\n            window.navigator.msSaveOrOpenBlob(blob, filename);\n        } else {\n            const url: string = window.URL.createObjectURL(blob);\n\n            let a: HTMLAnchorElement = document.createElement(\"a\");\n            a.href = url;\n            a.download = filename;\n\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            window.URL.revokeObjectURL(url);\n        }\n    }\n\n    parseForCSV(toParse: string, min: number, div: number): string {\n        if (toParse == \"-\") {\n            return \"0\";\n        }\n\n        let n = parseFloat(toParse) / div;\n        return n.toLocaleString(\"de\", { minimumFractionDigits: min }).replace(\".\", \"\");\n    }\n\n    getMonthFTEFromPerson(month: Month, user: User): string {\n        if (user.id === -1) {\n            return this.getTotalFTE(month);\n        }\n\n        let forecast: FcEntry = this.forecastService.forecasts.find((fc: FcEntry) => {\n            return fc.monthId === month.id && fc.userId === user.id\n        });\n\n        if (forecast) {\n            return forecast.fte.toString();\n        } else {\n            return user.fte.toString();\n        }\n    }\n\n    getMonthARVEFromPerson(month: Month, user: User): string {\n        if (user.id === -1) {\n            return this.getTotalARVE(month);\n        }\n\n        let forecast: FcEntry = this.forecastService.forecasts.find((fc: FcEntry) => {\n            return fc.monthId === month.id && fc.userId === user.id\n        });\n\n        if (forecast) {\n            return (forecast.arve * 100).toFixed(2);\n        } else {\n            return \"-\";\n        }\n    }\n\n    ngOnDestroy(): void {\n    }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 20
            },
            "properties": [
                {
                    "name": "days",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "projectCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "projectId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ProjectRequest",
            "id": "class-ProjectRequest-5f86014770a301b8f7a85541e8c1390f",
            "file": "src/app/core/interfaces/projectRequest.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ProjectRequest {\n\n    comment: string;\n\n    projectCode: string;\n\n    projectName: string;\n\n    constructor() {\n\t\tthis.projectCode = '';\n        this.projectName = '';\n        this.comment = \"\";\n\t}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "properties": [
                {
                    "name": "comment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "projectCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "projectName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "SavedMonth",
            "id": "class-SavedMonth-2f12c41a32fac04fa4ebb339c259a6ed",
            "file": "src/app/core/interfaces/savedMonth.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class SavedMonth {\n    /**\n     * unique system id\n     */\n    id?: number;\n  \n    /**\n     * Value for whether the month is submitted and saved.\n     */\n    locked?: boolean;\n  \n    /**\n     * constructor with default values\n     */\n    constructor() {\n      \n    }\n  }",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor with default values</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13,
                "rawdescription": "\n\nconstructor with default values\n"
            },
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>unique system id</p>\n",
                    "line": 8,
                    "rawdescription": "\n\nunique system id\n"
                },
                {
                    "name": "locked",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>Value for whether the month is submitted and saved.</p>\n",
                    "line": 13,
                    "rawdescription": "\n\nValue for whether the month is submitted and saved.\n"
                }
            ],
            "description": "<p>saved month data structure</p>\n",
            "rawdescription": "\n\nsaved month data structure\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Suggestion",
            "id": "class-Suggestion-1ca1bc0a2dd7cf5c5f17efb186dcd492",
            "file": "src/app/core/interfaces/suggestion.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Suggestion {\n    projectId: number;\n    cor?: number;\n    probabilityId?: number;\n    externalRevenue?: boolean;\n    billable?: boolean;\n}",
            "properties": [
                {
                    "name": "billable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "cor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "externalRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "probabilityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "projectId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Summary",
            "id": "class-Summary-2629a278b1a39cf4254ebc91f7254c08",
            "file": "src/app/core/interfaces/exportCSV/summary.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Summary {\n\n  /**\n   * Total number of assigned project days (does not include vacation, training, BDD days)\n   */\n  projectDays: number;\n\n  /**\n   * total vacation days\n   */\n  vacationDays: number;\n\n  /**\n   * total training days\n   */\n  trainingDays: number;\n\n  /**\n   * total business development days\n   */\n  businessDevelopmentDays: number;\n\n  /**\n   * total billable days\n   */\n  billableDays: number;\n\n  /**\n   * total non-billable days\n   */\n  nonbillableDays: number;\n\n  /**\n   * toal number of possible working days per month (for all teammembers)\n   */\n  totalWorkingDays: number;\n\n  /**\n   * average arve per teammember\n   */\n  arve: number;\n\n  /**\n   * average urve per teammember\n   */\n  urve: number;\n\n  /**\n   * total return on sales for team\n   */\n  ros: number;\n}\n",
            "properties": [
                {
                    "name": "arve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>average arve per teammember</p>\n",
                    "line": 44,
                    "rawdescription": "\n\naverage arve per teammember\n"
                },
                {
                    "name": "billableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>total billable days</p>\n",
                    "line": 29,
                    "rawdescription": "\n\ntotal billable days\n"
                },
                {
                    "name": "businessDevelopmentDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>total business development days</p>\n",
                    "line": 24,
                    "rawdescription": "\n\ntotal business development days\n"
                },
                {
                    "name": "nonbillableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>total non-billable days</p>\n",
                    "line": 34,
                    "rawdescription": "\n\ntotal non-billable days\n"
                },
                {
                    "name": "projectDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Total number of assigned project days (does not include vacation, training, BDD days)</p>\n",
                    "line": 9,
                    "rawdescription": "\n\nTotal number of assigned project days (does not include vacation, training, BDD days)\n"
                },
                {
                    "name": "ros",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>total return on sales for team</p>\n",
                    "line": 54,
                    "rawdescription": "\n\ntotal return on sales for team\n"
                },
                {
                    "name": "totalWorkingDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>toal number of possible working days per month (for all teammembers)</p>\n",
                    "line": 39,
                    "rawdescription": "\n\ntoal number of possible working days per month (for all teammembers)\n"
                },
                {
                    "name": "trainingDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>total training days</p>\n",
                    "line": 19,
                    "rawdescription": "\n\ntotal training days\n"
                },
                {
                    "name": "urve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>average urve per teammember</p>\n",
                    "line": 49,
                    "rawdescription": "\n\naverage urve per teammember\n"
                },
                {
                    "name": "vacationDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>total vacation days</p>\n",
                    "line": 14,
                    "rawdescription": "\n\ntotal vacation days\n"
                }
            ],
            "description": "<p>Entry summary structure for csv export</p>\n",
            "rawdescription": "\n\nEntry summary structure for csv export\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Team",
            "id": "class-Team-ce8f7b8adc4e465b812265cf5a07d916",
            "file": "src/app/core/interfaces/team.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Team {\n  /**\n   * unique id\n   */\n  teamId: number;\n\n  /**\n   * teamlead id\n   */\n  teamLeadId: number;\n\n  /**\n   * team name\n   */\n  name: string;\n\n  parentTeamId?: number;\n  countryCode?: string;\n\n  /**\n   * new team constructor with default values\n   */\n  constructor() {\n    this.teamId = undefined;\n    this.name = '';\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>new team constructor with default values</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 21,
                "rawdescription": "\n\nnew team constructor with default values\n"
            },
            "properties": [
                {
                    "name": "countryCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>team name</p>\n",
                    "line": 18,
                    "rawdescription": "\n\nteam name\n"
                },
                {
                    "name": "parentTeamId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "teamId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>unique id</p>\n",
                    "line": 8,
                    "rawdescription": "\n\nunique id\n"
                },
                {
                    "name": "teamLeadId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>teamlead id</p>\n",
                    "line": 13,
                    "rawdescription": "\n\nteamlead id\n"
                }
            ],
            "description": "<p>team structure</p>\n",
            "rawdescription": "\n\nteam structure\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "User",
            "id": "class-User-1f9e0958be64a01b363d43f763bbe7b2",
            "file": "src/app/core/interfaces/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class User {\r\n    /**\r\n     * unique system id\r\n     */\r\n    id: number;\r\n\r\n    /**\r\n     * global capgemini id\r\n     */\r\n    globalId: number;\r\n    firstName: string;\r\n    lastName: string;\r\n    email: string;\r\n\r\n    /**\r\n     * password: only used for creating new user\r\n     */\r\n    password?: string;\r\n\r\n    /**\r\n     * role id: permissions are dependent on role\r\n     */\r\n    roleId: number;\r\n    permission: number;\r\n\r\n    /**\r\n     * parentId = id of teamlead\r\n     */\r\n    parentId: number;\r\n\r\n    /**\r\n     * gradeId = id of current position (e.g. Consultant)\r\n     */\r\n    gradeId?: number;\r\n\r\n    /**\r\n     * fte (full time equivalent): Working hours of employees per week. If 40 hours: fte = 1; if 30 hours: fte = 0.75, if 20 hours: fte = 0.50\r\n     */\r\n    fte: number;\r\n\r\n    /**\r\n     * inactive users cannot loggin anymore\r\n     */\r\n    active?: boolean;\r\n\r\n    /**\r\n     * has admin permissions\r\n     */\r\n    admin?: boolean;\r\n\r\n    /**\r\n     * true if user loggs in for first time or has not logged in for 2 months\r\n     */\r\n    showgetstarted?: boolean;\r\n\r\n    startDate?: string;\r\n\r\n    endDate?: string;\r\n\r\n    prodUnitCode? : string;\r\n\r\n    /**\r\n     * new user constructor with default values\r\n     */\r\n    constructor() {\r\n        this.startDate = null;\r\n        this.endDate = null;\r\n\t    this.globalId = null;\r\n\t\tthis.firstName = '';\r\n        this.lastName = '';\r\n        this.email = '';\r\n        this.password = '';\r\n        this.roleId = null;\r\n        this.parentId = null;\r\n        this.gradeId = null;\r\n        this.fte = 1;\r\n        this.admin = false;\r\n        this.active = true;\r\n        this.prodUnitCode = null;\r\n\t}\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>new user constructor with default values</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 63,
                "rawdescription": "\n\nnew user constructor with default values\n"
            },
            "properties": [
                {
                    "name": "active",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>inactive users cannot loggin anymore</p>\n",
                    "line": 47,
                    "rawdescription": "\n\ninactive users cannot loggin anymore\n"
                },
                {
                    "name": "admin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>has admin permissions</p>\n",
                    "line": 52,
                    "rawdescription": "\n\nhas admin permissions\n"
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "endDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "fte",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>fte (full time equivalent): Working hours of employees per week. If 40 hours: fte = 1; if 30 hours: fte = 0.75, if 20 hours: fte = 0.50</p>\n",
                    "line": 42,
                    "rawdescription": "\n\nfte (full time equivalent): Working hours of employees per week. If 40 hours: fte = 1; if 30 hours: fte = 0.75, if 20 hours: fte = 0.50\n"
                },
                {
                    "name": "globalId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>global capgemini id</p>\n",
                    "line": 13,
                    "rawdescription": "\n\nglobal capgemini id\n"
                },
                {
                    "name": "gradeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "<p>gradeId = id of current position (e.g. Consultant)</p>\n",
                    "line": 37,
                    "rawdescription": "\n\ngradeId = id of current position (e.g. Consultant)\n"
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>unique system id</p>\n",
                    "line": 8,
                    "rawdescription": "\n\nunique system id\n"
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "parentId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>parentId = id of teamlead</p>\n",
                    "line": 32,
                    "rawdescription": "\n\nparentId = id of teamlead\n"
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "<p>password: only used for creating new user</p>\n",
                    "line": 21,
                    "rawdescription": "\n\npassword: only used for creating new user\n"
                },
                {
                    "name": "permission",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "prodUnitCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "roleId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>role id: permissions are dependent on role</p>\n",
                    "line": 26,
                    "rawdescription": "\n\nrole id: permissions are dependent on role\n"
                },
                {
                    "name": "showgetstarted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "<p>true if user loggs in for first time or has not logged in for 2 months</p>\n",
                    "line": 57,
                    "rawdescription": "\n\ntrue if user loggs in for first time or has not logged in for 2 months\n"
                },
                {
                    "name": "startDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 59
                }
            ],
            "description": "<p>user structure</p>\n",
            "rawdescription": "\n\nuser structure\n",
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AddMonthDialog",
            "id": "component-AddMonthDialog-b2a1832ca7887d6a1a66c1c0c4958c4d",
            "file": "src/app/admin/dialogs/add-month/add-month.dialog.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{ provide: DateAdapter, useClass: AppDateAdapter }"
                }
            ],
            "styleUrls": [
                "../../admin.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-month.dialog.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "line": 45,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<AddMonthDialog>",
                    "optional": false,
                    "line": 44,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "monthForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "<p>month form group for create + update</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nmonth form group for create + update\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "chosenMonthHandler",
                    "args": [
                        {
                            "name": "normalizedDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "datepicker",
                            "type": "MatDatepicker<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets form value after datepicker update (when closed after month selection)\n",
                    "description": "<p>Sets form value after datepicker update (when closed after month selection)</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2100,
                                "end": 2114,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "normalizedDate"
                            },
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2094,
                                "end": 2099,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2127,
                                "end": 2137,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "datepicker"
                            },
                            "type": "MatDatepicker<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2121,
                                "end": 2126,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "datepickerClosed",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets form value after datepicker update\n",
                    "description": "<p>Sets form value after datepicker update</p>\n"
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalled on 'Cancel' click\n",
                    "description": "<p>Called on &#39;Cancel&#39; click</p>\n"
                },
                {
                    "name": "onSaveClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalled on 'Save' click\n",
                    "description": "<p>Called on &#39;Save&#39; click</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Month Dialog component for creating + updating months</p>\n",
            "rawdescription": "\n\nMonth Dialog component for creating + updating months\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { formatDate } from '@angular/common';\nimport { DateAdapter, NativeDateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE } from '@angular/material/core';\nimport { MatDatepicker } from '@angular/material/datepicker';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\n\n/**\n * Customized DateAdapter to show Date in the correct format\n */\nexport class AppDateAdapter extends NativeDateAdapter {\n  /**\n   * date format method\n   * @param date\n   * @param displayFormat\n   */\n  format(date: Date, displayFormat: Object): string {\n      return formatDate(date, 'MMMM yyyy', 'en');\n  }\n}\n\n/**\n * Month Dialog component for creating + updating months\n */\n@Component({\n  templateUrl: './add-month.dialog.html',\n  providers: [\n    {provide: DateAdapter, useClass: AppDateAdapter},\n  ],\n  styleUrls: ['../../admin.component.scss'],\n}) export class AddMonthDialog {\n  /**\n   * month form group for create + update\n   */\n  monthForm: FormGroup;\n\n  /**\n   * Initializes month formgroup\n   * @param dialogRef\n   * @param data\n   * @param fb\n   */\n\tconstructor(\n    public dialogRef: MatDialogRef<AddMonthDialog>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private fb: FormBuilder,\n  ) {\n    this.monthForm = this.fb.group({\n      id: this.fb.control(data.month.id),\n      name: this.fb.control(data.month.name, Validators.required),\n      workingdays: this.fb.control(data.month.workingdays, [Validators.required, Validators.min(0), Validators.max(31)]),\n      time: this.fb.control(data.month.time, Validators.required),\n      active: this.fb.control((typeof data.month.active !== 'undefined') ? data.month.active : true),\n    });\n  }\n\n  /**\n   * Called on 'Cancel' click\n   */\n  onNoClick(): void {\n    this.dialogRef.close(false);\n  }\n\n  /**\n   * Called on 'Save' click\n   */\n  onSaveClick(): void {\n    this.dialogRef.close(this.monthForm.getRawValue());\n  }\n\n  /**\n   * Sets form value after datepicker update (when closed after month selection)\n   * @param normalizedDate\n   * @param datepicker\n   */\n  chosenMonthHandler(normalizedDate: Date, datepicker: MatDatepicker<any>): void {\n    this.monthForm.get('time').setValue(normalizedDate);\n    datepicker.close();\n  }\n\n  /**\n   * Sets form value after datepicker update\n   */\n  datepickerClosed(): void {\n    let date: Date = new Date(this.monthForm.get('time').value);\n    date.setDate(1);\n    this.monthForm.get('time').setValue(new Date((date.getTime() - (date.getTimezoneOffset() * 60000))).toISOString().slice(0, -5));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../assets/styles/variables.scss';\n\n.mat-sidenav-container{\n\tbackground: transparent;\n\tmargin: 0 10px;\n}\n\n.mat-drawer {\n\tdisplay: none;\n\tbackground: transparent;\n\twidth: 50px;\n\tborder-right-width: 0px;\n}\n\n.nav-button-container {\n\tmargin: 4px 0;\n\n\t.mat-icon-button {\n\t\twidth: 50px;\n\t\theight: 50px;\n\t\tmargin-bottom: 10px;\n\t\tpadding: 0;\n\n\t\t&.active, &.active .mat-icon {\n\t\t\tcolor: map-get($font-colors, blue);\n\t\t}\n\t}\n\n\t.mat-icon {\n\t\twidth: 1em;\n\t\theight: 1em;\n\t\tline-height: 1rem;\n\t\tfont-size: 2rem;\n\t}\n}\n\n\ntd.mat-cell:first-of-type, td.mat-footer-cell:first-of-type, th.mat-header-cell:first-of-type {\n\tpadding-left: 0;\n}\n\ntd.mat-cell:last-of-type, td.mat-footer-cell:last-of-type, th.mat-header-cell:last-of-type {\n\tpadding-right: 0;\n}\n\n.action-button {\n\twidth: 50px;\n\ttext-align: center;\n}\n\n.flag-button {\n\twidth: 70px;\n\ttext-align: center;\n}\n\n.button-row {\n\tmargin: 50px;\n\n\t.mat-raised-button {\n\t\tposition: fixed;\n\t\tz-index: 100;\n\t\tbottom: 32px;\n\t\tright: 30px;\n\t\tbox-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n\t}\n}\n\n.mat-form-field {\n\tmargin: 5px 0;\n}\n\ntr.mat-row.inactive td {\n\tcolor: map-get($font-colors, grey-label);\n\n\t.flag-inactive {\n\t\tbackground: map-get($font-colors, red);\n\t\tcolor: map-get($font-colors, white);\n\t\tpadding: 3px 6px;\n\t\tborder-radius: 4px;\n\t}\n}\n\n.mat-table tr.mat-row:last-child td {\n\tborder-bottom: 0;\n}",
                    "styleUrl": "../../admin.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Initializes month formgroup</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddMonthDialog>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "rawdescription": "\n\nInitializes month formgroup\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1128,
                            "end": 1137,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialogRef"
                        },
                        "type": "MatDialogRef<AddMonthDialog>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1122,
                            "end": 1127,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1150,
                            "end": 1154,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "data"
                        },
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1144,
                            "end": 1149,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1167,
                            "end": 1169,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "fb"
                        },
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1161,
                            "end": 1166,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "templateData": "<h2 mat-dialog-title>{{data.month.name ? data.month.name : 'New Month'}}</h2>\n<div class=\"dialog-content\" [formGroup]=\"monthForm\" >\n\n\t<mat-form-field appearance=\"outline\">\n\t\t<mat-label>Name</mat-label>\n\t\t<input type=\"text\" matInput formControlName=\"name\">\n\t</mat-form-field>\n\n\t<mat-form-field appearance=\"outline\">\n\t\t<mat-label>Working days</mat-label>\n\t\t<input type=\"number\" matInput formControlName=\"workingdays\">\n\t</mat-form-field>\n\n\t<mat-form-field>\n\t\t<input matInput [matDatepicker]=\"dp\" placeholder=\"Month\" formControlName=\"time\" disabled (click)=\"dp.open()\">\n\t\t<mat-datepicker-toggle matSuffix [for]=\"dp\"></mat-datepicker-toggle>\n\t\t<mat-datepicker #dp startView=\"year\" disabled=\"false\" (monthSelected)=\"chosenMonthHandler($event, dp)\" (closed)=\"datepickerClosed()\"></mat-datepicker>\n\t</mat-form-field>\n\n</div>\n<mat-dialog-actions>\n\t<button mat-button (click)=\"onNoClick()\">Cancel</button>\n\t<button mat-button (click)=\"onSaveClick()\" [disabled]=\"!monthForm.valid\">Save</button>\n</mat-dialog-actions>"
        },
        {
            "name": "AddProjectDialog",
            "id": "component-AddProjectDialog-209b63977404f3c171e92c77a84277aa",
            "file": "src/app/admin/dialogs/add-project/add-project.dialog.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./add-project.dialog.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "line": 26,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<AddProjectDialog>",
                    "optional": false,
                    "line": 25,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "projectForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "<p>project formgroup for create + update</p>\n",
                    "line": 15,
                    "rawdescription": "\n\nproject formgroup for create + update\n"
                },
                {
                    "name": "projectTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalled on 'Cancel' click\n",
                    "description": "<p>Called on &#39;Cancel&#39; click</p>\n"
                },
                {
                    "name": "onProjectTypeUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSaveClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalled on 'Save' Click\n",
                    "description": "<p>Called on &#39;Save&#39; Click</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Project Dialog component for creating + updating projects</p>\n",
            "rawdescription": "\n\nProject Dialog component for creating + updating projects\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { environment } from '../../../../environments/environment';\n\n/**\n * Project Dialog component for creating + updating projects\n */\n@Component({\n\ttemplateUrl: './add-project.dialog.html',\n}) export class AddProjectDialog {\n  /**\n   * project formgroup for create + update\n   */\n  projectForm: FormGroup;\n  projectTypes: any;\n\n  /**\n   * constructor to initialize project form group\n   * @param dialogRef\n   * @param data\n   * @param fb\n   */\n  constructor(\n    public dialogRef: MatDialogRef<AddProjectDialog>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private fb: FormBuilder,\n  ) {\n    this.projectTypes = environment.projectTypes;\n\n    this.projectForm = this.fb.group({\n      id: this.fb.control(data.project.id),\n      code: this.fb.control(data.project.code),\n      name: this.fb.control(data.project.name, Validators.required),\n      mandatory: this.fb.control(data.project.mandatory, Validators.required),\n      billable: this.fb.control((typeof data.project.billable !== 'undefined' ? data.project.billable : true), Validators.required),\n      projectType: this.fb.control(data.project.projectType, Validators.required),\n      active: this.fb.control((typeof data.project.active !== 'undefined') ? data.project.active : true),\n    });\n\n    if (data.project.projectType === 4 || data.project.projectType === 5) {\n      this.projectForm.get('billable').disable();\n    }\n  }\n\n  onProjectTypeUpdate(): void {\n    if (this.projectForm.get('projectType').value === 4 || this.projectForm.get('projectType').value === 5) {\n      this.projectForm.get('billable').setValue(false);\n      this.projectForm.get('billable').disable();\n    } else {\n      this.projectForm.get('billable').enable();\n    }\n  }\n\n  /**\n   * Called on 'Cancel' click\n   */\n  onNoClick(): void {\n    this.dialogRef.close(false);\n  }\n\n  /**\n   * Called on 'Save' Click\n   */\n  onSaveClick(): void {\n    this.dialogRef.close(this.projectForm.getRawValue());\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor to initialize project form group</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddProjectDialog>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "rawdescription": "\n\nconstructor to initialize project form group\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 594,
                            "end": 603,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialogRef"
                        },
                        "type": "MatDialogRef<AddProjectDialog>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 588,
                            "end": 593,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 616,
                            "end": 620,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "data"
                        },
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 610,
                            "end": 615,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 633,
                            "end": 635,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "fb"
                        },
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 627,
                            "end": 632,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "templateData": "<h2 mat-dialog-title>{{data.project.name ? data.project.name : 'New Project'}}</h2>\n<div class=\"dialog-content\" [formGroup]=\"projectForm\">\n\t<mat-form-field appearance=\"outline\">\n\t\t<mat-label>Code</mat-label>\n\t\t<input type=\"text\" matInput formControlName=\"code\">\n\t</mat-form-field>\n\n\t<mat-form-field appearance=\"outline\">\n\t\t<mat-label>Name</mat-label>\n\t\t<input type=\"text\" matInput formControlName=\"name\">\n\t</mat-form-field>\n\n\t<mat-form-field appearance=\"outline\">\n\t\t<mat-label>Is project mandatory?</mat-label>\n\t\t<mat-select name=\"project-mandatory\" formControlName=\"mandatory\">\n\t\t\t<mat-option value='N'>Not Mandatory</mat-option>\n\t\t\t<mat-option value='Y'>Mandatory</mat-option>\n\t\t</mat-select>\n\t</mat-form-field>\n\n\t<mat-form-field appearance=\"outline\">\n\t\t<mat-label>Project-Type</mat-label>\n\t\t<mat-select name=\"project-type\" formControlName=\"projectType\" (selectionChange)=\"onProjectTypeUpdate()\">\n\t\t\t<mat-option [value]='projectTypes.default'>Default</mat-option>\n\t\t\t<mat-option [value]='projectTypes.nonbillable'>Non-billable / No COR</mat-option>\n\t\t\t<mat-option [value]='projectTypes.businessdays'>Special Type - Business Development Days</mat-option>\n\t\t\t<mat-option [value]='projectTypes.trainingdays'>Special Type - Training</mat-option>\n\t\t\t<mat-option [value]='projectTypes.vacationdays'>Special Type - Vacation</mat-option>\n\t\t\t<mat-option [value]='projectTypes.benchdays'>Special Type - Bench-Time</mat-option>\n\t\t</mat-select>\n\t</mat-form-field>\n\n\t<mat-form-field appearance=\"outline\">\n\t\t<mat-label>Is project default billable?</mat-label>\n\t\t<mat-select name=\"project-billable\" formControlName=\"billable\">\n\t\t\t<mat-option [value]='true'>Billable</mat-option>\n\t\t\t<mat-option [value]='false'>Non-billable</mat-option>\n\t\t</mat-select>\n\t</mat-form-field>\n</div>\n<mat-dialog-actions>\n\t<button mat-button (click)=\"onNoClick()\">Cancel</button>\n\t<button mat-button (click)=\"onSaveClick()\" [disabled]=\"!projectForm.valid\">Save</button>\n</mat-dialog-actions>"
        },
        {
            "name": "AddTeamDialog",
            "id": "component-AddTeamDialog-bd16d18b39b4470815f28e179804d636",
            "file": "src/app/admin/dialogs/add-team/add-team.dialog.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./add-team.dialog.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "line": 25,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<AddTeamDialog>",
                    "optional": false,
                    "line": 24,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "teamForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "<p>project formgroup for create + update</p>\n",
                    "line": 15,
                    "rawdescription": "\n\nproject formgroup for create + update\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalled on 'Cancel' click\n",
                    "description": "<p>Called on &#39;Cancel&#39; click</p>\n"
                },
                {
                    "name": "onSaveClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalled on 'Save' Click\n",
                    "description": "<p>Called on &#39;Save&#39; Click</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Team Dialog component for creating + updating teams</p>\n",
            "rawdescription": "\n\nTeam Dialog component for creating + updating teams\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { environment } from '../../../../environments/environment';\n\n/**\n * Team Dialog component for creating + updating teams\n */\n@Component({\n\ttemplateUrl: './add-team.dialog.html',\n}) export class AddTeamDialog {\n  /**\n   * project formgroup for create + update\n   */\n  teamForm: FormGroup;\n\n  /**\n   * constructor to initialize project form group\n   * @param dialogRef\n   * @param data\n   * @param fb\n   */\n  constructor(\n    public dialogRef: MatDialogRef<AddTeamDialog>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private fb: FormBuilder,\n  ) {\n\n    this.teamForm = this.fb.group({\n      teamId: this.fb.control(data.team.teamId),\n      teamLeadId: this.fb.control(data.team.teamLeadId),\n      name: this.fb.control(data.team.name, Validators.required),\n    });\n  }\n\n  /**\n   * Called on 'Cancel' click\n   */\n  onNoClick(): void {\n    this.dialogRef.close(false);\n  }\n\n  /**\n   * Called on 'Save' Click\n   */\n  onSaveClick(): void {\n    this.dialogRef.close(this.teamForm.getRawValue());\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor to initialize project form group</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddTeamDialog>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "rawdescription": "\n\nconstructor to initialize project form group\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 558,
                            "end": 567,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialogRef"
                        },
                        "type": "MatDialogRef<AddTeamDialog>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 552,
                            "end": 557,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 580,
                            "end": 584,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "data"
                        },
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 574,
                            "end": 579,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 597,
                            "end": 599,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "fb"
                        },
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 591,
                            "end": 596,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "templateData": "<h2 mat-dialog-title>{{data.team.name ? data.team.name : 'New Team'}}</h2>\n<div class=\"dialog-content\" [formGroup]=\"teamForm\">\n\t<mat-form-field appearance=\"outline\">\n\t\t<mat-label>Name</mat-label>\n\t\t<input type=\"text\" matInput formControlName=\"name\">\n\t</mat-form-field>\n\n\t<mat-form-field appearance=\"outline\">\n\t\t<mat-label>Teamlead</mat-label>\n\t\t<mat-select name=\"teamLeadId\" formControlName=\"teamLeadId\">\n\t\t\t<mat-option *ngFor=\"let u of data.user\" [value]=\"u.id\">{{u.lastName}}, {{u.firstName}}</mat-option>\n\t\t</mat-select>\n\t</mat-form-field>\n</div>\n<mat-dialog-actions>\n\t<button mat-button (click)=\"onNoClick()\">Cancel</button>\n\t<button mat-button (click)=\"onSaveClick()\" [disabled]=\"!teamForm.valid\">Save</button>\n</mat-dialog-actions>"
        },
        {
            "name": "AddUserDialog",
            "id": "component-AddUserDialog-2213e85425885592961aa5e9513aa61b",
            "file": "src/app/admin/dialogs/add-user/add-user.dialog.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./add-user.dialog.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-user.dialog.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "line": 66,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<AddUserDialog>",
                    "optional": false,
                    "line": 65,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "grades",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Grade[]",
                    "optional": false,
                    "description": "<p>list of grades (for grade select)</p>\n",
                    "line": 53,
                    "rawdescription": "\n\nlist of grades (for grade select)\n"
                },
                {
                    "name": "gradeSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>grade list subscription</p>\n",
                    "line": 38,
                    "rawdescription": "\n\ngrade list subscription\n"
                },
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Role[]",
                    "optional": false,
                    "description": "<p>list of roles (for role select)</p>\n",
                    "line": 48,
                    "rawdescription": "\n\nlist of roles (for role select)\n"
                },
                {
                    "name": "roleSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>role list subscription</p>\n",
                    "line": 33,
                    "rawdescription": "\n\nrole list subscription\n"
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User[]",
                    "optional": false,
                    "description": "<p>list of user (for teamlead select)</p>\n",
                    "line": 43,
                    "rawdescription": "\n\nlist of user (for teamlead select)\n"
                },
                {
                    "name": "userForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "<p>user formgroup for create + update</p>\n",
                    "line": 23,
                    "rawdescription": "\n\nuser formgroup for create + update\n"
                },
                {
                    "name": "userSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>user list subscription</p>\n",
                    "line": 28,
                    "rawdescription": "\n\nuser list subscription\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "datepickerClosed",
                    "args": [
                        {
                            "name": "start",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "start",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTeamleads",
                    "args": [],
                    "optional": false,
                    "returnType": "User[]",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnsubscribe services when component gets destroyed\n",
                    "description": "<p>Unsubscribe services when component gets destroyed</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInitializes user + role subscriptions\n",
                    "description": "<p>Initializes user + role subscriptions</p>\n"
                },
                {
                    "name": "onCancelClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalled on 'Cancel' click\n",
                    "description": "<p>Called on &#39;Cancel&#39; click</p>\n"
                },
                {
                    "name": "onSaveClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalled on 'Save' click\n",
                    "description": "<p>Called on &#39;Save&#39; click</p>\n"
                },
                {
                    "name": "roleUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>user dialog component for creating + updating users</p>\n",
            "rawdescription": "\n\nuser dialog component for creating + updating users\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit, OnDestroy } from \"@angular/core\";\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from \"@angular/material/dialog\";\r\n\r\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\r\nimport { User } from \"../../../core/interfaces/user\";\r\nimport { UserService } from \"../../../core/services/user.service\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { Role } from \"../../../core/interfaces/role\";\r\nimport { Grade } from \"../../../core/interfaces/grade\";\r\nimport { environment } from \"../../../../environments/environment.prod\";\r\n\r\n/**\r\n * user dialog component for creating + updating users\r\n */\r\n@Component({\r\n    templateUrl: './add-user.dialog.html',\r\n    styleUrls: ['./add-user.dialog.scss'],\r\n})\r\nexport class AddUserDialog implements OnInit, OnDestroy {\r\n    /**\r\n     * user formgroup for create + update\r\n     */\r\n    userForm: FormGroup;\r\n\r\n    /**\r\n     * user list subscription\r\n     */\r\n    userSubscription: Subscription;\r\n\r\n    /**\r\n     * role list subscription\r\n     */\r\n    roleSubscription: Subscription;\r\n\r\n    /**\r\n     * grade list subscription\r\n     */\r\n    gradeSubscription: Subscription;\r\n\r\n    /**\r\n     * list of user (for teamlead select)\r\n     */\r\n    user: User[];\r\n\r\n    /**\r\n     * list of roles (for role select)\r\n     */\r\n    roles: Role[];\r\n\r\n    /**\r\n     * list of grades (for grade select)\r\n     */\r\n    grades: Grade[];\r\n\r\n    /**\r\n     * initializes user formgroup\r\n     * create user: without id, with password\r\n     * update user: with id, without password\r\n     * @param dialogRef\r\n     * @param data\r\n     * @param userService\r\n     * @param fb\r\n     */\r\n    constructor(\r\n        public dialogRef: MatDialogRef<AddUserDialog>,\r\n        @Inject(MAT_DIALOG_DATA) public data: User,\r\n        private userService: UserService,\r\n        private fb: FormBuilder,\r\n    ) {\r\n\r\n      if (typeof data.id !== 'undefined') {\r\n        this.userForm = this.fb.group({\r\n          id: fb.control(data.id),\r\n          globalId: fb.control(data.globalId, Validators.required),\r\n          firstName: fb.control(data.firstName, Validators.required),\r\n          lastName: fb.control(data.lastName, Validators.required),\r\n          email: fb.control(data.email, [\r\n            Validators.required,\r\n            Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$'), Validators.email,\r\n          ]),\r\n          fte: fb.control(data.fte, [Validators.required, Validators.max(1), Validators.min(0)]),\r\n          roleId: fb.control(data.roleId, Validators.required),\r\n          gradeId: fb.control(data.gradeId, Validators.required),\r\n          parentId: fb.control(data.parentId),\r\n          admin: fb.control(data.admin, Validators.required),\r\n          active: fb.control((typeof data.active !== 'undefined') ? data.active : true),\r\n          startDate: fb.control(data.startDate),\r\n          endDate: fb.control(data.endDate),\r\n        });\r\n      } else {\r\n        this.userForm = this.fb.group({\r\n          globalId: fb.control(data.globalId, Validators.required),\r\n          firstName: fb.control(data.firstName, Validators.required),\r\n          lastName: fb.control(data.lastName, Validators.required),\r\n          email: fb.control(data.email, [\r\n            Validators.required,\r\n            Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$'), Validators.email,\r\n          ]),\r\n          password: fb.control(data.password, Validators.required),\r\n          fte: fb.control(data.fte, [Validators.required, Validators.max(1), Validators.min(0)]),\r\n          roleId: fb.control(data.roleId, Validators.required),\r\n          gradeId: fb.control(data.gradeId, Validators.required),\r\n          parentId: fb.control(data.parentId),\r\n          admin: fb.control(data.admin, Validators.required),\r\n          active: fb.control((typeof data.active !== 'undefined') ? data.active : true),\r\n          startDate: fb.control(data.startDate),\r\n          endDate: fb.control(data.endDate),\r\n        });\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Initializes user + role subscriptions\r\n     */\r\n    ngOnInit(): void {\r\n      this.userSubscription = this.userService.allUsers$\r\n        .subscribe((user: User[]) => {\r\n          this.user = user;\r\n        });\r\n\r\n      this.roleSubscription = this.userService.roles$\r\n        .subscribe((roles: Role[]) => {\r\n          this.roles = roles;\r\n        });\r\n\r\n      this.gradeSubscription = this.userService.grades$\r\n        .subscribe((grades: Grade[]) => {\r\n          this.grades = grades;\r\n        });\r\n    }\r\n\r\n    getTeamleads(): User[] {\r\n      let role: Role = this.roles.find((r: Role) => r.roleId === this.userForm.value.roleId);\r\n      let permission: any = environment.roles.pdl;\r\n      if (role) {\r\n        permission = role.permissionType;\r\n      }\r\n      return this.user.filter((u: User) => this.roles.find((r: Role) => r.roleId === u.roleId).permissionType > permission);\r\n    }\r\n\r\n    roleUpdate(): void {\r\n      let role: Role = this.roles.find((r: Role) => r.roleId === this.userForm.value.roleId);\r\n\r\n      if (role && role.permissionType >= environment.roles.fc) {\r\n       this.userForm.get('admin').setValue(true);\r\n        this.userForm.get('admin').disable();\r\n      } else {\r\n        this.userForm.get('admin').enable();\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Called on 'Cancel' click\r\n     */\r\n    onCancelClick(): void {\r\n      this.dialogRef.close(false);\r\n    }\r\n\r\n    /**\r\n     * Called on 'Save' click\r\n     */\r\n    onSaveClick(): void {\r\n      this.dialogRef.close(this.userForm.getRawValue());\r\n    }\r\n\r\n    /**\r\n     * Unsubscribe services when component gets destroyed\r\n     */\r\n    ngOnDestroy(): void {\r\n      this.userSubscription.unsubscribe();\r\n      this.roleSubscription.unsubscribe();\r\n      this.gradeSubscription.unsubscribe();\r\n    }\r\n\r\n    datepickerClosed(start: boolean): void {\r\n      if(start == true) {\r\n        let date: Date = new Date(this.userForm.get('startDate').value);\r\n        this.userForm.get('startDate').setValue(new Date((date.getTime() - (date.getTimezoneOffset() * 60000))).toISOString().slice(0, -5));\r\n      } else {\r\n        let date: Date = new Date(this.userForm.get('endDate').value);\r\n        this.userForm.get('endDate').setValue(new Date((date.getTime() - (date.getTimezoneOffset() * 60000))).toISOString().slice(0, -5));        \r\n      }\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form-field-toggle {\n  margin: 10px;\n}",
                    "styleUrl": "./add-user.dialog.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>initializes user formgroup\ncreate user: without id, with password\nupdate user: with id, without password</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<AddUserDialog>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "User",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 53,
                "rawdescription": "\n\ninitializes user formgroup\ncreate user: without id, with password\nupdate user: with id, without password\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1551,
                            "end": 1560,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialogRef"
                        },
                        "type": "MatDialogRef<AddUserDialog>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1545,
                            "end": 1550,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1576,
                            "end": 1580,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "data"
                        },
                        "type": "User",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1570,
                            "end": 1575,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1596,
                            "end": 1607,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "userService"
                        },
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1590,
                            "end": 1595,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1623,
                            "end": 1625,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "fb"
                        },
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1617,
                            "end": 1622,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<h2 mat-dialog-title>Add User</h2>\n<form [formGroup]=\"userForm\" >\n  <div class=\"dialog-content\" >\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Capgemini Global ID</mat-label>\n      <input matInput formControlName=\"globalId\" type=\"number\" required/>\n    </mat-form-field>\n\n   <mat-form-field appearance=\"outline\">\n      <mat-label>Firstname</mat-label>\n      <input matInput formControlName=\"firstName\"  type=\"text\"  required/>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Lastname</mat-label>\n      <input matInput formControlName=\"lastName\" type=\"text\"  required />\n    </mat-form-field>\n\n    <mat-form-field  appearance=\"outline\">\n      <mat-label>Email</mat-label>\n      <input formControlName=\"email\" matInput type=\"text\"  required />\n    </mat-form-field>\n\n    <mat-form-field *ngIf=\"!data.id\" appearance=\"outline\">\n      <mat-label>Password</mat-label>\n      <input formControlName=\"password\" matInput type=\"password\"  required />\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n      <mat-label>FTE</mat-label>\n      <input formControlName=\"fte\"  matInput type=\"number\" min=\"0\" max=\"1\"  required />\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Choose a Role</mat-label>\n      <mat-select formControlName=\"roleId\"  id=\"roleId\" required (selectionChange)=\"roleUpdate()\">\n        <ng-container *ngFor=\"let r of roles\">\n          <mat-option [value]=\"r.roleId\">{{r.name}}</mat-option>\n        </ng-container>\n      </mat-select>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Choose a Grade</mat-label>\n      <mat-select formControlName=\"gradeId\"  id=\"gradeId\" required>\n        <ng-container *ngFor=\"let g of grades\">\n          <mat-option [value]=\"g.gradeId\">{{g.name}}</mat-option>\n        </ng-container>\n      </mat-select>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Choose a Team</mat-label>\n      <mat-select formControlName=\"parentId\"  id=\"parentId\">\n        <mat-option [value]=\"null\">-</mat-option>\n        <ng-container *ngFor=\"let t of getTeamleads()\">\n          <mat-option *ngIf=\"t.id !== data.id\" [value]=\"t.id\">{{t.lastName}}, {{t.firstName}}</mat-option>\n        </ng-container>\n      </mat-select>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n      <mat-label>Start Date</mat-label>\n      <input matInput [matDatepicker]=\"sd\" placeholder=\"Start Date\" formControlName=\"startDate\" (click)=\"sd.open()\">\n      <mat-datepicker #sd startView=\"year\" disabled=\"false\" (closed)=\"datepickerClosed(true)\"></mat-datepicker>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n      <mat-label>End Date</mat-label>\n      <input matInput [matDatepicker]=\"ed\" placeholder=\"End Date\" formControlName=\"endDate\" (click)=\"ed.open()\">\n      <mat-datepicker #ed startView=\"year\" disabled=\"false\" (closed)=\"datepickerClosed(false)\"></mat-datepicker>\n    </mat-form-field>\n\n    <div class=\"form-field-toggle\">\n      <mat-slide-toggle formControlName=\"admin\" name=\"admin\" color=\"primary\">Administrator</mat-slide-toggle>\n    </div>\n  </div>\n  <mat-dialog-actions>\n    <button mat-button (click)=\"onCancelClick()\">Cancel</button>\n    <button mat-button (click)=\"onSaveClick()\" [disabled]=\"userForm.invalid\">Save</button>\n  </mat-dialog-actions>\n</form>"
        },
        {
            "name": "AdminComponent",
            "id": "component-AdminComponent-827aca14a8749711e98b0c7a21466cb2",
            "file": "src/app/admin/admin.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "public-admin",
            "styleUrls": [
                "./admin.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./admin.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRedirects to specific page if it is defined in url\nInitializes utility data\n",
                    "description": "<p>Redirects to specific page if it is defined in url\nInitializes utility data</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Main admin component (called at /admin)</p>\n",
            "rawdescription": "\n\nMain admin component (called at /admin)\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { environment } from '../../environments/environment.prod';\n\n/**\n * Main admin component (called at /admin)\n */\n@Component({\n  selector: 'public-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.scss'],\n})\nexport class AdminComponent implements OnInit {\n\n  /**\n   * Constructor for angular/router\n   * @param router\n   */\n  constructor(\n    private router: Router,\n  ) {}\n\n  /**\n   * Redirects to specific page if it is defined in url\n   * Initializes utility data\n   */\n  ngOnInit(): void {\n    this.router.navigate(['/' + environment.routes.admin]);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../assets/styles/variables.scss';\n\n.mat-sidenav-container{\n\tbackground: transparent;\n\tmargin: 0 10px;\n}\n\n.mat-drawer {\n\tdisplay: none;\n\tbackground: transparent;\n\twidth: 50px;\n\tborder-right-width: 0px;\n}\n\n.nav-button-container {\n\tmargin: 4px 0;\n\n\t.mat-icon-button {\n\t\twidth: 50px;\n\t\theight: 50px;\n\t\tmargin-bottom: 10px;\n\t\tpadding: 0;\n\n\t\t&.active, &.active .mat-icon {\n\t\t\tcolor: map-get($font-colors, blue);\n\t\t}\n\t}\n\n\t.mat-icon {\n\t\twidth: 1em;\n\t\theight: 1em;\n\t\tline-height: 1rem;\n\t\tfont-size: 2rem;\n\t}\n}\n\n\ntd.mat-cell:first-of-type, td.mat-footer-cell:first-of-type, th.mat-header-cell:first-of-type {\n\tpadding-left: 0;\n}\n\ntd.mat-cell:last-of-type, td.mat-footer-cell:last-of-type, th.mat-header-cell:last-of-type {\n\tpadding-right: 0;\n}\n\n.action-button {\n\twidth: 50px;\n\ttext-align: center;\n}\n\n.flag-button {\n\twidth: 70px;\n\ttext-align: center;\n}\n\n.button-row {\n\tmargin: 50px;\n\n\t.mat-raised-button {\n\t\tposition: fixed;\n\t\tz-index: 100;\n\t\tbottom: 32px;\n\t\tright: 30px;\n\t\tbox-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n\t}\n}\n\n.mat-form-field {\n\tmargin: 5px 0;\n}\n\ntr.mat-row.inactive td {\n\tcolor: map-get($font-colors, grey-label);\n\n\t.flag-inactive {\n\t\tbackground: map-get($font-colors, red);\n\t\tcolor: map-get($font-colors, white);\n\t\tpadding: 3px 6px;\n\t\tborder-radius: 4px;\n\t}\n}\n\n.mat-table tr.mat-row:last-child td {\n\tborder-bottom: 0;\n}",
                    "styleUrl": "./admin.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Constructor for angular/router</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "rawdescription": "\n\nConstructor for angular/router\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 441,
                            "end": 447,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "router"
                        },
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 435,
                            "end": 440,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-header></app-header>\n\n<mat-sidenav-container>\n\n\t<mat-sidenav mode=\"side\" opened>\n\t\t<div class =\"nav-button-container\">\n\t\t\t<button mat-icon-button title=\"ForeCasts\" class=\"active\">\n\t\t\t\t\t<mat-icon [inline]=\"true\">date_range</mat-icon>\n\t\t\t</button>\n\n\t\t\t<button mat-icon-button title=\"Settings\">\n\t\t\t\t\t<mat-icon [inline]=\"true\">settings</mat-icon>\n\t\t\t</button>\n\t\t</div>\n\t</mat-sidenav>\n\n\t<mat-sidenav-content>\n\t\t<div class=\"app-content admin\">\n\t\t\t<h1>Admin Dashboard</h1>\n\t\t\t<mat-tab-group>\n\t\t\t\t<mat-tab label=\"Users\">\n\t\t\t\t\t<app-admin-users></app-admin-users>\n\t\t\t\t</mat-tab>\n\t\t\t\t<mat-tab label=\"Practices\">\n\t\t\t\t\t<app-admin-teams></app-admin-teams>\n\t\t\t\t</mat-tab>\n\t\t\t\t<mat-tab label=\"Projects\">\n\t\t\t\t\t<app-admin-projects></app-admin-projects>\n\t\t\t\t</mat-tab>\n\t\t\t\t<mat-tab label=\"Months\">\n\t\t\t\t\t<app-admin-months></app-admin-months>\n\t\t\t\t</mat-tab>\n\t\t\t</mat-tab-group>\n\t\t</div>\n\t</mat-sidenav-content>\n\n</mat-sidenav-container>\n\n<app-footer></app-footer>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-8fe43af3a21cdbec1c7849055bd7cd95",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "public-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ninit method for app component\nregisters de as locale (for number views)\n",
                    "description": "<p>init method for app component\nregisters de as locale (for number views)</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>public root component of application</p>\n",
            "rawdescription": "\n\npublic root component of application\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { registerLocaleData } from '@angular/common';\nimport localeDe from '@angular/common/locales/de';\n/**\n * public root component of application\n */\n@Component({\n  selector: 'public-root',\n  templateUrl: './app.component.html',\n})\nexport class AppComponent implements OnInit {\n\n  /**\n   * init method for app component\n   * registers de as locale (for number views)\n   */\n  ngOnInit(): void {\n    registerLocaleData(localeDe, 'de');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<router-outlet></router-outlet>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-44f2f1e1b3a1e0ebc1e0edafd90d05c0",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "What background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 747,
                            "end": 761,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 317,
                            "tagName": {
                                "pos": 748,
                                "end": 756,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "Button contents",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string"
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Is this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "How large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-button',\r\n  template: ` <button\r\n    type=\"button\"\r\n    (click)=\"onClick.emit($event)\"\r\n    [ngClass]=\"classes\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    {{ label }}\r\n  </button>`,\r\n  styleUrls: ['./button.css'],\r\n})\r\nexport default class ButtonComponent {\r\n  /**\r\n   * Is this the principal call to action on the page?\r\n   */\r\n  @Input()\r\n  primary = false;\r\n\r\n  /**\r\n   * What background color to use\r\n   */\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  /**\r\n   * How large should the button be?\r\n   */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  /**\r\n   * Optional click handler\r\n   */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\r\n\r\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-weight: 700;\r\n  border: 0;\r\n  border-radius: 3em;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  line-height: 1;\r\n}\r\n.storybook-button--primary {\r\n  color: white;\r\n  background-color: #1ea7fd;\r\n}\r\n.storybook-button--secondary {\r\n  color: #333;\r\n  background-color: transparent;\r\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\r\n}\r\n.storybook-button--small {\r\n  font-size: 12px;\r\n  padding: 10px 16px;\r\n}\r\n.storybook-button--medium {\r\n  font-size: 14px;\r\n  padding: 11px 20px;\r\n}\r\n.storybook-button--large {\r\n  font-size: 16px;\r\n  padding: 12px 24px;\r\n}\r\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ConfirmMessageDialog",
            "id": "component-ConfirmMessageDialog-9b0a4521d8d7a744b194393a205c80d9",
            "file": "src/app/admin/dialogs/confirm-message/confirm-message.dialog.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./confirm-message.dialog.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "line": 18,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<ConfirmMessageDialog>",
                    "optional": false,
                    "line": 17,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Component for Confirm Message Dialog</p>\n",
            "rawdescription": "\n\nComponent for Confirm Message Dialog\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from \"@angular/core\";\nimport { MatDialogRef, MAT_DIALOG_DATA } from \"@angular/material/dialog\";\n\n/**\n * Component for Confirm Message Dialog\n */\n@Component({\n  templateUrl: \"./confirm-message.dialog.html\"\n})\nexport class ConfirmMessageDialog {\n  /**\n   * default constructor for confirmMessageDialog\n   * @param dialogRef\n   * @param data\n   */\n  constructor(\n    public dialogRef: MatDialogRef<ConfirmMessageDialog>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n  ) {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>default constructor for confirmMessageDialog</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ConfirmMessageDialog>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "rawdescription": "\n\ndefault constructor for confirmMessageDialog\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 341,
                            "end": 350,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialogRef"
                        },
                        "type": "MatDialogRef<ConfirmMessageDialog>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 335,
                            "end": 340,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 363,
                            "end": 367,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "data"
                        },
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 357,
                            "end": 362,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "templateData": "<h2 mat-dialog-title>{{data.message}}</h2>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close [mat-dialog-close]=\"false\">{{data.button.cancel}}</button>\n  <button mat-button [mat-dialog-close]=\"true\">{{data.button.submit}}</button>\n</mat-dialog-actions>"
        },
        {
            "name": "ConfirmMessageDialog",
            "id": "component-ConfirmMessageDialog-9b0a4521d8d7a744b194393a205c80d9-1",
            "file": "src/app/forecast/dialogs/confirm-message/confirm-message.dialog.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./confirm-message.dialog.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "line": 18,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<ConfirmMessageDialog>",
                    "optional": false,
                    "line": 17,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Component for Confirm Message Dialog</p>\n",
            "rawdescription": "\n\nComponent for Confirm Message Dialog\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from \"@angular/core\";\nimport { MatDialogRef, MAT_DIALOG_DATA } from \"@angular/material/dialog\";\n\n/**\n * Component for Confirm Message Dialog\n */\n@Component({\n  templateUrl: \"./confirm-message.dialog.html\"\n})\nexport class ConfirmMessageDialog {\n  /**\n   * default constructor for confirmMessageDialog\n   * @param dialogRef\n   * @param data\n   */\n  constructor(\n    public dialogRef: MatDialogRef<ConfirmMessageDialog>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n  ) {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>default constructor for confirmMessageDialog</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ConfirmMessageDialog>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "rawdescription": "\n\ndefault constructor for confirmMessageDialog\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 341,
                            "end": 350,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialogRef"
                        },
                        "type": "MatDialogRef<ConfirmMessageDialog>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 335,
                            "end": 340,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 363,
                            "end": 367,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "data"
                        },
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 357,
                            "end": 362,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ConfirmMessageDialog-1",
            "templateData": "<h2 mat-dialog-title>{{data.message}}</h2>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close [mat-dialog-close]=\"false\">{{data.button.cancel}}</button>\n  <button mat-button [mat-dialog-close]=\"true\">{{data.button.submit}}</button>\n</mat-dialog-actions>"
        },
        {
            "name": "ExecutiveChartComponent",
            "id": "component-ExecutiveChartComponent-20658b50bbffaab2c6cd09809dc5ceb9",
            "file": "src/app/forecast/components/executive-chart/executive-chart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-executive-chart",
            "styleUrls": [
                "./executive-chart.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./executive-chart.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "arve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "arveUrveChart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "cor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "corChart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<ExecutiveChartComponent>",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "extRev",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "fte",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "intRev",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "monthLabels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "reports",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MonthlySummaryReport[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "revenueChart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "showComponent",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "summaryValuesArray",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SummaryValues[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "totalRev",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "urve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                }
            ],
            "methodsClass": [
                {
                    "name": "average",
                    "args": [
                        {
                            "name": "numArray",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 269,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "numArray",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "exportCSV",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 277,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "numberToString",
                    "args": [
                        {
                            "name": "no",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 309,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "no",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 273,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "processTableData",
                    "args": [
                        {
                            "name": "reports",
                            "type": "MonthlySummaryReport[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "reports",
                            "type": "MonthlySummaryReport[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "total",
                    "args": [
                        {
                            "name": "numArray",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 263,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "numArray",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, Inject } from \"@angular/core\";\nimport { Chart } from \"chart.js\";\nimport {\n  MatDialogRef,\n  MAT_DIALOG_DATA\n} from \"@angular/material/dialog\";\nimport { ExecutiveForecastsService } from \"../../../core/services/forecasts/executive-forecasts.service\";\nimport { MonthlySummaryReport } from \"../../../core/interfaces/kpiData\";\nimport { PageStateService } from \"../../../core/shared/page-state.service\";\nimport { DatePipe } from '@angular/common';\n\n@Component({\n  selector: \"app-executive-chart\",\n  templateUrl: \"./executive-chart.component.html\",\n  styleUrls: [\"./executive-chart.component.scss\"]\n})\nexport class ExecutiveChartComponent implements OnInit {\n\n  showComponent: boolean = false;\n  \n  summaryValuesArray: SummaryValues[];\n  \n  reports: MonthlySummaryReport[];\n\n  monthLabels: string[];\n\n  /*\n   *ChartJs object which will render the ARVE/URVE chart\n   */\n  arveUrveChart;\n  /*\n   * ARVE set for total ARVE/month for the next 6 months\n   */\n  arve: number[];\n  /*\n   * URVE set for total URVE/month for the next 6 months\n   */\n  urve: number[];\n\n  /*\n   *ChartJs object which will render the COR chart\n   */\n  corChart;\n  /*\n   * COR set for total COR/month for the next 6 months\n   */\n  cor: number[];\n\n  /*\n   *ChartJs object which will render the Revenue chart\n   */\n  revenueChart;\n  /*\n   * Internal revenue set for internal revenue/month for the next 6 months\n   */\n  intRev: number[];\n  /*\n   * External revenue set for external revenue/month for the next 6 months\n   */\n  extRev: number[];\n  /*\n   * Total revenue set for total revenue/month for the next 6 months\n   */\n  totalRev: number[];\n\n  fte: number[];\n\n  constructor(\n    public dialogRef: MatDialogRef<ExecutiveChartComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private executiveService: ExecutiveForecastsService,\n    private pageState: PageStateService,\n    private datePipe: DatePipe,\n  ) {}\n\n  ngOnInit() {\n    this.reports = this.executiveService.getKpiData();\n    this.reports = this.reports.sort(function(a, b) { return a.monthId-b.monthId });\n    \n    /**initialize arve to empty set */\n    this.arve = [];\n    \n    /**initialize urve to empty set */\n    this.urve = [];\n    \n    /**initialize cor to empty set */\n    this.cor = [];\n    \n    /**initialize extRev to empty set */\n    this.extRev = [];\n    \n    /**initialize intRev to empty set */\n    this.intRev = [];\n    \n    /**initialize totalRev to empty set */\n    this.totalRev = [];\n\n    this.monthLabels = [];\n\n    this.fte = [];\n\n    if (this.reports.length > 0) {\n      this.processTableData(this.reports);\n      this.showComponent = true;    \n    }   \n  }\n\n  processTableData(reports: MonthlySummaryReport[]) : void {\n    for (let report of reports) {\n      this.arve.push(report.arve * 100);\n      this.urve.push(report.urve * 100);\n      this.cor.push(report.cor);\n      this.intRev.push(report.internalRevenue);\n      this.fte.push(report.fte);\n      this.extRev.push(report.externalRevenue);\n      this.totalRev.push(report.ros);\n      this.monthLabels.push(report.month.charAt(0).toUpperCase() + report.month.slice(1) + ' \\'' + (report.year % 100).toString());\n    }\n\n    this.arveUrveChart = new Chart(\"arve-urve\", {\n      type: \"bar\",\n      data: {\n        labels: this.monthLabels,\n        datasets: [\n          {\n            label: \"ARVE\",\n            backgroundColor: \"#95E616\",\n            data: this.arve\n          },\n          {\n            label: \"URVE\",\n            backgroundColor: \"#FF304C\",\n            data: this.urve\n          }\n        ]\n      },\n      options: {\n        legend: {\n          display: false\n        },\n        scales: {\n          xAxes: [\n            {\n              display: true,\n              gridLines: {\n                display: false\n              },\n              barPercentage: 0.7,\n              categoryPercentage: 0.5\n            }\n          ],\n          yAxes: [\n            {\n              display: true,\n              gridLines: {\n                display: false\n              },\n              ticks: {\n                min: 0,\n                max: 100\n              }\n            }\n          ]\n        }\n      }\n    });\n\n    this.corChart = new Chart(\"cor\", {\n      type: \"line\",\n      data: {\n        labels: this.monthLabels,\n        datasets: [\n          {\n            data: this.cor,\n            borderColor: \"#7e39ba\",\n            fill: false\n          }\n        ]\n      },\n      options: {\n        legend: {\n          display: false\n        },\n        scales: {\n          xAxes: [\n            {\n              display: true,\n              gridLines: {\n                display: false\n              },\n              barPercentage: 0.5,\n              categoryPercentage: 0.5\n            }\n          ],\n          yAxes: [\n            {\n              display: true,\n              gridLines: {\n                display: false\n              },\n              ticks: {\n                min: 0\n              }\n            }\n          ]\n        }\n      }\n    });\n\n    this.revenueChart = this.arveUrveChart = new Chart(\"revenue\", {\n      type: \"bar\",\n      data: {\n        labels: this.monthLabels,\n        datasets: [\n          {\n            label: \"INT\",\n            backgroundColor: \"#12abdb\",\n            data: this.intRev\n          },\n          {\n            label: \"EXT\",\n            backgroundColor: \"#0070ad\",\n            data: this.extRev\n          },\n          {\n            label: \"TOTAL\",\n            backgroundColor: \"#2b0a3d\",\n            data: this.totalRev\n          }\n        ]\n      },\n      options: {\n        legend: {\n          display: true\n        },\n        scales: {\n          xAxes: [\n            {\n              display: true,\n              gridLines: {\n                display: false\n              },\n              barPercentage: 0.7,\n              categoryPercentage: 0.5\n            }\n          ],\n          yAxes: [\n            {\n              display: true,\n              gridLines: {\n                display: false\n              },\n              ticks: {\n                min: 0\n              }\n            }\n          ]\n        }\n      }\n    });\n  }\n\n  total(numArray: number[]) {\n    return numArray.reduce(function(a, b) {\n      return a + b;\n    }, 0);\n  }\n\n  average(numArray: number[]) : number {\n    return this.total(numArray) / numArray.length;\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  exportCSV(): void {\n    this.pageState.showSpinner();\n    let lineEnding = \"\\r\\n\";\n    let header = \"KPI;\" + this.monthLabels.join(\";\") + lineEnding;\n    let body: string = \"ARVE;\" + this.arve.map(this.numberToString).join(\";\") + lineEnding + \n      \"URVE;\" + this.urve.map(this.numberToString).join(\";\") + lineEnding +\n      \"COR;\" + this.cor.map(this.numberToString).join(\";\") + lineEnding +\n      \"Int. Revenue;\" + this.intRev.map(this.numberToString).join(\";\") + lineEnding + \n      \"Ext. Revenue;\" + this.extRev.map(this.numberToString).join(\";\") + lineEnding +\n      \"Total Revenue;\" + this.totalRev.map(this.numberToString).join(\";\") + lineEnding +\n      \"FTE;\" + this.fte.map(this.numberToString).join(\";\") + lineEnding;\n    const data = header + body;\n    const blob: Blob = new Blob([data], { type: \"text/csv\" });\n    const filename: string = this.datePipe.transform(new Date(), \"yyyyMMdd\") + \"-KPIOverview.csv\";    \n    this.pageState.hideSpinner();\n\n    if (window.navigator.msSaveOrOpenBlob) {\n      window.navigator.msSaveOrOpenBlob(blob, filename);\n    } else {\n      const url: string = window.URL.createObjectURL(blob);\n\n      let a: HTMLAnchorElement = document.createElement(\"a\");\n      a.href = url;\n      a.download = filename;\n\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n    }\n  }\n\n  numberToString(no: number): string {\n    return no.toLocaleString(\"de\",  { minimumFractionDigits: 2 } ).replace(\".\",\"\");\n  }\n}\n\nexport interface SummaryValues {\n  monthId: number;\n  probabilityId: number;\n  billableDays: number;\n  nonBillableDays: number;\n  vacationDays: number;\n  trainingDays: number;\n  businessDays: number;\n  benchDays: number;\n  workingDays: number;\n  fteCss: number;\n  cor: number;\n  arve: number;\n  fte: number;\n  urve: number;\n  ros: number;\n  external: number;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".w-100 {\n  width: 100%;\n}\n\n.w-50 {\n  width: 50%;\n}\n\n.h-100 {\n  height: 100%;\n}\n\n.p-16 {\n  padding: 16px;\n}\n\n.px-16 {\n  padding-left: 16px;\n  padding-right: 16px;\n}\n\n.pt-5 {\n  padding-top: 5px;\n}\n.example-fill-remaining-space {\n  /* This fills the remaining space, by using flexbox. \n     Every toolbar row uses a flexbox row layout. */\n  flex: 1 1 auto;\n}\n\n.white {\n  color: #ffffff;\n}\n\n.fix {\n  display: flex;\n  color: #ffffff;\n  background-color: #0070ad;\n  height: 50px;\n  padding: 0px;\n  padding-left: 24px;\n  padding-right: 24px;\n  line-height: 3.3;\n}\n\n.fix .title {\n  color: #fff;\n  padding-left: 14px;\n}\n.stats-table-header {\n  font-family: \"Roboto\", sans-serif;\n  text-align: center;\n  padding: 12px;\n}\n\n.stats-table-header:first-of-type {\n  font-family: \"Roboto\", sans-serif;\n  text-align: left;\n  padding: 12px;\n}\n\n.stats-table-cell:first-of-type {\n  font-family: \"Roboto\", sans-serif;\n  text-align: left;\n  font-size: 12px;\n  line-height: 1.3em;\n  padding: 12px;\n}\n\n.stats-table-cell {\n  font-family: \"Roboto\", sans-serif;\n  text-align: center;\n  font-size: 12px;\n  line-height: 1.3em;\n  padding: 12px;\n}\n\n.border-collapse {\n  border-collapse: collapse;\n}\n\n.border-line {\n  border-bottom: 1px solid #e0e0e0;\n  border-collapse: separate;\n  border-spacing: 4px;\n}\n\n.color-grey {\n  color: grey;\n}\n\n.mat-stroked-button {\n\tmargin: 5px;\n\tmargin-left: 0;\n}\n\n.button-rows {\n\tdisplay: flex;\n\t.button-row {\n    width: 50%\n  }\n}",
                    "styleUrl": "./executive-chart.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ExecutiveChartComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 66,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ExecutiveChartComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\n  mat-dialog-title\n  class=\"fix\"\n  layout=\"row\"\n  layout-align=\"space-between center\"\n>\n  <span>KPI Overview</span>\n\n  <!-- This fills the remaining space of the current row -->\n  <span class=\"example-fill-remaining-space\"></span>\n\n  <button mat-icon-button (click)=\"onNoClick()\">\n    <mat-icon class=\"white\">close</mat-icon>\n  </button>\n</div>\n\n<mat-dialog-content>\n  <div layout=\"row\" layout-wrap *ngIf=\"showComponent\">\n    <div flex=\"100\" class=\"px-16 pt-5\">\n      Overview/Summary of the KPIs for the next 6 Months. COR is averaged in the\n      months over the days. ARVE/URVE and COR are averaged in the TOTAL Column\n      (i. e. the average over the 6 months).\n\n      <table class=\"border-collapse w-100 h-100\">\n        <thead class=\"border-line color-grey\">\n          <tr>\n            <td class=\"stats-table-header\">KPI</td>\n            <td *ngFor=\"let m of monthLabels\" class=\"stats-table-header\">\n              {{ m }}\n            </td>\n            <td class=\"stats-table-header\">TOTAL</td>\n          </tr>\n        </thead>\n        <tbody>\n          <!--ARVE -->\n          <tr class=\"border-line\">\n            <td class=\"stats-table-cell\">ARVE</td>\n            <td class=\"stats-table-cell\" *ngFor=\"let a of arve\">\n              {{ a.toFixed(2) | number: '1.0-2': 'de' }}\n            </td>\n            <td class=\"stats-table-cell\">{{ average(arve).toFixed(2) | number: '1.0-2': 'de'}}</td>\n          </tr>\n\n          <!--URVE -->\n          <tr class=\"border-line\">\n            <td class=\"stats-table-cell\">URVE</td>\n            <td class=\"stats-table-cell\" *ngFor=\"let u of urve\">\n              {{ u.toFixed(2) | number: '1.0-2': 'de' }}\n            </td>\n            <td class=\"stats-table-cell\">{{ average(urve).toFixed(2) | number: '1.0-2': 'de' }}</td>\n          </tr>\n\n          <!--COR -->\n          <tr class=\"border-line\">\n            <td class=\"stats-table-cell\">COR</td>\n            <td class=\"stats-table-cell\" *ngFor=\"let c of cor\">\n              {{ c.toFixed(2) | number: '1.0-2': 'de' }}\n            </td>\n            <td class=\"stats-table-cell\">{{ average(cor).toFixed(2) | number: '1.0-2': 'de' }}</td>\n          </tr>\n\n          <!--Internal Revenue -->\n          <tr class=\"border-line\">\n            <td class=\"stats-table-cell\">Int. Revenue</td>\n            <td class=\"stats-table-cell\" *ngFor=\"let i of intRev\">\n              {{ i.toFixed(2) | number: '1.0-2': 'de' }}\n            </td>\n            <td class=\"stats-table-cell\">{{ total(intRev).toFixed(2) | number: '1.0-2': 'de' }}</td>\n          </tr>\n\n          <!--External Revenue -->\n          <tr class=\"border-line\">\n            <td class=\"stats-table-cell\">Ext. Revenue</td>\n            <td class=\"stats-table-cell\" *ngFor=\"let e of extRev\">\n              {{ e.toFixed(2) | number: '1.0-2': 'de'}}\n            </td>\n            <td class=\"stats-table-cell\">{{ total(extRev).toFixed(2) | number: '1.0-2': 'de' }}</td>\n          </tr>\n\n          <!--Total Revenue -->\n          <tr class=\"border-line\">\n            <td class=\"stats-table-cell\">Total Revenue</td>\n            <td class=\"stats-table-cell\" *ngFor=\"let t of totalRev\">\n              {{ t.toFixed(2) | number: '1.0-2': 'de'}}\n            </td>\n            <td class=\"stats-table-cell\">{{ total(totalRev).toFixed(2) | number: '1.0-2': 'de' }}</td>\n          </tr>\n\n          <!--FTE -->\n          <tr class=\"border-line\">\n            <td class=\"stats-table-cell\">FTE</td>\n            <td class=\"stats-table-cell\" *ngFor=\"let f of fte\">\n              {{ f.toFixed(2) | number: '1.0-2': 'de'}}\n            </td>\n            <td class=\"stats-table-cell\">{{ total(fte).toFixed(2) | number: '1.0-2': 'de' }}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n\n  <br />\n  <br />\n\n  <div layout=\"row\" layout-wrap>\n    <div flex=\"33\" class=\"p-16\" top-margin=\"20px\">\n      <h3>\n        <span style=\"color: #95e616;\">ARVE</span> /\n        <span style=\"color: #ff304c;\">URVE</span>\n      </h3>\n      <canvas class=\"w-100\" id=\"arve-urve\"></canvas>\n    </div>\n    <div flex=\"33\" class=\"p-16\">\n      <h3>COR</h3>\n      <canvas class=\"w-100\" id=\"cor\"></canvas>\n    </div>\n    <div flex=\"33\" class=\"p-16\">\n      <h3>REVENUE</h3>\n      <canvas class=\"w-100\" id=\"revenue\"></canvas>\n    </div>\n  </div>\n\n  <div layout=\"row\" layout-wrap>\n    <div flex=\"100\" class=\"p-16\">\n      <button mat-stroked-button class=\"mat-primary-reversed\" class=\"button-rows\" color=\"primary\" (click)=\"exportCSV()\">\n        <mat-icon>insert_drive_file</mat-icon> Export CSV\n      </button>\n    </div>\n  </div>\n</mat-dialog-content>"
        },
        {
            "name": "ExecutiveComponent",
            "id": "component-ExecutiveComponent-86ab570cd8b770b70270985310f15d6b",
            "file": "src/app/forecast/pages/executive/executive.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-executive",
            "styleUrls": [
                "./executive.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./executive.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "availableMonths",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "<p>Available months array</p>\n",
                    "line": 40,
                    "rawdescription": "\n\nAvailable months array\n"
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "forecastrSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "months",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "<p>Selected months array</p>\n",
                    "line": 48,
                    "rawdescription": "\n\nSelected months array\n"
                },
                {
                    "name": "monthSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "period",
                    "defaultValue": "{ from: undefined, to: undefined }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Defines executive data view period (monthIDs)</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nDefines executive data view period (monthIDs)\n"
                },
                {
                    "name": "powerBiService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NgxPowerBiService",
                    "optional": false,
                    "description": "<p>Implementation for powerbi service component</p>\n",
                    "line": 30,
                    "rawdescription": "\n\nImplementation for powerbi service component\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "downloadCSV",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalled for executive view summary data download\n",
                    "description": "<p>Called for executive view summary data download</p>\n"
                },
                {
                    "name": "downloadFile",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nDownload csv file with team forecast data\n",
                    "description": "<p>Download csv file with team forecast data</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4921,
                                "end": 4925,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "data"
                            },
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4915,
                                "end": 4920,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "initExecutiveView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInit method called when general forecastr data have been loaded successfully\n",
                    "description": "<p>Init method called when general forecastr data have been loaded successfully</p>\n"
                },
                {
                    "name": "isExecutive",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isMSLLevelRole",
                    "args": [
                        {
                            "name": "roleName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 218,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roleName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnsubscribes services when component gets destroyed\n",
                    "description": "<p>Unsubscribes services when component gets destroyed</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ninit method\n",
                    "description": "<p>init method</p>\n"
                },
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 201,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOpen dialog for executive chart",
                    "description": "<p>Open dialog for executive chart</p>\n"
                },
                {
                    "name": "powerBIReportEmbedded",
                    "args": [
                        {
                            "name": "$e",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalled when powerbi report was successfully embedded\n",
                    "description": "<p>Called when powerbi report was successfully embedded</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2900,
                                "end": 2902,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "$e"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2894,
                                "end": 2899,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setDefaultPeriod",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the default period to current month until 6 months in the future\n",
                    "description": "<p>Sets the default period to current month until 6 months in the future</p>\n"
                },
                {
                    "name": "showPeriod",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReloads the values after period update\n",
                    "description": "<p>Reloads the values after period update</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Executive forecast-view component</p>\n",
            "rawdescription": "\n\nExecutive forecast-view component\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, Input } from \"@angular/core\";\nimport { MatDialog } from \"@angular/material/dialog\";\nimport { Month } from \"../../../core/interfaces/month\";\nimport { UtilitiesService } from \"../../../core/services/utilities.service\";\nimport { PageStateService } from \"../../../core/shared/page-state.service\";\nimport { ExecutiveForecastsService } from \"../../../core/services/forecasts/executive-forecasts.service\";\nimport { DatePipe } from \"@angular/common\";\nimport { NgxPowerBiService } from \"ngx-powerbi\";\nimport { Subscription } from \"rxjs\";\nimport { AuthService } from \"../../../core/security/auth.service\";\nimport { environment } from \"../../../../environments/environment\";\nimport { ExecutiveChartComponent } from \"../../components/executive-chart/executive-chart.component\";\nimport { environment as env } from \"../../../../environments/environment\";\nimport { UserService } from \"../../../core/services/user.service\";\nimport { CalculationService } from \"../../../core/services/forecasts/calculation.service\";\n\n/**\n * Executive forecast-view component\n */\n@Component({\n  selector: \"app-executive\",\n  templateUrl: \"./executive.component.html\",\n  styleUrls: [\"./executive.component.scss\"],\n})\nexport class ExecutiveComponent implements OnInit, OnDestroy {\n\n  /**\n   * Implementation for powerbi service component\n   */\n  powerBiService: NgxPowerBiService;\n\n  /**\n   * Defines executive data view period (monthIDs)\n   */\n  period: any = { from: undefined, to: undefined };\n\n  /**\n   * Available months array\n   */\n  availableMonths: Month[] = [];\n\n  //@Input('hop')\n  //hop = false;\n\n  /**\n   * Selected months array\n   */\n  months: Month[] = [];\n  monthSubscription: Subscription;\n  forecastrSubscription: Subscription;\n\n  /**\n   * executive forecast-view component constructor\n   * @param datePipe\n   * @param authService\n   * @param utilitiesService\n   * @param pageState\n   * @param executiveService\n   */\n  constructor(\n    private datePipe: DatePipe,\n    private authService: AuthService,\n    private utilitiesService: UtilitiesService,\n    private pageState: PageStateService,\n    private executiveService: ExecutiveForecastsService,\n    private userService: UserService,\n    private calculationService: CalculationService,\n    public dialog: MatDialog\n  ) {\n    this.powerBiService = new NgxPowerBiService();\n  }\n\n  /**\n   * init method\n   */\n  ngOnInit(): void {\n    this.forecastrSubscription = this.pageState.forecastrReady$.subscribe(\n      (ready: boolean) => {\n        if (ready && this.authService.hasRole(environment.roles.msl)) {\n          this.initExecutiveView();\n        }\n      }\n    );\n  }\n\n  /**\n   * Unsubscribes services when component gets destroyed\n   */\n  ngOnDestroy(): void {\n    this.monthSubscription.unsubscribe();\n    this.forecastrSubscription.unsubscribe();\n  }\n\n  /**\n   * Called when powerbi report was successfully embedded\n   * @param $e\n   */\n  powerBIReportEmbedded($e): void {\n    console.log(\"report embedded\");\n  }\n\n  /**\n   * Init method called when general forecastr data have been loaded successfully\n   */\n  initExecutiveView(): void {\n    this.monthSubscription = this.utilitiesService.months$.subscribe(\n      (months: Month[]) => {\n        this.availableMonths = months;\n        this.setDefaultPeriod();\n      }\n    );\n  }\n\n  /**\n   * Sets the default period to current month until 6 months in the future\n   */\n  setDefaultPeriod(): void {\n    let months: Month[] = this.utilitiesService.getMonths();\n\n    for (let i: number = 0; i < months.length; i++) {\n      if (\n        Date.parse(months[i].time) >\n        new Date().setMonth(new Date().getMonth() + 1) // -1 no prevois month\n      ) {\n        this.period.from = i;\n        this.period.to = i + 5;\n        this.showPeriod();\n        break;\n      }\n    }\n  }\n\n  /**\n   * Reloads the values after period update\n   */\n  showPeriod(): void {\n    if (this.period.to < this.period.from) {\n      this.period.to = this.period.from;\n    }\n\n    this.pageState.showSpinner();\n    this.executiveService.resetSummaryValues();\n    this.months = this.utilitiesService\n      .getMonths()\n      .filter((m: Month) => m.id >= this.period.from && m.id <= this.period.to);\n    this.executiveService.initializeSummaryValues(\n      this.period.from,\n      this.period.to\n    );\n    this.calculationService.init(this.period.from, this.period.to);\n    this.executiveService.initalizeGraphicData(\n      this.period.from,\n      this.period.to\n    );\n  }\n\n  /**\n   * Called for executive view summary data download\n   */\n  downloadCSV(): void {\n    this.pageState.showSpinner();\n\n    this.executiveService\n      .getCsvExportData(this.period.from, this.period.to)\n      .subscribe(\n        (data: any) => {\n          this.pageState.hideSpinner();\n          this.downloadFile(data);\n        },\n        () => this.pageState.hideSpinner()\n      );\n  }\n\n  /**\n   * Download csv file with team forecast data\n   * @param data\n   */\n  downloadFile(data: any): void {\n    const blob: Blob = new Blob([data], { type: \"text/csv\" });\n    const filename: string =\n      this.datePipe.transform(new Date(), \"yyyyMMdd\") +\n      \"-Forecastsummary-Period.csv\";\n\n    if (window.navigator.msSaveOrOpenBlob) {\n      window.navigator.msSaveOrOpenBlob(blob, filename);\n    } else {\n      const url: string = window.URL.createObjectURL(blob);\n\n      let a: HTMLAnchorElement = document.createElement(\"a\");\n      a.href = url;\n      a.download = filename;\n\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n    }\n  }\n\n  /**Open dialog for executive chart */\n  openDialog(): void {\n    const dialogRef = this.dialog.open(ExecutiveChartComponent, {\n      height: \"90%\",\n      width: \"90%\",\n      panelClass: \"custom-dialog-container\",\n      data: {},\n    });\n\n    dialogRef.afterClosed().subscribe((result) => {\n      console.log(\"The dialog was closed\");\n    });\n  }\n\n  isExecutive(): boolean {\n    return this.authService.hasRole(env.roles.msl);\n  }\n  \n  isMSLLevelRole(roleName: string): boolean {\n    if (!this.isExecutive()) {\n      return false;\n    }\n\n    let userId = this.authService.getUserId();\n\n    if (userId === undefined) {\n      return false;\n    }\n\n    let roleId = this.userService.getUser(userId).roleId;\n\n    if (roleId === undefined) {\n      return false;\n    }\n\n    let role = this.userService.getRole(roleId).shortcut;\n\n    if (role === undefined) {\n      return false;\n    }\n\n    return role === roleName;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../assets/styles/variables.scss\";\n\n.role-header {\n  position: relative;\n  height: 37px;\n  margin: 0;\n\n  h1 {\n    line-height: 37px;\n    font-size: 1.8em;\n    margin: 0;\n  }\n\n  .mat-button-toggle-group {\n    background-color: map-get($font-colors, white);\n    font-size: 1.1em;\n    border-radius: 4px;\n  }\n\n  .mat-button-toggle {\n    background-color: map-get($font-colors, white);\n    color: map-get($font-colors, blue);\n    border-right: 1px solid #0070ad;\n    width: 120px;\n\n    .mat-icon {\n      color: map-get($font-colors, blue);\n    }\n\n    &:hover {\n      background-color: map-get($bg-colors, light);\n    }\n\n    &:last-child {\n      border: none;\n    }\n  }\n\n  .mat-button-toggle-checked,\n  .mat-button-toggle-checked .mat-icon {\n    background-color: map-get($font-colors, blue);\n    color: map-get($font-colors, white);\n\n    &:hover {\n      background-color: map-get($font-colors, blue);\n    }\n  }\n\n  .switch-role-toggle {\n    position: absolute;\n    right: 0;\n    top: 0;\n    height: 34px;\n    line-height: 34px;\n    border-radius: 0;\n  }\n}\n\n.executive-view-container {\n  margin-top: 30px;\n  padding: 0;\n  background: transparent;\n}\n\n.period-container {\n  width: 100%;\n}\n\n.period-component {\n  display: inline-flex;\n  margin: 0 5px;\n\n  &.mat-form-field {\n    width: 200px;\n  }\n  &.mat-raised-button {\n    margin-top: 4px;\n    bottom: 4px;\n  }\n  &:first-child {\n    margin-left: 0;\n  }\n}\n\n.period-download {\n  margin-top: 4px;\n  bottom: 4px;\n}\n\n.executive-btn {\n  margin-top: 4px;\n  right: 20px;\n  position: absolute;\n}\n\n.mat-icon {\n  font-size: 18px;\n  color: #fff !important;\n}\n\n.powerbi-report,\n.powerbi-report > div {\n  margin: 30px 0 10px;\n  border: 0;\n  width: 100%;\n  min-height: 500px;\n\n  box-shadow: 0 4px 8px 2px rgba(0, 0, 0, 0.06);\n}\n\n.w-100 {\n  position: relative;\n  left: -10px;\n  width: 100% !important;\n}\n.m-16p {\n  margin: 16px;\n}\n\n.m-0 {\n  margin: 0;\n}\n\n.m-0 {\n  margin: 0 !important;\n}\n\n.p-16p {\n  padding: 16px;\n}\n",
                    "styleUrl": "./executive.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>executive forecast-view component constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "calculationService",
                        "type": "CalculationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 50,
                "rawdescription": "\n\nexecutive forecast-view component constructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1816,
                            "end": 1824,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "datePipe"
                        },
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1810,
                            "end": 1815,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1837,
                            "end": 1848,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "authService"
                        },
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1831,
                            "end": 1836,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1861,
                            "end": 1877,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "utilitiesService"
                        },
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1855,
                            "end": 1860,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1890,
                            "end": 1899,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "pageState"
                        },
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1884,
                            "end": 1889,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1912,
                            "end": 1928,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "executiveService"
                        },
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1906,
                            "end": 1911,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "calculationService",
                        "type": "CalculationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"executive-container\">\n  <div class=\"period-container\">\n    \n    <mat-form-field class=\"period-component\" appearance=\"outline\">\n      <mat-label>Period Start Month</mat-label>\n      \n      <mat-select [(ngModel)]=\"period.from\">\n        <ng-container *ngFor=\"let r of availableMonths\">\n          <mat-option [value]=\"r.id\">{{ r.name }}</mat-option>\n        </ng-container>\n      </mat-select>\n    \n    </mat-form-field>\n    \n    <mat-form-field class=\"period-component\" appearance=\"outline\">\n      <mat-label>Period End Month</mat-label>\n      \n      <mat-select [(ngModel)]=\"period.to\">\n        <ng-container *ngFor=\"let r of availableMonths\">\n          <mat-option [value]=\"r.id\">{{ r.name }}</mat-option>\n        </ng-container>\n      </mat-select>\n    \n    </mat-form-field>\n    \n    <button class=\"period-component\" mat-raised-button color=\"primary\" (click)=\"showPeriod()\">\n      <mat-icon>search</mat-icon> Show Period\n    </button>\n<!--\n    <button class=\"period-download\" mat-raised-button color=\"primary\" (click)=\"downloadCSV()\">\n      <mat-icon>insert_drive_file</mat-icon> Export Period as CSV\n    </button>\n  -->\n    <button *ngIf=\"isMSLLevelRole('MSL')\" class=\"executive-btn\" mat-raised-button color=\"primary\" (click)=\"openDialog()\">\n      <mat-icon>insert_chart</mat-icon> KPI Overview\n    </button>\n  </div>\n\n  <div class=\"executive-view-container\">\n    <h3 *ngIf=\"months.length > 0\">\n      Period {{ months[0].name }} - {{ months[months.length - 1].name }}\n    </h3>\n    <mat-card class=\"w-100 m-0i\">\n      <app-executive-summary summary=\"period\"></app-executive-summary>\n    </mat-card>\n  </div>\n\n  <div class=\"executive-view-container\">\n    <app-executive-stats></app-executive-stats>\n  </div>\n\n  <!-- <div class=\"executive-view-container\">\n    <h3>Months</h3>\n    <mat-tab-group>\n      <mat-tab label= \"{{months[0].name}}\">\n      \n      </mat-tab>\n      <mat-tab *ngFor=\"let month of months\" label=\"{{ month.name }}\">\n        <ng-template matTabContent>\n          <app-executive-detail [month]=\"month\"></app-executive-detail>\n        </ng-template>\n      </mat-tab>\n    </mat-tab-group>\n  </div> -->\n  \n</div>"
        },
        {
            "name": "ExecutiveDetailComponent",
            "id": "component-ExecutiveDetailComponent-119e4271aba4cf74fe94ac2dc2a207d5",
            "file": "src/app/forecast/components/executive-detail/executive-detail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-executive-detail",
            "styleUrls": [
                "./executive-detail.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./executive-detail.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "month",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "month (received as input)",
                    "description": "<p>month (received as input)</p>\n",
                    "line": 39,
                    "type": "Month"
                },
                {
                    "name": "months",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "Month[]"
                },
                {
                    "name": "switchState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "viewSwitch",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nviewSwitch saves if the PL of PDL View is shown as Output\n",
                    "description": "<p>viewSwitch saves if the PL of PDL View is shown as Output</p>\n",
                    "line": 45,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "line": 112,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "fcEntries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FcEntry[]",
                    "optional": false,
                    "description": "<p>list of all forecast entries for teamlead + month</p>\n",
                    "line": 61,
                    "rawdescription": "\n\nlist of all forecast entries for teamlead + month\n"
                },
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "forecasts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FcEntry[]",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "fte",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>sum all FTE</p>\n",
                    "line": 56,
                    "rawdescription": "\n\nsum all FTE\n"
                },
                {
                    "name": "loadingActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "projects",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Project[]",
                    "optional": false,
                    "description": "<p>project list</p>\n",
                    "line": 66,
                    "rawdescription": "\n\nproject list\n"
                },
                {
                    "name": "team",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User[]",
                    "optional": false,
                    "description": "<p>team member list</p>\n",
                    "line": 76,
                    "rawdescription": "\n\nteam member list\n"
                },
                {
                    "name": "teamleads",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "teamSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "totals",
                    "defaultValue": "{ \r\n    projectDays: 0, \r\n    billableDays: 0, \r\n    vacationDays: 0, \r\n    totalDays: 0,\r\n    ros: 0,\r\n    fte: 0,\r\n    corDays: 0\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 78
                }
            ],
            "methodsClass": [
                {
                    "name": "calcARVE",
                    "args": [
                        {
                            "name": "projectDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "vacationDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "totalDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 292,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "projectDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "vacationDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "totalDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calcURVE",
                    "args": [
                        {
                            "name": "billableDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "vacationDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "totalDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 301,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "billableDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "vacationDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "totalDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "changeView",
                    "args": [
                        {
                            "name": "status",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 390,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\nchanges the status of pl or pdl and sends it to parent\n",
                    "description": "<p>changes the status of pl or pdl and sends it to parent</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 11810,
                                "end": 11816,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "status"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 11804,
                                "end": 11809,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>changes the status of pl or pdl and sends it to parent</p>\n"
                        }
                    ]
                },
                {
                    "name": "clickOnEdit",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "firstName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lastName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 191,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "firstName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lastName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "exportCSV",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 467,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "forecastState",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 347,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getChildData",
                    "args": [
                        {
                            "name": "parentId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "MatTableDataSource<User>",
                    "typeParameters": [],
                    "line": 277,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "parentId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTeamValue",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 289,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturn value for given type (used for arve + urve + revenue + workingdays)\n",
                    "description": "<p>Return value for given type (used for arve + urve + revenue + workingdays)</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8412,
                                "end": 8416,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "originalKeywordKind": 149,
                                "escapedText": "type"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8406,
                                "end": 8411,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 8430,
                                "end": 8436,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "userId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8424,
                                "end": 8429,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getTotal",
                    "args": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 401,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "property",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUserValues",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 413,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "isEditPermitted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isParent",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "parentId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 237,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parentId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isUserRelevantForMonth",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 256,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 397,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\n",
                    "description": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n\n",
                    "description": ""
                },
                {
                    "name": "numberToString",
                    "args": [
                        {
                            "name": "no",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "precision",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 545,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "no",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "precision",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setLockState",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "role",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "messageSuccess",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "messageFail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 327,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "role",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "messageSuccess",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "messageFail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTeamleads",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 178,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submitAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 310,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "teamFilterUpdate",
                    "args": [
                        {
                            "name": "filter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "filter",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unlockAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 366,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>teamlead summary component</p>\n",
            "rawdescription": "\n\nteamlead summary component\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, OnDestroy, Output, EventEmitter } from \"@angular/core\";\r\nimport { MatDialog, MatDialogRef } from \"@angular/material/dialog\";\r\nimport { MatSnackBar } from \"@angular/material/snack-bar\";\r\nimport { MatTableDataSource } from \"@angular/material/table\";\r\nimport { cloneDeep } from 'lodash';\r\n\r\nimport { UtilitiesService } from \"../../../core/services/utilities.service\";\r\nimport { ForecastService } from \"../../../core/services/forecasts/forecast.service\";\r\nimport { UserService } from \"../../../core/services/user.service\";\r\n\r\nimport { FcEntry } from \"../../../core/interfaces/fcEntry\";\r\nimport { Project } from \"../../../core/interfaces/project\";\r\nimport { Month } from \"../../../core/interfaces/month\";\r\nimport { User } from \"../../../core/interfaces/user\";\r\n\r\nimport { Subscription } from \"rxjs\";\r\nimport { ExecutiveForecastsService } from \"../../../core/services/forecasts/executive-forecasts.service\";\r\nimport { FcProject } from \"../../../core/interfaces/fcProject\";\r\nimport { FcEntryDetailDialogComponent } from \"./fc-entry-detail-dialog.component\";\r\nimport { ConfirmMessageDialog } from \"../../dialogs/confirm-message/confirm-message.dialog\";\r\nimport { TeamForecastService } from \"../../../core/services/forecasts/team-forecasts.service\";\r\nimport { PageStateService } from \"../../../core/shared/page-state.service\";\r\nimport { AuthService } from \"../../../core/security/auth.service\";\r\nimport { environment } from \"../../../../environments/environment\";\r\nimport { DatePipe } from \"@angular/common\";\r\n\r\n/**\r\n * teamlead summary component\r\n */\r\n@Component({\r\n  selector: \"app-executive-detail\",\r\n  templateUrl: \"./executive-detail.component.html\",\r\n  styleUrls: [\"./executive-detail.component.scss\"]\r\n})\r\nexport class ExecutiveDetailComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * month (received as input)\r\n   */\r\n  @Input('month') month: Month;\r\n  @Input('months') months: Month[];\r\n\r\n  /**\r\n   * viewSwitch saves if the PL of PDL View is shown as Output\r\n   */\r\n  @Output() viewSwitch = new EventEmitter<string>();\r\n\r\n  @Input('switchState') switchState: string;\r\n\r\n  forecasts: FcEntry[];\r\n\r\n  filter: string;\r\n\r\n  /**\r\n   * sum all FTE\r\n   */\r\n  fte: number;\r\n\r\n  /**\r\n   * list of all forecast entries for teamlead + month\r\n   */\r\n  fcEntries: FcEntry[];\r\n\r\n  /**\r\n   * project list\r\n   */\r\n  projects: Project[] = [];\r\n\r\n  /**\r\n   * months list\r\n   */\r\n  // months: Month[] = [];\r\n  \r\n  /**\r\n   * team member list\r\n   */\r\n  team: User[] = [];\r\n\r\n  userId: number;\r\n\r\n  teamleads: any[] = [];\r\n  \r\n  teamSubscription: Subscription;\r\n\r\n  loadingActive: boolean = false;\r\n\r\n  totals: any = { \r\n    projectDays: 0, \r\n    billableDays: 0, \r\n    vacationDays: 0, \r\n    totalDays: 0,\r\n    ros: 0,\r\n    fte: 0,\r\n    corDays: 0\r\n  };\r\n\r\n  /**\r\n   * constructor for teamlead-summary component\r\n   * @param datePipe\r\n   * @param dialog\r\n   * @param utilitiesService\r\n   * @param forecastService\r\n   * @param teamForecastService\r\n   * @param userService\r\n   * @param pageState\r\n   */\r\n  constructor(\r\n    private utilitiesService: UtilitiesService,\r\n    private forecastService: ForecastService,\r\n    private userService: UserService,\r\n    private executiveService: ExecutiveForecastsService,\r\n    private teamForecastService: TeamForecastService,\r\n    public dialog: MatDialog,\r\n    private snackBar: MatSnackBar,\r\n    private authService: AuthService,\r\n    private datePipe: DatePipe,\r\n    private pageState: PageStateService,\r\n  ) {\r\n    this.filter = 'pdl'; // 'pdl' or 'pl'\r\n    this.userId = this.authService.getUserId();\r\n    this.fte=0;\r\n    this.totals = { \r\n      projectDays: 0, \r\n      billableDays: 0, \r\n      vacationDays: 0, \r\n      totalDays: 0,\r\n      ros: 0,\r\n      fte: 0,\r\n      corDays: 0\r\n    };\r\n  }\r\n\r\n  /**\r\n   * \r\n   */\r\n  ngOnInit(): void {\r\n\r\n    if(this.switchState) {\r\n      this.filter = this.switchState;\r\n    }\r\n    \r\n    this.executiveService.initializeDetailValues(this.month.id);\r\n\r\n    this.utilitiesService.projects$.subscribe((projects: Project[]) => {\r\n      this.projects = projects;\r\n    });\r\n\r\n    this.forecastService.forecasts$.subscribe((forecasts: FcEntry[]) => {\r\n      this.fte=0;\r\n      this.totals = { \r\n        projectDays: 0, \r\n        billableDays: 0, \r\n        vacationDays: 0, \r\n        totalDays: 0,\r\n        ros: 0,\r\n        fte: 0,\r\n        corDays: 0\r\n      };\r\n      this.forecasts = forecasts.filter((fc: FcEntry) => fc.monthId === this.month.id);\r\n      this.getUserValues();\r\n      this.teamleads = this.executiveService.calculateTeamleadValues(this.filter, this.team);\r\n    });\r\n\r\n    this.teamSubscription = this.userService.allUsers$\r\n      .subscribe((team: User[]) => {\r\n        this.team = cloneDeep(team);\r\n\r\n        this.getUserValues();\r\n        this.teamleads = this.executiveService.calculateTeamleadValues(this.filter, this.team);\r\n      });\r\n    \r\n  }\r\n\r\n  teamFilterUpdate(filter: string): void {\r\n    this.filter = filter;\r\n    this.teamleads = this.executiveService.calculateTeamleadValues(this.filter, this.team);\r\n  }\r\n\r\n  setTeamleads(): void {\r\n    if (this.filter === 'pl') {\r\n      this.teamleads = this.team\r\n        .filter((u: User) => u.roleId === 1005)\r\n        .map((u: User) => u.id); // u.roleId === env.roles.pl\r\n    } else {\r\n      this.teamleads = this.team\r\n        .filter((u: User) => u.roleId === 1002 || u.roleId === 1005)\r\n        .map((u: User) => u.id); // u.roleId === env.roles.pdl || u.roleId === env.roles.pl\r\n    }\r\n  }\r\n\r\n\r\n  clickOnEdit(id: number, firstName: string, lastName: string) {\r\n    if(this.isEditPermitted())\r\n    {\r\n      this.loadingActive = true;\r\n      \r\n      let dialogRef: any = this.dialog.open(FcEntryDetailDialogComponent,{\r\n        height: 'auto',\r\n        width: 'auto',\r\n        //panelClass: 'getSartedStepper-no-padding-dialog',\r\n        //backdropClass: 'mat-dialog-container',\r\n        data:{\r\n          userId: id,\r\n          month: this.month,\r\n          months: this.months,\r\n          firstName: firstName,\r\n          lastName: lastName\r\n        },\r\n      });\r\n      dialogRef.afterOpened().subscribe(result => {\r\n        this.loadingActive = false;\r\n      });\r\n    }\r\n  }\r\n\r\n  isEditPermitted(): boolean {\r\n    let userId = this.authService.getUserId();\r\n\r\n    if (userId === undefined) {\r\n      return false;\r\n    }\r\n\r\n    let roleId = this.userService.getUser(userId).roleId;\r\n\r\n    if (roleId === undefined) {\r\n      return false;\r\n    }\r\n\r\n    let role = this.userService.getRole(roleId).shortcut;\r\n\r\n    if (role === undefined) {\r\n      return false;\r\n    }\r\n    \r\n    return role === 'HOP' || role === 'MSL';\r\n  }\r\n\r\n  isParent(user: User, parentId: number): boolean {\r\n    if (user.parentId === parentId || parentId === user.id) {\r\n      return true;\r\n\r\n    } else if (this.filter === 'pl') {\r\n      let parent: User = this.team.find((u: User) => u.id === user.parentId);\r\n      let Parantparent: User = this.team.find((u: User) => u.id === parentId);\r\n      if(Parantparent.permission === environment.roles.msl){\r\n        return false;\r\n      }\r\n      else if (parent && parent.parentId === parentId ) {\r\n        return true; \r\n      }\r\n\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  isUserRelevantForMonth(user: User, month: Month) : boolean {\r\n    if(user.endDate && user.startDate && month.time) {\r\n      var endMonth = new Date(user.endDate);\r\n      endMonth = new Date(endMonth.getFullYear(), endMonth.getMonth(), 1);\r\n      var startMonth = new Date(user.startDate);\r\n      startMonth = new Date(startMonth.getFullYear(), endMonth.getMonth(), 1);\r\n      var monthMonth = new Date(month.time);\r\n      monthMonth = new Date(monthMonth.getFullYear(), monthMonth.getMonth(), 1)\r\n      if(startMonth <= endMonth) {\r\n        if(monthMonth > endMonth) {\r\n          return false;\r\n        }\r\n      } else if(startMonth > endMonth) {\r\n        if(monthMonth <= startMonth && monthMonth >= endMonth) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  getChildData(parentId: number): MatTableDataSource<User> {\r\n    // let userDataArray: User[];\r\n    // userDataArray.push(this.team.find((u: User) => u.id === parentId));\r\n    // userDataArray.push();\r\n    return new MatTableDataSource<User>(this.team.filter((u: User) => this.isParent(u, parentId) && this.isUserRelevantForMonth(u, this.month)));\r\n  }\r\n\r\n  /**\r\n   * Return value for given type (used for arve + urve + revenue + workingdays)\r\n   * @param type\r\n   * @param userId\r\n   */\r\n  getTeamValue(type: string, userId: number): number {\r\n    return 0;\r\n  }\r\n  calcARVE( projectDays: number, vacationDays: number, totalDays : number): number{\r\n      if( ( projectDays / (totalDays - vacationDays) > 0)){\r\n        return (projectDays / (totalDays - vacationDays)) * 100;\r\n      }  \r\n      else {\r\n        return 0;\r\n      }\r\n  }\r\n\r\n  calcURVE(billableDays: number, vacationDays: number, totalDays : number): number{\r\n    if ( ( billableDays / (totalDays - vacationDays) > 0)){\r\n      return (billableDays / (totalDays - vacationDays)) * 100;\r\n    }\r\n    else {\r\n      return 0;\r\n    }\r\n  }\r\n  \r\n  submitAll(): void {\r\n    let dialogRef: MatDialogRef<ConfirmMessageDialog> = this.dialog.open(ConfirmMessageDialog, {\r\n      data: {\r\n        message: 'Are you sure you want to submit all forecasts?',\r\n        button: { cancel: 'No', submit: 'Yes' },\r\n      },\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((submit: boolean) => {\r\n      if (submit === true) {\r\n        this.pageState.showSpinner();\r\n        this.setLockState(true, this.userId ,'All forecast entries are successfully submitted.', 'Forecast entries could not be submitted. Please try again later.');\r\n      }\r\n      \r\n    });\r\n  }\r\n\r\n  setLockState(locked: boolean, role: number, messageSuccess: string, messageFail: string): void {\r\n    let level: number = 3;\r\n    \r\n\r\n    this.teamForecastService.setForecastsLockState(this.month.id, level, locked)\r\n      .then((forecasts: FcEntry[]) => {\r\n        if (forecasts) {\r\n          this.forecastService.addForecasts(forecasts, true);\r\n        } else {\r\n          this.forecastService.setTeamLockState(this.month.id, level, role); \r\n        }\r\n\r\n        this.snackBar.open(messageSuccess, 'OK', { duration: 10000, });\r\n        this.pageState.hideSpinner();\r\n      }).catch(() => {\r\n        this.snackBar.open(messageFail, 'OK', { duration: 10000, });\r\n        this.pageState.hideSpinner();\r\n      });\r\n  }\r\n\r\n  forecastState(type: string, userId: number): boolean  {\r\n    if (type === 'locked') {\r\n      return this.forecasts.find((fc: FcEntry) => fc.monthId == this.month.id && fc.userId == userId && fc.locked == -1) != undefined;\r\n    } else {\r\n      return true;\r\n    } \r\n    \r\n    //else {\r\n    //   return this.forecastService.checkForecastState(type, this.month.id, userId);\r\n    // }\r\n  }\r\n  // forecastState(type: string, userId: number): boolean | string {\r\n  //   if (type === 'locklevel') {\r\n  //     return this.userService.getRoleName(this.forecastService.getForecastLockLevel(this.month.id, userId));\r\n  //   } else {\r\n  //     return this.forecastService.checkForecastState(type, this.month.id, userId);\r\n  //   }\r\n  // }\r\n\r\n  unlockAll(): void {\r\n    let dialogRef: MatDialogRef<ConfirmMessageDialog> = this.dialog.open(ConfirmMessageDialog, {\r\n      data: {\r\n        message: 'Are you sure you want to unlock all forecasts?',\r\n        button: { cancel: 'No', submit: 'Yes' },\r\n      },\r\n    });\r\n    dialogRef.afterClosed().subscribe((submit: boolean) => {\r\n      if (submit === true) {\r\n        this.pageState.showSpinner();\r\n        for(let member of this.team) {\r\n          this.forecastService.unlockForecast(this.month.id, member.id);\r\n        }\r\n        //this.forecastService.unlockForecast(this.month.id, this.userId);\r\n        this.pageState.hideSpinner();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param status \r\n   * changes the status of pl or pdl and sends it to parent\r\n   */\r\n  changeView(status: string): void {\r\n    this.viewSwitch.emit(status);\r\n  }\r\n\r\n  /**\r\n   * \r\n   */\r\n  ngOnDestroy(): void {\r\n    this.teamSubscription.unsubscribe();\r\n  }\r\n\r\n  public getTotal(property: string): number {\r\n    if(property === 'ARVE') {\r\n      return this.calcARVE(this.totals.projectDays, this.totals.vacationDays, this.totals.totalDays);\r\n    } else if(property === 'URVE') {\r\n      return this.calcURVE(this.totals.billableDays, this.totals.vacationDays, this.totals.totalDays);\r\n    } else if(property === 'COR') {\r\n      return this.totals.ros / this.totals.corDays;\r\n    } else {\r\n      return 3;\r\n    }\r\n  }\r\n\r\n  private getUserValues(): void {\r\n    this.team.forEach((user: any) => {\r\n      const forecast: FcEntry = this.forecasts.find((fc: FcEntry) => fc.userId === user.id);\r\n\r\n      if (!forecast) {\r\n        user.projects = [];\r\n        user.projectDays = 0;\r\n        user.billableDays = 0;\r\n        user.vacationDays = 0;\r\n        user.totalDays = 0;\r\n        user.cor = 0;\r\n        user.ros = 0;\r\n        user.arve = 0;\r\n        user.urve = 0;\r\n        user.fte = 0;\r\n      } else {\r\n        user.projects = forecast.projects\r\n           ? forecast.projects\r\n             .filter((fcp: FcProject) => this.projects.find((p: Project) => (p.id === fcp.projectId && (p.projectType === 0 || p.projectType === 5))))\r\n             .map((fcp: FcProject) => this.projects.find(p => p.id === fcp.projectId).name)\r\n           : [];\r\n        user.projectDays = forecast.billableDays + forecast.nonbillableProjectDays;\r\n        user.billableDays = forecast.billableDays;\r\n        user.vacationDays = forecast.vacationDays;\r\n        user.totalDays = forecast.totalDays;\r\n        user.cor = forecast.cor ? forecast.cor : 0;\r\n        user.ros = forecast.ros ? forecast.ros : 0;\r\n        user.arve = (forecast.arve * 100).toFixed(0);\r\n        user.urve = (forecast.urve * 100).toFixed(0);\r\n        user.fte = forecast.fte ? forecast.fte : 0; // changed as it is not correct to add the users fte when the forecast fte is Null\r\n      }\r\n      this.fte += user.fte;\r\n\r\n      this.totals.fte += user.fte;\r\n      this.totals.ros += user.ros;\r\n\r\n      if (forecast) {\r\n        forecast.projects.forEach(fp => {\r\n          if( fp.billable && fp.cor !== 0) {\r\n            this.totals.corDays += fp.plannedProjectDays\r\n          }  \r\n        });\r\n      }\r\n      // forecast.projects.forEach((pe:FcProject) => { if( pe.billable && pe.plannedProjectDays !== 0)  this.totals.corDays += pe.plannedProjectDays} );\r\n\r\n      if(forecast && forecast.isRelevant) {\r\n        this.totals.projectDays += user.projectDays;\r\n        this.totals.vacationDays += user.vacationDays;\r\n        this.totals.totalDays += user.totalDays;\r\n        this.totals.billableDays += user.billableDays;\r\n      }\r\n    });\r\n  }\r\n\r\n  exportCSV(): void {\r\n    this.pageState.showSpinner();\r\n\r\n    let lineEnding = \"\\r\\n\";\r\n    let header: string = \"Month;\" + this.month.name + lineEnding\r\n      + \"Working Days;\" + this.month.workingdays + lineEnding\r\n      + \"Name;Global ID;Prod Unit Code;FTE;Paid Days;Project Days;Billable Days;Vacation Days;ARVE;URVE;Revenue;COR\"\r\n      + lineEnding;\r\n    \r\n    let body = \"\";\r\n\r\n    let totalPaidDays = 0;\r\n    let totalProjectDays = 0;\r\n    let totalBillableDays = 0;\r\n    let totalVacationDays = 0;\r\n    let totalROS = 0;\r\n    let totalFTE = 0;\r\n\r\n    this.team.forEach((user: any) => {\r\n      \r\n      let line = user.firstName + \" \" + user.lastName + \";\" //Name\r\n        + this.numberToString(user.globalId.toFixed(0)) + \";\" //Global ID\r\n        + user.prodUnitCode + \";\" //Production Unit COde\r\n        + this.numberToString(user.fte) + \";\" //FTE\r\n        + this.numberToString(user.fte * parseInt(this.month.workingdays)) + \";\" //Paid Days\r\n        + this.numberToString(user.projectDays) + \";\" //Project Days\r\n        + this.numberToString(user.billableDays) + \";\" //Billable Days\r\n        + this.numberToString(user.vacationDays) + \";\" //Vactaion Days\r\n        + this.numberToString(user.arve / 100, 4) + \";\" //ARVE\r\n        + this.numberToString(user.urve / 100, 4) + \";\" //URVE\r\n        + this.numberToString(user.ros) + \";\" //ROS\r\n        + this.numberToString(user.cor)  //COR\r\n        + lineEnding;\r\n      body = body + line;\r\n      totalPaidDays += user.fte * parseInt(this.month.workingdays);\r\n      totalProjectDays += user.projectDays;\r\n      totalBillableDays += user.billableDays;\r\n      totalVacationDays += user.vacationDays;\r\n      totalROS += user.ros;\r\n      totalFTE += user.fte\r\n    });\r\n\r\n    let summaryHeader = \"Summary;\" + this.month.name + lineEnding\r\n      + \"FTE;Paid Days;Project Days;Billable Days;Vacation Days;ARVE;URVE;Revenue;Weighted COR\" \r\n      + lineEnding;\r\n    let summaryLine = this.numberToString(this.totals.fte) + \";\" \r\n      + this.numberToString(this.totals.totalDays) + \";\" \r\n      + this.numberToString(this.totals.projectDays) + \";\" \r\n      + this.numberToString(this.totals.billableDays) + \";\" \r\n      + this.numberToString(this.totals.vacationDays) + \";\" \r\n      + this.numberToString((this.totals.projectDays) / (this.totals.totalDays - this.totals.vacationDays), 4) + \";\"\r\n      + this.numberToString(this.totals.billableDays / (this.totals.totalDays - this.totals.vacationDays), 4) + \";\"\r\n      + this.numberToString(this.totals.ros) + \";\"\r\n      + this.numberToString(this.totals.ros / this.totals.corDays)\r\n      + lineEnding;\r\n    \r\n    const data = header + body + lineEnding + lineEnding + summaryHeader + summaryLine;\r\n    const blob: Blob = new Blob([data], { type: \"text/csv\" });\r\n    const filename: string = this.datePipe.transform(new Date(), \"yyyyMMdd\") + \"-AllOverview.csv\";    \r\n\r\n    this.pageState.hideSpinner();\r\n\r\n    if (window.navigator.msSaveOrOpenBlob) {\r\n      window.navigator.msSaveOrOpenBlob(blob, filename);\r\n    } else {\r\n      const url: string = window.URL.createObjectURL(blob);\r\n\r\n      let a: HTMLAnchorElement = document.createElement(\"a\");\r\n      a.href = url;\r\n      a.download = filename;\r\n\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      document.body.removeChild(a);\r\n      window.URL.revokeObjectURL(url);\r\n    }\r\n  }\r\n\r\n  numberToString(no: number, precision: number = 2): string {\r\n    return no.toLocaleString(\"de\",  { minimumFractionDigits: precision } ).replace(\".\",\"\");\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../assets/styles/variables.scss';\n\n.headermargin {\n  margin: 20px 0px 0px 20px;\n}\n\n.mat-button-toggle-group {\n  margin: 20px 30px 0;\n  background-color: map-get($font-colors, white);\n  font-size: 1.1em;\n  border-radius: 4px;\n}\n\n.mat-button-toggle {\n  background-color: map-get($font-colors, white);\n  color: map-get($font-colors, blue);\n  border-right: 1px solid #0070AD;\n  width: 150px;\n\n  .mat-icon {\n    color: map-get($font-colors, blue);\n  }\n\n  &:hover {\n    background-color: map-get($bg-colors, light);\n    \n  }\n\n  &:last-child {\n    border: none;\n  }\n}\n\n.mat-icon:hover {\n  cursor: pointer;\n}\n\n.mat-button-toggle-checked, .mat-button-toggle-checked .mat-icon {\n  background-color: map-get($font-colors, blue);\n  color: map-get($font-colors, white);\n\n  &:hover {\n    background-color: map-get($font-colors, blue);\n  }\n}\n\n.accordion-header {\n  display: flex;\n  flex: 1;\n  flex-direction: row;\n  align-items: center;\n  padding: 15px 45px 15px 15px;\n  color: map-get($font-colors, black);\n  margin-right: 8px;\n  position: sticky;\n\n  div {\n    display: flex;\n    flex-grow: 1;\n    width: 0;\n    margin-right: 0;\n\n    &:first-child {\n      padding-left: 10px;\n    }\n\n    &:last-child {\n      flex-grow: 2;\n      text-align: center;\n    }\n\n    span {\n      flex: 1;\n      word-break: break-word;\n    }\n  }\n}\n\n.mat-expansion-panel {\n\tborder-radius: 0;\n\tmargin: 0;\n  \n  /**\n\t&.mat-expanded {\n\t\tmargin-top: 16px;\n\t\tmargin-bottom: 16px;\n  }\n  */\n\n  .mat-expansion-panel-header-description, .mat-expansion-panel-header-title {\n    font-size: 1.1rem;\n    line-height: 1.2rem;\n    width: 0;\n    align-items: center;\n    flex-grow: 1;\n\n    .mat-cell {\n      font-size: 1.1rem;\n    }\n  }\n  \n  .mat-expansion-panel-header-description {\n    text-align: center; \n    flex-grow: 2;\n  }\n}\n\n.mat-table {\n  padding-right: 24px;\n  position: relative;\n\n  .edit-button {\n    position: absolute;\n    right: 30px;\n  }\n}\n\n.mat-cell, .mat-header-cell {\n  flex: 1;\n  color: map-get($font-colors, black);\n  width: 8.33%;\n  text-align: center;\n}\n\ntd.mat-cell:first-of-type, td.mat-footer-cell:first-of-type, th.mat-header-cell:first-of-type,\ntd.mat-cell:nth-of-type(2), td.mat-footer-cell:nth-of-type(2), th.mat-header-cell:nth-of-type(2) {\n\tpadding-left: 10px;\n  flex-grow: 4;\n  width: 16.66%;\n}\n\ntd.mat-cell:first-of-type, td.mat-footer-cell:first-of-type, th.mat-header-cell:first-of-type {\n  text-align: left;\n}\n\n.mat-icon {\n\tfont-size: 20px;\n\tline-height: 20px;\n\n\t&:hover {\n    color: map-get($font-colors, blue);\n\t}\n\n\t&.icon-edited, &.icon-edited:hover {\n\t\tcolor: map-get($font-colors, red);\n\t}\n}\n\n.mat-primary-reversed {\n\n  .align-right {\n    right: 0px;\n  }\n} \n\n.fte {\n  position: absolute;\n  right: 0;\n  display: inline;\n  .mat-icon{\n    position: relative;\n    margin: 5px;\n    margin-top: 20px;\n  }\n  span{\n    color: #00000061;\n    text-align: center;\n    padding-top: 0px;\n    padding: 10px;\n    text-align: center;\n  }\n}\nh3{\n  display: inline;\n  .mat-stroked-button {\n\t  margin: 5px;\n\t  margin-left: 0;\n  }\n}\n\n.button-rows {\n\tdisplay: flex;\n\t.button-row {\n    width: 50%\n  }\n}",
                    "styleUrl": "./executive-detail.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor for teamlead-summary component</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "teamForecastService",
                        "type": "TeamForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 94,
                "rawdescription": "\n\nconstructor for teamlead-summary component\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 2885,
                            "end": 2901,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "utilitiesService"
                        },
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2879,
                            "end": 2884,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 2915,
                            "end": 2930,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "forecastService"
                        },
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2909,
                            "end": 2914,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 2977,
                            "end": 2988,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "userService"
                        },
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2971,
                            "end": 2976,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 2944,
                            "end": 2963,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "teamForecastService"
                        },
                        "type": "TeamForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2938,
                            "end": 2943,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 2865,
                            "end": 2871,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialog"
                        },
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2859,
                            "end": 2864,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 2843,
                            "end": 2851,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "datePipe"
                        },
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2837,
                            "end": 2842,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 3002,
                            "end": 3011,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "pageState"
                        },
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2996,
                            "end": 3001,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div style=\"margin: 10px;\">\r\n\t<h3 class=\"headermargin\">Teams</h3>\r\n\t<div class=\"fte\" style=\"position: absolute; right: 0px;\">\r\n\t\t<span> FTE {{fte | number: '1.0-1': 'de'}} </span>\r\n\t</div>\r\n</div>\r\n<mat-button-toggle-group appearance=\"legacy\" aria-label=\"Role\" #group=\"matButtonToggleGroup\" [value]=\"filter\"\r\n\t(change)=\"teamFilterUpdate(group.value)\">\r\n\t<mat-button-toggle value=\"pl\" (click)=\"changeView('pl')\">\r\n\t\t<mat-icon>supervisor_account</mat-icon> PL Teams\r\n\t</mat-button-toggle>\r\n\t<mat-button-toggle value=\"pdl\" (click)=\"changeView('pdl')\">\r\n\t\t<mat-icon>supervisor_account</mat-icon> PDL Teams\r\n\t</mat-button-toggle>\r\n</mat-button-toggle-group>\r\n<button mat-stroked-button class=\"mat-primary-reversed\" (click)=\"submitAll()\"\r\n\tstyle=\"position: absolute; right: 220px; margin-right: 120px; margin: 20px;\">\r\n\t<mat-icon>lock</mat-icon> Submit all Forecasts\r\n</button>\r\n<button mat-stroked-button class=\"mat-primary-reversed\" (click)=\"unlockAll()\"\r\n\tstyle=\"position: absolute; right: 0px; margin-right: 30px; margin: 20px;\">\r\n\t<mat-icon>lock_open</mat-icon> Unlock all forecasts\r\n</button>\r\n\r\n\r\n<div layout=\"row\" layout-wrap *ngIf=\"teamleads.length > 0\">\r\n\t<div flex=\"100\">\r\n\t\t<div class=\"mat-row accordion-header\">\r\n\t\t\t<div>Name</div>\r\n\t\t\t<div>\r\n\t\t\t\t<span>Production Unit Code</span>\r\n\t\t\t\t<span>Project Days</span>\r\n\t\t\t\t<span>Billable Days</span>\r\n\t\t\t\t<span>Vacation Days</span>\r\n\t\t\t\t<span>Paid Days</span>\r\n\t\t\t\t<span>COR</span>\r\n\t\t\t\t<span>ROS</span>\r\n\t\t\t\t<span>ARVE</span>\r\n\t\t\t\t<span>URVE</span>\r\n\t\t\t\t<span>FTE</span>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t<mat-accordion displayMode=\"flat\" multi>\r\n\t\t\t<mat-expansion-panel>\r\n\t\t\t\t<mat-expansion-panel-header>\r\n\t\t\t\t\t<mat-panel-title>Total</mat-panel-title>\r\n\t\t\t\t\t<mat-panel-description>\r\n\t\t\t\t\t\t<span class=\"mat-cell\"></span>\r\n\t\t\t\t\t\t<span class=\"mat-cell\">{{totals.projectDays | number:'1.0-2':'de'}}</span>\r\n\t\t\t\t\t\t<span class=\"mat-cell\">{{totals.billableDays | number:'1.0-2':'de'}}</span>\r\n\t\t\t\t\t\t<span class=\"mat-cell\">{{totals.vacationDays | number:'1.0-2':'de'}}</span>\r\n\t\t\t\t\t\t<span class=\"mat-cell\">{{totals.totalDays | number:'1.0-2':'de'}}</span>\r\n\t\t\t\t\t\t<span class=\"mat-cell\">&euro; {{getTotal('COR') | number:'1.0-2':'de'}}</span>\r\n\t\t\t\t\t\t<span class=\"mat-cell\">&euro; {{totals.ros | number:'1.0-2':'de'}}</span>\r\n\t\t\t\t\t\t<span class=\"mat-cell\">{{getTotal('ARVE') | number: '1.0-2': 'de'}}%</span>\r\n\t\t\t\t\t\t<span class=\"mat-cell\">{{getTotal('URVE') | number: '1.0-2': 'de'}}%</span>\r\n\t\t\t\t\t\t<span class=\"mat-cell\">{{totals.fte | number:'1.0-2':'de'}}</span>\r\n\t\t\t\t\t</mat-panel-description>\r\n\t\t\t\t</mat-expansion-panel-header>\r\n\t\t\t</mat-expansion-panel>\r\n\r\n\t\t\t<mat-expansion-panel *ngFor=\"let teamlead of teamleads; let i = index\">\r\n\t\t\t\t<mat-expansion-panel-header>\r\n\t\t\t\t\t<mat-panel-title>\r\n\t\t\t\t\t\t{{teamlead.name}}\r\n\t\t\t\t\t</mat-panel-title>\r\n\t\t\t\t\t<mat-panel-description>\r\n\t\t\t\t\t\t<span class=\"mat-cell\" >{{teamlead.prodUnitCode}}</span>\r\n\t\t\t\t\t\t<span class=\"mat-cell\">{{teamlead.projectDays | number: '1.0-1': 'de'}}</span>\r\n\t\t\t\t\t\t<span class=\"mat-cell\">{{teamlead.billableDays | number: '1.0-1': 'de'}}</span>\r\n\t\t\t\t\t\t<span class=\"mat-cell\">{{teamlead.vacationDays | number: '1.0-1': 'de'}}</span>\r\n\t\t\t\t\t\t<span class=\"mat-cell\">{{teamlead.totalDays | number: '1.0-1': 'de' }}</span>\r\n\t\t\t\t\t\t<span class=\"mat-cell\">&euro;\r\n\t\t\t\t\t\t\t{{teamlead.cor | number: '1.0-1': 'de' }}\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t<span class=\"mat-cell\">&euro;\r\n\t\t\t\t\t\t\t{{teamlead.ros | number:'1.0-2':'de' }}</span>\r\n\t\t\t\t\t\t<span class=\"mat-cell\">{{calcARVE(teamlead.projectDays,teamlead.vacationDays,teamlead.totalDays)\r\n\t\t\t\t\t\t\t| number: '1.0-2': 'de'}}%</span>\r\n\t\t\t\t\t\t<span\r\n\t\t\t\t\t\t\tclass=\"mat-cell\">{{calcURVE(teamlead.billableDays,teamlead.vacationDays,teamlead.totalDays)\r\n\t\t\t\t\t\t\t| number: '1.0-2': 'de'}}%</span>\r\n\t\t\t\t\t\t<span class=\"mat-cell\">{{teamlead.fte | number: '1.0-2': 'de'}}</span>\r\n\t\t\t\t\t</mat-panel-description>\r\n\t\t\t\t</mat-expansion-panel-header>\r\n\r\n\t\t\t\t<table mat-table [dataSource]=\"getChildData(teamlead.id)\" id=\"\">\r\n\t\t\t\t\t<ng-container matColumnDef=\"name\">\r\n\t\t\t\t\t\t<th mat-header-cell *matHeaderCellDef> Name </th>\r\n\t\t\t\t\t\t<td mat-cell *matCellDef=\"let user\"> {{user.firstName}} {{user.lastName}} </td>\r\n\t\t\t\t\t</ng-container>\r\n\r\n\t\t\t\t\t<ng-container matColumnDef=\"projects\">\r\n\t\t\t\t\t\t<th mat-header-cell *matHeaderCellDef> Projects </th>\r\n\t\t\t\t\t\t<td mat-cell *matCellDef=\"let user\">\r\n\t\t\t\t\t\t\t<ng-container *ngFor=\"let project of user.projects; let last = last\">\r\n\t\t\t\t\t\t\t\t{{project}}{{ last ? '': ', '}}\r\n\t\t\t\t\t\t\t</ng-container>\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t</ng-container>\r\n\r\n\t\t\t\t\t<ng-container matColumnDef=\"lockstate\">\r\n\t\t\t\t\t\t<th mat-header-cell *matHeaderCellDef> Lockstate </th>\r\n\t\t\t\t\t\t<td mat-cell *matCellDef=\"let user\">\r\n\t\t\t\t\t\t\t<mat-icon *ngIf=\"forecastState('locked', user.id)\" class=\"icon-locked\">lock</mat-icon>\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t</ng-container>\r\n\r\n\t\t\t\t\t<ng-container matColumnDef=\"globalId\">\r\n\t\t\t\t\t\t<th mat-header-cell *matHeaderCellDef> Global ID </th>\r\n\t\t\t\t\t\t<td mat-cell *matCellDef=\"let user\"> {{user.globalId}}</td>\r\n\t\t\t\t\t</ng-container>\r\n\r\n\t\t\t\t\t<ng-container matColumnDef=\"projectDays\">\r\n\t\t\t\t\t\t<th mat-header-cell *matHeaderCellDef> Project Days </th>\r\n\t\t\t\t\t\t<td mat-cell *matCellDef=\"let user\"> {{user.projectDays | number: '1.0-1':'de'}}</td>\r\n\t\t\t\t\t</ng-container>\r\n\r\n\t\t\t\t\t<ng-container matColumnDef=\"billableDays\">\r\n\t\t\t\t\t\t<th mat-header-cell *matHeaderCellDef> Billable Days </th>\r\n\t\t\t\t\t\t<td mat-cell *matCellDef=\"let user\"> {{user.billableDays | number: '1.0-1':'de'}}</td>\r\n\t\t\t\t\t</ng-container>\r\n\r\n\t\t\t\t\t<ng-container matColumnDef=\"vacationDays\">\r\n\t\t\t\t\t\t<th mat-header-cell *matHeaderCellDef> Vacation Days </th>\r\n\t\t\t\t\t\t<td mat-cell *matCellDef=\"let user\"> {{user.vacationDays | number: '1.0-1':'de'}}</td>\r\n\t\t\t\t\t</ng-container>\r\n\r\n\t\t\t\t\t<ng-container matColumnDef=\"totalDays\">\r\n\t\t\t\t\t\t<th mat-header-cell *matHeaderCellDef> Paid Days </th>\r\n\t\t\t\t\t\t<td mat-cell *matCellDef=\"let user\"> {{user.totalDays | number: '1.0-1':'de'}}</td>\r\n\t\t\t\t\t</ng-container>\r\n\r\n\t\t\t\t\t<ng-container matColumnDef=\"cor\">\r\n\t\t\t\t\t\t<th mat-header-cell *matHeaderCellDef> COR </th>\r\n\t\t\t\t\t\t<td mat-cell *matCellDef=\"let user\"> € {{user.cor | number:'1.0-2':'de'}} </td>\r\n\t\t\t\t\t</ng-container>\r\n\r\n\t\t\t\t\t<ng-container matColumnDef=\"ros\">\r\n\t\t\t\t\t\t<th mat-header-cell *matHeaderCellDef> ROS </th>\r\n\t\t\t\t\t\t<td mat-cell *matCellDef=\"let user\"> € {{user.ros | number:'1.0-2':'de'}} </td>\r\n\t\t\t\t\t</ng-container>\r\n\r\n\t\t\t\t\t<ng-container matColumnDef=\"arve\">\r\n\t\t\t\t\t\t<th mat-header-cell *matHeaderCellDef> ARVE </th>\r\n\t\t\t\t\t\t<td mat-cell *matCellDef=\"let user\"> {{user.arve | number: '1.0-2' : 'de'}}% </td>\r\n\t\t\t\t\t</ng-container>\r\n\r\n\t\t\t\t\t<ng-container matColumnDef=\"urve\">\r\n\t\t\t\t\t\t<th mat-header-cell *matHeaderCellDef> URVE </th>\r\n\t\t\t\t\t\t<td mat-cell *matCellDef=\"let user\"> {{user.urve | number: '1.0-2' : 'de'}}% </td>\r\n\t\t\t\t\t</ng-container>\r\n\t\t\t\t\t<ng-container matColumnDef=\"edit\">\r\n\t\t\t\t\t\t<th mat-header-cell *matHeaderCellDef class=\"action-button\"></th>\r\n\t\t\t\t\t\t<td mat-cell *matCellDef=\"let user\" class=\"action-button\"\r\n\t\t\t\t\t\t\t(click)=\"clickOnEdit(user.id, user.firstName, user.lastName)\">\r\n\t\t\t\t\t\t\t<mat-icon *ngIf=\"isEditPermitted()\" class=\"mat-icon-edit\">edit</mat-icon>\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t</ng-container>\r\n\t\t\t\t\t<tr mat-header-row\r\n\t\t\t\t\t\t*matHeaderRowDef=\"['name','lockstate','globalId' , 'projects', 'projectDays', 'billableDays', 'vacationDays', 'totalDays', 'cor', 'ros', 'arve', 'urve', 'edit']\">\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr mat-row\r\n\t\t\t\t\t\t*matRowDef=\"let row; columns: ['name', 'lockstate','globalId', 'projects', 'projectDays', 'billableDays', 'vacationDays', 'totalDays', 'cor', 'ros', 'arve', 'urve', 'edit'];\">\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</table>\r\n\t\t\t</mat-expansion-panel>\r\n\t\t</mat-accordion>\r\n\t</div>\r\n\r\n\t<div layout=\"row\" layout-wrap>\r\n\t\t<button mat-stroked-button class=\"mat-primary-reversed\" class=\"button-rows\" color=\"primary\"\r\n\t\t\t(click)=\"exportCSV()\">\r\n\t\t\t<mat-icon>insert_drive_file</mat-icon> Export CSV\r\n\t\t</button>\r\n\t</div>\r\n</div>"
        },
        {
            "name": "ExecutiveFcEntryComponent",
            "id": "component-ExecutiveFcEntryComponent-e37f8a0014b9deb7eabb08ecf90fceea",
            "file": "src/app/forecast/dialogs/executive-fc-entry/executive-fc-entry.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-executive-fc-entry",
            "styleUrls": [
                "./executive-fc-entry.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./executive-fc-entry.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<ExecutiveFcEntryComponent>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit } from \"@angular/core\";\nimport { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material/dialog\";\n\n\n@Component({\n  selector: 'app-executive-fc-entry',\n  templateUrl: './executive-fc-entry.component.html',\n  styleUrls: ['./executive-fc-entry.component.scss']\n})\nexport class ExecutiveFcEntryComponent implements OnInit {\n\n  constructor(\n    public dialogRef: MatDialogRef<ExecutiveFcEntryComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n  ) { }\n\n  ngOnInit() {\n  }\n\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".back{\n    background-color: #f1f5f8;\n    margin: 0px;\n    height: 100%;\n}",
                    "styleUrl": "./executive-fc-entry.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ExecutiveFcEntryComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ExecutiveFcEntryComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"back\">\n  <div >\n    <h1 class=\"title\">FAQ</h1>\n  </div>\n\n  <div class=\"content\">\n    <h1 class=\"title\">FAQ</h1>\n    <h1 class=\"title\">FAQ</h1>\n    <h1 class=\"title\">FAQ</h1>\n    <h1 class=\"title\">FAQ</h1>\n    <h1 class=\"title\">FAQ</h1>\n    <h1 class=\"title\">FAQ</h1>\n   \n  </div>\n</div>"
        },
        {
            "name": "ExecutiveStatsComponent",
            "id": "component-ExecutiveStatsComponent-257704db2a390f0b6a6b1346f26deb92",
            "file": "src/app/forecast/components/executive-stats/executive-stats.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-executive-stats",
            "styleUrls": [
                "./executive-stats.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./executive-stats.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "months",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "Month[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "arve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "arveUrveChart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "billableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "cor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "corChart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "daysChart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "externalRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "firmDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "graphicData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GraphicSummaryReport[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "internalRevenue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "namedLikelyDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "nonBillableDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "probabilitiesChart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "revenueChart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "ros",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "selectedIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Number",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "teamLabels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "unnamedDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "urve",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "workingDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "initCharts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, ElementRef } from \"@angular/core\";\nimport { Chart } from \"chart.js\";\nimport { Month } from \"../../../core/interfaces/month\";\nimport { ExecutiveForecastsService } from '../../../core/services/forecasts/executive-forecasts.service';\nimport { GraphicSummaryReport, GraphicSummaryProbabilityEntry, GraphicSummaryProjectTypeEntry } from '../../../core/interfaces/graphicData';\n@Component({\n  selector: \"app-executive-stats\",\n  templateUrl: \"./executive-stats.component.html\",\n  styleUrls: [\"./executive-stats.component.scss\"]\n})\nexport class ExecutiveStatsComponent implements OnInit {\n  @Input() months: Month[];\n\n  graphicData: GraphicSummaryReport[];\n\n  arve: number[];\n\n  urve: number[];\n\n  externalRevenue: number[];\n\n  ros: number[];\n\n  teamLabels: string[];\n\n  workingDays: number[];\n\n  namedLikelyDays: number[];\n\n  firmDays: number[];\n\n  unnamedDays: number[];\n  \n  nonBillableDays: number[];\n\n  billableDays: number[];\n\n  cor: number[];\n\n  internalRevenue: number[];\n\n  selectedIndex: Number = 0;\n  /*\n   *ChartJs object which will render the Teams chart\n   */\n  daysChart;\n  probabilitiesChart;\n  arveUrveChart;\n  corChart;\n  revenueChart;\n\n  constructor(\n    private elementRef: ElementRef,\n    private executiveService: ExecutiveForecastsService\n  ) {}\n\n  ngOnInit() {\n    this.executiveService.graphicData$.subscribe((reports: GraphicSummaryReport[]) => {\n      this.graphicData = reports;\n      this.arve = [];\n      this.urve = [];\n      this.externalRevenue = [];\n      this.ros = [];\n      this.teamLabels = [];\n      this.workingDays = [];\n      this.namedLikelyDays = [];\n      this.firmDays = [];\n      this.unnamedDays = [];\n      this.nonBillableDays = [];\n      this.billableDays = [];\n      this.cor = [];\n      this.internalRevenue = [];\n\n      for (let report of reports) {\n        this.arve.push(report.arve * 100);\n        this.urve.push(report.urve * 100);\n        this.externalRevenue.push(report.externalRevenue);\n        this.ros.push(report.ros);\n        this.teamLabels.push(report.team);\n        this.workingDays.push(report.workingDays);\n\n        for(let entry of report.probabilities) {\n          if(entry.probability === 'Firm') {\n            this.firmDays.push(entry.days);\n          } else if(entry.probability === 'Named Likely') {\n            this.namedLikelyDays.push(entry.days);\n          } else if(entry.probability === \"Unnamed\") {\n            this.unnamedDays.push(entry.days);\n          }\n        }\n\n        for(let entry of report.projectTypes) {\n          if(entry.projectType === \"Non Billable\") {\n            this.nonBillableDays.push(entry.days);\n          } else if(entry.projectType === \"Billable\") {\n            this.billableDays.push(entry.days);\n          }\n        }\n\n        this.cor.push(report.cor);\n        this.internalRevenue.push(report.ros - report.externalRevenue);\n      }\n\n      this.initCharts();\n    });\n  }\n\n  initCharts() {\n    let daysChartCanvas = this.elementRef.nativeElement.querySelector(\n      `#daysChart`\n    );\n    let daysChartRef = daysChartCanvas.getContext(\"2d\");\n    this.daysChart = new Chart(daysChartRef, {\n      type: \"bar\",\n      data: {\n        labels: this.teamLabels,\n        datasets: [\n          {\n            label: \"Working Days\",\n            backgroundColor: \"#0ba7fb\",\n            data: this.workingDays\n          },\n          {\n            label: \"Billable Days\",\n            backgroundColor: \"#0070ad\",\n            data: this.billableDays\n          },\n          {\n            label: \"Non-Billable Days\",\n            backgroundColor: \"#004569\",\n            data: this.nonBillableDays\n          }\n        ]\n      },\n      options: {\n        legend: {\n          display: true,\n          position: \"top\"\n        },\n        title:{\n          display: true,\n          text: \"Amount of Days grouped by Type\",\n          fontSize: 18\n        },\n        scales: {\n          xAxes: [\n            {\n              display: true,\n              gridLines: {\n                display: false\n              },\n              barPercentage: 0.7,\n              categoryPercentage: 0.5,\n              scaleLabel:  {\n                display: true,\n                labelString: \"Teams/Practices\",\n                fontSize: 18\n              }\n            }\n          ],\n          yAxes: [\n            {\n              display: true,\n              gridLines: {\n                display: false\n              },\n              ticks: {\n                min: 0\n              },\n              scaleLabel:  {\n                display: true,\n                labelString: \"Amount of Days\",\n                fontSize: 18\n              }\n            }\n          ]\n        }\n      }\n    });\n\n    let probabilitiesChartCanvas = this.elementRef.nativeElement.querySelector(\n      `#probabilitiesChart`\n    );\n    let probabilitiesChartRef = probabilitiesChartCanvas.getContext(\"2d\");\n    this.probabilitiesChart = new Chart(probabilitiesChartRef, {\n      type: \"bar\",\n      data: {\n        labels: this.teamLabels,\n        datasets: [\n          {\n            label: \"Firm\",\n            backgroundColor: \"#0ba7fb\",\n            data: this.firmDays\n          },\n          {\n            label: \"Unnamed\",\n            backgroundColor: \"#0070ad\",\n            data: this.unnamedDays\n          },\n          {\n            label: \"Named Likely\",\n            backgroundColor: \"#004569\",\n            data: this.namedLikelyDays\n          }\n        ]\n      },\n      options: {\n        legend: {\n          display: true,\n          position: \"top\"\n        },\n        title:{\n          display: true,\n          text: \"Amount of forecasted days by Teams grouped by Probability\",\n          fontSize: 18\n        },\n        scales: {\n          xAxes: [\n            {\n              display: true,\n              gridLines: {\n                display: false\n              },\n              barPercentage: 0.7,\n              categoryPercentage: 0.5,\n              scaleLabel:  {\n                display: true,\n                labelString: \"Teams/Practices\",\n                fontSize: 18\n              }\n            }\n          ],\n          yAxes: [\n            {\n              display: true,\n              gridLines: {\n                display: false\n              },\n              ticks: {\n                min: 0\n              },\n              scaleLabel: {\n                display: true,\n                labelString: \"Amount of Days\",\n                fontSize: 18\n              }\n            }\n          ]\n        }\n      }\n    });\n\n    let arveUrveChartCanvas = this.elementRef.nativeElement.querySelector(\n      `#arveUrveChart`\n    );\n    let arveUrveChartRef = arveUrveChartCanvas.getContext(\"2d\");\n    this.arveUrveChart = new Chart(arveUrveChartRef, {\n      type: \"bar\",\n      data: {\n        labels: this.teamLabels,\n        datasets: [\n          {\n            label: \"ARVE\",\n            backgroundColor: \"#0ba7fb\",\n            data: this.arve\n          },\n          {\n            label: \"URVE\",\n            backgroundColor: \"#004569\",\n            data: this.urve\n          }\n        ]\n      },\n      options: {\n        legend: {\n          display: true,\n          position: \"top\"\n        },\n        title:{\n          display: true,\n          text: \"ARVE/URVE Average for Teams during Period in %\",\n          fontSize: 18\n        },\n        scales: {\n          xAxes: [\n            {\n              display: true,\n              gridLines: {\n                display: false\n              },\n              barPercentage: 0.7,\n              categoryPercentage: 0.5,\n              scaleLabel:  {\n                display: true,\n                labelString: \"Teams/Practices\",\n                fontSize: 18\n              }\n            }\n          ],\n          yAxes: [\n            {\n              display: true,\n              gridLines: {\n                display: false\n              },\n              ticks: {\n                min: 0,\n                max: 100\n              },\n              scaleLabel: {\n                display: true,\n                labelString: \"ARVE/URVE Average in %\",\n                fontSize: 18\n              }\n            }\n          ]\n        }\n      }\n    });\n\n    let revenueChartCanvas = this.elementRef.nativeElement.querySelector(\n      `#revenueChart`\n    );\n    let revenueChartRef = revenueChartCanvas.getContext(\"2d\");\n    this.revenueChart = new Chart(revenueChartRef, {\n      type: \"bar\",\n      data: {\n        labels: this.teamLabels,\n        datasets: [\n          {\n            label: \"ROS\",\n            backgroundColor: \"#0ba7fb\",\n            data: this.ros\n          },\n          {\n            label: \"Internal\",\n            backgroundColor: \"#0070ad\",\n            data: this.internalRevenue\n          },\n          {\n            label: \"External\",\n            backgroundColor: \"#004569\",\n            data: this.externalRevenue\n          }\n        ]\n      },\n      options: {\n        legend: {\n          display: true,\n          position: \"top\"\n        },\n        title:{\n          display: true,\n          text: \"Revenue in € grouped by type of Revenue\",\n          fontSize: 18\n        },\n        scales: {\n          xAxes: [\n            {\n              display: true,\n              gridLines: {\n                display: false\n              },\n              barPercentage: 0.7,\n              categoryPercentage: 0.5,\n              scaleLabel:  {\n                display: true,\n                labelString: \"Teams/Practices\",\n                fontSize: 18\n              }\n            }\n          ],\n          yAxes: [\n            {\n              display: true,\n              gridLines: {\n                display: false\n              },\n              ticks: {\n                min: 0\n              },\n              scaleLabel:  {\n                display: true,\n                labelString: \"Revenue in €\",\n                fontSize: 18\n              }\n            }\n          ]\n        }\n      }\n    });\n\n    let corChartCanvas = this.elementRef.nativeElement.querySelector(\n      `#corChart`\n    );\n    let corChartRef = corChartCanvas.getContext(\"2d\");\n    this.corChart = new Chart(corChartRef, {\n      type: \"bar\",\n      data: {\n        labels: this.teamLabels,\n        datasets: [\n          {\n            label: \"COR\",\n            backgroundColor: \"#0070ad\",\n            data: this.cor\n          }\n        ]\n      },\n      options: {\n        legend: {\n          display: true,\n          position: \"top\"\n        },\n        title:{\n          display: true,\n          text: \"COR in € averaged by billable Days\",\n          fontSize: 18\n        },\n        scales: {\n          xAxes: [\n            {\n              display: true,\n              gridLines: {\n                display: false\n              },\n              barPercentage: 0.7,\n              categoryPercentage: 0.5\n            }\n          ],\n          yAxes: [\n            {\n              display: true,\n              gridLines: {\n                display: false\n              },\n              ticks: {\n                min: 0\n              },\n              scaleLabel: {\n                display: true,\n                labelString: \"Average of COR (averaged over Billable Days)\",\n                fontSize: 18\n              }\n            }\n          ]\n        }\n      }\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".w-100 {\n  width: 100%;\n}\n\n.w-50 {\n  width: 50%;\n}\n.custom-dimension {\n  height: 80% !important;\n  width: 100% !important;\n  margin: 0 auto;\n}\n\n.chart-dimension {\n  padding-top: 25px;\n  height: 80% !important;\n  width: 80% !important;\n  margin: 0 auto;\n}\n.h-100 {\n  height: 100%;\n}\n\n.h-80vh {\n  max-height: 80vh;\n}\n.p-16 {\n  padding: 16px;\n}\n\n.p-8 {\n  padding: 8px;\n}\n\n.p-32 {\n  padding: 32px;\n}\n\n.pt-16 {\n  padding-top: 16px;\n}\n\n.m-0 {\n  margin: 0;\n}\n\n.bg-white {\n  background: #ffffff;\n}\n.float-left {\n  float: left;\n}\n",
                    "styleUrl": "./executive-stats.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"custom-dimension\">\n  <mat-tab-group headerPosition=\"above\" class=\"m-0\" #chartTabs>\n    <mat-tab label=\"Days\"> </mat-tab>\n    <mat-tab label=\"Probabilities\"> </mat-tab>\n    <mat-tab label=\"ARVE/URVE\"> </mat-tab>\n    <mat-tab label=\"COR\"> </mat-tab>\n    <mat-tab label=\"Revenue\"> </mat-tab>\n  </mat-tab-group>\n  \n  <div class=\"bg-white h-80vh p-16 \" [hidden]=\"chartTabs.selectedIndex !== 0\">\n    <canvas id=\"daysChart\" class=\"chart-dimension\"></canvas>\n  </div>\n\n  <div class=\"bg-white h-80vh p-16 \" [hidden]=\"chartTabs.selectedIndex !== 1\">\n    <canvas id=\"probabilitiesChart\" class=\"chart-dimension\"></canvas>\n  </div>\n\n  <div class=\"bg-white h-80vh p-16 \" [hidden]=\"chartTabs.selectedIndex !== 2\">\n    <canvas id=\"arveUrveChart\" class=\"chart-dimension\"></canvas>\n  </div>\n\n  <div class=\"bg-white h-80vh p-16 \" [hidden]=\"chartTabs.selectedIndex !== 3\">\n    <canvas id=\"corChart\" class=\"chart-dimension\"></canvas>\n  </div>\n  \n  <div class=\"bg-white h-80vh p-16 \" [hidden]=\"chartTabs.selectedIndex !== 4\">\n    <canvas id=\"revenueChart\" class=\"chart-dimension\"></canvas>\n  </div>\n</div>\n"
        },
        {
            "name": "ExecutiveSummaryComponent",
            "id": "component-ExecutiveSummaryComponent-ac20f4385d75b1185bf257f4675587a0",
            "file": "src/app/forecast/components/executive-summary/executive-summary.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-executive-summary",
            "styleUrls": [
                "./executive-summary.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./executive-summary.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "summary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "displayedColumns",
                    "defaultValue": "[\n    \"probabilityId\",\n    \"total\",\n    \"billableDays\",\n    \"vacationDays\",\n    \"workingDays\",\n    \"cor\",\n    \"ros\",\n    \"ext\",\n    \"int\",\n    \"arve\",\n    \"urve\"\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "loaded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "probabilitySource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTableDataSource<ProbabilityRecord>",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "probabilitySummary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProbabilitySummary",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "exportCSV",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "numberToString",
                    "args": [
                        {
                            "name": "no",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "no",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, ChangeDetectorRef } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { PageStateService } from '../../../core/shared/page-state.service';\n\nimport { CalculationService } from \"../../../core/services/forecasts/calculation.service\";\nimport { ProbabilitySummary } from \"../../../core/interfaces/probabilitySummary\";\nimport { ProbabilityRecord } from \"../../../core/interfaces/probabilityRecord\";\nimport { DatePipe } from '@angular/common';\n\n@Component({\n  selector: 'app-executive-summary',\n  templateUrl: './executive-summary.component.html',\n  styleUrls: ['./executive-summary.component.scss']\n})\nexport class ExecutiveSummaryComponent implements OnInit {\n  @Input('summary') summary: any;\n\n  loaded = false;\n\n  probabilitySummary: ProbabilitySummary;\n  \n  probabilitySource: MatTableDataSource<ProbabilityRecord>;\n\n  displayedColumns: string[] = [\n    \"probabilityId\",\n    \"total\",\n    \"billableDays\",\n    \"vacationDays\",\n    \"workingDays\",\n    \"cor\",\n    \"ros\",\n    \"ext\",\n    \"int\",\n    \"arve\",\n    \"urve\"\n  ];\n\n  constructor(\n    private pageState: PageStateService,\n    private changeDetectorRefs: ChangeDetectorRef,\n    private calculationService: CalculationService,\n    private datePipe: DatePipe,\n  ) {}\n\n  ngOnInit(): void {\n    this.calculationService.probabilitySummary$.subscribe((summ: ProbabilitySummary) => {\n      if(!this.loaded) {\n        this.loaded = true;\n      } else {\n        this.probabilitySummary = summ;\n        this.probabilitySource = new MatTableDataSource(summ.probabilites);\n        this.changeDetectorRefs.detectChanges();\n        setTimeout(() => {\n          this.pageState.hideSpinner();\n        }, 500);\n      }\n    });\n  }\n\n  exportCSV(): void {\n    this.pageState.showSpinner();\n    let lineEnding = \"\\r\\n\";\n\n    let header = \"KPI;\" + this.probabilitySummary.probabilites.map(x => x.name).join(\";\") + \";Total\" + lineEnding;\n    let body = \"ARVE;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.arve)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.arve) + lineEnding\n      + \"URVE;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.urve)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.urve) + lineEnding\n      + \"ROS;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.revenue)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.revenue) + lineEnding\n      + \"Int. Revenue;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.internalRevenue)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.internalRevenue) + lineEnding\n      + \"Ext. Revenue;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.externalRevenue)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.externalRevenue) + lineEnding\n      + \"COR;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.cor)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.cor) + lineEnding\n      + \"Paid Days;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.paidDays)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.paidDays) + lineEnding\n      + \"Vacation Days;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.vacationDays)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.vacationDays) + lineEnding\n      + \"Billable Days;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.billableDays)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.billableDays) + lineEnding\n      + \"Project Days;\" + this.probabilitySummary.probabilites.map(x => this.numberToString(x.billableDays + x.nonBillableDays)).join(\";\") + \";\" + this.numberToString(this.probabilitySummary.nonBillableDays + this.probabilitySummary.billableDays) + lineEnding;\n\n    const data = header + body;\n    const blob: Blob = new Blob([data], { type: \"text/csv\" });\n    const filename: string = this.datePipe.transform(new Date(), \"yyyyMMdd\") + \"-SummaryProbabilities.csv\";    \n    this.pageState.hideSpinner();\n\n    if (window.navigator.msSaveOrOpenBlob) {\n      window.navigator.msSaveOrOpenBlob(blob, filename);\n    } else {\n      const url: string = window.URL.createObjectURL(blob);\n\n      let a: HTMLAnchorElement = document.createElement(\"a\");\n      a.href = url;\n      a.download = filename;\n\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n    }\n  }\n\n  numberToString(no: number): string {\n    return no.toLocaleString(\"de\",  { minimumFractionDigits: 2 } ).replace(\".\",\"\");\n  }\n}\n\nexport interface PeriodicElement {\n  name: string;\n  firm: number;\n  weight: number;\n  symbol: string;\n}\n\nexport interface SummaryValues {\n  monthId: number;\n  probabilityId: number;\n  billableDays: number;\n  nonBillableDays: number;\n  vacationDays: number;\n  trainingDays: number;\n  businessDays: number;\n  benchDays: number;\n  workingDays: number;\n  fteCss: number;\n  cor: number;\n  arve: number;\n  urve: number;\n  ros: number;\n  external: number;\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n.mat-row td.mat-cell, .mat-header-row th.mat-header-cell {\n  text-align: end;\n  width: 100px;\n\n  &:first-child {\n    text-align: center;\n    padding-left: 24px;\n  }\n}\n\ntd.mat-cell:first-of-type, td.mat-footer-cell:first-of-type, th.mat-header-cell:first-of-type {\n  padding-left: 0px !important;\n}\n\n.mat-stroked-button {\n\tmargin: 5px;\n\tmargin-left: 0;\n}\n\n.button-rows {\n\tdisplay: flex;\n\t.button-row {\n    width: 50%\n  }\n}\n\n.mat-cell, .mat-footer-cell {\n  display:flex !important;\n  justify-content:flex-end!important;\n}\n\n.mat-header-cell {\n  justify-content: flex-end;\n}\n\n",
                    "styleUrl": "./executive-summary.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "changeDetectorRefs",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "calculationService",
                        "type": "CalculationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "changeDetectorRefs",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "calculationService",
                        "type": "CalculationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"\">\n  <table mat-table [dataSource]=\"probabilitySource\">\n    <ng-container class=\"first\" cdkColumnDef=\"probabilityId\" >\n      <mat-header-cell *cdkHeaderCellDef> Probability </mat-header-cell>\n      <mat-cell *cdkCellDef=\"let element\"> {{element.name}} </mat-cell>\n      <mat-footer-cell *cdkFooterCellDef>Total</mat-footer-cell>\n    </ng-container>\n    <ng-container cdkColumnDef=\"total\" layout-align=\"end center\" >\n      <mat-header-cell *cdkHeaderCellDef> Project Days </mat-header-cell>\n      <mat-cell *cdkCellDef=\"let element\"> {{element.billableDays + element.nonBillableDays | number:'1.0-0':'de'}} </mat-cell>\n      <mat-footer-cell *cdkFooterCellDef>{{probabilitySummary.billableDays + probabilitySummary.nonBillableDays | number:'1.0-0':'de'}}</mat-footer-cell>\n    </ng-container>\n    <ng-container cdkColumnDef=\"billableDays\" >\n      <mat-header-cell *cdkHeaderCellDef> Billable  Days </mat-header-cell>\n      <mat-cell *cdkCellDef=\"let element\"> {{element.billableDays | number:'1.0-0':'de'}} </mat-cell>\n      <mat-footer-cell *cdkFooterCellDef>{{probabilitySummary.billableDays | number:'1.0-0':'de'}}</mat-footer-cell>\n    </ng-container>\n    <ng-container cdkColumnDef=\"vacationDays\" >\n      <mat-header-cell *cdkHeaderCellDef> Vacation days </mat-header-cell>\n      <mat-cell *cdkCellDef=\"let element\"> {{element.vacationDays | number:'1.0-0':'de'}} </mat-cell>\n      <mat-footer-cell *cdkFooterCellDef>{{probabilitySummary.vacationDays | number:'1.0-0':'de'}}</mat-footer-cell>\n    </ng-container>\n    <ng-container cdkColumnDef=\"workingDays\" >\n      <mat-header-cell *cdkHeaderCellDef> Paid Days </mat-header-cell>\n      <mat-cell *cdkCellDef=\"let element\"> {{element.paidDays | number:'1.0-0':'de'}} </mat-cell>\n      <mat-footer-cell *cdkFooterCellDef>{{probabilitySummary.paidDays | number:'1.0-0':'de'}}</mat-footer-cell>\n    </ng-container>\n    <ng-container cdkColumnDef=\"cor\" >\n      <mat-header-cell *cdkHeaderCellDef> COR </mat-header-cell>\n      <mat-cell *cdkCellDef=\"let element\"> € {{element.cor | number:'1.2-2':'de'}} </mat-cell>\n      <mat-footer-cell *cdkFooterCellDef> € {{probabilitySummary.cor | number:'1.2-2':'de'}}</mat-footer-cell>\n    </ng-container>\n\n    <ng-container cdkColumnDef=\"ros\" >\n      <mat-header-cell *cdkHeaderCellDef> ROS </mat-header-cell>\n      <mat-cell *cdkCellDef=\"let element\"> € {{element.revenue | number:'1.2-2':'de'}} </mat-cell>\n      <mat-footer-cell *cdkFooterCellDef> € {{probabilitySummary.revenue | number:'1.2-2':'de'}}</mat-footer-cell>\n    </ng-container>\n\n    <ng-container cdkColumnDef=\"int\" >\n      <mat-header-cell *cdkHeaderCellDef> Int. R. </mat-header-cell>\n      <mat-cell *cdkCellDef=\"let element\"> € {{element.internalRevenue | number:'1.2-2':'de'}} </mat-cell>\n      <mat-footer-cell *cdkFooterCellDef> € {{probabilitySummary.internalRevenue | number:'1.2-2':'de'}}</mat-footer-cell>\n    </ng-container>\n    <ng-container cdkColumnDef=\"ext\" >\n      <mat-header-cell *cdkHeaderCellDef> Ext. R. </mat-header-cell>\n      <mat-cell *cdkCellDef=\"let element\"> € {{element.externalRevenue | number:'1.2-2':'de'}} </mat-cell>\n      <mat-footer-cell *cdkFooterCellDef> € {{probabilitySummary.externalRevenue | number:'1.2-2':'de'}}</mat-footer-cell>\n    </ng-container>\n\n    \n    <ng-container cdkColumnDef=\"arve\" >\n      <mat-header-cell *cdkHeaderCellDef> ARVE </mat-header-cell>\n      <mat-cell *cdkCellDef=\"let element\"> {{element.arve * 100 | number: '1.1-1':'de'}}% </mat-cell>\n      <mat-footer-cell *cdkFooterCellDef> {{probabilitySummary.arve * 100 | number: '1.1-1':'de'}}% </mat-footer-cell>\n    </ng-container>\n    <ng-container cdkColumnDef=\"urve\" >\n      <mat-header-cell *cdkHeaderCellDef> URVE </mat-header-cell>\n      <mat-cell *cdkCellDef=\"let element\"> {{element.urve * 100 | number: '1.1-1':'de'}}% </mat-cell>\n      <mat-footer-cell *cdkFooterCellDef>{{probabilitySummary.urve * 100 | number: '1.1-1':'de'}}% </mat-footer-cell>\n    </ng-container>\n\n    <mat-header-row *cdkHeaderRowDef=\"displayedColumns\"></mat-header-row>\n    <mat-row *cdkRowDef=\"let row; columns: displayedColumns;\"></mat-row>\n    <mat-footer-row *cdkFooterRowDef=\"displayedColumns\"></mat-footer-row>\n  </table>\n\n  <div layout=\"row\" layout-wrap>\n    <button mat-stroked-button class=\"mat-primary-reversed\" class=\"button-rows\" color=\"primary\" (click)=\"exportCSV()\">\n      <mat-icon>insert_drive_file</mat-icon> Export CSV\n    </button>\n  </div>\n</div>"
        },
        {
            "name": "ExportCsvDialog",
            "id": "component-ExportCsvDialog-efd377ab82e4d5da592b128db0042667",
            "file": "src/app/forecast/dialogs/export-csv/export-csv.dialog.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./export-csv.dialog.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./export-csv.dialog.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "allMonths",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "<p>ids of months which should be exported in csv\ndefault: id of current month</p>\n",
                    "line": 21,
                    "rawdescription": "\n\nids of months which should be exported in csv\ndefault: id of current month\n"
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "line": 31,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "months",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "<p>month list</p>\n",
                    "line": 15,
                    "rawdescription": "\n\nmonth list\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "checkAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChecks/unchecks all months when allMonths checkbox is used\n",
                    "description": "<p>Checks/unchecks all months when allMonths checkbox is used</p>\n"
                },
                {
                    "name": "checkMonth",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nupdates allMonths checkbox if individual month is selected/deselected\n",
                    "description": "<p>updates allMonths checkbox if individual month is selected/deselected</p>\n"
                },
                {
                    "name": "getExportMonths",
                    "args": [],
                    "optional": false,
                    "returnType": "number[]",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns IDs of selected months\n",
                    "description": "<p>returns IDs of selected months</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Component for CSV-Export Dialog</p>\n",
            "rawdescription": "\n\nComponent for CSV-Export Dialog\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from \"@angular/core\";\nimport { Month } from \"../../../core/interfaces/month\";\nimport { MAT_DIALOG_DATA } from \"@angular/material/dialog\";\n\n/**\n * Component for CSV-Export Dialog\n */\n@Component({\n  templateUrl: './export-csv.dialog.html',\n  styleUrls: [\"./export-csv.dialog.scss\"]\n}) export class ExportCsvDialog {\n  /**\n   * month list\n   */\n  months: Month[];\n\n  /**\n   * ids of months which should be exported in csv\n   * default: id of current month\n   */\n  allMonths: {\n    checked: boolean,\n    indeterminate: boolean,\n  };\n\n  /**\n   * initializes global variables\n   * @param data\n   */\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: any,\n  ) {\n    this.allMonths = { checked: false, indeterminate: false };\n    this.months = data.months;\n  }\n\n  /**\n   * updates allMonths checkbox if individual month is selected/deselected\n   */\n  checkMonth(): void {\n    if (this.months.filter((m: Month) => m.checked).length === this.months.length) {\n\t    this.allMonths = { checked: true, indeterminate: false };\n    } else if (this.months.filter((m: Month) => m.checked).length > 0) {\n      this.allMonths = { checked: false, indeterminate: true };\n    } else {\n      this.allMonths = { checked: false, indeterminate: false };\n    }\n  }\n\n  /**\n   * Checks/unchecks all months when allMonths checkbox is used\n   */\n  checkAll(): void {\n    if (this.allMonths.checked) {\n      this.months.forEach((m: Month) => { m.checked = true; });\n    } else {\n      this.months.forEach((m: Month) => { m.checked = false; });\n    }\n  }\n\n  /**\n   * returns IDs of selected months\n   */\n  getExportMonths(): number[] {\n    return this.months.filter((m: Month) => m.checked).map((m: Month) => m.id);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-checkbox {\n\tdisplay: block;\n\tpadding: 0 10px;\n\tline-height: 46px;\n\tborder-bottom: 1px solid rgba(0,0,0,0.06);\n\n\t&:last-child {\n\t\tborder-bottom: none;\n\t}\n\n\t&.all {\n\t\tfont-weight: bold;\n\t\tborder-color: rgba(0, 0, 0, 0.5);\n\t}\n\n\t.mat-checkbox-layout {\n\t\theight: 46px;\n\t}\n}\n\n.checkbox-section {\n\tmax-height: 50vh;\n\toverflow: auto;\n}",
                    "styleUrl": "./export-csv.dialog.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>initializes global variables</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "rawdescription": "\n\ninitializes global variables\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 611,
                            "end": 615,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "data"
                        },
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 605,
                            "end": 610,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "templateData": "<h2 mat-dialog-title>CSV Export</h2>\n\n<mat-checkbox class=\"all\" color=\"primary\" [(ngModel)]=\"allMonths.checked\" [(indeterminate)]=\"allMonths.indeterminate\" (change)=\"checkAll()\">All Months</mat-checkbox>\n<div class=\"checkbox-section\">\n\t<mat-checkbox *ngFor=\"let month of months\" color=\"primary\" [(ngModel)]=\"month.checked\" (change)=\"checkMonth()\">{{ month.time | date: 'MMMM yyyy' }}</mat-checkbox>\n</div>\n\n<mat-dialog-actions>\n\t<button mat-button mat-dialog-close [mat-dialog-close]=\"false\">Cancel</button>\n\t<button mat-button [mat-dialog-close]=\"getExportMonths()\" [disabled]=\"getExportMonths().length == 0\">Export</button>\n</mat-dialog-actions>"
        },
        {
            "name": "FaqModalComponent",
            "id": "component-FaqModalComponent-034deb6499eca295c64981caabc6ec95",
            "file": "src/app/layout/faq-modal/faq-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-faq-modal",
            "styleUrls": [
                "./faq-modal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./faq-modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<FaqModalComponent>",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "fd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { MatDialogRef } from '@angular/material/dialog';\nimport { faqData } from './faqData';\n@Component({\n  selector: 'app-faq-modal',\n  templateUrl: './faq-modal.component.html',\n  styleUrls: ['./faq-modal.component.scss']\n})\nexport class FaqModalComponent implements OnInit {\n\n  fd: any [];\n\n  constructor(\n    public dialogRef: MatDialogRef<FaqModalComponent>,\n     ) { }\n\n  ngOnInit() {\n    this.fd = faqData\n  }\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".back{\n    background-color: #f1f5f8;\n    margin: 0px;\n    height: 100%;\n}\n\nh1 {\n    color: #ffff;\n    margin-block-start: 0em;\n    margin-block-end: 0em;\n    padding: 15px;\n}\n\n.mat-icon-close {\n    float: right;\n    margin: 8px;\n    mat-icon {\n        color: #ffff;\n    }\n}\n\nh3 {\n    color: #0070ad;\n    margin-top: 20px;\n}\n\n.title {\n    font-weight: 700;\n}\n\n.content {\n    height: 90%;\n    margin: 0;\n    max-height: 85vh;\n\n}\n\n.fix {\n    background-color: #0070ad;\n    height: 10%;\n    padding: 0px;\n}\n\n.mat-expansion-panel-header-title{\n    color: rgba(0,0,0,0.75);\n}\n\n.panel-content {\n    margin-left: 10px;\n    color: rgba(0,0,0,0.60);\n\n}\n\nimg {\n    max-width: 50vw;\n}\n.ff {\n    max-width: 50vw;\n}\n\n.image {\n    max-width: 50vw;\n}",
                    "styleUrl": "./faq-modal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<FaqModalComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<FaqModalComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card class=\"back\">\n  <div class=\"fix\" layout=\"row\">\n    <h1 class=\"title\">FAQ</h1>\n    <span flex></span>\n    <button mat-icon-button (click)=\"onNoClick()\" title=\"Close FAQ\" class=\"mat-icon-close\">\n      <mat-icon>clear</mat-icon>\n    </button>\n  </div>\n\n  <div class=\"content\">\n     \n    <mat-accordion displayMode=\"flat\" multi>\n      <mat-expansion-panel *ngFor=\"let item of fd;\">\n        <mat-expansion-panel-header>\n          <mat-panel-title>\n              <div [innerHTML]=\"item.question\"></div>\n          </mat-panel-title>\n        </mat-expansion-panel-header>\n\n        <div [innerHTML]=\"item.answer | safeHtml\" class=\"panel-content\">\n           \n        </div>\n      </mat-expansion-panel>\n    </mat-accordion>\n  </div>\n</mat-card>\n"
        },
        {
            "name": "FcEntryComponent",
            "id": "component-FcEntryComponent-c2c9cf592d13d5993d9c4c184547c627",
            "file": "src/app/forecast/components/fc-entry/fc-entry.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-fc-entry",
            "styleUrls": [
                "./fc-entry.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./fc-entry.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "month",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "selected month (received as input)",
                    "description": "<p>selected month (received as input)</p>\n",
                    "line": 40,
                    "type": "Month"
                },
                {
                    "name": "singleView",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "singleView: true in 'individual'-view, false in 'teamlead'-view",
                    "description": "<p>singleView: true in &#39;individual&#39;-view, false in &#39;teamlead&#39;-view</p>\n",
                    "line": 45,
                    "type": "boolean"
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "userId (received as input)",
                    "description": "<p>userId (received as input)</p>\n",
                    "line": 35,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "foreCastEmptyEvent",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nevent to subscribe to if there is no forecast for the current user and month\n",
                    "description": "<p>event to subscribe to if there is no forecast for the current user and month</p>\n",
                    "line": 50,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "availableProjects",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Project[]",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "fcLoaded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "fcSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "forecast",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FcEntry",
                    "optional": false,
                    "description": "<p>Contains the newest version of forecast</p>\n",
                    "line": 55,
                    "rawdescription": "\n\nContains the newest version of forecast\n"
                },
                {
                    "name": "fteSliderValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "grades",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Grade[]",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "hasProjectInputFocus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "isCorValueBiggerThanZero",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "isProjectInputValid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "lastEditor",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>string that includes name + date of last edit</p>\n",
                    "line": 61,
                    "rawdescription": "\n\nstring that includes name + date of last edit\n"
                },
                {
                    "name": "loadingActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 66
                }
            ],
            "methodsClass": [
                {
                    "name": "addProjectToForecast",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 204,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nAdds a new project.\nSets the cursor focus at the beginning of the newly added project.\n",
                    "description": "<p>Adds a new project.\nSets the cursor focus at the beginning of the newly added project.</p>\n",
                    "jsdoctags": []
                },
                {
                    "name": "copyData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 286,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fcIsLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 264,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTest is forecast is locked for logged-in user\n",
                    "description": "<p>Test is forecast is locked for logged-in user</p>\n"
                },
                {
                    "name": "fcLockedBySub",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 271,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fteSliderValueUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 218,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fteValue",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 229,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hasLeadRole",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 246,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTest if user fulfills certain role criteria\n",
                    "description": "<p>Test if user fulfills certain role criteria</p>\n"
                },
                {
                    "name": "hasMSLRole",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 250,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hasUnlockPermission",
                    "args": [
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 254,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 297,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalled if there are changes to input fields\n",
                    "description": "<p>Called if there are changes to input fields</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 9714,
                                "end": 9721,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "changes"
                            },
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 9708,
                                "end": 9713,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<p>an dict of changes. Value at Key is undefined if there are no chagnes.</p>\n"
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnsubscribe services when component gets destroyed\n",
                    "description": "<p>Unsubscribe services when component gets destroyed</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInitializes forecast entry component.\n",
                    "description": "<p>Initializes forecast entry component.</p>\n"
                },
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 277,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveForecast",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSaves forecast\n",
                    "description": "<p>Saves forecast</p>\n"
                },
                {
                    "name": "settingsUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 225,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submitForecast",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSubmits forecast (save + \"locked: true\")\n",
                    "description": "<p>Submits forecast (save + &quot;locked: true&quot;)</p>\n"
                },
                {
                    "name": "subscribeForcasts",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "totalDays",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 239,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalculates the total number of days for projects.\n",
                    "description": "<p>Calculates the total number of days for projects.</p>\n"
                },
                {
                    "name": "unlockForecast",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 193,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnlock a forecast\n",
                    "description": "<p>Unlock a forecast</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>forecast-entry component</p>\n",
            "rawdescription": "\n\nforecast-entry component\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, OnDestroy, SimpleChanges, Output, EventEmitter } from '@angular/core';\r\nimport { formatDate } from '@angular/common';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\n\r\nimport { ForecastService } from '../../../core/services/forecasts/forecast.service';\r\nimport { UtilitiesService } from '../../../core/services/utilities.service';\r\n\r\nimport { FcEntry } from '../../../core/interfaces/fcEntry';\r\nimport { Month } from '../../../core/interfaces/month';\r\nimport { Project } from '../../../core/interfaces/project';\r\nimport { Subscription } from 'rxjs';\r\nimport { FcProject } from '../../../core/interfaces/fcProject';\r\nimport { UserService } from '../../../core/services/user.service';\r\nimport { Grade } from '../../../core/interfaces/grade';\r\nimport { AuthService } from '../../../core/security/auth.service';\r\nimport { environment as env } from '../../../../environments/environment';\r\nimport { ConfirmMessageDialog } from '../../dialogs/confirm-message/confirm-message.dialog';\r\nimport { DataSharingService } from '../../../core/shared/data-sharing.service';\r\nimport { ExecutiveForecastsService } from '../../../core/services/forecasts/executive-forecasts.service';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\n\r\n/**\r\n * forecast-entry component\r\n */\r\n@Component({\r\n  selector: 'app-fc-entry',\r\n  templateUrl: './fc-entry.component.html',\r\n  styleUrls: [ './fc-entry.component.scss' ],\r\n})\r\nexport class FcEntryComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * userId (received as input)\r\n   */\r\n  @Input('userId') userId: number;\r\n\r\n  /**\r\n   * selected month (received as input)\r\n   */\r\n  @Input('month') month: Month;\r\n\r\n  /**\r\n   * singleView: true in 'individual'-view, false in 'teamlead'-view\r\n   */\r\n  @Input('singleView') singleView: boolean;\r\n\r\n  /**\r\n   * event to subscribe to if there is no forecast for the current user and month\r\n   */\r\n   @Output() foreCastEmptyEvent = new EventEmitter();\r\n\r\n  /**\r\n   * Contains the newest version of forecast\r\n   */\r\n  forecast: FcEntry;\r\n  availableProjects: Project[] = [];\r\n\r\n  /**\r\n   * string that includes name + date of last edit\r\n   */\r\n  lastEditor: string = '';\r\n  grades: Grade[] = [];\r\n  fteSliderValue: number;\r\n  fcLoaded: boolean = false;\r\n  fcSubscription: Subscription;\r\n  loadingActive: boolean = false;\r\n\r\n  hasProjectInputFocus: boolean;\r\n  isProjectInputValid: boolean;\r\n  isCorValueBiggerThanZero: boolean;\r\n\r\n  /**\r\n   * forecast-entry component constructor\r\n   * @param utilitiesService\r\n   * @param forecastService\r\n   */\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private utilitiesService: UtilitiesService,\r\n    private forecastService: ForecastService,\r\n    private executiveService: ExecutiveForecastsService,\r\n    private userService: UserService,\r\n    private authService: AuthService,\r\n    private dataSharingService: DataSharingService,\r\n    private snackBar: MatSnackBar\r\n  ) {}\r\n\r\n  /**\r\n   * Initializes forecast entry component.\r\n   */\r\n  ngOnInit(): void {\r\n    if(!this.singleView) {\r\n      this.fcLoaded = true;\r\n      this.loadingActive = true;\r\n    }\r\n\r\n    //only subscribe to forecasts if there is none\r\n    //since changing of months in handeled in the ngOnChanges function\r\n    if(!this.forecast)\r\n      this.subscribeForcasts();\r\n\r\n    this.grades = this.userService.getGrades();\r\n    this.availableProjects = this.utilitiesService.getProjects();\r\n\r\n    this.dataSharingService.hasProjectInputFocus().subscribe(hasFocus => this.hasProjectInputFocus = hasFocus);\r\n    this.dataSharingService.isProjectInputValid().subscribe(isValid => this.isProjectInputValid = isValid);\r\n    this.dataSharingService.isCorValueBiggerThanZero().subscribe(isBigger => this.isCorValueBiggerThanZero = isBigger);\r\n  }\r\n\r\n  subscribeForcasts():void {\r\n    this.fcSubscription = this.forecastService.forecasts$\r\n    .subscribe((forecasts: FcEntry[]) => {\r\n      this.forecast = forecasts.find((fc: FcEntry) => fc.monthId === this.month.id && fc.userId === this.userId);\r\n      if (!this.forecast) {\r\n        this.forecastService.loadForecast(this.userId, this.month.id).then((res: any) => {\r\n          if (!res.showDialog || !res.suggestedData || !this.singleView) {\r\n            return;\r\n          }\r\n          /**\r\n           * For the next release in the future, the copy data functionality will be added\r\n           */\r\n\r\n          if (res.suggestedData.projects.length > 0 || res.suggestedData.fte !== this.forecast.fte || res.suggestedData.gradeId !== this.forecast.gradeId) {\r\n            let dialogRef: MatDialogRef<ConfirmMessageDialog> = this.dialog.open(ConfirmMessageDialog, {\r\n              data: {\r\n                message: 'Copy data from last month submitted?',\r\n                button: { cancel: 'No', submit: 'Yes' },\r\n              },\r\n            });\r\n\r\n            dialogRef.afterClosed().subscribe((add: boolean) => {\r\n              if (add === true) {\r\n                this.forecastService.addProjectsToForecast(this.userId, this.month.id, res.suggestedData);\r\n              }\r\n            });\r\n          }\r\n        });\r\n\r\n      } else {\r\n        this.fcLoaded = true;\r\n        this.loadingActive = false;\r\n\r\n        if (typeof this.forecast.fte !== 'undefined') { // switched because forecast fte should be taken primary from saved/submitted forcast\r\n          this.fteSliderValue = this.forecast.fte * 100;\r\n        }\r\n        else if(typeof this.userService.getUser(this.userId).fte !== 'undefined') {\r\n          this.fteSliderValue = this.userService.getUser(this.userId).fte * 100;\r\n          this.forecast.fte = this.userService.getUser(this.userId).fte;\r\n        }      \r\n        else {\r\n          this.fteSliderValue = 100;\r\n        }\r\n        if (this.forecast.history && this.forecast.history.length > 0 && this.forecast.history[0].createdAt) {\r\n          let date: string = formatDate(this.forecast.history[0].createdAt, 'dd.MM.yyyy', 'en');\r\n          this.lastEditor = 'Last updated from ' + this.forecast.history[0].changedBy + ', ' + date;\r\n        } else {\r\n          let date: string = formatDate(this.forecast.createdAt, 'dd.MM.yyyy', 'en');\r\n          this.lastEditor = 'Last updated from ' + this.forecast.changedBy + ', ' + date;\r\n        }\r\n\r\n        if(typeof this.forecast.gradeId === 'undefined') {\r\n          this.forecast.gradeId = this.userService.getUser(this.userId).gradeId; \r\n        }\r\n        \r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe services when component gets destroyed\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.fcSubscription.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * Saves forecast\r\n   */\r\n  saveForecast(): void {\r\n    this.forecastService.saveForecast(this.month.id, this.userId, false);\r\n  }\r\n\r\n  /**\r\n   * Submits forecast (save + \"locked: true\")\r\n   */\r\n  submitForecast(): void {\r\n    this.forecastService.saveForecast(this.month.id, this.userId, true);\r\n  }\r\n\r\n  /**\r\n   * Unlock a forecast\r\n   */\r\n  unlockForecast(): void {\r\n    this.forecastService.unlockForecast(this.month.id, this.userId);\r\n  }\r\n\r\n  /**\r\n   * Adds a new project.\r\n   * Sets the cursor focus at the beginning of the newly added project.\r\n   * @param id\r\n   * @param days\r\n   * @param probabilityId\r\n   */\r\n  addProjectToForecast(): void {\r\n    this.forecastService.addProject(\r\n      this.month.id,\r\n      this.userId,\r\n      new FcProject(),\r\n    );\r\n\r\n    // Sets the focus to newly added project\r\n    setTimeout(() => {\r\n      const el: any = document.querySelector('#project-' + this.month.id + '-' + (this.forecast.projects.length - 1));\r\n      el.querySelector('.mat-input-element').focus();\r\n    }, 100);\r\n  }\r\n\r\n  fteSliderValueUpdate(): void {\r\n\r\n    this.forecast.fte = parseFloat((this.fteSliderValue / 100).toFixed(3));\r\n    this.forecastService.setForecast(this.forecast, false, true);\r\n\r\n  }\r\n\r\n  settingsUpdate(): void {\r\n    this.forecastService.setForecast(this.forecast, false, true);\r\n  }\r\n\r\n  fteValue(): any {\r\n    if (typeof this.forecast.fte !== 'undefined') {\r\n      return Math.round(this.forecast.fte * 1000) / 10;\r\n    }\r\n    return 100;\r\n  }\r\n\r\n  /**\r\n   * Calculates the total number of days for projects.\r\n   */\r\n  totalDays(): number {\r\n    return this.forecast.billableDays + this.forecast.nonbillableDays;\r\n  }\r\n\r\n  /**\r\n   * Test if user fulfills certain role criteria\r\n   */\r\n  hasLeadRole(): boolean {\r\n    return this.authService.hasRole(env.roles.pdl);\r\n  }\r\n\r\n  hasMSLRole(): boolean {\r\n    return this.authService.hasRole(env.roles.msl);\r\n  }\r\n\r\n  hasUnlockPermission(level: number): boolean {\r\n    if (this.authService.hasRole(level) || this.forecast.locked < this.authService.getRoleId()) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Test is forecast is locked for logged-in user\r\n   */\r\n  fcIsLocked(): boolean {\r\n    if (this.forecast && this.forecast.locked >= this.authService.getRoleId()) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  fcLockedBySub(): boolean {\r\n    if (this.forecast && this.forecast.locked >= 0 && this.forecast.locked < this.authService.getRoleId()) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  openDialog(): void {\r\n    let dialogRef: MatDialogRef<ConfirmMessageDialog> = this.dialog.open(ConfirmMessageDialog, {\r\n      width: '250px',\r\n      data: {\r\n             message: 'Copy data from last submitted month?',\r\n             button: { cancel: 'No', submit: 'Yes' },\r\n             },\r\n    });\r\n  }\r\n  copyData():void {\r\n    this.forecastService.loadForecast(this.userId, this.month.id).then((res: any) => {\r\n    this.forecastService.addProjectsToForecast(this.userId, this.month.id, res.suggestedData);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Called if there are changes to input fields\r\n   * @param changes an dict of changes. Value at Key is undefined if there are no chagnes.\r\n   */\r\n  \r\n  ngOnChanges(changes: SimpleChanges){\r\n    //If there are changes to the current month BUT its not the first time this chagnes happen\r\n    if(changes['month'] && !changes['month'].isFirstChange()){\r\n      this.loadingActive = true;\r\n      this.fcLoaded = false;\r\n      this.fcSubscription.unsubscribe();\r\n      this.fcSubscription = this.forecastService.forecasts$.subscribe((forecasts: FcEntry[]) => {\r\n        this.forecast = forecasts.find((fc: FcEntry) => fc.monthId === this.month.id && fc.userId === this.userId);\r\n      });\r\n      //init the new month to be retrivable by the forecast service subscription\r\n      this.executiveService.initializeDetailValues(this.month.id).then(()=>{\r\n        //when the data is initialized\r\n        //this should be nearly the same time the subscription received it's value\r\n        this.loadingActive = false;\r\n        this.fcLoaded = true;\r\n        //Since the subscription should already have fired this forecast should only be undefined if there is no forecast\r\n        if(!this.forecast){\r\n          this.forecast = undefined;\r\n          this.foreCastEmptyEvent.emit();\r\n          this.snackBar.open('There is no forceast for this user and ' + this.month.name, 'Ok', { duration: 10000, });\r\n        }\r\n      });\r\n    }\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../assets/styles/variables.scss';\r\n\r\n.loading-overlay {\r\n\tposition: absolute;\r\n\tdisplay: block;\r\n\ttop: 0;\r\n\tleft: 0;\r\n\twidth: 100%;\r\n\theight: 100%;\r\n\tz-index: 900;\r\n\tbackground: rgba(255,255,255,0.5);\r\n\topacity: 1;\r\n\r\n\t&.hide {\r\n\t\tdisplay: none;\r\n\t}\r\n}\r\n\r\n.spinner-container {\r\n\tdisplay: none;\r\n\tposition: absolute;\r\n\ttop: 50%;\r\n\tleft: 50%;\r\n\ttransform: translate(-50%, -50%);\r\n\tz-index: 1000;\r\n  \r\n\t&.active {\r\n\t  display: block;\r\n\t}\r\n  }\r\n\r\n.button-row {\r\n\tmargin: 10px 5px 20px;\r\n\r\n\tbutton.align-right {\r\n\t\tfloat: right;\r\n\t\tmargin-left: 5px;\r\n\t}\r\n}\r\n\r\n\r\n\r\n.settings-row {\r\n\tmargin-top: 25px;\r\n\tfont-size: $font-size;\r\n\r\n\t&.teamview {\r\n\t\tmargin-top: 0;\r\n\t}\r\n\t\r\n\t> div {\r\n\t\tpadding: 0 25px;\r\n\t\tborder-right: 1px solid rgba(0,0,0,0.12);\r\n\r\n\t\t&:first-child {\r\n\t\t\tpadding-left: 5px;\r\n\t\t}\r\n\r\n\t\t&:last-child {\r\n\t\t\tpadding-right: 5px;\r\n\t\t\tborder-right: none;\r\n\t\t}\r\n\t}\r\n\r\n\t.mat-slide-toggle {\r\n\t\theight: 100%;\r\n\t\tline-height: 1.2em;\r\n\t\ttext-align: center;\r\n\t}\r\n}\r\n\r\n.project-list.height-fix{\r\n\theight: 200px;\r\n\toverflow: auto;\r\n}\r\n.mat-divider {\r\n\tmargin: 15px 0;\r\n}\r\n\r\n.slider {\r\n\twidth: 85%;\r\n}\r\n\r\n.slider-text {\r\n\tdisplay: inline-block;\r\n\ttext-align: center;\r\n\twidth: 15%;\r\n}",
                    "styleUrl": "./fc-entry.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>forecast-entry component constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataSharingService",
                        "type": "DataSharingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 70,
                "rawdescription": "\n\nforecast-entry component constructor\n",
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 2525,
                            "end": 2541,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "utilitiesService"
                        },
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2519,
                            "end": 2524,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 2555,
                            "end": 2570,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "forecastService"
                        },
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2549,
                            "end": 2554,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataSharingService",
                        "type": "DataSharingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"loading-overlay\" [ngClass]=\"{'hide': fcLoaded}\"></div>\r\n\r\n<div class=\"spinner-container\" [ngClass]=\"{'active': loadingActive}\">\r\n    <mat-progress-spinner class=\"progress-spinner\" color=\"primary\" mode=\"indeterminate\"></mat-progress-spinner>\r\n</div>\r\n\r\n<div class=\"settings-row\" [ngClass]=\"{'teamview': !singleView}\" layout=\"row\" layout-fill>\r\n  <div flex=\"40\">\r\n    <mat-form-field appearance=\"outline\">\r\n      <mat-label>Grade</mat-label>\r\n      <mat-select placeholder=\"Grade\" [(ngModel)]=\"forecast.gradeId\" [disabled]=\"fcIsLocked() || !hasLeadRole() \"  (selectionChange)=\"settingsUpdate()\">\r\n        <mat-option *ngFor=\"let g of grades\" [value]=\"g.gradeId\">{{g.name}}</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n  </div>\r\n\r\n  <div flex=\"60\" class=\"padding\" layout-fill>\r\n    <mat-slider thumbLabel color=\"primary\" min=\"0\" max=\"100\" step=\"2.5\" [(ngModel)]=\"fteSliderValue\" (change)=\"fteSliderValueUpdate()\" class=\"slider\" [disabled]=\"fcIsLocked()\"></mat-slider>\r\n    <span class=\"slider-text\">{{fteValue()}}% FTE</span>\r\n  </div>\r\n\r\n  <div flex=\"20\" *ngIf=\"hasLeadRole()\">\r\n    <mat-slide-toggle [(ngModel)]=\"forecast.isRelevant\" color=\"primary\" [disabled]=\"fcIsLocked()\" (change)=\"settingsUpdate()\">ARVE / URVE Relevance</mat-slide-toggle>\r\n  </div>\r\n</div>\r\n\r\n<mat-divider></mat-divider>\r\n\r\n<div class=\"project-list\" [ngClass]=\"{'height-fix': !singleView && hasMSLRole()}\">\r\n    <app-fc-project *ngFor=\"let project of forecast.projects; let index = index\" [forecast]=\"forecast\" [project]=\"project\" [monthId]=\"month.id\" [userId]=\"userId\" [index]=\"index\" [lastEditor]=\"lastEditor\"></app-fc-project>\r\n</div>\r\n\r\n<div class=\"multi-view-box\" *ngIf=\"!singleView\">\r\n  <mat-form-field appearance=\"outline\">\r\n    <mat-label>Comments</mat-label>\r\n    <textarea matInput [(ngModel)]=\"forecast.comment\" name=\"comment\" placeholder=\"Leave a comment\" maxLength=\"500\"\r\n      [disabled]=\"fcIsLocked()\" cdkTextareaAutosize #autosize=\"cdkTextareaAutosize\" cdkAutosizeMinRows=\"3\"\r\n      cdkAutosizeMaxRows=\"6\"></textarea>\r\n  </mat-form-field>\r\n\r\n  <div class=\"summary-warning error\" *ngIf=\"totalDays() > (forecast.totalDays | number: '1.0-2')\">\r\n    <mat-icon class=\"icon\">error</mat-icon>\r\n    It is not possible to assign more than <strong>{{forecast.totalDays | number: '1.0-2': 'de'}} days</strong> for this month!<br>\r\n    There are currently <strong>{{totalDays() | number: '1.0-2': 'de'}} days</strong> assigned.\r\n  </div>\r\n</div>\r\n\r\n<div class=\"button-row\">\r\n  <button mat-raised-button *ngIf=\"availableProjects.length > forecast.projects.length && !fcIsLocked()\"\r\n    color=\"primary\" (click)=\"addProjectToForecast()\">\r\n    <mat-icon>playlist_add</mat-icon> Add Project\r\n  </button>\r\n\r\n  <button mat-stroked-button *ngIf=\"singleView && !fcIsLocked()\" class=\"mat-primary-reversed align-right\"\r\n  (click)=\"copyData()\">\r\n    <mat-icon>content_copy</mat-icon> Copy Data\r\n  </button>\r\n  \r\n  <button mat-stroked-button *ngIf=\"!singleView && !fcIsLocked()\" class=\"mat-primary-reversed align-right\"\r\n    (click)=\"submitForecast()\" [disabled]=\"totalDays() > forecast.totalDays  || hasProjectInputFocus || !isProjectInputValid || !isCorValueBiggerThanZero\">\r\n    <mat-icon>lock</mat-icon> Submit\r\n  </button>\r\n\r\n  <button mat-stroked-button *ngIf=\"!singleView && !fcIsLocked()\" class=\"mat-primary-reversed align-right\"\r\n    (click)=\"saveForecast()\" [disabled]=\"totalDays() > forecast.totalDays  || hasProjectInputFocus || !isProjectInputValid || !isCorValueBiggerThanZero\">\r\n    <mat-icon>save</mat-icon> Save\r\n  </button>\r\n\r\n  <button mat-stroked-button *ngIf=\"!singleView && fcIsLocked() && hasUnlockPermission(2)\" class=\"mat-primary-reversed align-right\"\r\n    (click)=\"unlockForecast()\">\r\n    <mat-icon>lock_open</mat-icon> Unlock\r\n  </button>\r\n\r\n  <button mat-stroked-button *ngIf=\"!singleView && !fcIsLocked()\" class=\"mat-primary-reversed align-right\" [disabled]=\"!fcLockedBySub()\"\r\n    (click)=\"unlockForecast()\">\r\n    <mat-icon>lock_open</mat-icon> Unlock for User\r\n  </button>\r\n</div>"
        },
        {
            "name": "FcEntryDetailDialogComponent",
            "id": "component-FcEntryDetailDialogComponent-176d920c59cb2768d9a2edf0a3510767",
            "file": "src/app/forecast/components/executive-detail/fc-entry-detail-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-fc-entry-detail-dialog",
            "styleUrls": [
                "./fc-entry-detail-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./fc-entry-detail-dialog.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cancelButtonText",
                    "defaultValue": "\"Done\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "currentMonthId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "month",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "monthName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "months",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "nextMonthDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "previousMonthDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "isNextPrevDisabled",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "nextMonth",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onConfirmClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "previousMonth",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Inject } from '@angular/core';\r\nimport { VERSION } from '@angular/material/core';\r\nimport { MatDialogRef, MatDialog, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Month } from '../../../core/interfaces/month';\r\n\r\n@Component({\r\n  selector: 'app-fc-entry-detail-dialog',\r\n  templateUrl: './fc-entry-detail-dialog.html',\r\n  styleUrls: [\"./fc-entry-detail-dialog.component.scss\"]\r\n})\r\nexport class FcEntryDetailDialogComponent {\r\n  userId: number;\r\n  month: Month;\r\n  months: Month[];\r\n  cancelButtonText = \"Done\";\r\n  lastName: string;\r\n  firstName: string;\r\n  monthName: string;\r\n\r\n  currentMonthId: number;\r\n\r\n  previousMonthDisabled: boolean;\r\n  nextMonthDisabled: boolean;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private data: any,\r\n    private dialogRef: MatDialogRef<FcEntryDetailDialogComponent>) {\r\n      this.nextMonthDisabled = true;\r\n      this.previousMonthDisabled = true;\r\n      if (data) {\r\n        this.userId = data.userId;\r\n        this.month = data.month;\r\n        this.currentMonthId = data.month.id;\r\n        this.months = data.months;\r\n        this.monthName = data.month.name;\r\n        this.firstName = data.firstName;\r\n        this.lastName = data.lastName;\r\n      }\r\n\r\n      this.isNextPrevDisabled();\r\n  }\r\n\r\n  onConfirmClick(): void {\r\n    this.dialogRef.close(true);\r\n  }\r\n\r\n  previousMonth() :void{\r\n    if(this.currentMonthId - 1 >= this.months[0].id){\r\n      this.currentMonthId -= 1;\r\n      this.month = this.months.find(m => m.id == this.currentMonthId);\r\n      this.monthName = this.month.name;\r\n    }\r\n    this.isNextPrevDisabled();\r\n  }\r\n\r\n  nextMonth() :void{\r\n    if(this.currentMonthId + 1 <= this.months[this.months.length -1].id){\r\n      this.currentMonthId += 1;\r\n      this.month = this.months.find(m => m.id == this.currentMonthId);\r\n      this.monthName = this.month.name;\r\n    }\r\n    this.isNextPrevDisabled();\r\n  }\r\n\r\n  isNextPrevDisabled() : void{\r\n    if(this.currentMonthId + 1 <= this.months[this.months.length -1].id){\r\n      this.nextMonthDisabled = false;\r\n    }else{\r\n      this.nextMonthDisabled = true;\r\n    }\r\n    if(this.currentMonthId - 1 >= this.months[0].id){\r\n      this.previousMonthDisabled = false;\r\n    }else{\r\n      this.previousMonthDisabled = true;\r\n    }\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-dialog-content, .tab-container, .mat-dialog-container {\r\n    overflow: hidden;\r\n}\r\n\r\n.button-row {\r\n\tmargin: 10px 5px 20px;\r\n\r\n\tbutton.align-right {\r\n\t\tfloat: right;\r\n\t\tmargin-left: 5px;\r\n\t}\r\n}",
                    "styleUrl": "./fc-entry-detail-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<FcEntryDetailDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<FcEntryDetailDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h3>{{this.monthName}}</h3>\r\n<h2 mat-dialog-title>{{this.lastName}}, {{this.firstName}}</h2>\r\n<mat-dialog-content>\r\n    <app-fc-entry class=\"tab-container\" [userId]=\"userId\" [singleView]=\"false\" [month]=\"month\" (foreCastEmptyEvent)=\"previousMonth()\"></app-fc-entry>\r\n</mat-dialog-content>\r\n<div class=\"button-row\">\r\n    <button mat-stroked-button class=\"mat-primary-reversed\" [disabled]=\"previousMonthDisabled\"\r\n      (click)=\"previousMonth()\">\r\n      <mat-icon>chevron_left</mat-icon> Previous Month\r\n    </button>\r\n    <button mat-stroked-button class=\"mat-primary-reversed align-right\" [disabled]=\"nextMonthDisabled\"\r\n      (click)=\"nextMonth()\">\r\n      Next Month <mat-icon>chevron_right</mat-icon>\r\n    </button>\r\n  </div>\r\n<!-- <mat-dialog-actions>\r\n\t<button mat-raised-button color=\"primary\" mat-dialog-close tabindex=\"-1\">Done</button>\r\n</mat-dialog-actions> -->\r\n"
        },
        {
            "name": "FcEntrySummaryComponent",
            "id": "component-FcEntrySummaryComponent-44c6ca01c47b80373ae3e09939ff6172",
            "file": "src/app/forecast/components/fc-entry-summary/fc-entry-summary.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-fc-entry-summary",
            "styleUrls": [
                "./fc-entry-summary.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./fc-entry-summary.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "month",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "month (received as input)",
                    "description": "<p>month (received as input)</p>\n",
                    "line": 38,
                    "type": "Month"
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "userId (received as input)",
                    "description": "<p>userId (received as input)</p>\n",
                    "line": 33,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "line": 71,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "fcProjectsDS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTableDataSource<FcProject>",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "fcSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "forecast",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FcEntry",
                    "optional": false,
                    "description": "<p>Contains the newest version of forecast</p>\n",
                    "line": 43,
                    "rawdescription": "\n\nContains the newest version of forecast\n"
                },
                {
                    "name": "hasProjectInputFocus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "isCorValueBiggerThanZero",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "isProjectInputValid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "projects",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Project[]",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "projectSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "remainingDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "summaryData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTableDataSource<any>",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 59
                }
            ],
            "methodsClass": [
                {
                    "name": "commentUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalls comment-update in forecast-service.\n",
                    "description": "<p>Calls comment-update in forecast-service.</p>\n"
                },
                {
                    "name": "errorMessage",
                    "args": [
                        {
                            "name": "hasProjectInputFocus",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isProjectInputValid",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isCorValueBiggerThanZero",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 218,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "hasProjectInputFocus",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isProjectInputValid",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isCorValueBiggerThanZero",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fcIsLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 212,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTest is forecast is locked for logged-in user\n",
                    "description": "<p>Test is forecast is locked for logged-in user</p>\n"
                },
                {
                    "name": "hasLeadRole",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 198,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns whether the logged in user has a lead role\n",
                    "description": "<p>Returns whether the logged in user has a lead role</p>\n"
                },
                {
                    "name": "hasPracticeLeadRole",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 205,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns whether the logged in user has a practice lead role\n",
                    "description": "<p>Returns whether the logged in user has a practice lead role</p>\n"
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnsubscribe services when component gets destroyed\n",
                    "description": "<p>Unsubscribe services when component gets destroyed</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInitializes the entry-summary component.\n",
                    "description": "<p>Initializes the entry-summary component.</p>\n"
                },
                {
                    "name": "percentageValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalculates the percentage value\n",
                    "description": "<p>Calculates the percentage value</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6305,
                                "end": 6310,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "value"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6299,
                                "end": 6304,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "projectName",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | undefined",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns the project name to a given id.\n",
                    "description": "<p>Returns the project name to a given id.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6485,
                                "end": 6487,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6479,
                                "end": 6484,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "saveForecast",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalls save forecast in forecast-service.\n",
                    "description": "<p>Calls save forecast in forecast-service.</p>\n"
                },
                {
                    "name": "showVacationWarning",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 229,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "submitForecast",
                    "args": [
                        {
                            "name": "remainDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSubmits forecast (save + lock)\n",
                    "description": "<p>Submits forecast (save + lock)</p>\n",
                    "jsdoctags": [
                        {
                            "name": "remainDays",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "unlockForecast",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnlock a forecast\n",
                    "description": "<p>Unlock a forecast</p>\n"
                },
                {
                    "name": "uploadSavedForecast",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>forecast-entry individual summary component</p>\n",
            "rawdescription": "\n\nforecast-entry individual summary component\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, OnDestroy } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatDialog, MatDialogRef } from \"@angular/material/dialog\";\r\n\r\nimport { FcProject } from '../../../core/interfaces/fcProject';\r\nimport { Month } from '../../../core/interfaces/month';\r\n\r\nimport { ForecastService } from '../../../core/services/forecasts/forecast.service';\r\nimport { UtilitiesService } from '../../../core/services/utilities.service';\r\nimport { Project } from '../../../core/interfaces/project';\r\nimport { FcEntry } from '../../../core/interfaces/fcEntry';\r\nimport { Subscription } from 'rxjs';\r\nimport { AuthService } from '../../../core/security/auth.service';\r\nimport { environment as env } from '../../../../environments/environment';\r\nimport { DataSharingService } from '../../../core/shared/data-sharing.service';\r\nimport { SummaryDataProject, SummaryData } from '../../../core/interfaces/summaryData';\r\nimport { User } from '../../../core/interfaces/user';\r\nimport { FcEntrySummaryVacationWarningComponent } from './vacation-warning/fc-entry-summary-vacation-warning.component';\r\n\r\n/**\r\n * forecast-entry individual summary component\r\n */\r\n@Component({\r\n  selector: 'app-fc-entry-summary',\r\n  templateUrl: './fc-entry-summary.component.html',\r\n  styleUrls: ['./fc-entry-summary.component.scss'],\r\n})\r\nexport class FcEntrySummaryComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * userId (received as input)\r\n   */\r\n  @Input('userId') userId: number;\r\n\r\n  /**\r\n   * month (received as input)\r\n   */\r\n  @Input('month') month: Month;\r\n\r\n  /**\r\n   * Contains the newest version of forecast\r\n   */\r\n  forecast: FcEntry;\r\n\r\n  projects: Project[];\r\n\r\n  fcProjectsDS: MatTableDataSource<FcProject>;\r\n  fcSubscription: Subscription;\r\n  projectSubscription: Subscription;\r\n\r\n  hasProjectInputFocus: boolean;\r\n  isProjectInputValid: boolean;\r\n  isCorValueBiggerThanZero: boolean;\r\n\r\n  remainingDays: number;\r\n\r\n  summaryData: MatTableDataSource<any>;\r\n\r\n  user: User;\r\n\r\n  /**\r\n   * forecast-entry summary constructor\r\n   * @param dialog\r\n   */\r\n  constructor(\r\n    private utilitiesService: UtilitiesService,\r\n    private forecastService: ForecastService,\r\n    private authService: AuthService,\r\n    private dataSharingService: DataSharingService,\r\n    private snackBar: MatSnackBar,\r\n    public dialog: MatDialog\r\n  ) { \r\n    \r\n  }\r\n\r\n  /**\r\n   * Initializes the entry-summary component.\r\n   */\r\n  ngOnInit(): void {\r\n    \r\n\r\n    this.fcSubscription = this.forecastService.forecasts$\r\n      .subscribe((forecasts: FcEntry[]) => {\r\n        this.forecast = forecasts.find((fc: FcEntry) => fc.monthId === this.month.id && fc.userId === this.userId);\r\n        if (this.forecast) {\r\n          this.fcProjectsDS = new MatTableDataSource(this.forecast.projects.filter((p: FcProject) => typeof p.projectId !== 'undefined'));\r\n          this.summaryData = new MatTableDataSource(\r\n            [\r\n              {title: \"Expected working days\", days: (this.forecast.totalDays)},\r\n              {title: \"Billable days\", days: (this.forecast.billableDays)},\r\n              {title: \"Non-billable days\", days: (this.forecast.nonbillableDays)},\r\n              {title: \"Total forecasted days\", days: (this.forecast.billableDays + this.forecast.nonbillableDays)},\r\n              {title: \"Remaining days to forecast\", days: (this.forecast.totalDays - (this.forecast.billableDays + this.forecast.nonbillableDays))},\r\n            ]\r\n          );\r\n        }\r\n      });\r\n\r\n    this.projectSubscription = this.utilitiesService.projects$\r\n      .subscribe((projects: Project[]) => {\r\n        this.projects = projects;\r\n      });\r\n\r\n    this.dataSharingService.hasProjectInputFocus().subscribe(hasFocus => this.hasProjectInputFocus = hasFocus);\r\n    this.dataSharingService.isProjectInputValid().subscribe(isValid => this.isProjectInputValid = isValid);\r\n    this.dataSharingService.isCorValueBiggerThanZero().subscribe(isBigger => this.isCorValueBiggerThanZero = isBigger);\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe services when component gets destroyed\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.fcSubscription.unsubscribe();\r\n    this.projectSubscription.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * Calls comment-update in forecast-service.\r\n   */\r\n  commentUpdate(): void {\r\n    this.forecastService.setForecastComment(this.month.id, this.userId, this.forecast.comment);\r\n  }\r\n\r\n  /**\r\n   * Calls save forecast in forecast-service.\r\n   */\r\n  saveForecast(): void {\r\n    let vacationProject = this.projects.find(p => p.name === \"0IDVAC793 - Austria Vacation\");\r\n    let vacationForecast = this.forecast.projects.find(p => p.projectId === vacationProject.id);\r\n    if(vacationForecast.plannedProjectDays <= 0){\r\n      this.showVacationWarning().then(result=>{\r\n        if(result){\r\n          this.uploadSavedForecast();\r\n        }\r\n      });\r\n    }else{\r\n      this.uploadSavedForecast();\r\n    }\r\n  }\r\n\r\n  uploadSavedForecast() {\r\n    for(var i = 0; i < this.forecast.projects.length; i++) {\r\n      if(this.forecast.projects[i].mandatory == \"N\" && this.forecast.projects[i].plannedProjectDays <= 0) {\r\n        this.snackBar.open(\"You can't forecast 0 days for non-mandatory projects!\", 'OK', { duration: 10000, });\r\n        return;\r\n      }\r\n    }\r\n    \r\n    this.forecastService.saveForecast(this.month.id, this.userId);\r\n    if (!(navigator.userAgent.indexOf(\"Firefox\") > -1)) window.location.reload();\r\n  }\r\n\r\n  /**\r\n   * Submits forecast (save + lock)\r\n   */\r\n  submitForecast(remainDays: number): void {\r\n    for(var i = 0; i < this.forecast.projects.length; i++) {\r\n      if(this.forecast.projects[i].mandatory == \"N\" && this.forecast.projects[i].plannedProjectDays <= 0) {\r\n        this.snackBar.open(\"You can't forecast 0 days for non-mandatory projects!\", 'OK', { duration: 10000, });\r\n        return;\r\n      }\r\n    }\r\n\r\n    this.remainingDays = remainDays;\r\n    this.forecastService.saveForecast(this.month.id, this.userId, true);\r\n    if (!(navigator.userAgent.indexOf(\"Firefox\") > -1)) window.location.reload();\r\n  }\r\n\r\n  /**\r\n   * Unlock a forecast\r\n   */\r\n  unlockForecast(): void {\r\n    this.forecastService.unlockForecast(this.month.id, this.userId);\r\n  }\r\n\r\n  /**\r\n   * Calculates the percentage value\r\n   * @param value\r\n   */\r\n  percentageValue(value: number): number {\r\n    return parseFloat((value * 100).toFixed(0));\r\n  }\r\n\r\n  /**\r\n   * Returns the project name to a given id.\r\n   * @param id\r\n   */\r\n  projectName(id: number): string | undefined {\r\n    if (id === 0) {\r\n      return 'Non billable days';\r\n    }\r\n    return this.projects.find((p: Project) => p.id === id) ? this.projects.find((p: Project) => p.id === id).name : undefined;\r\n  }\r\n\r\n  /**\r\n   * Returns whether the logged in user has a lead role\r\n   */\r\n  hasLeadRole(): boolean {\r\n    return this.authService.hasRole(env.roles.pdl);\r\n  }\r\n\r\n  /**\r\n   * Returns whether the logged in user has a practice lead role\r\n   */\r\n  hasPracticeLeadRole(): boolean {\r\n    return this.authService.hasRole(env.roles.pl);\r\n  }\r\n\r\n  /**\r\n   * Test is forecast is locked for logged-in user\r\n   */\r\n  fcIsLocked(): boolean {\r\n    if (this.forecast && this.forecast.locked >= this.authService.getRoleId()) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  errorMessage(hasProjectInputFocus: boolean, isProjectInputValid: boolean,isCorValueBiggerThanZero: boolean): string{\r\n    if(hasProjectInputFocus) {\r\n     return \"Please choose a project\";\r\n   } \r\n    else if (isProjectInputValid) {\r\n      return \"Required fields missing (e.g. days, probability) \"\r\n    }\r\n    else {\r\n      return \"\"\r\n    }\r\n  }\r\n  showVacationWarning(): Promise<boolean> {\r\n    let dialogRef: any = this.dialog.open(FcEntrySummaryVacationWarningComponent,{\r\n      height: 'auto',\r\n      width: 'auto'\r\n    });\r\n    return dialogRef.afterClosed().toPromise();\r\n  }\r\n}\r\n\r\n\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../assets/styles/variables.scss';\n\n.mat-raised-button.mat-primary, .mat-stroked-button.mat-primary-reversed {\n\tmargin-left: 5px;\n\n\t&:first-child {\n\t\tmargin-left: 0;\n\t}\n}\n\n\n\n.card-section.days {\n\tdisplay: flex;\n\t\n\t.summary-table {\n\t\tflex: auto;\n\t\tpadding: 12px;\n\n\t\t.column-days{\n\t\t\tpadding-top: 8px;\n\t\t\tpadding-left: 12px;\n\n\t\t\t.note {\n\t\t\t\tcolor: map-get($font-colors, blue);\n\t\t\t\tfont-weight: bolder;\n\t\t\t\tfont-size: 12px;\n\t\t\t}\n\t\t\t.remaining {\n\t\t\t\tfont-weight: bolder;\n\t\t\t}\n\t\t}\n\t}\n}\n\n.mat-divider{\n\tborder-top-width: 1px;\n\tborder-top-style: dashed;\n\tborder-top-color: black;\n  }\n\n.mat-error{\n\tpadding: 10px;\n}  ",
                    "styleUrl": "./fc-entry-summary.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>forecast-entry summary constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataSharingService",
                        "type": "DataSharingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 59,
                "rawdescription": "\n\nforecast-entry summary constructor\n",
                "jsdoctags": [
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataSharingService",
                        "type": "DataSharingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 2145,
                            "end": 2151,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialog"
                        },
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2139,
                            "end": 2144,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<mat-card class=\"summary-box individual\">\n\t<mat-card-title>\n\t\tSummary {{month.name}}\n\t</mat-card-title>\n\n\t<mat-card-content>\n\t\t<div class=\"card-section days\">\n\t\t\t<table mat-table [dataSource]=\"summaryData\">\n\t\t\t\t<ng-container matColumnDef=\"title\">\n\t\t\t\t\t<th mat-header-cell *matHeaderCellDef>Name</th>\n\t\t\t\t\t<td mat-cell *matCellDef=\"let element\">{{ element.title }} </td>\n\t\t\t\t\t<!-- <td mat-footer-cell *matFooterCellDef>\n\t\t\t\t\t\t<span class=\"remaining\">Expected days</span>\n\t\t\t\t\t</td> -->\n\t\t\t\t</ng-container>\n\t\t\t\t<ng-container matColumnDef=\"days\">\n\t\t\t\t\t<th mat-header-cell *matHeaderCellDef>Days</th>\n\t\t\t\t\t<td mat-cell *matCellDef=\"let element\">{{ element.days | number: '1.0-2':'de' }}</td>\n\t\t\t\t\t<!-- <td mat-footer-cell *matFooterCellDef>\n\t\t\t\t\t\t<span class=\"remaining\">(forecast.totalDays - (forecast.billableDays + forecast.nonbillableDays))</span>\n\t\t\t\t\t</td> -->\n\t\t\t\t</ng-container>\n\t\t\t\t<tr mat-header-row *matHeaderRowDef=\"['title', 'days']\"></tr>\n\t\t\t\t<tr mat-row *matRowDef=\"let row; columns: ['title', 'days']\"></tr>\n\t\t\t\t<!-- <tr mat-footer-row *matFooterRowDef=\"['title', 'days']\"></tr> -->\n\t\t\t</table>\n\t\t</div>\n\n\t\t<div>\n\t\t\t<mat-form-field appearance=\"outline\">\n\t\t\t<mat-label>Comments</mat-label>\n\t\t\t<textarea matInput [(ngModel)]=\"forecast.comment\" (blur)=\"commentUpdate()\" name=\"comment\" [disabled]=\"fcIsLocked()\" maxLength=\"500\"\n\t\t\t\tcdkTextareaAutosize #autosize=\"cdkTextareaAutosize\" cdkAutosizeMinRows=\"4\" cdkAutosizeMaxRows=\"6\" placeholder=\"Leave a comment\"></textarea>\n\t\t\t</mat-form-field>\n\t\t</div>\n\n\t\t<div class=\"card-section\">\n\t\t\t<mat-chip-list>\n\t\t\t\t<mat-chip><mat-icon>timeline</mat-icon>ARVE {{percentageValue(forecast.arve)}}%</mat-chip>\n\t\t\t\t<mat-chip><mat-icon>timeline</mat-icon>URVE {{percentageValue(forecast.urve)}}%</mat-chip>\n\t\t\t</mat-chip-list>\n\t\t</div>\n\t\t<br>\n\t\t<br>\n\t\t<div class=\"card-section\" *ngIf=\"fcIsLocked()\">\n\t\t\t<div class=\"summary-warning\">\n\t\t\t\t<mat-icon class=\"icon\">check_circle</mat-icon>\n\t\t\t\t<strong>Your forecast has been successfully submitted. </strong>\n\t\t\t\t<ng-container *ngIf=\"!hasLeadRole()\">Ask your team lead if you have to make further changes.</ng-container>\n\t\t\t\t<ng-container *ngIf=\"remainingDays > 0\"> \n\t\t\t\t\t{{remainingDays}} remaining days have been added to 100528772 - Bench Time_non-client_APPS automatically.\n\t\t\t\t</ng-container>\n\t\t\t</div>\n\n\t\t\t<button mat-stroked-button *ngIf=\"hasPracticeLeadRole() && fcIsLocked()\" class=\"mat-primary-reversed align-right\"\n\t\t\t\t(click)=\"unlockForecast()\" [disabled]=\"(forecast.billableDays + forecast.nonbillableDays) > forecast.totalDays\">\n\t\t\t\t<mat-icon>lock_open</mat-icon> Unlock\n\t\t\t</button>\n\t\t</div>\n\n\t\t<button mat-stroked-button class=\"mat-primary-reversed\" \n\t\t\t*ngIf=\"!fcIsLocked()\" (click)=\"saveForecast()\" [disabled]=\"((forecast.billableDays + forecast.nonbillableDays) > forecast.totalDays) || hasProjectInputFocus || !isProjectInputValid || !isCorValueBiggerThanZero\">\n\t\t\t<mat-icon>save</mat-icon> Save\n\t\t</button>\n\n\t\t<button mat-stroked-button class=\"mat-primary-reversed align-right\"\n\t\t\t*ngIf=\"!fcIsLocked()\" (click)=\"submitForecast(forecast.totalDays - (forecast.billableDays + forecast.nonbillableDays))\" [disabled]=\"((forecast.billableDays + forecast.nonbillableDays) > forecast.totalDays) || hasProjectInputFocus || !isProjectInputValid || !isCorValueBiggerThanZero\">\n\t\t\t<mat-icon>lock</mat-icon> Submit\n\t\t</button>\n\t\t\n\t\t<div *ngIf=\"((forecast.billableDays + forecast.nonbillableDays) > forecast.totalDays) || hasProjectInputFocus || !isProjectInputValid || !isCorValueBiggerThanZero\">\n\t\t\t<ng-container>\n\t\t\t  <mat-error >{{errorMessage(hasProjectInputFocus,!isProjectInputValid,!isCorValueBiggerThanZero)}}</mat-error>\n\t\t\t</ng-container>\n\t\t  </div>\n\n\t\t<div class=\"card-section button-row\" *ngIf=\"!fcIsLocked()\">\n\t\t\t<div class=\"summary-warning error\" *ngIf=\"(forecast.billableDays + forecast.nonbillableDays) > forecast.totalDays\">\n\t\t\t\t<mat-icon class=\"icon\">warning</mat-icon>\n\t\t\t\tIt is not possible to assign more than <strong>{{forecast.totalDays}} days</strong> for this month!<br>\n\t\t\t\tThere are currently <strong>{{(forecast.billableDays + forecast.nonbillableDays)}} days</strong> assigned.\n\t\t\t</div>\n\t\t</div>\n\n\t</mat-card-content>\n</mat-card>"
        },
        {
            "name": "FcEntrySummaryVacationWarningComponent",
            "id": "component-FcEntrySummaryVacationWarningComponent-befb9dfd158503da9808af8b41760608",
            "file": "src/app/forecast/components/fc-entry-summary/vacation-warning/fc-entry-summary-vacation-warning.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-fc-entry-summary-vacation-warning",
            "styleUrls": [
                "./fc-entry-summary-vacation-warning.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./fc-entry-summary-vacation-warning.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Inject } from '@angular/core';\r\nimport { MatDialogRef, MatDialog, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\n\r\n\r\n@Component({\r\n  selector: 'app-fc-entry-summary-vacation-warning',\r\n  templateUrl: './fc-entry-summary-vacation-warning.html',\r\n  styleUrls: [\"./fc-entry-summary-vacation-warning.component.scss\"]\r\n})\r\nexport class FcEntrySummaryVacationWarningComponent {\r\n\r\n  /**\r\n   * default constructor for confirmMessageDialog\r\n   * @param dialogRef\r\n   * */\r\n  constructor( \r\n    private dialogRef: MatDialogRef<FcEntrySummaryVacationWarningComponent>) {\r\n    }  \r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-dialog-content, .tab-container, .mat-dialog-container {\r\n    overflow: hidden;\r\n}",
                    "styleUrl": "./fc-entry-summary-vacation-warning.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>default constructor for confirmMessageDialog</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<FcEntrySummaryVacationWarningComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "rawdescription": "\n\ndefault constructor for confirmMessageDialog\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 478,
                            "end": 487,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialogRef"
                        },
                        "type": "MatDialogRef<FcEntrySummaryVacationWarningComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 472,
                            "end": 477,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "templateData": "<title  mat-dialog-title>Vacation-Warning</title>\r\n<mat-dialog-content class=\"content\" style=\"font-size: small;\">\r\n        Your vacation days are set to <strong>0</strong>. <br/>\r\n        Are you sure you want to proceeed?\r\n</mat-dialog-content>\r\n<mat-dialog-actions>\r\n    <button mat-raised-button class=\"mat-primary\" mat-dialog-close cdkFocusInitial [mat-dialog-close]=\"false\">Go Back</button>\r\n    <button mat-stroked-button class=\"mat-primary-reversed align-right\"mat-button [mat-dialog-close]=\"true\">Proceed</button>\r\n</mat-dialog-actions>"
        },
        {
            "name": "FcProjectComponent",
            "id": "component-FcProjectComponent-7850a9c9e00d78a63e3838f554120511",
            "file": "src/app/forecast/components/fc-project/fc-project.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-fc-project",
            "styleUrls": [
                "./fc-project.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./fc-project.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "forecast",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "FcEntry"
                },
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "number"
                },
                {
                    "name": "lastEditor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string"
                },
                {
                    "name": "monthId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "number"
                },
                {
                    "name": "project",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "FcProject"
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "availableProbabilities",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Probability[]",
                    "optional": false,
                    "description": "<p>list of all probabilities</p>\n",
                    "line": 37,
                    "rawdescription": "\n\nlist of all probabilities\n"
                },
                {
                    "name": "availableProjects",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Project[]",
                    "optional": false,
                    "description": "<p>list of all projects</p>\n",
                    "line": 42,
                    "rawdescription": "\n\nlist of all projects\n"
                },
                {
                    "name": "filteredProjects",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Project[]",
                    "optional": false,
                    "description": "<p>list of filtered projects</p>\n",
                    "line": 47,
                    "rawdescription": "\n\nlist of filtered projects\n"
                },
                {
                    "name": "projectControl",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "<p>projectcontrol attribute for angular material autocomplete</p>\n",
                    "line": 52,
                    "rawdescription": "\n\nprojectcontrol attribute for angular material autocomplete\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "addProjectMail",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 387,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "applyFilter",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\napply filter method for material autocomplete to only show filtered values\n",
                    "description": "<p>apply filter method for material autocomplete to only show filtered values</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3083,
                                "end": 3088,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "value"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3077,
                                "end": 3082,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "callDataUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 198,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPasses updated data to the summary\n",
                    "description": "<p>Passes updated data to the summary</p>\n"
                },
                {
                    "name": "checkCORValueBiggerThanZero",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 340,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearProjectId",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 191,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemoves projectId when Autocomplete panel is opened\n",
                    "description": "<p>Removes projectId when Autocomplete panel is opened</p>\n"
                },
                {
                    "name": "displayProjectName",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ndisplay project name by id method for material autocomplete\n",
                    "description": "<p>display project name by id method for material autocomplete</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4342,
                                "end": 4351,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "projectId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 4336,
                                "end": 4341,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "fcIsLocked",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 381,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTest is forecast is locked for logged-in user\n",
                    "description": "<p>Test is forecast is locked for logged-in user</p>\n"
                },
                {
                    "name": "hasCORValue",
                    "args": [
                        {
                            "name": "cor",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 332,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTests if a COR value has already been entered\n",
                    "description": "<p>Tests if a COR value has already been entered</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 9307,
                                "end": 9310,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "cor"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 9301,
                                "end": 9306,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "hasLeadRole",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 320,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns whether the logged in user has a lead role\n",
                    "description": "<p>Returns whether the logged in user has a lead role</p>\n"
                },
                {
                    "name": "hasPLRole",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 324,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "history",
                    "args": [
                        {
                            "name": "attribute",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | boolean",
                    "typeParameters": [],
                    "line": 240,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLoads the history data of a specific forecast\n\n",
                    "description": "<p>Loads the history data of a specific forecast</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6816,
                                "end": 6825,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "attribute"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6810,
                                "end": 6815,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 6838,
                                "end": 6843,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6832,
                                "end": 6837,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "isFixedInternal",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 370,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTests if a project is automatically set as internal\n",
                    "description": "<p>Tests if a project is automatically set as internal</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 10296,
                                "end": 10305,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "projectId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 10290,
                                "end": 10295,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "isMandatory",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 358,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTests if a project is mandatory\n",
                    "description": "<p>Tests if a project is mandatory</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 10018,
                                "end": 10027,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "projectId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 10012,
                                "end": 10017,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInitializes forecast entry component.\n",
                    "description": "<p>Initializes forecast entry component.</p>\n"
                },
                {
                    "name": "onProjectDaysBlur",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onProjectInputBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onProjectInputFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "projectName",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 310,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns the name of a project.\n",
                    "description": "<p>Returns the name of a project.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 8818,
                                "end": 8820,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 8812,
                                "end": 8817,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "removeProjectFromForecast",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemoves a project from the forecast.\n",
                    "description": "<p>Removes a project from the forecast.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4914,
                                "end": 4919,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4908,
                                "end": 4913,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setProjectInputValidness",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "switchBillable",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 224,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toErrorClass",
                    "args": [
                        {
                            "name": "errtext",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 406,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nTurns an error test into a css class\n",
                    "description": "<p>Turns an error test into a css class</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 11112,
                                "end": 11119,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "errtext"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 11106,
                                "end": 11111,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>the text of the error</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "validateProjects",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>forecast-entry component</p>\n",
            "rawdescription": "\n\nforecast-entry component\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, ViewChild, ElementRef } from \"@angular/core\";\nimport { MatDialog, MatDialogRef } from \"@angular/material/dialog\";\n\nimport { ForecastService } from \"../../../core/services/forecasts/forecast.service\";\nimport { UtilitiesService } from \"../../../core/services/utilities.service\";\n\nimport { FcEntry } from \"../../../core/interfaces/fcEntry\";\nimport { FcProject } from \"../../../core/interfaces/fcProject\";\nimport { Project } from \"../../../core/interfaces/project\";\nimport { Probability } from \"../../../core/interfaces/probability\";\nimport { AuthService } from \"../../../core/security/auth.service\";\nimport { FormBuilder, Validators, FormControl } from \"@angular/forms\";\nimport { environment as env } from \"../../../../environments/environment\";\nimport { ConfirmMessageDialog } from \"../../dialogs/confirm-message/confirm-message.dialog\";\nimport { ProjectRequestDialog } from \"../../dialogs/add-project/project-request.dialog\";\nimport { DataSharingService } from \"../../../core/shared/data-sharing.service\";\n\n/**\n * forecast-entry component\n */\n@Component({\n  selector: \"app-fc-project\",\n  templateUrl: \"./fc-project.component.html\",\n  styleUrls: [\"./fc-project.component.scss\"],\n})\nexport class FcProjectComponent implements OnInit {\n  @Input(\"forecast\") forecast: FcEntry;\n  @Input(\"project\") project: FcProject;\n  @Input(\"index\") i: number;\n  @Input(\"monthId\") monthId: number;\n  @Input(\"userId\") userId: number;\n  @Input(\"lastEditor\") lastEditor: string;\n\n  /**\n   * list of all probabilities\n   */\n  availableProbabilities: Probability[] = [];\n\n  /**\n   * list of all projects\n   */\n  availableProjects: Project[] = [];\n\n  /**\n   * list of filtered projects\n   */\n  filteredProjects: Project[] = [];\n\n  /**\n   * projectcontrol attribute for angular material autocomplete\n   */\n  projectControl: FormControl = new FormControl();\n\n  /**\n   * forecast-entry component constructor\n   * @param dialog\n   * @param fb\n   * @param authService\n   * @param utilitiesService\n   * @param forecastService\n   */\n  constructor(\n    private dialog: MatDialog,\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private utilitiesService: UtilitiesService,\n    private forecastService: ForecastService,\n    private dataSharingService: DataSharingService\n  ) {}\n\n  /**\n   * Initializes forecast entry component.\n   */\n  ngOnInit(): void {\n    this.projectControl = this.fb.control(\n      {\n        value: this.project.projectId,\n        disabled:\n          this.forecast.locked >= this.authService.getRoleId() ? true : false,\n      },\n      Validators.required\n    );\n    this.availableProjects = this.utilitiesService.getProjects();\n    this.filteredProjects = this.availableProjects.filter(\n      (p: Project) => p.active === true\n    );\n    this.availableProbabilities = this.utilitiesService.getProbabilities();\n\n    this.dataSharingService.setProjectInputValid(true);\n    this.validateProjects();\n    this.checkCORValueBiggerThanZero();\n  }\n\n  /**\n   * apply filter method for material autocomplete to only show filtered values\n   * @param value\n   */\n  applyFilter(value: string): void {\n    const filteredValue: string = value.toLowerCase();\n    this.filteredProjects = this.availableProjects.filter(\n      (p: Project) =>\n        p.active === true && p.name.toLowerCase().includes(filteredValue)\n    );\n  }\n\n  onProjectInputFocus(): void {\n    this.dataSharingService.setProjectInputFocus(true);\n  }\n\n  onProjectInputBlur(): void {\n    this.dataSharingService.setProjectInputFocus(false);\n\n    if (this.filteredProjects.length === 1) {\n      this.projectControl.setValue(this.filteredProjects[0].id);\n    }\n    this.validateProjects();\n    //this.callDataUpdate();\n  }\n\n  validateProjects(): void {\n    if (!this.project.projectId) {\n      for (let p of this.availableProjects) {\n        if (p.id === this.projectControl.value) {\n          this.project.projectId = p.id;\n          break;\n        }\n      }\n    }\n\n    this.forecastService.validateProjects(this.forecast);\n    this.setProjectInputValidness();\n    this.checkCORValueBiggerThanZero();\n  }\n\n  onProjectDaysBlur(event: any): void {\n    if (event.target.value === \"\") {\n      this.project.plannedProjectDays = 0;\n    }\n    this.validateProjects();\n  }\n\n  /**\n   * display project name by id method for material autocomplete\n   * @param projectId\n   */\n  displayProjectName(projectId?: number): string {\n    return projectId ? this.projectName(projectId) : \"\";\n  }\n\n  setProjectInputValidness(): void {\n    if (this.forecast.projects) {\n      this.dataSharingService.setProjectInputValid(true);\n      this.dataSharingService.setCorValueBiggerThanZero(true);\n\n      for (let p of this.forecast.projects) {\n        if (p.errors.length > 0) {\n          this.dataSharingService.setProjectInputValid(false);\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * Removes a project from the forecast.\n   * @param index\n   */\n  removeProjectFromForecast(index: number): void {\n    let dialogRef: MatDialogRef<ConfirmMessageDialog> = this.dialog.open(\n      ConfirmMessageDialog,\n      {\n        data: {\n          message:\n            \"Are you sure you want to remove this project from the forecast?\",\n          button: { cancel: \"Cancel\", submit: \"Remove\" },\n        },\n      }\n    );\n\n    dialogRef.afterClosed().subscribe((remove: boolean) => {\n      if (remove === true) {\n        this.forecastService.removeProject(this.monthId, this.userId, index);\n        this.setProjectInputValidness();\n      }\n    });\n  }\n\n  /**\n   * Removes projectId when Autocomplete panel is opened\n   */\n  clearProjectId(): void {\n    this.project.projectId = undefined;\n  }\n\n  /**\n   * Passes updated data to the summary\n   */\n  callDataUpdate(): void {\n    if (this.project.projectId !== this.projectControl.value) {\n      this.project.projectId =\n        this.projectControl.value === \"\"\n          ? undefined\n          : this.projectControl.value;\n\n      let project: Project = this.availableProjects.find(\n        (p: Project) => p.id === this.project.projectId\n      );\n      this.project.projectId = project === undefined ? undefined : project.id;\n\n      this.project.billable =\n        project && typeof project.billable !== \"undefined\"\n          ? project.billable\n          : true;\n      if (project && project.projectType >= 1 && project.projectType <= 5) {\n        this.project.cor = 0;\n        this.project.externalRevenue = false;\n      }\n    }\n\n    this.forecastService.setForecast(this.forecast, false, true);\n    this.validateProjects();\n  }\n\n  switchBillable(): string {\n    if (this.project.billable) {\n      if (this.project.billable.valueOf()) {\n        return \"Switch to Non-Billable\";\n      }\n    }\n\n    return \"Switch to Billable\";\n  }\n\n  /**\n   * Loads the history data of a specific forecast\n   *\n   * @param attribute\n   * @param index\n   */\n  history(attribute: string, index: number): string | boolean {\n    if (\n      this.forecast.history &&\n      this.forecast.history.length > 0 &&\n      this.forecast.history[0].projects.length > index\n    ) {\n      if (\n        attribute === \"days\" &&\n        this.forecast.history[0].projects[index].plannedProjectDays\n      ) {\n        return (\n          this.lastEditor +\n          \": \" +\n          this.forecast.history[0].projects[index].plannedProjectDays +\n          \" days\"\n        );\n      } else if (\n        attribute === \"cor\" &&\n        this.forecast.history[0].projects[index].cor\n      ) {\n        return (\n          this.lastEditor +\n          \": € \" +\n          this.forecast.history[0].projects[index].cor\n        );\n      } else if (attribute === \"probabilityId\") {\n        return (\n          this.lastEditor +\n          \": \" +\n          this.availableProbabilities.find(\n            (p: Probability) =>\n              p.id === this.forecast.history[0].projects[index].probabilityId\n          ).name\n        );\n      }\n    } else if (this.forecast.createdAt && this.forecast.changedBy) {\n      if (\n        attribute === \"days\" &&\n        this.forecast.projects[index].plannedProjectDays\n      ) {\n        return (\n          this.lastEditor +\n          \": \" +\n          this.forecast.projects[index].plannedProjectDays +\n          \" days\"\n        );\n      } else if (attribute === \"cor\" && this.forecast.projects[index].cor) {\n        return this.lastEditor + \": € \" + this.forecast.projects[index].cor;\n      } else if (\n        attribute === \"probabilityId\" &&\n        this.forecast.projects[index].probabilityId\n      ) {\n        return (\n          this.lastEditor +\n          \": \" +\n          this.availableProbabilities.find(\n            (p: Probability) =>\n              p.id === this.forecast.projects[index].probabilityId\n          ).name\n        );\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Returns the name of a project.\n   * @param id\n   */\n  projectName(id: number): string {\n    let project: Project = this.availableProjects.find(\n      (p: Project) => p.id === id\n    );\n    return project ? project.name : \"\";\n  }\n\n  /**\n   * Returns whether the logged in user has a lead role\n   */\n  hasLeadRole(): boolean {\n    return this.authService.hasRole(env.roles.pdl);\n  }\n\n  hasPLRole(): boolean {\n    return this.authService.hasRole(env.roles.pl);\n  }\n\n  /**\n   * Tests if a COR value has already been entered\n   * @param cor\n   */\n  hasCORValue(cor: number): boolean {\n    if (typeof cor !== \"undefined\") {\n      return true;\n    }\n\n    return false;\n  }\n\n  checkCORValueBiggerThanZero(): void {\n    if (this.project.billable && this.hasLeadRole()) {\n      if (this.project.cor > 0) {\n        this.dataSharingService.setCorValueBiggerThanZero(true);\n      } else {\n        this.dataSharingService.setCorValueBiggerThanZero(false);\n      }\n    } else if (!this.project.billable && this.hasLeadRole()) {\n      this.dataSharingService.setCorValueBiggerThanZero(true);\n    } else if (!this.hasLeadRole()) {\n      this.dataSharingService.setCorValueBiggerThanZero(true);\n    }\n  }\n\n  /**\n   * Tests if a project is mandatory\n   * @param projectId\n   */\n  isMandatory(projectId: number): boolean {\n    return this.availableProjects.find(\n      (p: Project) => p.mandatory === \"Y\" && p.id === projectId\n    )\n      ? true\n      : false;\n  }\n\n  /**\n   * Tests if a project is automatically set as internal\n   * @param projectId\n   */\n  isFixedInternal(projectId: number): boolean {\n    return this.availableProjects.find(\n      (p: Project) => p.projectType > 0 && p.id === projectId\n    )\n      ? true\n      : false;\n  }\n\n  /**\n   * Test is forecast is locked for logged-in user\n   */\n  fcIsLocked(): boolean {\n    if (this.forecast && this.forecast.locked >= this.authService.getRoleId()) {\n      return true;\n    }\n    return false;\n  }\n  addProjectMail() {\n    let dialogRef: MatDialogRef<ProjectRequestDialog> = this.dialog.open(\n      ProjectRequestDialog,\n      {\n        data: {\n          width: \"30%\",\n          maxHeight: \"20%\",\n        },\n      }\n    );\n    dialogRef.afterClosed().subscribe((result) => {\n      console.log(\"The dialog was closed\");\n    });\n  }\n\n  /**\n   * Turns an error test into a css class\n   * @param errtext - the text of the error\n   */\n  toErrorClass(errtext): string {\n    let result = errtext.toLowerCase().split(\".\").join(\"\");\n    return result.replace(/\\s/gi, \"-\");\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../assets/styles/variables.scss\";\n\n.tab-container {\n  display: flow-root;\n}\n.project-container {\n  margin: 0;\n  margin-right: 40px;\n  border: 0;\n\n  .project {\n    min-height: 60px;\n    padding: 0;\n\n    .project-form {\n      padding-right: 50px;\n    }\n\n    .project-element {\n      padding: 0 5px;\n      padding-top: 1.1em;\n\n      &:first-child {\n        padding-left: 0;\n      }\n    }\n\n    .delete-entry {\n      position: absolute;\n      margin: 0;\n      top: 36px;\n      right: -37px;\n\n      transform: translate(0, -50%);\n\n      .mat-icon {\n        position: absolute;\n        top: 50%;\n        right: 50%;\n        width: auto;\n        height: auto;\n        font-size: 20px;\n        margin-top: -12px;\n        margin-right: -10px;\n\n        &.icon--delete {\n          font-size: 26px;\n          margin-right: -13px;\n        }\n\n        &.icon--block {\n          font-size: 30px;\n          margin-right: -15px;\n        }\n      }\n\n      &[disabled] .mat-icon {\n        color: map-get($font-colors, grey-super-light) !important;\n      }\n    }\n  }\n}\n\nmat-error.no-probability-defined {\n  text-align: end !important;\n}\n\n.request-project-btn {\n  background-color: #0070ad;\n  color: #ffffff;\n  font-weight: bold;\n  margin: 5px;\n  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n  border-radius: 3px;\n}\n\n.request-project-btn:hover {\n  background: #42a5f5;\n}\n\n.mat-error {\n  padding: 2px 5px;\n}\n\n.mat-option {\n  height: 40px;\n  line-height: 40px;\n  font-size: $font-size;\n}\n\n.multi-view-box {\n  padding: 10px 5px 0;\n}\n\n.mat-form-field-wrapper {\n  padding-bottom: 0;\n\n  &.mat-form-field-appearance-outline {\n    margin: 0;\n    margin-right: 20px;\n  }\n}\n\n.mat-form-field-outline {\n  margin: 0;\n  margin-right: 20px;\n}\n\n.mat-button-toggle-group {\n  margin: 0.25em 0;\n  width: 100%;\n  height: 38px;\n  border-radius: 0;\n\n  .mat-button-toggle {\n    width: 33.33%;\n    white-space: normal;\n  }\n}\n\n.mat-form-field .mat-slide-toggle {\n  padding: 1px 0 0 1px;\n  position: absolute;\n  top: 0;\n  right: 0;\n  background-color: map-get($font-colors, white);\n  z-index: 10;\n}\n\n.form-element.mat-slide-toggle {\n  height: 45px;\n  margin: 0.25em 0;\n}\n\n.mat-form-field-clone {\n  display: flex;\n  width: 100%;\n  margin: 0.25em 0;\n\n  input {\n    width: 100%;\n    border-radius: 0;\n    border: 1px solid map-get($border-colors, light);\n    font-family: inherit;\n    font-size: 1rem;\n    line-height: 1.2em;\n    padding: 1.2em 0.5em 0.8em;\n    color: map-get($font-colors, grey-light);\n    background-color: transparent;\n  }\n\n  .label {\n    position: absolute;\n    top: 12px;\n    font-size: 0.75rem;\n    line-height: 11px;\n    color: map-get($font-colors, grey-light);\n    margin-left: 5px;\n    padding: 0 5px;\n    background: map-get($font-colors, white);\n  }\n\n  &.not-locked {\n    input {\n      color: map-get($font-colors, black);\n      border-color: map-get($border-colors, medium);\n    }\n\n    .label {\n      color: map-get($font-colors, grey-label);\n    }\n  }\n}\n",
                    "styleUrl": "./fc-project.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>forecast-entry component constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataSharingService",
                        "type": "DataSharingService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 52,
                "rawdescription": "\n\nforecast-entry component constructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1926,
                            "end": 1932,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialog"
                        },
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1920,
                            "end": 1925,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1945,
                            "end": 1947,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "fb"
                        },
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1939,
                            "end": 1944,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1960,
                            "end": 1971,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "authService"
                        },
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1954,
                            "end": 1959,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1984,
                            "end": 2000,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "utilitiesService"
                        },
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1978,
                            "end": 1983,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 2013,
                            "end": 2028,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "forecastService"
                        },
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2007,
                            "end": 2012,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "dataSharingService",
                        "type": "DataSharingService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form class=\"project-form\">\n  <mat-card class=\"project-container\" id=\"project-{{ monthId }}-{{ i }}\">\n    <mat-card-content class=\"project\">\n      <div layout=\"row\" layout-fill>\n        <div [attr.flex]=\"hasLeadRole() ? 35 : 50\" class=\"project-element\">\n          <ng-container *ngIf=\"!isMandatory(project.projectId)\">\n            <mat-form-field\n              appearance=\"outline\"\n              class=\"no-padding\"\n              id=\"projectId-{{ monthId }}-{{ i }}\"\n            >\n              <input\n                type=\"text\"\n                onClick=\"this.select()\"\n                (focus)=\"onProjectInputFocus()\"\n                (blur)=\"onProjectInputBlur()\"\n                placeholder=\"Project\"\n                matInput\n                [formControl]=\"projectControl\"\n                [matAutocomplete]=\"auto\"\n                (ngModelChange)=\"applyFilter($event)\"\n                required\n              />\n              <mat-label>Project</mat-label>\n            </mat-form-field>\n            <mat-autocomplete\n              #auto=\"matAutocomplete\"\n              autoActiveFirstOption\n              [displayWith]=\"displayProjectName.bind(this)\"\n              (opened)=\"clearProjectId()\"\n              (closed)=\"callDataUpdate()\"\n            >\n              <ng-container *ngFor=\"let p of filteredProjects\">\n                <mat-option *ngIf=\"!isMandatory(p.id)\" [value]=\"p.id\">{{\n                  p.name\n                }}</mat-option>\n              </ng-container>\n              <mat-option class=\"request-project-btn\" (click)=\"addProjectMail()\"\n                >Request Project</mat-option\n              >\n            </mat-autocomplete>\n          </ng-container>\n\n          <div\n            class=\"mat-form-field-clone\"\n            [ngClass]=\"{ 'not-locked': !fcIsLocked() }\"\n            *ngIf=\"isMandatory(project.projectId)\"\n          >\n            <input\n              type=\"text\"\n              disabled\n              value=\"{{ projectName(project.projectId) }}\"\n            />\n            <span class=\"label\">Default Project</span>\n          </div>\n        </div>\n\n        <div flex=\"15\" class=\"project-element\">\n          <mat-form-field appearance=\"outline\">\n            <mat-label>{{\n              project.billable ? \"Days (Billable)\" : \"Days (Non-Billable)\"\n            }}</mat-label>\n\n            <input\n              type=\"number\"\n              onClick=\"this.select()\"\n              matInput\n              name=\"plannedProjectDays-{{ monthId }}-{{ i }}\"\n              [(ngModel)]=\"project.plannedProjectDays\"\n              required\n              min=\"0\"\n              (ngModelChange)=\"callDataUpdate()\"\n              [disabled]=\"fcIsLocked()\"\n              (blur)=\"onProjectDaysBlur($event)\"\n              #projectDaysInput\n              matTooltip=\"{{ history('days', i) }}\"\n              matTooltipPosition=\"above\"\n              matTooltipDisabled=\"{{ !history('days', i) }}\"\n            />\n\n            <mat-slide-toggle\n              color=\"primary\"\n              name=\"billable-{{ monthId }}-{{ i }}\"\n              *ngIf=\"!isFixedInternal(project.projectId)\"\n              [(ngModel)]=\"project.billable\"\n              (change)=\"callDataUpdate()\"\n              [disabled]=\"fcIsLocked()\"\n              matTooltip=\"{{ switchBillable() }}\"\n              matTooltipPostition=\"above\"\n              matTooltipDisabled=\"{{ fcIsLocked() }}\"\n            >\n            </mat-slide-toggle>\n          </mat-form-field>\n        </div>\n\n        <div\n          flex=\"15\"\n          *ngIf=\"hasLeadRole() || hasPLRole()\"\n          class=\"project-element\"\n        >\n          <mat-form-field\n            appearance=\"outline\"\n            matTooltip=\"{{ history('cor', i) }}\"\n            matTooltipPosition=\"above\"\n            matTooltipDisabled=\"{{ !history('cor', i) }}\"\n          >\n            <mat-label>{{\n              hasCORValue(project.cor)\n                ? project.externalRevenue\n                  ? \"COR (External Revenue)\"\n                  : \"COR (Internal Revenue)\"\n                : \"COR\"\n            }}</mat-label>\n\n            <input\n              matInput\n              type=\"number\"\n              onClick=\"this.select()\"\n              name=\"cor-{{ monthId }}-{{ i }}\"\n              [(ngModel)]=\"project.cor\"\n              [disabled]=\"\n                isFixedInternal(project.projectId) ||\n                fcIsLocked() ||\n                !project.billable\n              \"\n              required\n              min=\"1\"\n              (ngModelChange)=\"callDataUpdate()\"\n            />\n\n            <mat-slide-toggle\n              color=\"primary\"\n              name=\"revenue-{{ monthId }}-{{ i }}\"\n              *ngIf=\"!isFixedInternal(project.projectId)\"\n              [(ngModel)]=\"project.externalRevenue\"\n              (change)=\"callDataUpdate()\"\n              [disabled]=\"fcIsLocked() || !project.billable\"\n            >\n            </mat-slide-toggle>\n          </mat-form-field>\n        </div>\n\n        <div flex=\"35\" class=\"project-element\">\n          <mat-button-toggle-group\n            name=\"probabilityId-{{ monthId }}-{{ i }}\"\n            [(ngModel)]=\"project.probabilityId\"\n            required\n            (ngModelChange)=\"callDataUpdate()\"\n            [disabled]=\"fcIsLocked()\"\n            matTooltip=\"{{ history('probabilityId', i) }}\"\n            matTooltipPosition=\"above\"\n            matTooltipDisabled=\"{{ !history('probabilityId', i) }}\"\n          >\n            <mat-button-toggle\n              *ngFor=\"let p of availableProbabilities\"\n              [value]=\"p.id\"\n              >{{ p.name }}</mat-button-toggle\n            >\n          </mat-button-toggle-group>\n        </div>\n\n        <button\n          mat-icon-button\n          type=\"button\"\n          class=\"delete-entry\"\n          [disabled]=\"isMandatory(project.projectId) || fcIsLocked()\"\n          (click)=\"removeProjectFromForecast(i)\"\n        >\n          <mat-icon\n            [ngClass]=\"{\n              'icon--delete': !(isMandatory(project.projectId) || fcIsLocked())\n            }\"\n            >delete</mat-icon\n          >\n          <mat-icon\n            *ngIf=\"isMandatory(project.projectId) || fcIsLocked()\"\n            class=\"icon--block\"\n            >block</mat-icon\n          >\n        </button>\n      </div>\n    </mat-card-content>\n  </mat-card>\n\n  <div *ngIf=\"project.errors\">\n    <ng-container *ngFor=\"let error of project.errors\">\n      <mat-error [ngClass]=\"toErrorClass(error)\">{{ error }}</mat-error>\n    </ng-container>\n  </div>\n</form>\n"
        },
        {
            "name": "FeedBackDialogComponent",
            "id": "component-FeedBackDialogComponent-5004103e4027f0c606fcabdf604c5e3f",
            "file": "src/app/layout/dialogs/feedback/feedback-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-feedback-dialog",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./feedback-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "line": 32,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<FeedBackDialogComponent>",
                    "optional": false,
                    "line": 28,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "projectCode",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "projectComment",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "projectName",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openEmail",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Component for Feedback Dialog</p>\n",
            "rawdescription": "\n\nComponent for Feedback Dialog\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from \"@angular/core\";\nimport { MatDialogRef, MAT_DIALOG_DATA } from \"@angular/material/dialog\";\nimport { HttpClient } from '@angular/common/http';\nimport { BusinessOperationsService } from '../../../core/shared/business-operations.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ProjectRequest } from \"../../../core/interfaces/projectRequest\";\n/**\n * Component for Feedback Dialog\n */\n@Component({\n  selector: 'app-feedback-dialog',\n  templateUrl: \"./feedback-dialog.component.html\"\n})\nexport class FeedBackDialogComponent {\n  \n  projectCode:String = \"\";\n\n  projectName:String = \"\";\n\n  projectComment:String = \"\";\n  \n  /**\n   * default constructor for addProjectDialog\n   * @param dialogRef\n   * @param data\n   */\n  constructor(\n    public dialogRef: MatDialogRef<FeedBackDialogComponent>,\n    private http: HttpClient,\n    private snackBar: MatSnackBar,\n    private BO: BusinessOperationsService,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n  ) {\n    this.projectCode = data.code;\n    this.projectName = data.name;\n    this.projectComment = data.comment;\n\n  }\n\n  public openEmail() {\n  }\n\n  ngOnInit(): void {\n\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>default constructor for addProjectDialog</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<FeedBackDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "rawdescription": "\n\ndefault constructor for addProjectDialog\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 740,
                            "end": 749,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialogRef"
                        },
                        "type": "MatDialogRef<FeedBackDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 734,
                            "end": 739,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 762,
                            "end": 766,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "data"
                        },
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 756,
                            "end": 761,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "templateData": "<h2 mat-dialog-title>Project Request</h2>\n<mat-dialog-content>Send a e-mail with following project code and name.</mat-dialog-content>\n<br>\n<mat-form-field>\n  <input matInput placeholder=\"project code\" [(ngModel)]=\"data.code\">\n</mat-form-field>\n<mat-form-field>\n  <input matInput placeholder=\"project name\" [(ngModel)]=\"data.name\">\n</mat-form-field>\n<mat-form-field>\n<textarea matInput [(ngModel)]=\"data.comment\"  name=\"comment\"  maxLength=\"200\"\n        cdkTextareaAutosize #autosize=\"cdkTextareaAutosize\" cdkAutosizeMinRows=\"2\" cdkAutosizeMaxRows=\"6\" placeholder=\"leave a comment\"></textarea>\n</mat-form-field>\n<mat-dialog-actions>\n  <button mat-button  mat-dialog-close cdkFocusInitial [mat-dialog-close]=\"false\">cancel</button>\n  <!-- The mat-dialog-close directive optionally accepts a value as a result for the dialog. -->\n  <button mat-button [mat-dialog-close]=\"true\" (click)=\"openEmail()\">submit </button>\n</mat-dialog-actions>\n"
        },
        {
            "name": "FinancialControllerComponent",
            "id": "component-FinancialControllerComponent-fb8e412745c2b20248b63ace82472b2b",
            "file": "src/app/forecast/pages/financial-controller/financial-controller.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-financial-controller",
            "styleUrls": [
                "./financial-controller.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./financial-controller.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "financial",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FinancialControllerSummaryAPPS[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "financialSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "months",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "monthSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "porbabilitySummarySubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "probabilitySummaries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<number | ProbabilitySummary>",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "initFinancialView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnsubscribes services when component gets destroyed\n",
                    "description": "<p>Unsubscribes services when component gets destroyed</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ninit method\n",
                    "description": "<p>init method</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, Input } from \"@angular/core\";\nimport { Subscription } from 'rxjs';\nimport { ExecutiveForecastsService } from '../../../core/services/forecasts/executive-forecasts.service';\nimport { PageStateService } from '../../../core/shared/page-state.service';\nimport { FinancialControllerSummaryAPPS } from \"../../../core/interfaces/financialAppsSummary\";\nimport { Month } from '../../../core/interfaces/month';\nimport { UtilitiesService } from \"../../../core/services/utilities.service\";\nimport { CalculationService } from \"../../../core/services/forecasts/calculation.service\";\nimport { ProbabilitySummary } from \"../../../core/interfaces/probabilitySummary\";\n\n@Component({\n  selector: \"app-financial-controller\",\n  templateUrl: \"./financial-controller.component.html\",\n  styleUrls: [\"./financial-controller.component.scss\"],\n})\nexport class FinancialControllerComponent implements OnInit, OnDestroy {\n\n  financial: FinancialControllerSummaryAPPS[] = [];\n\n  probabilitySummaries: Map<number, ProbabilitySummary>;\n\n  months: Month[];\n\n  financialSubscription: Subscription;\n\n  porbabilitySummarySubscription: Subscription;\n\n  monthSubscription: Subscription;\n\n  constructor(\n    private executiveService: ExecutiveForecastsService,\n\t\tprivate pageState: PageStateService,\n    private utilitiesService: UtilitiesService,\n    private calculationService: CalculationService\n  ) {\n  }\n\n  /**\n   * init method\n   */\n  ngOnInit(): void {\n    this.pageState.forecastrReady$.subscribe((ready: boolean) => {\n\t\t\tif (ready) {\n\t\t\t\tthis.initFinancialView();\n\t\t\t}\n\t\t});\n  }\n\n  initFinancialView(): void {\n    this.financialSubscription = this.executiveService.financialData$.subscribe((financialData: FinancialControllerSummaryAPPS[]) => {\n      this.financial = financialData;\n    });\n\n    this.porbabilitySummarySubscription = this.calculationService.probabilitySummaryPerMonth$.subscribe((probabilitySummaries: Map<number,ProbabilitySummary>) =>{\n      this.probabilitySummaries = probabilitySummaries;\n    })\n\n    this.monthSubscription = this.utilitiesService.months$.subscribe((months: Month[]) => {\n      this.months = months.filter((m: Month) => m.active === true);\n      var today = new Date();\n      var todayMonth = new Date(today.getFullYear(), today.getMonth() + 1, 1);\n      this.months = this.months.filter((m: Month) => new Date(m.time) >= todayMonth);\n\n      if (this.months.length > 6) {\n        this.months = this.months.slice(0, 6);\n      }\n\n      if(this.months !== undefined && this.months.length > 0) {\n        this.calculationService.init(this.months[0].id, this.months[this.months.length - 1].id);\n        this.executiveService.initializeFinancialData(this.months[0].id, this.months[this.months.length - 1].id).then(() => {\n          this.pageState.hideSpinner();\n        });\n      }\n    });\n  }\n\n  /**\n   * Unsubscribes services when component gets destroyed\n   */\n  ngOnDestroy(): void {\n    this.financialSubscription.unsubscribe();\n    this.monthSubscription.unsubscribe();\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./financial-controller.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "calculationService",
                        "type": "CalculationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "calculationService",
                        "type": "CalculationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"financial-controller-view\">\n  <div class=\"financial-controller-view-container\">\n      <app-financial-controller-overview *ngIf=\"months && financial\" [financial]=\"financial\" [probabilitySummaries]=\"probabilitySummaries\" [months]=\"months\"></app-financial-controller-overview>\n  </div>\n</div>"
        },
        {
            "name": "FinancialControllerOverviewComponent",
            "id": "component-FinancialControllerOverviewComponent-f49595694d370069e2e52f3879a19fe4",
            "file": "src/app/forecast/components/financial-controller-overview/financial-controller-overview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-financial-controller-overview",
            "styleUrls": [
                "./financial-controller-overview.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./financial-controller-overview.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "financial",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "FinancialControllerSummaryAPPS[]"
                },
                {
                    "name": "months",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "Month[]"
                },
                {
                    "name": "probabilitySummaries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "Map<number | ProbabilitySummary>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "columnsToDisplay",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String[]",
                    "optional": false,
                    "description": "<p>columns which are displaye</p>\n",
                    "line": 46,
                    "rawdescription": "\n\ncolumns which are displaye\n"
                },
                {
                    "name": "columnsToDisplay2",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String[]",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "grades",
                    "defaultValue": "[\n    \"S\",\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\"\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "kpis",
                    "defaultValue": "[\n    \"ROS\",\n    \"ROSint\",\n    \"ROSext\",\n    \"avgVacation\",\n    \"ftecss\",\n    \"urve\",\n    \"arve\",\n    \"cor\",\n    \"btu\",\n    \"pror\",\n    \"arvi\",\n    \"urvi\",\n    \"expectedRevenue\",\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "disable",
                    "args": [
                        {
                            "name": "name",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "exportCSV",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 246,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getGradeNumberFromGrade",
                    "args": [
                        {
                            "name": "grade",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "grade",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initFinancialData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "mapGradeToValue",
                    "args": [
                        {
                            "name": "grade",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "kpi",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "grade",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "kpi",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapKpiToName",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapKpiToUnit",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "mapKpiToValue",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 275,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openPanel",
                    "args": [
                        {
                            "name": "name",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showToggle",
                    "args": [
                        {
                            "name": "name",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, Input } from \"@angular/core\";\n\nimport { Month } from \"../../../core/interfaces/month\";\nimport { FinancialControllerSummaryAPPS } from \"../../../core/interfaces/financialAppsSummary\";\nimport { DatePipe } from \"@angular/common\";\nimport { ProbabilitySummary } from \"../../../core/interfaces/probabilitySummary\";\n\n@Component({\n  selector: 'app-financial-controller-overview',\n  templateUrl: './financial-controller-overview.component.html',\n  styleUrls: ['./financial-controller-overview.component.scss'],\n})\nexport class FinancialControllerOverviewComponent implements OnInit, OnDestroy {\n\n  kpis: string[] = [\n    \"ROS\",\n    \"ROSint\",\n    \"ROSext\",\n    \"avgVacation\",\n    \"ftecss\",\n    \"urve\",\n    \"arve\",\n    \"cor\",\n    \"btu\",\n    \"pror\",\n    \"arvi\",\n    \"urvi\",\n    \"expectedRevenue\",\n  ];\n\n  grades: string[] = [\n    \"S\",\n    \"A\",\n    \"B\",\n    \"C\",\n    \"D\",\n    \"E\",\n    \"F\"\n  ];\n\n  @Input('months') months: Month[];\n\n  /**\n    * columns which are displaye\n   */\n  columnsToDisplay: String[] = [];\n  columnsToDisplay2: String[] = [];\n\n  @Input(\"financial\") financialData: FinancialControllerSummaryAPPS[];\n  @Input(\"probabilitySummaries\") probabilitySummaries: Map<number,ProbabilitySummary>;\n\n  \n\n  constructor(\n    private datePipe: DatePipe,\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.initFinancialData();\n  }\n\n  initFinancialData(): void {\n    this.columnsToDisplay.push('kpi');\n    for (let month of this.months) {\n      this.columnsToDisplay.push(month.name);\n      this.columnsToDisplay2.push(month.name);\n     \n    }\n  }\n\n  showToggle(name: any) : boolean{\n    if(name === 'ftecss' || name === 'avgVacation'){\n      return false;\n    }\n    return true;\n  }\n\n  openPanel(name: any): boolean {\n    if(name !== 'ftecss' && name !== 'avgVacation'){\n      return false;\n    }\n    return true;\n  }\n\n  disable(name: any): boolean {\n    if(name === 'ftecss' || name === 'avgVacation'){\n      return false;\n    }\n    return true;\n  }\n\n  mapKpiToUnit(name: string): string {\n    switch (name) {\n      case \"arve\":\n        return \"%\";\n      case \"arvi\":\n        return \"\";\n      case \"expectedRevenue\":\n        return \"\";\n      case \"avgVacation\":\n        return \"Days\";\n      case \"cor\":\n        return \"€\";\n      case \"btu\":\n        return \"\";\n      case \"avgVacation\":\n        return \"Days\";\n      case \"ftecss\":\n        return \"FTE\";\n      case \"pror\":\n        return \"%\";\n      case \"ROS\":\n        return \"€\";\n      case \"ROSint\":\n        return \"€\";\n      case \"ROSext\":\n        return \"€\";\n      case \"urve\":\n        return \"%\";\n      case \"urvi\":\n        return \"\";\n      default:\n        return undefined;\n    }\n  }\n\n  \n  getGradeNumberFromGrade(grade:string) : number{\n    switch(grade){\n      case 'S':\n        return 1;\n      case 'A':\n        return 2;\n      case 'B':\n        return 3;\n      case 'C':\n        return 4;\n      case 'D':\n        return 5;\n      case 'E':\n        return 6;\n      case 'F':\n        return 7;\n    }\n  }\n\n  mapGradeToValue(grade: string, monthId: number, kpi:string): number {\n    if(!this.probabilitySummaries.has(monthId))\n    { \n      return 0;\n    }\n    let gradeNumber = this.getGradeNumberFromGrade(grade);\n\n    if(kpi === \"avgVacation\"){\n      if(!this.probabilitySummaries.get(monthId).avgVacationDaysPerGrade.has(gradeNumber))\n      {\n        return 0;\n      }\n      return this.probabilitySummaries.get(monthId).avgVacationDaysPerGrade.get(gradeNumber).average;\n    }\n   \n    if(kpi === \"ftecss\")\n    {\n      if(!this.probabilitySummaries.get(monthId).avgFTEPerGrade.has(gradeNumber))\n      {\n        return 0;\n      }\n      return this.probabilitySummaries.get(monthId).avgFTEPerGrade.get(gradeNumber).average;\n    }\n    \n    return 0;\n  }\n\n\n  mapKpiToValue(name: string, monthId: number): number {\n    let entry = this.financialData.find((value: FinancialControllerSummaryAPPS) => value.monthId == monthId);\n\n    if (entry === undefined || !this.probabilitySummaries.has(monthId)) {\n      return 0;\n    }\n    switch (name) {\n      case \"arve\":\n        return  this.probabilitySummaries.get(monthId).arve * 100;\n      case \"arvi\":\n        return entry.arvi;\n      case \"expectedRevenue\":\n        return entry.expectedRevenue;\n      case \"cor\":\n        return this.probabilitySummaries.get(monthId).cor;\n      case \"btu\":\n        return entry.btu;\n      case \"avgVacation\":\n        return entry.avgVacation;\n      case \"ftecss\":\n        return entry.fte;\n      case \"pror\":\n        return entry.pror;\n      case \"ROS\":\n        return this.probabilitySummaries.get(monthId).revenue;\n      case \"ROSint\":\n        return this.probabilitySummaries.get(monthId).internalRevenue;\n      case \"ROSext\":\n        return this.probabilitySummaries.get(monthId).externalRevenue;\n      case \"urve\":\n        return this.probabilitySummaries.get(monthId).urve *100;\n      case \"urvi\":\n        return entry.urvi;\n      default:\n        return undefined;\n    }\n  }\n\n  mapKpiToName(name: string): string {\n    switch (name) {\n      case \"arve\":\n        return \"ARVE\";\n      case \"arvi\":\n        return \"ARVI\";\n      case \"expectedRevenue\":\n        return \"Expected Revenue\";\n      case \"cor\":\n        return \"COR\";\n      case \"btu\":\n        return \"BTU\";\n      case \"avgVacation\":\n        return \"Average Vacation Days\";\n      case \"ftecss\":\n        return \"FTE\";\n      case \"pror\":\n        return \"PROR\";\n      case \"ROS\":\n        return \"ROS\";\n      case \"ROSint\":\n        return \"ROS internal\";\n      case \"ROSext\":\n        return \"ROS external\";\n      case \"urve\":\n        return \"URVE\";\n      case \"urvi\":\n        return \"URVI\";\n      default:\n        return undefined;\n    }\n  }\n  exportCSV(): void {\n    const header = \"KPI;\" + this.months.map((month: Month) => { return month.name }).join(\";\") + \"\\r\\n\";\n    const rows = this.kpis.map((kpi: string) => {\n      return this.mapKpiToName(kpi) + \";\" + this.months.map((month: Month) => {\n        return this.mapKpiToValue(kpi, month.id).toString().replace(\".\",\",\");\n      }).join(\";\");\n    }).join(\"\\r\\n\");\n\n    const data = header + rows;\n\n    const blob: Blob = new Blob([data], { type: \"text/csv\" });\n    const filename: string = this.datePipe.transform(new Date(), \"yyyyMMdd\") + \"-KPISummary.csv\";\n\n    if (window.navigator.msSaveOrOpenBlob) {\n      window.navigator.msSaveOrOpenBlob(blob, filename);\n    } else {\n      const url: string = window.URL.createObjectURL(blob);\n\n      let a: HTMLAnchorElement = document.createElement(\"a\");\n      a.href = url;\n      a.download = filename;\n\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n    }\n  }\n\n  ngOnDestroy(): void {\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../assets/styles/variables.scss';\n\n.goodUt {\n  color:  green;\n}\n\n.medUt {  \n  color: orange;\n}\n\n.badUt {\n  color: red;\n}\n\n.accordion-header {\n    display: flex;\n    flex: 1;\n    flex-direction: row;\n    align-items: center;\n    margin-right: 24px !important; \n    font-weight: bold;\n    padding: 15px 0px 15px 15px;\n    font-size: 1.1rem;\n    color: map-get($font-colors, black);\n    margin-right: 8px;\n    position: sticky;\n  \n    div {\n      display: flex;\n      flex-grow: 1;\n      width: 0;\n      margin-right: 0;\n  \n      &:first-child {\n        padding-left: 10px;\n      }\n  \n      &:not(:first-child) {\n        flex-grow: 2;\n        margin-left: auto; \n        margin-right: 0px; \n        flex-grow: unset; \n        width: 10%;\n        text-align: center;\n      }\n\n      div{\n        padding-left: 0px !important;\n      }\n  \n      span {\n        flex: 1;\n        text-align: center;\n        word-break: break-word;\n      }\n    }\n  }\n\n  .second-header {\n    width: 100%;\n}\n\n.executive-btn {\n    float: right;\n    position: relative;\n}\n\n.mat-icon {\n    font-size: 18px;\n    color: #fff !important;\n}\n\n\n.mat-expansion-panel {\n\tborder-radius: 0;\n\tmargin: 0;\n  \n  /**\n\t&.mat-expanded {\n\t\tmargin-top: 16px;\n\t\tmargin-bottom: 16px;\n  }\n  */\n\n  .mat-expansion-panel-header-description, .mat-expansion-panel-header-title {\n    font-size: 1.1rem;\n    line-height: 1.2rem;\n    width: 0;\n    align-items: center;\n    flex-grow: 1;\n    color: black;\n\n    .mat-cell {\n      font-size: 1.1rem;\n    }\n  }\n  \n  .mat-expansion-panel-header-description {\n    text-align: center; \n    flex-grow: 2;\n  }\n}\n\n.mat-table {\n  margin-right: 24px;\n  position: relative;\n\n  .edit-button {\n    position: absolute;\n    right: 30px;\n  }\n}\n\n.mat-cell, .mat-header-cell {\n  flex: 1;\n  color: map-get($font-colors, black);\n  // width: 8.33%;\n  text-align: center;\n}\n\ntd.mat-cell:first-of-type, td.mat-footer-cell:first-of-type, th.mat-header-cell:first-of-type,\ntd.mat-cell:nth-of-type(2), td.mat-footer-cell:nth-of-type(2), th.mat-header-cell:nth-of-type(2) {\n\tpadding-left: 0px;\n  padding-right: 0px;\n  flex-grow: 4;\n  // width: 16.66%;\n}\n\ntd.mat-cell:first-of-type, td.mat-footer-cell:first-of-type, th.mat-header-cell:first-of-type {\n  text-align: left;\n}\n\n.mat-icon {\n\tfont-size: 20px;\n\tline-height: 20px;\n\n\t&:hover {\n    color: map-get($font-colors, blue);\n\t}\n\n\t&.icon-edited, &.icon-edited:hover {\n\t\tcolor: map-get($font-colors, red);\n\t}\n}\n\n.mat-primary-reversed {\n\n  .align-right {\n    right: 0px;\n  }\n} \n\n.fte {\n  position: absolute;\n  right: 0;\n  display: inline;\n  .mat-icon{\n    position: relative;\n    margin: 5px;\n    margin-top: 20px;\n  }\n  span{\n    color: #00000061;\n    text-align: center;\n    padding-top: 0px;\n    padding: 10px;\n    text-align: center;\n  }\n}\nh3{\n  display: inline;\n  .mat-stroked-button {\n\t  margin: 5px;\n\t  margin-left: 0;\n  }\n}\n\n.button-rows {\n\tdisplay: flex;\n\t.button-row {\n    width: 50%\n  }\n}\n\n.table-container{\n  background-color: white;\n   margin-block-start: 40px;\n}\n\n.grade-content{\n  width: 10% ; \n  margin-left: auto; \n  margin-right: 0px; \n  flex-grow: unset;\n}",
                    "styleUrl": "./financial-controller-overview.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"second-header\">\n    <h1>\n        KPI Overview\n\n        <button class=\"executive-btn\" mat-raised-button color=\"primary\" (click)=\"exportCSV()\">\n            <mat-icon>insert_chart</mat-icon> Download CSV\n        </button>\n    </h1>\n</div>\n\n<div layout=\"row\" layout-wrap class=\"table-container\">\n\t<div flex=\"100\">\n\t\t<div class=\"mat-row accordion-header\">\n            <div>\n                KPI\n            </div>\n\t\t\t<div *ngFor=\"let c of columnsToDisplay2; let index=index;\">\n                <div>\n                    <span>{{ columnsToDisplay2[index] }}</span>\n                </div>\n\t\t\t</div>\n\t\t</div>\n        <mat-divider></mat-divider>\n\t\t<mat-accordion displayMode=\"flat\" multi>\n            <mat-expansion-panel #panelH *ngFor=\"let kpi of kpis; let i = index\" [hideToggle]=\"showToggle(kpis[i])\" (opened)=\"openPanel(kpis[i])\" [disabled]=\"disable(kpis[i])\">\n                <mat-expansion-panel-header >\n                    <mat-panel-title>\n                        {{mapKpiToName(kpis[i])}}\n                    </mat-panel-title>\n                    <mat-panel-description *ngFor=\"let month of months\" style=\"margin-left: auto; margin-right: 0px; flex-grow: unset; width: 10%;\">\n                        <span class=\"mat-cell\">{{mapKpiToValue(kpis[i], month.id) | number: '1.0-2'}} {{mapKpiToUnit(kpis[i])}}</span>\n                    </mat-panel-description>\n                </mat-expansion-panel-header>\n\n                <table mat-table [dataSource]=\"grades\" style=\"margin-right: 0px; padding-right: 0px;\" id=\"\">\n                    <ng-container matColumnDef=\"kpi\">\n                        <th mat-header-cell *matHeaderCellDef>Grade</th>\n                        <td mat-cell *matCellDef=\"let element\">{{element}}</td>\n                    </ng-container>\n                    <ng-container matColumnDef=\"{{month.name}}\" *ngFor=\"let month of months\">\n                        <th mat-header-cell *matHeaderCellDef>{{month.name}}</th>\n                        <td mat-cell class=\"grade-content\" *matCellDef=\"let element\">{{mapGradeToValue(element, month.id, kpi) | number: '1.0-2'}} {{mapKpiToUnit(kpi)}}</td>\n                    </ng-container>\n                    <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\n                    <tr mat-row  *matRowDef=\"let row; columns: columnsToDisplay\"></tr>\n                </table>\n            </mat-expansion-panel>\n        </mat-accordion>\n    </div>\n</div>\n"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-ce0fc3d56c41b85fe4e610a7545ab2b3",
            "file": "src/app/layout/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer",
            "styleUrls": [
                "./footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>footer component</p>\n",
            "rawdescription": "\n\nfooter component\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n/**\n * footer component\n */\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  styleUrls: ['./footer.component.scss'],\n})\nexport class FooterComponent {\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./footer.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": ""
        },
        {
            "name": "ForecastComponent",
            "id": "component-ForecastComponent-472ef927b5fbe18997d443526a4b0841",
            "file": "src/app/forecast/forecast.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "public-forecast",
            "styleUrls": [
                "./forecast.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./forecast.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dashboardMonths",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "<p>Selected months array</p>\n",
                    "line": 64,
                    "rawdescription": "\n\nSelected months array\n"
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "error",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "<p>Error list</p>\n",
                    "line": 49,
                    "rawdescription": "\n\nError list\n"
                },
                {
                    "name": "openRequests",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "<p>List of all open requests</p>\n",
                    "line": 44,
                    "rawdescription": "\n\nList of all open requests\n"
                },
                {
                    "name": "page",
                    "defaultValue": "\"individual\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>contains string of currently active page</p>\n",
                    "line": 39,
                    "rawdescription": "\n\ncontains string of currently active page\n"
                },
                {
                    "name": "spinnerActive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>spinner state variable</p>\n",
                    "line": 54,
                    "rawdescription": "\n\nspinner state variable\n"
                },
                {
                    "name": "spinnerSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>Spinner subscription</p>\n",
                    "line": 59,
                    "rawdescription": "\n\nSpinner subscription\n"
                },
                {
                    "name": "summary",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SummaryValues[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "checkRequests",
                    "args": [
                        {
                            "name": "req",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 355,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCheck if init-request are open\nIf not: sets forecastr ready + hides spinner\n",
                    "description": "<p>Check if init-request are open\nIf not: sets forecastr ready + hides spinner</p>\n",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 9179,
                                "end": 9182,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "req"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 9173,
                                "end": 9178,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getMSLPage",
                    "args": [
                        {
                            "name": "roleId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 234,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roleId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPage",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 218,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPageFromParams",
                    "args": [
                        {
                            "name": "params",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 254,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "params",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goToPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 283,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpens other page\n",
                    "description": "<p>Opens other page</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 7435,
                                "end": 7439,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "page"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 7429,
                                "end": 7434,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "hasLeadRole",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 318,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hasMSLLevelRole",
                    "args": [
                        {
                            "name": "roleNameExpected",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "roleNameActual",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 314,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roleNameExpected",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "roleNameActual",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isExecutive",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 326,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isFinancialController",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 330,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isMSLLevelRole",
                    "args": [
                        {
                            "name": "roleName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 288,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roleName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isPractice",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 322,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "mslHasPractice",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 205,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 201,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnsubscribes services when component gets destroyed\n",
                    "description": "<p>Unsubscribes services when component gets destroyed</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRedirects to specific page if it is defined in url\nInitializes utility data\n",
                    "description": "<p>Redirects to specific page if it is defined in url\nInitializes utility data</p>\n"
                },
                {
                    "name": "openDashboard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 335,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOpen dialog for executive chart",
                    "description": "<p>Open dialog for executive chart</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>forecast component</p>\n",
            "rawdescription": "\n\nforecast component\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  OnInit,\r\n  OnDestroy,\r\n} from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { AuthService } from \"../core/security/auth.service\";\r\nimport { UtilitiesService } from \"../core/services/utilities.service\";\r\nimport { PageStateService } from \"../core/shared/page-state.service\";\r\nimport { UserService } from \"../core/services/user.service\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { MatDialog } from \"@angular/material/dialog\";\r\nimport { environment as env } from \"../../environments/environment\";\r\nimport { MatSnackBar } from \"@angular/material/snack-bar\";\r\nimport {\r\n  ExecutiveForecastsService,\r\n  SummaryValues,\r\n} from \"../core/services/forecasts/executive-forecasts.service\";\r\nimport { ExecutiveChartComponent } from \"./components/executive-chart/executive-chart.component\";\r\nimport { Month } from \"../core/interfaces/month\";\r\nimport { TeamService } from \"../core/services/admin/team.service\";\r\nimport { TeamUserService } from \"../core/services/forecasts/team-user.service\";\r\nimport { Team } from \"../core/interfaces/team\";\r\n\r\n/**\r\n * forecast component\r\n */\r\n@Component({\r\n  selector: \"public-forecast\",\r\n  templateUrl: \"./forecast.component.html\",\r\n  styleUrls: [\"./forecast.component.scss\"],\r\n})\r\nexport class ForecastComponent implements OnInit, OnDestroy {\r\n  summary: SummaryValues[];\r\n\r\n  /**\r\n   * contains string of currently active page\r\n   */\r\n  page: string = \"individual\";\r\n\r\n  /**\r\n   * List of all open requests\r\n   */\r\n  openRequests: string[] = [];\r\n\r\n  /**\r\n   * Error list\r\n   */\r\n  error: string[] = [];\r\n\r\n  /**\r\n   * spinner state variable\r\n   */\r\n  spinnerActive: boolean;\r\n\r\n  /**\r\n   * Spinner subscription\r\n   */\r\n  spinnerSubscription: Subscription;\r\n\r\n  /**\r\n   * Selected months array\r\n   */\r\n  dashboardMonths: Month[] = [];\r\n\r\n  /**\r\n   * forecast-component constructor\r\n   * @param router\r\n   * @param snackBar\r\n   * @param authService\r\n   * @param userService\r\n   * @param utilitiesService\r\n   * @param pageState\r\n   */\r\n  constructor(\r\n    public dialog: MatDialog,\r\n    private router: Router,\r\n    private snackBar: MatSnackBar,\r\n    private authService: AuthService,\r\n    private userService: UserService,\r\n    private utilitiesService: UtilitiesService,\r\n    private pageState: PageStateService,\r\n    private executiveService: ExecutiveForecastsService,\r\n    private teamService: TeamUserService,\r\n  ) {\r\n    this.spinnerActive = true;\r\n  }\r\n\r\n  /**\r\n   * Redirects to specific page if it is defined in url\r\n   * Initializes utility data\r\n   */\r\n  ngOnInit(): void {\r\n    this.openRequests = [\r\n      \"months\",\r\n      \"projects\",\r\n      \"probabilities\",\r\n      \"user\",\r\n      \"grades\",\r\n      \"roles\",\r\n      \"users\",\r\n      \"kpi\",\r\n      \"teams\",\r\n    ];\r\n\r\n    this.utilitiesService\r\n      .initMonths()\r\n      .then(() => {\r\n        this.checkRequests(\"months\");\r\n      })\r\n      .catch(() => {\r\n        this.error.push(\"Error loading months.\");\r\n        this.checkRequests(\"months\");\r\n      });\r\n\r\n    this.utilitiesService\r\n      .initProjects()\r\n      .then(() => {\r\n        this.checkRequests(\"projects\");\r\n      })\r\n      .catch(() => {\r\n        this.error.push(\"Error loading projects.\");\r\n        this.checkRequests(\"projects\");\r\n      });\r\n\r\n    this.utilitiesService\r\n      .initProbabilities()\r\n      .then(() => {\r\n        this.checkRequests(\"probabilities\");\r\n      })\r\n      .catch(() => {\r\n        this.error.push(\"Error loading probabilities.\");\r\n        this.checkRequests(\"probabilities\");\r\n      });\r\n\r\n    this.userService\r\n      .initializeGrades()\r\n      .then(() => {\r\n        this.checkRequests(\"grades\");\r\n      })\r\n      .catch(() => {\r\n        this.error.push(\"Error loading grades.\");\r\n        this.checkRequests(\"grades\");\r\n      });\r\n\r\n    this.userService\r\n      .initUser()\r\n      .then(() => {\r\n        this.checkRequests(\"user\")\r\n      }).catch(() => {\r\n        this.error.push(\"Error loading user.\");\r\n        this.checkRequests(\"user\");\r\n      });\r\n\r\n    this.userService\r\n      .initializeRoles()\r\n      .then(() => {\r\n        this.checkRequests(\"roles\");\r\n      }).catch(() => {\r\n        this.error.push(\"Error loading roles.\");\r\n      });\r\n\r\n    if (this.authService.hasRole(env.roles.msl)) {\r\n      this.userService.initializeAllUser().then(() => {\r\n        this.checkRequests(\"users\");\r\n        \r\n        this.teamService.initializeTeams().then(() => {\r\n          this.checkRequests(\"teams\");\r\n        }).catch(() => {\r\n          this.error.push(\"Error loading all Teams.\");\r\n          this.checkRequests(\"teams\");\r\n        })\r\n      }).catch(() => {\r\n        this.error.push(\"Error loading all Users.\");\r\n        this.checkRequests(\"users\");\r\n        this.checkRequests(\"teams\");\r\n      })\r\n    } else {\r\n      this.checkRequests(\"users\");\r\n      this.checkRequests(\"teams\");\r\n    }\r\n\r\n    if (this.authService.hasRole(env.roles.pdl)) {\r\n      this.executiveService.initializeKpiValues().then(() => {\r\n        this.checkRequests(\"kpi\");\r\n      })\r\n    } else {\r\n      this.checkRequests(\"kpi\");\r\n    }\r\n\r\n    this.spinnerSubscription = this.pageState.spinner$.subscribe(\r\n      (spinner: boolean) => {\r\n        this.spinnerActive = spinner;\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Unsubscribes services when component gets destroyed\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.spinnerSubscription.unsubscribe();\r\n  }\r\n\r\n  mslHasPractice(): boolean {\r\n    if(!this.isExecutive()) {\r\n      return false;\r\n    }\r\n    \r\n    if(this.teamService.getPrTeams() !== undefined || this.teamService.getPrTeams().length !== 0) {\r\n      let ts = this.teamService.getPrTeams().filter((t: Team) => t.teamLeadId === this.authService.getUserId());\r\n      return ts.length > 0;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getPage(): string {\r\n    let page = \"\";\r\n\r\n    if (this.isFinancialController()) {\r\n      page = \"financial-controller\";\r\n    } else if (this.isExecutive()) {\r\n      let roleId = this.userService.getUser(this.authService.getUserId()).roleId;\r\n      page = this.getMSLPage(roleId);\r\n    } else {\r\n      let params: string[] = this.router.url.substr(1).split(\"/\");\r\n      page = this.getPageFromParams(params);\r\n    }\r\n\r\n    return page\r\n  }\r\n\r\n  getMSLPage(roleId: number): string {\r\n    if (roleId !== undefined) {\r\n      let roleName = this.userService.getRole(roleId).shortcut;\r\n\r\n      if (this.hasMSLLevelRole(\"HOP\", roleName)) {\r\n        return \"head-of-practices\";\r\n      }\r\n\r\n      if (this.hasMSLLevelRole(\"SM\", roleName)) {\r\n        return \"staffing\";\r\n      }\r\n\r\n      if(this.hasMSLLevelRole(\"SMCSS\", roleName)) {\r\n        return \"staffing\";\r\n      }\r\n    }\r\n\r\n    return \"executive\";\r\n  }\r\n\r\n  getPageFromParams(params: string[]): string {\r\n    if (params.length >= 2) {\r\n      if (params[1] === \"team\") {\r\n        return \"team\";\r\n      } else if (params[1] === \"practice\") {\r\n        return \"practice\";\r\n      } else if (params[1] === \"staffing\") {\r\n        return \"staffing\";\r\n      } else if (params[1] === \"head-of-practices\") {\r\n        return \"head-of-practices\";\r\n      } else if (params[1] === \"executive\") {\r\n        return \"executive\";\r\n      } else if (params[1] === \"practices\") {\r\n        return \"practices\";\r\n      } else if (params[1] === \"financial-controller\") {\r\n        return \"financial-controller\";\r\n      }\r\n      else {\r\n        return \"individual\";\r\n      }\r\n    } else {\r\n      return \"individual\";\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Opens other page\r\n   * @param page\r\n   */\r\n  goToPage(page: string): void {\r\n    this.page = page;\r\n    this.router.navigate([\"/forecast/\" + page + \"/active\"]);\r\n  }\r\n\r\n  isMSLLevelRole(roleName: string): boolean {\r\n    if (!this.isExecutive()) {\r\n      return false;\r\n    }\r\n\r\n    let userId = this.authService.getUserId();\r\n\r\n    if (userId === undefined) {\r\n      return false;\r\n    }\r\n\r\n    let roleId = this.userService.getUser(userId).roleId;\r\n\r\n    if (roleId === undefined) {\r\n      return false;\r\n    }\r\n\r\n    let role = this.userService.getRole(roleId).shortcut;\r\n\r\n    if (role === undefined) {\r\n      return false;\r\n    }\r\n\r\n    return role === roleName;\r\n  }\r\n\r\n  hasMSLLevelRole(roleNameExpected: string, roleNameActual: string): boolean {\r\n    return this.isExecutive() && roleNameActual !== undefined && roleNameActual === roleNameExpected;\r\n  }\r\n\r\n  hasLeadRole(): boolean {\r\n    return this.authService.hasRole(env.roles.pdl);\r\n  }\r\n\r\n  isPractice(): boolean {\r\n    return this.authService.hasRole(env.roles.pl);\r\n  }\r\n\r\n  isExecutive(): boolean {\r\n    return this.authService.hasRole(env.roles.msl);\r\n  }\r\n\r\n  isFinancialController(): boolean {\r\n    return this.authService.hasRole(env.roles.fc);\r\n  }\r\n\r\n  /**Open dialog for executive chart */\r\n  openDashboard(): void {\r\n    if (this.authService.hasRole(env.roles.pdl)) {\r\n      const dialogRef = this.dialog.open(ExecutiveChartComponent, {\r\n        height: \"90%\",\r\n        width: \"90%\",\r\n        panelClass: \"custom-dialog-container\",\r\n        data: {},\r\n      });\r\n\r\n      dialogRef.afterClosed().subscribe((result) => {\r\n        console.log(\"The dialog was closed\");\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if init-request are open\r\n   * If not: sets forecastr ready + hides spinner\r\n   * @param req\r\n   */\r\n  private checkRequests(req: string): void {\r\n    this.openRequests = this.openRequests.filter((r: string) => r !== req);\r\n\r\n    if (this.openRequests.length === 0) {\r\n\r\n      if (this.error.length) {\r\n        this.error.forEach((e: string) => {\r\n          this.snackBar.open(e, \"OK\", { duration: 30000 });\r\n        });\r\n      } else {\r\n        this.pageState.setForecastrReady();\r\n\r\n        if (this.page !== \"executive\" && this.page !== \"head-of-practices\" && this.page !== \"staffing\" && this.page !== \"financial-controller\") {\r\n          this.pageState.hideSpinner();\r\n        }\r\n      }\r\n\r\n      this.goToPage(this.getPage());\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../assets/styles/variables.scss\";\r\n\r\n.role-header {\r\n  position: relative;\r\n  height: 37px;\r\n  margin: 20px 0px 30px 0px;\r\n\r\n  h1 {\r\n    line-height: 37px;\r\n    font-size: 1.8em;\r\n    margin: 0;\r\n  }\r\n\r\n  .mat-button-toggle-group {\r\n    background-color: map-get($font-colors, white);\r\n    font-size: 1.1em;\r\n    border-radius: 4px;\r\n  }\r\n\r\n  .mat-button-toggle {\r\n    background-color: map-get($font-colors, white);\r\n    color: map-get($font-colors, blue);\r\n    border-right: 1px solid #0070ad;\r\n    width: 120px;\r\n\r\n    .mat-icon {\r\n      color: map-get($font-colors, blue);\r\n    }\r\n\r\n    &:hover {\r\n      background-color: map-get($bg-colors, light);\r\n    }\r\n\r\n    &:last-child {\r\n      border: none;\r\n    }\r\n  }\r\n\r\n  .mat-button-toggle-checked,\r\n  .mat-button-toggle-checked .mat-icon {\r\n    background-color: map-get($font-colors, blue);\r\n    color: map-get($font-colors, white);\r\n\r\n    &:hover {\r\n      background-color: map-get($font-colors, blue);\r\n    }\r\n  }\r\n\r\n  .switch-role-toggle {\r\n    position: absolute;\r\n    right: 0px;\r\n    top: 0;\r\n    height: 34px;\r\n    line-height: 34px;\r\n    border-radius: 0;\r\n  }\r\n\r\n  .dashboard-button {\r\n    position: absolute;\r\n    width: 180px;\r\n    top: 0;\r\n    height: 34px;\r\n    line-height: 34px;\r\n    border-radius: 20px;\r\n    background-color: map-get($font-colors, blue);\r\n    color: map-get($font-colors, white);\r\n    box-shadow: 0px 1px 5px grey;\r\n\r\n    .mat-icon {\r\n      color: map-get($font-colors, white);\r\n    }\r\n  }\r\n\r\n  .practice-dashboard {\r\n    right: 375px;\r\n  }\r\n\r\n  .pdl-dashboard {\r\n    right: 250px;\r\n  }\r\n\r\n  .sm-hop-button-toggle-group {\r\n    right: 0px;\r\n  }\r\n\r\n  .sm-hop-button-toggle {\r\n    width: 140px;\r\n  }\r\n}\r\n\r\n.progress-spinner-overlay {\r\n  display:  none;\r\n  position: fixed;\r\n  bottom: 0;\r\n  right: 0;\r\n  z-index: 10000;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: map-get($font-colors, white);\r\n  opacity: 0.5;\r\n\r\n  \r\n  &.active {\r\n\t\tdisplay: block;\r\n\t}\r\n\r\n  &.hide {\r\n\t\tdisplay: none;\r\n\t}\r\n}\r\n.progress-spinner {\r\n\ttop: 50%;\r\n\tleft: 50%;\r\n  z-index: 11000;\r\n\ttransform: translate(-50%, -50%);\r\n}\r\n\r\n.mat-sidenav-container {\r\n  min-width: 700px;\r\n  background: transparent;\r\n  margin: 0 10px;\r\n}\r\n\r\n.mat-drawer {\r\n  display: none;\r\n  background: transparent;\r\n  width: 50px;\r\n  border-right-width: 0px;\r\n}\r\n\r\n.nav-button-container {\r\n  margin: 4px 0;\r\n\r\n  .mat-icon-button {\r\n    width: 50px;\r\n    height: 50px;\r\n    margin-bottom: 10px;\r\n    padding: 0;\r\n\r\n    &.active,\r\n    &.active .mat-icon {\r\n      color: map-get($font-colors, blue);\r\n    }\r\n  }\r\n\r\n  .mat-icon {\r\n    width: 1em;\r\n    height: 1em;\r\n    line-height: 1em;\r\n    font-size: 2em;\r\n  }\r\n}\r\n",
                    "styleUrl": "./forecast.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>forecast-component constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "teamService",
                        "type": "TeamUserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 64,
                "rawdescription": "\n\nforecast-component constructor\n",
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 1868,
                            "end": 1874,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "router"
                        },
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1862,
                            "end": 1867,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1888,
                            "end": 1896,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "snackBar"
                        },
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1882,
                            "end": 1887,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1910,
                            "end": 1921,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "authService"
                        },
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1904,
                            "end": 1909,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1935,
                            "end": 1946,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "userService"
                        },
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1929,
                            "end": 1934,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1960,
                            "end": 1976,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "utilitiesService"
                        },
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1954,
                            "end": 1959,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1990,
                            "end": 1999,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "pageState"
                        },
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1984,
                            "end": 1989,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "teamService",
                        "type": "TeamUserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"progress-spinner-overlay\" [ngClass]=\"{ active: spinnerActive }\">\n  <mat-progress-spinner class=\"progress-spinner\" color=\"primary\" mode=\"indeterminate\"></mat-progress-spinner>\n</div>\n\n<app-header></app-header>\n\n<mat-sidenav-container>\n  <mat-sidenav mode=\"side\" opened>\n    <div class=\"nav-button-container\">\n      <button mat-icon-button title=\"ForeCasts\" class=\"active\">\n        <mat-icon [inline]=\"true\">date_range</mat-icon>\n      </button>\n\n      <button mat-icon-button title=\"Settings\">\n        <mat-icon [inline]=\"true\">settings</mat-icon>\n      </button>\n    </div>\n  </mat-sidenav>\n\n  <mat-sidenav-content>\n    <div class=\"app-content\">\n\n\n      <div *ngIf=\"!isExecutive()\" class=\"role-header\">\n        <h1>Monthly Forecast</h1>\n\n        <div *ngIf=\"hasLeadRole()\">\n          <button *ngIf=\"isPractice()\" mat-raised-button class=\"dashboard-button practice-dashboard\"\n            (click)=\"openDashboard()\">\n            <mat-icon>insert_chart</mat-icon> KPI Overview\n          </button>\n          <button *ngIf=\"!isPractice()\" mat-raised-button class=\"dashboard-button pdl-dashboard\"\n            (click)=\"openDashboard()\">\n            <mat-icon>insert_chart</mat-icon> KPI Overview\n          </button>\n        </div>\n\n\n\n        <div class=\"switch-role-toggle\" *ngIf=\"hasLeadRole()\">\n          <mat-button-toggle-group appearance=\"legacy\" aria-label=\"Role\" #group=\"matButtonToggleGroup\" [value]=\"page\"\n            (change)=\"goToPage(group.value)\">\n\n            <mat-button-toggle value=\"individual\">\n              <mat-icon>person</mat-icon> Me\n            </mat-button-toggle>\n            <mat-button-toggle value=\"team\">\n              <mat-icon>supervisor_account</mat-icon> Team\n            </mat-button-toggle>\n            <mat-button-toggle value=\"practice\" *ngIf=\"isPractice()\">\n              <mat-icon>supervisor_account</mat-icon> Practice\n            </mat-button-toggle>\n          </mat-button-toggle-group>\n        </div>\n      </div>\n\n      <div *ngIf=\"isMSLLevelRole('HOP') || isMSLLevelRole('SM') || isMSLLevelRole('SMCSS')\" class=\"role-header\">\n        <button mat-raised-button color=\"primary\" (click)=\"openDashboard()\">\n          <mat-icon>insert_chart</mat-icon> KPI Overview\n        </button>\n        <div class=\"switch-role-toggle\" *ngIf=\"hasLeadRole()\">\n          <mat-button-toggle-group class=\"sm-hop-button-toggle-group\" appearance=\"legacy\" aria-label=\"Role\"\n            #group=\"matButtonToggleGroup\" [value]=\"page\" (change)=\"goToPage(group.value)\">\n            <mat-button-toggle *ngIf=\"isMSLLevelRole('SM') || isMSLLevelRole('SMCSS') || isMSLLevelRole('HOP')\"\n              class=\"sm-hop-button-toggle\" value=\"practices\">\n              <mat-icon>supervisor_account</mat-icon> Practices\n            </mat-button-toggle>\n            <mat-button-toggle *ngIf=\"isMSLLevelRole('HOP')\" class=\"sm-hop-button-toggle\" value=\"head-of-practices\">\n              <mat-icon>grid_on</mat-icon> Overview\n            </mat-button-toggle>\n            <mat-button-toggle *ngIf=\"isMSLLevelRole('HOP')\" class=\"sm-hop-button-toggle\" value=\"individual\">\n              <mat-icon>person</mat-icon> Me\n            </mat-button-toggle>\n            <mat-button-toggle *ngIf=\"mslHasPractice()\" class=\"sm-hop-button-toggle\" value=\"practice\">\n              <mat-icon>supervisor_account</mat-icon> Practice\n            </mat-button-toggle>\n            <mat-button-toggle *ngIf=\"isMSLLevelRole('SM') || isMSLLevelRole('SMCSS')\" class=\"sm-hop-button-toggle\"\n              value=\"staffing\">\n              <mat-icon>grid_on</mat-icon> Overview\n            </mat-button-toggle>\n            <mat-button-toggle *ngIf=\"isMSLLevelRole('SMCSS')\" class=\"sm-hop-button-toggle\" value=\"individual\">\n              <mat-icon>person</mat-icon> Me\n            </mat-button-toggle>\n          </mat-button-toggle-group>\n        </div>\n      </div>\n\n      <div *ngIf=\"isFinancialController()\" class=\"role-header\">\n        <div class=\"switch-role-toggle\">\n          <mat-button-toggle-group class=\"sm-hop-button-toggle-group\" appearance=\"legacy\" aria-label=\"Role\"\n            #group=\"matButtonToggleGroup\" [value]=\"page\" (change)=\"goToPage(group.value)\">\n            <mat-button-toggle class=\"sm-hop-button-toggle\" value=\"financial-controller\">\n              <mat-icon>grid_on</mat-icon> Overview\n            </mat-button-toggle>\n            <mat-button-toggle class=\"sm-hop-button-toggle\" value=\"practices\">\n              <mat-icon>supervisor_account</mat-icon> Practices\n            </mat-button-toggle>\n          </mat-button-toggle-group>\n        </div>\n      </div>\n\n      <div *ngIf=\"isMSLLevelRole('MSL')\" class=\"role-header\">\n        <h1>Forecast Summary</h1>\n      </div>\n      <router-outlet></router-outlet>\n    </div>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n\n<app-footer></app-footer>"
        },
        {
            "name": "GetStarted",
            "id": "component-GetStarted-595ed24de47cb7d00110a4486761aa7a",
            "file": "src/app/layout/getStartedModal/get-started.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./get-started.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./get-started.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "line": 30,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<GetStarted>",
                    "optional": false,
                    "line": 29,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "tutorialData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "<p>data variable for all dialog steps</p>\n",
                    "line": 20,
                    "rawdescription": "\n\ndata variable for all dialog steps\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ncheck if is pdl or normal user\n",
                    "description": "<p>check if is pdl or normal user</p>\n"
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nclose the getStarted\n",
                    "description": "<p>close the getStarted</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Component to show get-started dialog</p>\n",
            "rawdescription": "\n\nComponent to show get-started dialog\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit } from \"@angular/core\";\nimport { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material/dialog\";\nimport { AuthService } from \"../../core/security/auth.service\";\n\nimport { getStartedData } from \"./getStartedData\";\nimport { environment as env } from '../../../environments/environment';\n\n/**\n * Component to show get-started dialog\n */\n@Component({\n    templateUrl: './get-started.html',\n    styleUrls: ['./get-started.scss'],\n}) \nexport class GetStarted implements OnInit {\n    \n    /**\n     * data variable for all dialog steps\n     */\n    tutorialData: any[];\n\n    /**\n     * getstarted component constructor\n     * @param dialogRef\n     * @param data\n     * @param auth\n     */\n    constructor(\n        public dialogRef: MatDialogRef<GetStarted>,\n        @Inject(MAT_DIALOG_DATA) public data: any,\n        private auth: AuthService,\n    ) {}\n\n    /**\n     * check if is pdl or normal user\n     */\n    ngOnInit(): void {\n        if (this.auth.hasRole(env.roles.pl)) {\n            this.tutorialData = getStartedData.pl;\n        } else if(this.auth.hasRole(env.roles.pdl)) {\n            this.tutorialData = getStartedData.pdl;\n        } else {\n            this.tutorialData = getStartedData.css;\n        }\n    }\n\n    /**\n     * close the getStarted\n     */\n    onNoClick(): void {\n        this.dialogRef.close();\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".image {\n  max-width: 85%;\n  min-width: 70%;\n  height: auto;\n  box-shadow: 0px 0px 6px 2px rgba(241, 245, 248, 0.7);\n}\n\n.imageContainer {\n  display: flex;\n  align-items: center;\n  \n  justify-content: center;\n}\n.example-card {\n}\n\n.button-container {\n  justify-content: flex-end;\n  display: flex;\n  align-items: flex-end;\n}\n\n.green-text {\n  color: #95e616;\n}\n\n.content {\n  padding: 20px;\n  background-color: #0070ad;\n  color: white;\n}\n\n.mat-horizontal-content-container {\n  padding: 0px;\n  background-color: rebeccapurple;\n}\n\n.title {\n  margin-top: 0;\n}\n\n.close-button {\n  margin-left: 2px;\n}",
                    "styleUrl": "./get-started.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>getstarted component constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<GetStarted>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "rawdescription": "\n\ngetstarted component constructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 660,
                            "end": 669,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialogRef"
                        },
                        "type": "MatDialogRef<GetStarted>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 654,
                            "end": 659,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 684,
                            "end": 688,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "data"
                        },
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 678,
                            "end": 683,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 703,
                            "end": 707,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "auth"
                        },
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 697,
                            "end": 702,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- <p>What's your favorite animal?</p> -->\n\n<mat-horizontal-stepper labelPosition=\"bottom\" class=\"getSartedStepper\" linear>\n  <ng-template matStepperIcon=\"number\" let-index=\"index\">\n    {{index}}\n  </ng-template>\n  <ng-template matStepperIcon=\"edit\" let-index=\"index\">\n    {{index}}\n  </ng-template>\n\n  <mat-step *ngFor=\"let item of tutorialData; let last = last\" [stepControl]=\"false\">\n    <div layout=\"column\">\n      <div flex=\"80\" class=\"imageContainer\">\n        <img class=\"image\" src=\"{{ 'assets/img/steps/Step_'}}{{item.image}}\" alt=\"Step 1\">\n      </div>\n      \n      <div layout=\"row\" class=\"content\" flex=\"20\">\n        <div flex=\"70\">\n          <h1 class=\"title\">{{item.title}}</h1>\n          <div [innerHTML]=\"item.html\"></div>\n        </div>\n\n        <div class=\"button-container\" flex=\"30\">\n          <button *ngIf=\"!last\" mat-stroked-button class=\"mat-primary-reversed next-button\" matStepperNext>Next</button>\n          <button *ngIf=\"!last\" mat-stroked-button class=\"mat-primary-reversed close-button\" (click)=\"onNoClick()\">Close</button>\n          <button *ngIf=\"last\" mat-stroked-button class=\"mat-primary-reversed\" (click)=\"onNoClick()\">\n            <span class=\"green-text\">Start</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  </mat-step>\n</mat-horizontal-stepper>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-c349aa42f2121da4b5737d60a50fa413",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-header',\r\n  template: `<header>\r\n    <div class=\"wrapper\">\r\n      <div>\r\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\r\n              fill=\"#FFF\"\r\n            />\r\n            <path\r\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\r\n              fill=\"#555AB9\"\r\n            />\r\n            <path\r\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\r\n              fill=\"#91BAF8\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        <h1>Acme</h1>\r\n      </div>\r\n      <div>\r\n        <storybook-button\r\n          *ngIf=\"user\"\r\n          size=\"small\"\r\n          (onClick)=\"onLogout.emit($event)\"\r\n          label=\"Log out\"\r\n        ></storybook-button>\r\n        <storybook-button\r\n          *ngIf=\"!user\"\r\n          size=\"small\"\r\n          (onClick)=\"onLogin.emit($event)\"\r\n          label=\"Log in\"\r\n        ></storybook-button>\r\n        <storybook-button\r\n          *ngIf=\"!user\"\r\n          primary\r\n          size=\"small\"\r\n          (onClick)=\"onCreateAccount.emit($event)\"\r\n          label=\"Sign up\"\r\n        ></storybook-button>\r\n      </div>\r\n    </div>\r\n  </header>`,\r\n  styleUrls: ['./header.css'],\r\n})\r\nexport default class HeaderComponent {\r\n  @Input()\r\n  user: unknown = null;\r\n\r\n  @Output()\r\n  onLogin = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onLogout = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onCreateAccount = new EventEmitter<Event>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n  padding: 15px 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\nsvg {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\nh1 {\r\n  font-weight: 900;\r\n  font-size: 20px;\r\n  line-height: 1;\r\n  margin: 6px 0 6px 10px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\nbutton + button {\r\n  margin-left: 10px;\r\n}\r\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-f46fccb65721c52d6f0c9bd45c46b3bf-1",
            "file": "src/app/layout/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dialog2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dialog3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Role[]",
                    "optional": false,
                    "description": "<p>Possible roles</p>\n",
                    "line": 34,
                    "rawdescription": "\n\nPossible roles\n"
                },
                {
                    "name": "roleSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "supportedBrowser",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "optional": false,
                    "description": "<p>Logged in user</p>\n",
                    "line": 28,
                    "rawdescription": "\n\nLogged in user\n"
                },
                {
                    "name": "userSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "getRole",
                    "args": [],
                    "optional": false,
                    "returnType": "string | boolean",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns user role description\n",
                    "description": "<p>returns user role description</p>\n"
                },
                {
                    "name": "isAdmin",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns whether the logged in user has admin permissions\n",
                    "description": "<p>Returns whether the logged in user has admin permissions</p>\n"
                },
                {
                    "name": "isLogged",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns if user is logged in.\nOtherwise: false\n",
                    "description": "<p>Returns if user is logged in.\nOtherwise: false</p>\n"
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalls logout\n",
                    "description": "<p>Calls logout</p>\n"
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnsubscribe services when component gets destroyed\n",
                    "description": "<p>Unsubscribe services when component gets destroyed</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInits user variable at header init\n",
                    "description": "<p>Inits user variable at header init</p>\n"
                },
                {
                    "name": "openFAQ",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nopen Modal with showcase\n",
                    "description": "<p>open Modal with showcase</p>\n"
                },
                {
                    "name": "openOrganization",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nopen Modal with enterprise structure\n",
                    "description": "<p>open Modal with enterprise structure</p>\n"
                },
                {
                    "name": "openStepper",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nopen Modal with showcase\n",
                    "description": "<p>open Modal with showcase</p>\n"
                },
                {
                    "name": "sendMail",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nsend EMail to admin\n",
                    "description": "<p>send EMail to admin</p>\n"
                },
                {
                    "name": "showHome",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>header component</p>\n",
            "rawdescription": "\n\nheader component\n",
            "type": "component",
            "sourceCode": "import { Router } from \"@angular/router\";\nimport { Component, OnInit, OnDestroy } from \"@angular/core\";\nimport { AuthService } from \"../../core/security/auth.service\";\nimport { LoginService } from \"../../core/security/login.service\";\nimport { UserService } from \"../../core/services/user.service\";\nimport { User } from \"../../core/interfaces/user\";\nimport { Subscription } from \"rxjs\";\nimport { MatDialog } from \"@angular/material/dialog\";\nimport { GetStarted } from \"../getStartedModal/get-started.component\";\nimport { FaqModalComponent } from \"../faq-modal/faq-modal.component\";\nimport { environment as env } from \"../../../environments/environment\";\nimport { Role } from \"../../core/interfaces/role\";\nimport { DeviceDetectorService } from \"ngx-device-detector\";\nimport { OrganizationDialogComponent } from \"../organizationModal/organization-dialog.component\";\n\n/**\n * header component\n */\n@Component({\n  selector: \"app-header\",\n  templateUrl: \"./header.component.html\",\n  styleUrls: [\"./header.component.scss\"],\n})\nexport class HeaderComponent implements OnInit, OnDestroy {\n  /**\n   * Logged in user\n   */\n  user: User;\n  userSubscription: Subscription;\n\n  /**\n   * Possible roles\n   */\n  roles: Role[];\n  roleSubscription: Subscription;\n\n  supportedBrowser: boolean = false;\n\n  /**\n   * header component constructor\n   */\n  constructor(\n    public dialog: MatDialog,\n    public dialog2: MatDialog,\n    public dialog3: MatDialog,\n    public router: Router,\n    private auth: AuthService,\n    private loginService: LoginService,\n    private userService: UserService,\n    private deviceService: DeviceDetectorService\n  ) {}\n\n  /**\n   * Inits user variable at header init\n   */\n  ngOnInit(): void {\n    this.userSubscription = this.userService.user$.subscribe((user: User) => {\n      this.user = user;\n    });\n\n    this.roleSubscription = this.userService.roles$.subscribe(\n      (roles: Role[]) => {\n        this.roles = roles;\n      }\n    );\n\n    if (this.auth.showGetStarted()) {\n      this.openStepper();\n    }\n\n    if (\n      this.deviceService.browser === \"Chrome\" ||\n      this.deviceService.browser === \"Edge\" ||\n      this.deviceService.browser == \"Firefox\"\n    ) {\n      this.supportedBrowser = true;\n    }\n  }\n\n  showHome(): void {\n    let params: string[] = this.router.url.substr(1).split(\"/\");\n    console.log(params);\n    if (params.length >= 1 && params[0] === \"forecast\") {\n      return;\n    } else {\n      this.router.navigate([\"/forecast\"]);\n    }\n  }\n\n  /**\n   * Unsubscribe services when component gets destroyed\n   */\n  ngOnDestroy(): void {\n    this.userSubscription.unsubscribe();\n  }\n\n  /**\n   * returns user role description\n   */\n  getRole(): string | boolean {\n    if (this.roles.find((r: Role) => r.roleId === this.user.roleId)) {\n      return this.roles.find((r: Role) => r.roleId === this.user.roleId).name;\n    }\n\n    return false;\n  }\n\n  /**\n   * Returns whether the logged in user has admin permissions\n   */\n  isAdmin(): boolean {\n    if (this.auth.hasRole(env.roles.admin)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Returns if user is logged in.\n   * Otherwise: false\n   */\n  isLogged(): boolean {\n    return this.auth.isLogged() || false;\n  }\n\n  /**\n   * Calls logout\n   */\n  logout(): void {\n    this.loginService.logout();\n  }\n\n  /**\n   * open Modal with showcase\n   */\n  openStepper(): void {\n    let dialogRef: any = this.dialog.open(GetStarted, {\n      height: \"auto\",\n      width: \"60vw\",\n      panelClass: \"getSartedStepper-no-padding-dialog\",\n      //backdropClass: 'mat-dialog-container',\n      data: {},\n    });\n  }\n\n  /**\n   * open Modal with showcase\n   */\n  openFAQ(): void {\n    this.dialog2.open(FaqModalComponent, {\n      height: \"auto\",\n      width: \"60vw\",\n      panelClass: \"getSartedStepper-no-padding-dialog\",\n      //backdropClass: 'mat-dialog-container',\n      data: {},\n    });\n  }\n\n  /**\n   * open Modal with enterprise structure\n   */\n  openOrganization(): void {\n    this.dialog3.open(OrganizationDialogComponent, {\n      height: \"auto\",\n      width: \"80vw\",\n      panelClass: \"getSartedStepper-no-padding-dialog\",\n      data: {},\n    });\n  }\n\n  /**\n   * send EMail to admin\n   */\n  sendMail(): void {\n    var mail = \"mailto:forecastrteam.at@capgemini.com\";\n    window.open(mail);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../assets/styles/variables.scss';\n\n.mat-toolbar .mat-icon-button {\n  margin: 0 3px;\n\n  &:last-child {\n    margin-right: 0;\n  }\n}\n\n.browser-info {\n  text-align: left;\n  background-color: map-get($bg-colors, warning);\n  color: map-get($font-colors,black);\n  font-size: 0.9rem;\n  padding-left: 4px;\n  padding-right: 4px;\n  padding-top: 4px;\n}\n\n.title {\n  display: flex;\n  cursor: pointer;\n  font-size: 1.2rem;\n  font-weight: 700;\n  line-height: 26px;\n\n  .logo {\n    height: 36px;\n    padding: 12px 0;\n    margin-right: 10px;\n  }\n\n  span {\n    padding: 12px 0;\n  }\n}\n\n.user {\n  font-size: 1.1rem;\n  color: map-get($font-colors, grey);\n  padding: 0 10px;\n}\n\n\n.mat-dialog-container {\n  padding: 0px;\n  background-color: rebeccapurple;\n}",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>header component constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog2",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog3",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "deviceService",
                        "type": "DeviceDetectorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "rawdescription": "\n\nheader component constructor\n",
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog2",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog3",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "auth",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deviceService",
                        "type": "DeviceDetectorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<mat-toolbar color=\"primary\">\r\n  <mat-toolbar-row>\r\n    <span class=\"title\" routerLink=\"showHome()\" aria-label=\"Home\">\r\n      <img class=\"logo\" src=\"{{'assets/img/cap_logo_p.png'}}\">\r\n     \r\n    </span>\r\n    <span class=\"browser-info\" *ngIf=\"!supportedBrowser\"><mat-icon class=\"icon\">feedback</mat-icon>Browser information: In order to get the best results from Capgemini Forecastr, it's recommended to use Google Chrome or Microsoft Edge.</span>\r\n    <span flex></span>\r\n    <span class=\"user\">{{user.firstName}} {{user.lastName}} <ng-container *ngIf=\"getRole()\">({{getRole()}})</ng-container></span>\r\n\r\n    <button mat-icon-button *ngIf=\"isAdmin()\" routerLink=\"/admin\" title=\"Admin Dashboard\">\r\n      <mat-icon>settings</mat-icon>\r\n    </button>\r\n    <button mat-icon-button *ngIf=\"isLogged()\" (click)=\"openStepper()\" title=\"Info\">\r\n      <mat-icon>import_contacts</mat-icon>\r\n    </button>\r\n    <button mat-icon-button *ngIf=\"isLogged()\" (click)=\"openFAQ()\" title=\"FAQ\">\r\n      <mat-icon>live_help</mat-icon>\r\n    </button>\r\n    <button mat-icon-button *ngIf=\"isLogged()\" (click)=\"sendMail()\" title=\"Feedback\">\r\n        <mat-icon>chat</mat-icon>\r\n    </button>\r\n    <button mat-icon-button *ngIf=\"isLogged()\" (click)=\"openOrganization()\" title=\"Enterprise Structure\">\r\n      <mat-icon>domain</mat-icon>\r\n    </button>    \r\n    <button mat-icon-button *ngIf=\"isLogged()\" (click)=\"logout()\" title=\"Logout\">\r\n      <mat-icon>exit_to_app</mat-icon>\r\n    </button>\r\n  </mat-toolbar-row>\r\n</mat-toolbar>"
        },
        {
            "name": "HeadOfPracticesComponent",
            "id": "component-HeadOfPracticesComponent-3f20ec80b94ace64f4df2f411b141c94",
            "file": "src/app/forecast/pages/head-of-practices/head-of-practices.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-head-of-practices",
            "styleUrls": [
                "../../forecast.component.scss",
                "./head-of-practices.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./head-of-practices.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from \"@angular/core\";\nimport { Subscription } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { PageStateService } from '../../../core/shared/page-state.service';\nimport { environment as env } from \"../../../../environments/environment.prod\";\nimport { Location } from '@angular/common';\n\n@Component({\n    selector: \"app-head-of-practices\",\n    templateUrl: \"./head-of-practices.component.html\",\n    styleUrls: [\"../../forecast.component.scss\", \"./head-of-practices.component.scss\"],\n  })\nexport class HeadOfPracticesComponent implements OnInit, OnDestroy { \n\n    constructor(\n\t) {\n    }\n\n\tngOnInit(): void {\n\t}\n\n\tngOnDestroy(): void {\n\t}\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../assets/styles/variables.scss\";\r\n\r\n.role-header {\r\n  position: relative;\r\n  height: 37px;\r\n  margin: 20px 0px 30px 0px;\r\n\r\n  h1 {\r\n    line-height: 37px;\r\n    font-size: 1.8em;\r\n    margin: 0;\r\n  }\r\n\r\n  .mat-button-toggle-group {\r\n    background-color: map-get($font-colors, white);\r\n    font-size: 1.1em;\r\n    border-radius: 4px;\r\n  }\r\n\r\n  .mat-button-toggle {\r\n    background-color: map-get($font-colors, white);\r\n    color: map-get($font-colors, blue);\r\n    border-right: 1px solid #0070ad;\r\n    width: 120px;\r\n\r\n    .mat-icon {\r\n      color: map-get($font-colors, blue);\r\n    }\r\n\r\n    &:hover {\r\n      background-color: map-get($bg-colors, light);\r\n    }\r\n\r\n    &:last-child {\r\n      border: none;\r\n    }\r\n  }\r\n\r\n  .mat-button-toggle-checked,\r\n  .mat-button-toggle-checked .mat-icon {\r\n    background-color: map-get($font-colors, blue);\r\n    color: map-get($font-colors, white);\r\n\r\n    &:hover {\r\n      background-color: map-get($font-colors, blue);\r\n    }\r\n  }\r\n\r\n  .switch-role-toggle {\r\n    position: absolute;\r\n    right: 0px;\r\n    top: 0;\r\n    height: 34px;\r\n    line-height: 34px;\r\n    border-radius: 0;\r\n  }\r\n\r\n  .dashboard-button {\r\n    position: absolute;\r\n    width: 180px;\r\n    top: 0;\r\n    height: 34px;\r\n    line-height: 34px;\r\n    border-radius: 20px;\r\n    background-color: map-get($font-colors, blue);\r\n    color: map-get($font-colors, white);\r\n    box-shadow: 0px 1px 5px grey;\r\n\r\n    .mat-icon {\r\n      color: map-get($font-colors, white);\r\n    }\r\n  }\r\n\r\n  .practice-dashboard {\r\n    right: 375px;\r\n  }\r\n\r\n  .pdl-dashboard {\r\n    right: 250px;\r\n  }\r\n\r\n  .sm-hop-button-toggle-group {\r\n    right: 0px;\r\n  }\r\n\r\n  .sm-hop-button-toggle {\r\n    width: 140px;\r\n  }\r\n}\r\n\r\n.progress-spinner-overlay {\r\n  display:  none;\r\n  position: fixed;\r\n  bottom: 0;\r\n  right: 0;\r\n  z-index: 10000;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: map-get($font-colors, white);\r\n  opacity: 0.5;\r\n\r\n  \r\n  &.active {\r\n\t\tdisplay: block;\r\n\t}\r\n\r\n  &.hide {\r\n\t\tdisplay: none;\r\n\t}\r\n}\r\n.progress-spinner {\r\n\ttop: 50%;\r\n\tleft: 50%;\r\n  z-index: 11000;\r\n\ttransform: translate(-50%, -50%);\r\n}\r\n\r\n.mat-sidenav-container {\r\n  min-width: 700px;\r\n  background: transparent;\r\n  margin: 0 10px;\r\n}\r\n\r\n.mat-drawer {\r\n  display: none;\r\n  background: transparent;\r\n  width: 50px;\r\n  border-right-width: 0px;\r\n}\r\n\r\n.nav-button-container {\r\n  margin: 4px 0;\r\n\r\n  .mat-icon-button {\r\n    width: 50px;\r\n    height: 50px;\r\n    margin-bottom: 10px;\r\n    padding: 0;\r\n\r\n    &.active,\r\n    &.active .mat-icon {\r\n      color: map-get($font-colors, blue);\r\n    }\r\n  }\r\n\r\n  .mat-icon {\r\n    width: 1em;\r\n    height: 1em;\r\n    line-height: 1em;\r\n    font-size: 2em;\r\n  }\r\n}\r\n",
                    "styleUrl": "../../forecast.component.scss"
                },
                {
                    "data": "@import \"../../../../assets/styles/variables.scss\";\n\n.role-header {\n  position: relative;\n  height: 37px;\n  margin: 0;\n\n  h1 {\n    line-height: 37px;\n    font-size: 1.8em;\n    margin: 0;\n  }\n\n  .mat-button-toggle-group {\n    background-color: map-get($font-colors, white);\n    font-size: 1.1em;\n    border-radius: 4px;\n  }\n\n  .mat-button-toggle {\n    background-color: map-get($font-colors, white);\n    color: map-get($font-colors, blue);\n    border-right: 1px solid #0070ad;\n    width: 120px;\n\n    .mat-icon {\n      color: map-get($font-colors, blue);\n    }\n\n    &:hover {\n      background-color: map-get($bg-colors, light);\n    }\n\n    &:last-child {\n      border: none;\n    }\n  }\n\n  .mat-button-toggle-checked,\n  .mat-button-toggle-checked .mat-icon {\n    background-color: map-get($font-colors, blue);\n    color: map-get($font-colors, white);\n\n    &:hover {\n      background-color: map-get($font-colors, blue);\n    }\n  }\n\n  .switch-role-toggle {\n    position: absolute;\n    right: 0;\n    top: 0;\n    height: 34px;\n    line-height: 34px;\n    border-radius: 0;\n  }\n}\n\n.executive-view-container {\n  margin-top: 30px;\n  padding: 0;\n  background: transparent;\n}\n\n.period-container {\n  width: 100%;\n}\n\n.period-component {\n  display: inline-flex;\n  margin: 0 5px;\n\n  &.mat-form-field {\n    width: 200px;\n  }\n  &.mat-raised-button {\n    margin-top: 4px;\n    bottom: 4px;\n  }\n  &:first-child {\n    margin-left: 0;\n  }\n}\n\n.period-download {\n  margin-top: 4px;\n  bottom: 4px;\n}\n\n.executive-btn {\n  margin-top: 4px;\n  right: 20px;\n  position: absolute;\n}\n\n.mat-icon {\n  font-size: 18px;\n  color: #fff !important;\n}\n\n.powerbi-report,\n.powerbi-report > div {\n  margin: 30px 0 10px;\n  border: 0;\n  width: 100%;\n  min-height: 500px;\n\n  box-shadow: 0 4px 8px 2px rgba(0, 0, 0, 0.06);\n}\n\n.m-16p {\n  margin: 16px;\n}\n\n.m-0 {\n  margin: 0;\n}\n\n.p-16p {\n  padding: 16px;\n}\n",
                    "styleUrl": "./head-of-practices.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-executive></app-executive>"
        },
        {
            "name": "IndividualComponent",
            "id": "component-IndividualComponent-547c2e16958dba0708a121dc661ca909",
            "file": "src/app/forecast/pages/individual/individual.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-individual",
            "styleUrls": [
                "./individual.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./individual.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeMonth",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>index of currently selected tab (= month)</p>\n",
                    "line": 37,
                    "rawdescription": "\n\nindex of currently selected tab (= month)\n"
                },
                {
                    "name": "months",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "monthSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>id of currently logged-in user (received from auth-service)</p>\n",
                    "line": 28,
                    "rawdescription": "\n\nid of currently logged-in user (received from auth-service)\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "forecastState",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initInvidualForecast",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnsubscribes services when component gets destroyed\n",
                    "description": "<p>Unsubscribes services when component gets destroyed</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInitializes forecast component\n",
                    "description": "<p>Initializes forecast component</p>\n"
                },
                {
                    "name": "setTabActive",
                    "args": [
                        {
                            "name": "e",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets a different tab active and sets url according to it\n",
                    "description": "<p>Sets a different tab active and sets url according to it</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4252,
                                "end": 4253,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "e"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4246,
                                "end": 4251,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>individual forecast-view component</p>\n",
            "rawdescription": "\n\nindividual forecast-view component\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, InjectionToken, Inject } from '@angular/core';\nimport { Location } from '@angular/common';\nimport { ActivatedRoute } from '@angular/router';\n\nimport { UtilitiesService } from '../../../core/services/utilities.service';\nimport { AuthService } from '../../../core/security/auth.service';\n\nimport { Month } from '../../../core/interfaces/month';\nimport { Subscription } from 'rxjs';\nimport { PageStateService } from '../../../core/shared/page-state.service';\nimport { ForecastService } from '../../../core/services/forecasts/forecast.service';\nimport { MonthService } from '../../../core/services/admin/months.service';\nimport { LockedMonth } from '../../../core/interfaces/lockedMonth';\nimport { SavedMonth } from '../../../core/interfaces/savedMonth';\n\n/**\n * individual forecast-view component\n */\n@Component({\n\tselector: \"app-individual\",\n\ttemplateUrl: \"./individual.component.html\",\n\tstyleUrls: [\"./individual.component.scss\"]\n})\nexport class IndividualComponent implements OnInit, OnDestroy {\n\t/**\n\t * id of currently logged-in user (received from auth-service)\n\t */\n\tuserId: number;\n\n\tmonths: Month[];\n\n\tmonthSubscription: Subscription;\n\n\t/**\n\t * index of currently selected tab (= month)\n\t */\n\tactiveMonth: number = 0;\n\n\t/**\n\t * individual forecast-view component constructor\n\t */\n\tconstructor(\n\t\tprivate location: Location,\n\t\tprivate route: ActivatedRoute,\n\t\tprivate authService: AuthService,\n\t\tprivate utilitiesService: UtilitiesService,\n\t\tprivate pageState: PageStateService,\n\t\tprivate forecastService: ForecastService,\n\t\tprivate monthService: MonthService,\n\t) {\n\t\tthis.userId = this.authService.getUserId();\n\t}\n\n\t/**\n\t * Initializes forecast component\n\t */\n\tngOnInit(): void {\n\t\tthis.pageState.forecastrReady$.subscribe((ready: boolean) => {\n\t\t\tif (ready) {\n\t\t\t\tthis.initInvidualForecast();\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n  \t * Unsubscribes services when component gets destroyed\n \t */\n\tngOnDestroy(): void {\n\t\tthis.monthSubscription.unsubscribe();\n\t}\n\n\tprivate initInvidualForecast(): void {\n\t\tthis.monthSubscription = this.utilitiesService.months$\n\t\t\t.subscribe((months: Month[]) => {\n\t\t\t\tthis.months = months.filter((m: Month) => m.active === true);\n\t\t\t\tvar today = new Date();\n\t\t\t\tvar todayMonth = new Date(today.getFullYear(), today.getMonth(), 1);\n\n\t\t\t\t\t\t\t\tthis.months = this.months.filter((m: Month) => new Date(m.time) >= todayMonth);\n\t\t\t\t\n\t\t\t\t\t\t\t\tif(this.months.length > 7) {\n\t\t\t\t\t\t\t\t\tthis.months = this.months.slice(1, 7);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\tlet id: number = parseInt(this.route.snapshot.paramMap.get('id'), 10);\n\t\t\t\tif (typeof id !== 'undefined' && id >= 0 && id < this.months.length) {\n\t\t\t\t\tthis.activeMonth = id;\n\n\t\t\t\t} else {\n\t\t\t\t\tfor (let i: number = 0; i < this.months.length; i++) {\n\t\t\t\t\t\tif (Date.parse(this.months[i].time) > (new Date()).setMonth((new Date().getMonth() - 1))) {\n\t\t\t\t\t\t\tthis.activeMonth = i;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tlet shift: number = parseInt(window.getComputedStyle(document.querySelector('.mat-tab-label-container')).width) - parseInt(window.getComputedStyle(document.querySelector('.mat-tab-list')).width);\n\t\t\t\t\tlet pos: number = parseInt((document.querySelector('.mat-tab-label-active') as HTMLElement).getAttribute('aria-posinset'), 10);\n\t\t\t\t\tif (shift < ((pos ? pos : 1) - 1) * -100) {\n\t\t\t\t\t\tshift = ((pos ? pos : 1) - 1) * -100;\n\t\t\t\t\t}\n\n\t\t\t\t\t(document.querySelector('.mat-tab-list') as HTMLElement).style.transform = 'translateX(' + shift + 'px)';\n\t\t\t\t}, 100);\n\t\t\t});\n\n\t\tthis.monthService.getLockedMonths().subscribe(\n\t\t\t(lockedMonths: LockedMonth[]) => {\n\t\t\t\tlet activeLockedMonths = lockedMonths.filter((m: LockedMonth) => this.months.find((x: Month) => x.id === m.id) !== undefined);\n\t\t\t\tfor (let i = 0; i < this.months.length; i++) {\n\t\t\t\t\tthis.months[i].locked = activeLockedMonths[i].locked;\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\n\t\tthis.monthService.getSavedMonths().subscribe(\n\t\t\t(savedMonths: SavedMonth[]) => {\n\t\t\t\tlet activeSavedMonths = savedMonths.filter((m: SavedMonth) => this.months.find((x: Month) => x.id === m.id) !== undefined);\n\t\t\t\tfor (let i = 0; i < this.months.length; i++) {\n\t\t\t\t\tthis.months[i].saved = activeSavedMonths[i].locked;\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n\n\t/**\n\t * Sets a different tab active and sets url according to it\n\t * @param e\n\t */\n\tsetTabActive(e: number): void {\n\t\tthis.activeMonth = e;\n\t\tthis.location.replaceState('/forecast/individual/' + this.activeMonth);\n\t}\n\n\tforecastState(type: string, monthId: number): boolean {\n\t\treturn this.forecastService.checkForecastState(type, monthId, this.userId);\n\t}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../assets/styles/variables.scss';\n\n.forecast-container {\n\tmargin: 16px;\n}\n\n.mat-icon {\n\tfont-size: 16px;\n\tline-height: 16px;\n\tmargin-right: 5px;\n\n\t&:hover {\n\t\tcolor: map-get($font-colors, grey-light);\n\t}\n\n\t&.icon-edited, &.icon-edited:hover {\n\t\tcolor: map-get($font-colors, red);\n\t}\n}\n\n\n\n",
                    "styleUrl": "./individual.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>individual forecast-view component constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "monthService",
                        "type": "MonthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 37,
                "rawdescription": "\n\nindividual forecast-view component constructor\n",
                "jsdoctags": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "monthService",
                        "type": "MonthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<mat-tab-group [selectedIndex]=\"activeMonth\" (selectedIndexChange)=\"setTabActive($event)\" scrollDirection=\"after\" animationDuration=\"1000ms\">\n\t<mat-tab *ngFor=\"let month of months\" id=\"{{month.id}}\">\n\t\t<ng-template mat-tab-label>\n\t\t\t<mat-icon *ngIf=\"forecastState('edited', month.id)\" class=\"icon-edited\">radio_button_checked</mat-icon>\n\t\t\t<mat-icon *ngIf=\"month.locked || forecastState('locked', month.id)\" class=\"icon-locked\">lock</mat-icon>\n\t\t\t<mat-icon *ngIf=\"month.saved || forecastState('saved', month.id)\">save</mat-icon>\n\t\t\t{{month.name}}\n\t\t</ng-template>\n\t\t<ng-template matTabContent> <!-- matTabContent template for lazyloading-->\n\t\t\t<div layout=\"row\" layout-wrap>\n\t\t\t\t<div flex=\"100\" flex-gt-md=\"75\">\n\t\t\t\t\t<div class=\"forecast-container\">\n\t\t\t\t\t\t<app-fc-entry class=\"tab-container\" [singleView]=\"true\" [userId]=\"userId\" [month]=\"month\"></app-fc-entry>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div flex=\"100\" flex-gt-md=\"25\" class=\"summary-box-container\">\n\t\t\t\t\t<app-fc-entry-summary [userId]=\"userId\" [month]=\"month\"></app-fc-entry-summary>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</ng-template>\n\t</mat-tab>\n</mat-tab-group>"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-13926ce76e793e7bbcb461b7dc8e6b36",
            "file": "src/app/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "emailInvalidError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Contains error message if an error happened at the reset password</p>\n",
                    "line": 30,
                    "rawdescription": "\n\nContains error message if an error happened at the reset password\n"
                },
                {
                    "name": "formSubmitError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Contains error message if an error happened at the login</p>\n",
                    "line": 25,
                    "rawdescription": "\n\nContains error message if an error happened at the login\n"
                },
                {
                    "name": "isEmailFieldEmpty",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "loginActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>true while login process is active</p>\n",
                    "line": 36,
                    "rawdescription": "\n\ntrue while login process is active\n"
                },
                {
                    "name": "loginEmail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AbstractControl",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "loginFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "<p>Login form in order to differentiate among form elements for input validation</p>\n",
                    "line": 41,
                    "rawdescription": "\n\nLogin form in order to differentiate among form elements for input validation\n"
                },
                {
                    "name": "loginPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AbstractControl",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "methodsClass": [
                {
                    "name": "initializeLoginForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInitialization of login form for ngOnInit\n",
                    "description": "<p>Initialization of login form for ngOnInit</p>\n",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalls the login method\nIf login successful: redirects to home-page\nOtherwise: Shows error\n",
                    "description": "<p>Calls the login method\nIf login successful: redirects to home-page\nOtherwise: Shows error</p>\n",
                    "jsdoctags": []
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "routeToHomePage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRoutes to home page (depending on user role)\n",
                    "description": "<p>Routes to home page (depending on user role)</p>\n",
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Handles login page + initiates login process</p>\n",
            "rawdescription": "\n\nHandles login page + initiates login process\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { AuthService } from '../core/security/auth.service';\nimport { LoginService } from '../core/security/login.service';\nimport { ifError } from 'assert';\nimport { environment as env, environment } from '../../environments/environment';\nimport { FormGroup, FormBuilder, Validators, AbstractControl } from '@angular/forms';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { ConfirmMessageDialog } from '../forecast/dialogs/confirm-message/confirm-message.dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ResetPasswordService } from '../core/security/resetPassword.service';\n\n/**\n * Handles login page + initiates login process\n */\n@Component({\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent {\n  /**\n   * Contains error message if an error happened at the login\n   */\n  formSubmitError: string;\n\n  /**\n   * Contains error message if an error happened at the reset password\n   */\n  emailInvalidError: string;\n  isEmailFieldEmpty: boolean;\n\n  /**\n   * true while login process is active\n   */\n  loginActive: boolean = false;\n\n  /**\n   * Login form in order to differentiate among form elements for input validation\n   */\n  loginFormGroup: FormGroup;\n  loginEmail: AbstractControl;\n  loginPassword: AbstractControl;\n\n  /**\n   * login component constructor\n   * Routes to home page if user is already logged-in\n   */\n  constructor(\n    private loginService: LoginService,\n    private authService: AuthService,\n    private router: Router,\n    private fb: FormBuilder,\n    private dialog: MatDialog,\n    private snackBar: MatSnackBar,\n    private resetPasswordService: ResetPasswordService\n  ) {\n    if (this.authService.isLogged()) {\n      this.routeToHomePage();\n    }\n  }\n\n  ngOnInit(): void {\n    this.initializeLoginForm();\n  }\n\n\n  /**\n   * Calls the login method\n   * If login successful: redirects to home-page\n   * Otherwise: Shows error\n   * @param login\n   */\n  login(): void {\n    this.formSubmitError = undefined;\n    this.loginActive = true;\n    this.isEmailFieldEmpty = false;\n\n    this.loginService\n      .login(this.loginEmail.value, this.loginPassword.value)\n      .subscribe(\n        (res: any) => {\n          const response: any = this.authService.useToken(res.headers.get('Authorization'));\n\n          if (typeof res.body.showGetStarted !== 'undefined') {\n            this.authService.setGetStarted(res.body.showGetStarted);\n          }\n\n          if (response) {\n            this.routeToHomePage();\n          } else {\n            this.formSubmitError = 'Invalid user token.';\n          }\n\n          this.loginActive = false;\n        },\n        (e: any) => {\n          console.log(\"Error message is: \"+ e.status);\n          this.authService.setLogged(false);\n          if(e.status == \"401\") {\n            this.formSubmitError = e.error;\n          } else if(e.status == \"404\") {\n            this.formSubmitError = e.error;\n          } else if(e.status == \"409\") {\n            this.formSubmitError = e.error;\n          } else {\n            this.formSubmitError = 'Problem occured with login process. Please try again later.';\n          }\n          this.loginActive = false;\n        },\n      );\n  }\n\n  resetPassword(): void {\n    this.isEmailFieldEmpty = this.loginEmail.invalid;\n    this.formSubmitError = undefined;\n\n    if(this.isEmailFieldEmpty) {\n      this.emailInvalidError =  \"Please enter your e-mail address.\";\n    }\n    else {\n      this.isEmailFieldEmpty = false;\n      let dialogRef: MatDialogRef<ConfirmMessageDialog> = this.dialog.open(ConfirmMessageDialog, {\n        data: {\n          message: \"Are you sure you want to reset your password for the following e-mail address: \"+ this.loginEmail.value +\"?\",\n          button: { cancel: 'Cancel', submit: 'Reset' },\n        },\n      });\n  \n      dialogRef.afterClosed().subscribe((remove: boolean) => {\n        this.loginActive = true;\n        if (remove === true) {\n          this.resetPasswordService.resetPassword(this.loginEmail.value).subscribe(\n            (response: any) => {\n              this.loginActive = false;\n              this.snackBar.open(\"A reset link has been sent to \"+ this.loginEmail.value +\". Please check your e-mail inbox.\", \"\",{duration: 5000,});\n            },\n            (error: any) => {\n              this.loginActive = false;\n              this.snackBar.open(\"Problem occured while resetting your password. Please check if you typed your e-mail address correctly.\", \"\",{duration: 5000,});\n            }\n          );\n        }\n        else {\n          this.loginActive = false;\n        }\n      });\n    }\n  }\n\n  /**\n   * Initialization of login form for ngOnInit\n   */\n  private initializeLoginForm() {\n    this.loginFormGroup = this.fb.group({\n      loginEmail: ['', Validators.required],\n      loginPassword: ['', Validators.required],\n    });\n\n    this.loginEmail = this.loginFormGroup.controls['loginEmail'];\n    this.loginPassword = this.loginFormGroup.controls['loginPassword'];\n  }\n\n  /**\n   * Routes to home page (depending on user role)\n   */\n  private routeToHomePage(): void {\n    if (this.authService.hasRole(env.roles.css)) {\n      this.router.navigate(['/forecast']);\n    } else if (this.authService.hasRole(env.roles.admin)) {\n      this.router.navigate(['/' + env.routes.admin]);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../assets/styles/variables.scss';\n\n.login-container {\n  display: flex;\n  height: 100%;\n  background: url(../../assets/img/capgemini-shape.png);\n  background-size: contain;\n  background-repeat: no-repeat;\n  background-position: right bottom;\n \n  > div {\n    margin: auto;\n  }\n}\n\n.mat-card {\n  width: 320px;\n  padding: 20px;\n  box-shadow: 0 4px 8px 2px rgba(0,0,0,.06) !important;\n  background-color: rgba(255,255,255,0.9);\n  \n  .mat-card-title {\n    display: flex;\n    height: 36px;\n    line-height: 36px;\n    margin: 5px 0;\n    padding: 0;\n\n    div {\n      display: inline-block;\n      height: inherit;\n      font-size: 1.25rem;\n      font-weight: 700;\n      color: map-get($font-colors, blue);\n    }\n\n    .logo {\n      height: inherit;\n      margin-right: 10px;\n    }\n  }\n\n  .mat-card-content {\n    padding: 0;\n\n    form {\n      padding: 0;\n    }\n\n    .mat-form-field {\n      line-height: 1;\n      \n    }\n\n    .login-button {\n      margin-bottom: 12px;\n    }\n\n    .reset-link {\n      font-size: 0.85rem;\n      color: map-get($font-colors, blue);\n      text-align: center;\n      \n      &:hover {\n        cursor: pointer;\n        text-decoration: underline;\n      }\n    }    \n    \n  }\n}\n\n\n\n.spinner-container {\n  display: none;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin: -50px 0 0 -50px;\n\n  &.active {\n    display: block;\n  }\n}",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>login component constructor\nRoutes to home page if user is already logged-in</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "resetPasswordService",
                        "type": "ResetPasswordService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "rawdescription": "\n\nlogin component constructor\nRoutes to home page if user is already logged-in\n",
                "jsdoctags": [
                    {
                        "name": "loginService",
                        "type": "LoginService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "resetPasswordService",
                        "type": "ResetPasswordService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "\r\n<div class=\"login-container\">\r\n  <div layout=\"row\" layout-align=\"center\">\r\n    \r\n    <mat-card>\r\n      <mat-card-title>\r\n        <div>\r\n          <img class=\"logo\" src=\"{{'assets/img/cap_logo_p.png'}}\">\r\n        </div>\r\n       \r\n      </mat-card-title>\r\n\r\n      <mat-card-content>\r\n        <form layout=\"column\" class=\"pad\" (ngSubmit)=\"login()\" #loginForm=\"ngForm\" [formGroup]=\"loginFormGroup\">\r\n          <mat-error *ngIf=\"formSubmitError\">{{formSubmitError}}</mat-error>\r\n          <mat-error *ngIf=\"isEmailFieldEmpty\">{{emailInvalidError}}</mat-error>\r\n          <br>\r\n          <mat-form-field flex>\r\n            <mat-label>E-mail</mat-label>\r\n            <input matInput type=\"text\" placeholder=\"Email\" [formControl]=\"loginEmail\" name=\"email\" required>\r\n          </mat-form-field>\r\n          \r\n          <mat-form-field flex>\r\n            <mat-label>Password</mat-label>\r\n            <input matInput type=\"password\" placeholder=\"Password\" [formControl]=\"loginPassword\" name=\"password\" required>\r\n          </mat-form-field>\r\n\r\n          <button class=\"login-button\" mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"!loginFormGroup.valid || loginActive\">Login</button>\r\n          <a class=\"reset-link\" (click)=\"resetPassword()\">Forgot your password?</a>\r\n        </form>\r\n        \r\n        <div class=\"spinner-container\" [ngClass]=\"{'active': loginActive}\">\r\n          <mat-progress-spinner\r\n            class=\"progress-spinner\" color=\"primary\" mode=\"indeterminate\">\r\n          </mat-progress-spinner>\r\n        </div>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n</div>"
        },
        {
            "name": "MonthsComponent",
            "id": "component-MonthsComponent-fb08f20ec2579715983e963d6427219f",
            "file": "src/app/admin/components/months/months.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-admin-months",
            "styleUrls": [
                "../../admin.component.scss",
                "./months.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./months.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "months",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTableDataSource<Month>",
                    "optional": false,
                    "description": "<p>available months</p>\n",
                    "line": 28,
                    "rawdescription": "\n\navailable months\n"
                },
                {
                    "name": "monthsSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>month subscription from utilities Service</p>\n",
                    "line": 33,
                    "rawdescription": "\n\nmonth subscription from utilities Service\n"
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSort",
                    "optional": false,
                    "description": "<p>Sort variable for angular material table sort method</p>\n",
                    "line": 23,
                    "rawdescription": "\n\nSort variable for angular material table sort method\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSort, {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addMonth",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalls add month dialog\n",
                    "description": "<p>Calls add month dialog</p>\n"
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nunsubscribes month subscription\n",
                    "description": "<p>unsubscribes month subscription</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ninits months variable\n",
                    "description": "<p>inits months variable</p>\n"
                },
                {
                    "name": "setMonthActiveState",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "active",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalled to set month active state\n",
                    "description": "<p>Called to set month active state</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2014,
                                "end": 2016,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2008,
                                "end": 2013,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2029,
                                "end": 2035,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "active"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2023,
                                "end": 2028,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "showEditDialog",
                    "args": [
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpens dialog window to add/edit month\n",
                    "description": "<p>Opens dialog window to add/edit month</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2222,
                                "end": 2227,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "month"
                            },
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2216,
                                "end": 2221,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "updateMonth",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalls edit month dialog\n",
                    "description": "<p>Calls edit month dialog</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1835,
                                "end": 1837,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1829,
                                "end": 1834,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>admin months table component</p>\n",
            "rawdescription": "\n\nadmin months table component\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\n\nimport { Subscription } from 'rxjs';\nimport { MonthService } from '../../../core/services/admin/months.service';\nimport { Month } from '../../../core/interfaces/month';\nimport { AddMonthDialog } from '../../dialogs/add-month/add-month.dialog';\n\n/**\n * admin months table component\n */\n@Component({\n  selector: 'app-admin-months',\n  templateUrl: './months.component.html',\n  styleUrls: ['../../admin.component.scss', './months.component.scss'],\n})\nexport class MonthsComponent implements OnInit, OnDestroy {\n  /**\n   * Sort variable for angular material table sort method\n   */\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n\n  /**\n   * available months\n   */\n  months: MatTableDataSource<Month>;\n\n  /**\n   * month subscription from utilities Service\n   */\n  monthsSubscription: Subscription;\n\n  /**\n   * constructor for utilities Service (needed for months request)\n   * @param dialog\n   * @param monthService\n   */\n  constructor(\n    private dialog: MatDialog,\n    private monthService: MonthService,\n  ) {}\n\n  /**\n   * inits months variable\n   */\n\tngOnInit(): void {\n    this.monthService.initializeMonths();\n\n    this.monthsSubscription = this.monthService.months$\n      .subscribe((months: Month[]) => {\n        this.months = new MatTableDataSource(months);\n        this.months.sort = this.sort;\n      });\n  }\n\n  /**\n   * unsubscribes month subscription\n   */\n  ngOnDestroy(): void {\n    this.monthsSubscription.unsubscribe();\n  }\n\n  /**\n   * Calls add month dialog\n   */\n  addMonth(): void {\n    this.showEditDialog(new Month());\n  }\n\n  /**\n   * Calls edit month dialog\n   * @param id\n   */\n  updateMonth(id: number): void {\n    this.showEditDialog(this.months.data.find((m: Month) => m.id === id));\n  }\n\n  /**\n   * Called to set month active state\n   * @param id\n   * @param active\n   */\n  setMonthActiveState(id: number, active: boolean): void {\n    this.monthService.setMonthActiveState(id, active);\n  }\n\n  /**\n   * Opens dialog window to add/edit month\n   * @param month\n   */\n  showEditDialog(month: Month): void {\n    let dialogRef: any = this.dialog.open(AddMonthDialog, {\n      data: {\n        month: month,\n      },\n    });\n    dialogRef.afterClosed().subscribe((m: Month | boolean) => {\n      if (m) {\n        this.monthService.setMonth(<Month>m);\n      }\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../assets/styles/variables.scss';\n\n.mat-sidenav-container{\n\tbackground: transparent;\n\tmargin: 0 10px;\n}\n\n.mat-drawer {\n\tdisplay: none;\n\tbackground: transparent;\n\twidth: 50px;\n\tborder-right-width: 0px;\n}\n\n.nav-button-container {\n\tmargin: 4px 0;\n\n\t.mat-icon-button {\n\t\twidth: 50px;\n\t\theight: 50px;\n\t\tmargin-bottom: 10px;\n\t\tpadding: 0;\n\n\t\t&.active, &.active .mat-icon {\n\t\t\tcolor: map-get($font-colors, blue);\n\t\t}\n\t}\n\n\t.mat-icon {\n\t\twidth: 1em;\n\t\theight: 1em;\n\t\tline-height: 1rem;\n\t\tfont-size: 2rem;\n\t}\n}\n\n\ntd.mat-cell:first-of-type, td.mat-footer-cell:first-of-type, th.mat-header-cell:first-of-type {\n\tpadding-left: 0;\n}\n\ntd.mat-cell:last-of-type, td.mat-footer-cell:last-of-type, th.mat-header-cell:last-of-type {\n\tpadding-right: 0;\n}\n\n.action-button {\n\twidth: 50px;\n\ttext-align: center;\n}\n\n.flag-button {\n\twidth: 70px;\n\ttext-align: center;\n}\n\n.button-row {\n\tmargin: 50px;\n\n\t.mat-raised-button {\n\t\tposition: fixed;\n\t\tz-index: 100;\n\t\tbottom: 32px;\n\t\tright: 30px;\n\t\tbox-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n\t}\n}\n\n.mat-form-field {\n\tmargin: 5px 0;\n}\n\ntr.mat-row.inactive td {\n\tcolor: map-get($font-colors, grey-label);\n\n\t.flag-inactive {\n\t\tbackground: map-get($font-colors, red);\n\t\tcolor: map-get($font-colors, white);\n\t\tpadding: 3px 6px;\n\t\tborder-radius: 4px;\n\t}\n}\n\n.mat-table tr.mat-row:last-child td {\n\tborder-bottom: 0;\n}",
                    "styleUrl": "../../admin.component.scss"
                },
                {
                    "data": "",
                    "styleUrl": "./months.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor for utilities Service (needed for months request)</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "monthService",
                        "type": "MonthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "rawdescription": "\n\nconstructor for utilities Service (needed for months request)\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1126,
                            "end": 1132,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialog"
                        },
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1120,
                            "end": 1125,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1145,
                            "end": 1157,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "monthService"
                        },
                        "type": "MonthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1139,
                            "end": 1144,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<table mat-table matSort [dataSource]=\"months\">\n\n\t<ng-container matColumnDef=\"active\">\n\t\t<th mat-header-cell mat-sort-header *matHeaderCellDef></th>\n\t\t<td mat-cell *matCellDef=\"let month\" class=\"flag-button\">\n\t\t\t<mat-slide-toggle color=\"primary\" [checked]=\"month.active\" [(ngModel)]=\"month.active\" (change)=\"setMonthActiveState(month.id, month.active)\"></mat-slide-toggle>\n\t\t</td>\n\t</ng-container>\n\n\t<ng-container matColumnDef=\"name\">\n\t\t<th mat-header-cell mat-sort-header *matHeaderCellDef>Name</th>\n\t\t<td mat-cell *matCellDef=\"let month\">{{ month.name }}</td>\n\t</ng-container>\n\n\t<ng-container matColumnDef=\"workingdays\">\n\t\t<th mat-header-cell *matHeaderCellDef>Working Days</th>\n\t\t<td mat-cell *matCellDef=\"let month\">{{ month.workingdays }}</td>\n\t</ng-container>\n\n\t<ng-container matColumnDef=\"time\">\n\t\t<th mat-header-cell mat-sort-header *matHeaderCellDef>Month</th>\n\t\t<td mat-cell *matCellDef=\"let month\">{{ month.time | date: 'MMMM yyyy' }}</td>\n\t</ng-container>\n\n\t<ng-container matColumnDef=\"edit\">\n\t\t<th mat-header-cell *matHeaderCellDef class=\"action-button\"></th>\n\t\t<td mat-cell *matCellDef=\"let month\" class=\"action-button\"><mat-icon *ngIf=\"month.active\" (click)=\"updateMonth(month.id)\">edit</mat-icon></td>\n\t</ng-container>\n\t\n\t<tr mat-header-row *matHeaderRowDef=\"['active', 'name', 'workingdays', 'time', 'edit']\"></tr>\n\t<tr mat-row *matRowDef=\"let row; columns: ['active', 'name', 'workingdays', 'time', 'edit'];\" [ngClass]=\"{'inactive': (!row.active)}\"></tr>\n</table>\n\n<div class=\"button-row\">\n\t<button mat-raised-button color=\"primary\" (click)=\"addMonth()\">\n\t\t<mat-icon>playlist_add</mat-icon> Add Month\n\t</button>\n</div>"
        },
        {
            "name": "OrganizationDialogComponent",
            "id": "component-OrganizationDialogComponent-7828de646e3d6929852a35835313745d",
            "file": "src/app/layout/organizationModal/organization-dialog.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./organization-dialog.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./organization-dialog.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_transformer",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "dataSource",
                    "defaultValue": "new MatTreeFlatDataSource(this.treeControl, this.treeFlattener)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "hasChild",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "treeControl",
                    "defaultValue": "new FlatTreeControl<ExampleFlatNode>(\n    (node) => node.level,\n    (node) => node.expandable\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "treeFlattener",
                    "defaultValue": "new MatTreeFlattener(\n    this._transformer,\n    (node) => node.level,\n    (node) => node.expandable,\n    (node) => node.children\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ninit method\n",
                    "description": "<p>init method</p>\n"
                },
                {
                    "name": "onNoClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Inject } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { MatDialogRef, MatDialog, MAT_DIALOG_DATA } from \"@angular/material/dialog\";\nimport { FlatTreeControl } from \"@angular/cdk/tree\";\nimport {\n  MatTreeFlatDataSource,\n  MatTreeFlattener,\n} from \"@angular/material/tree\";\nimport { ExecutiveForecastsService } from \"../../core/services/forecasts/executive-forecasts.service\";\nimport { BusinessOperationsService } from \"../../core/shared/business-operations.service\";\nimport { HierarchyNode } from \"../../core/interfaces/hierarchyNode\";\n\n/**\n * Food data with nested structure.\n * Each node has a name and an optional list of children.\n */\ninterface FoodNode {\n  name: string;\n  children?: FoodNode[];\n}\n\nconst TREE_DATA: HierarchyNode[] = [];\n\n/** Flat node with expandable and level information */\ninterface ExampleFlatNode {\n  expandable: boolean;\n  name: string;\n  level: number;\n}\n\n@Component({\n  templateUrl: \"./organization-dialog.component.html\",\n  styleUrls: [\"./organization-dialog.component.scss\"],\n})\nexport class OrganizationDialogComponent {\n  // tslint:disable: member-ordering\n  // tslint:disable: typedef\n  private _transformer = (node: HierarchyNode, level: number) => {\n    return {\n      expandable: !!node.children && node.children.length > 0,\n      name:\n        \"Name: \" +\n        node.firstName +\n        \"  \" +\n        node.lastName +\n        \" |  Role: \" +\n        node.role +\n        \"  | Grade: \" +\n        node.grade,\n      level: level,\n    };\n  };\n\n  treeControl = new FlatTreeControl<ExampleFlatNode>(\n    (node) => node.level,\n    (node) => node.expandable\n  );\n\n  treeFlattener = new MatTreeFlattener(\n    this._transformer,\n    (node) => node.level,\n    (node) => node.expandable,\n    (node) => node.children\n  );\n\n  dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) private data: any,\n    private http: HttpClient,\n    private dialogRef: MatDialogRef<OrganizationDialogComponent>,\n    private BO: BusinessOperationsService,\n    private executiveForecastsService: ExecutiveForecastsService\n  ) {\n    this.dataSource.data = TREE_DATA;\n  }\n\n  /**\n   * init method\n   */\n  // tslint:disable: use-life-cycle-interface\n  ngOnInit(): void {\n    console.log(\"component initialized\");\n    this.http\n      .get(this.BO.companyHierarchy())\n      .subscribe((hierarchy: HierarchyNode) => {\n        console.log(hierarchy);\n        this.dataSource.data = [hierarchy];\n      });\n  }\n\n  hasChild = (_: number, node: ExampleFlatNode) => node.expandable;\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".fix {\n  display: flex;\n  color: #ffffff;\n  background-color: #0070ad;\n  height: 50px;\n  padding: 0px;\n  padding-left: 24px;\n  padding-right: 24px;\n  line-height: 3.3;\n}\n\n.fix .title {\n  color: #fff;\n  padding-left: 14px;\n}\n\n.example-fill-remaining-space {\n  /* This fills the remaining space, by using flexbox. \n       Every toolbar row uses a flexbox row layout. */\n  flex: 1 1 auto;\n}\n\n.white {\n  color: #ffffff;\n}\n\n.m-0 {\n  margin: 0 !important;\n}\n.p-0 {\n  padding: 0 !important;\n}\n",
                    "styleUrl": "./organization-dialog.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<OrganizationDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "executiveForecastsService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 66,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<OrganizationDialogComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "executiveForecastsService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div\r\n  mat-dialog-title\r\n  class=\"fix m-0\"\r\n  layout=\"row\"\r\n  layout-align=\"space-between center\"\r\n>\r\n  <span>Enterprise Structure</span>\r\n\r\n  <!-- This fills the remaining space of the current row -->\r\n  <span class=\"example-fill-remaining-space\"></span>\r\n\r\n  <button mat-icon-button (click)=\"onNoClick()\">\r\n    <mat-icon class=\"white\">close</mat-icon>\r\n  </button>\r\n</div>\r\n<mat-dialog-content class=\"p-0 m-0 w-100\">\r\n  <mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\r\n    <!-- This is the tree node template for leaf nodes -->\r\n    <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodePadding>\r\n      <!-- use a disabled button to provide padding for tree leaf -->\r\n      <button mat-icon-button disabled></button>\r\n      {{ node.name }}\r\n    </mat-tree-node>\r\n    <!-- This is the tree node template for expandable nodes -->\r\n    <mat-tree-node\r\n      *matTreeNodeDef=\"let node; when: hasChild\"\r\n      matTreeNodePadding\r\n    >\r\n      <button\r\n        mat-icon-button\r\n        matTreeNodeToggle\r\n        [attr.aria-label]=\"'toggle ' + node.name\"\r\n      >\r\n        <mat-icon class=\"mat-icon-rtl-mirror\">\r\n          {{ treeControl.isExpanded(node) ? \"expand_more\" : \"chevron_right\" }}\r\n        </mat-icon>\r\n      </button>\r\n      {{ node.name }}\r\n    </mat-tree-node>\r\n  </mat-tree>\r\n</mat-dialog-content>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-458a0bd074cddd3932cfcb5b086aeb0d",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-page',\r\n  template: `<article>\r\n    <storybook-header\r\n      [user]=\"user\"\r\n      (onLogout)=\"onLogout.emit($event)\"\r\n      (onLogin)=\"onLogin.emit($event)\"\r\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\r\n    ></storybook-header>\r\n    <section>\r\n      <h2>Pages in Storybook</h2>\r\n      <p>\r\n        We recommend building UIs with a\r\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <strong>component-driven</strong>\r\n        </a>\r\n        process starting with atomic components and ending with pages.\r\n      </p>\r\n      <p>\r\n        Render pages with mock data. This makes it easy to build and review page states without\r\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\r\n        in Storybook:\r\n      </p>\r\n      <ul>\r\n        <li>\r\n          Use a higher-level connected component. Storybook helps you compose such data from the\r\n          \"args\" of child component stories\r\n        </li>\r\n        <li>\r\n          Assemble data in the page component from your services. You can mock these services out\r\n          using Storybook.\r\n        </li>\r\n      </ul>\r\n      <p>\r\n        Get a guided tutorial on component-driven development at\r\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          Storybook tutorials\r\n        </a>\r\n        . Read more in the\r\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\r\n        .\r\n      </p>\r\n      <div class=\"tip-wrapper\">\r\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\r\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\r\n              id=\"a\"\r\n              fill=\"#999\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        Viewports addon in the toolbar\r\n      </div>\r\n    </section>\r\n  </article>`,\r\n  styleUrls: ['./page.css'],\r\n})\r\nexport default class PageComponent {\r\n  @Input()\r\n  user: unknown = null;\r\n\r\n  @Output()\r\n  onLogin = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onLogout = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onCreateAccount = new EventEmitter<Event>();\r\n}\r\n\r\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\r\n//   <article>\r\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\r\n\r\n// );\r\n// Page.propTypes = {\r\n//   user: PropTypes.shape({}),\r\n//   onLogin: PropTypes.func.isRequired,\r\n//   onLogout: PropTypes.func.isRequired,\r\n//   onCreateAccount: PropTypes.func.isRequired,\r\n// };\r\n\r\n// Page.defaultProps = {\r\n//   user: null,\r\n// };\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n  padding: 48px 20px;\r\n  margin: 0 auto;\r\n  max-width: 600px;\r\n  color: #333;\r\n}\r\n\r\nh2 {\r\n  font-weight: 900;\r\n  font-size: 32px;\r\n  line-height: 1;\r\n  margin: 0 0 4px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\np {\r\n  margin: 1em 0;\r\n}\r\n\r\na {\r\n  text-decoration: none;\r\n  color: #1ea7fd;\r\n}\r\n\r\nul {\r\n  padding-left: 30px;\r\n  margin: 1em 0;\r\n}\r\n\r\nli {\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.tip {\r\n  display: inline-block;\r\n  border-radius: 1em;\r\n  font-size: 11px;\r\n  line-height: 12px;\r\n  font-weight: 700;\r\n  background: #e7fdd8;\r\n  color: #66bf3c;\r\n  padding: 4px 12px;\r\n  margin-right: 10px;\r\n  vertical-align: top;\r\n}\r\n\r\n.tip-wrapper {\r\n  font-size: 13px;\r\n  line-height: 20px;\r\n  margin-top: 40px;\r\n  margin-bottom: 40px;\r\n}\r\n\r\n.tip-wrapper svg {\r\n  display: inline-block;\r\n  height: 12px;\r\n  width: 12px;\r\n  margin-right: 4px;\r\n  vertical-align: top;\r\n  margin-top: 3px;\r\n}\r\n\r\n.tip-wrapper svg path {\r\n  fill: #1ea7fd;\r\n}\r\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PracticeComponent",
            "id": "component-PracticeComponent-93fa148b7320c7614abb73e0848dba9c",
            "file": "src/app/forecast/pages/practice/practice.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-practice",
            "styleUrls": [
                "./practice.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./practice.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeMonth",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "months",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "monthSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "step",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Number of the header in the child&#39;s expansion panel currently open</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nNumber of the header in the child's expansion panel currently open\n"
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>id of currently logged-in user (received from auth-service)</p>\n",
                    "line": 27,
                    "rawdescription": "\n\nid of currently logged-in user (received from auth-service)\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "forecastState",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initTeamForecast",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setStep",
                    "args": [
                        {
                            "name": "event",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTabActive",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Month } from '../../../core/interfaces/month';\r\nimport { Subscription } from 'rxjs';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { UtilitiesService } from '../../../core/services/utilities.service';\r\nimport { UserService } from '../../../core/services/user.service';\r\nimport { PageStateService } from '../../../core/shared/page-state.service';\r\nimport { AuthService } from '../../../core/security/auth.service';\r\nimport { environment as env } from \"../../../../environments/environment.prod\";\r\nimport { Location } from '@angular/common';\r\nimport { TeamUserService } from '../../../core/services/forecasts/team-user.service';\r\nimport { LockedMonth } from '../../../core/interfaces/lockedMonth';\r\nimport { MonthService } from '../../../core/services/admin/months.service';\r\nimport { ForecastService } from '../../../core/services/forecasts/forecast.service';\r\nimport { ExecutiveForecastsService } from '../../../core/services/forecasts/executive-forecasts.service';\r\n\r\n@Component({\r\n  selector: 'app-practice',\r\n  templateUrl: './practice.component.html',\r\n  styleUrls: ['./practice.component.scss']\r\n})\r\nexport class PracticeComponent implements OnInit, OnDestroy {\r\n\r\n  /**\r\n\t * id of currently logged-in user (received from auth-service)\r\n\t */\r\n\tuserId: number;\r\n\r\n  months: Month[] = [];\r\n  monthSubscription: Subscription;\r\n  activeMonth: number = 0;\r\n  /**\r\n   * Number of the header in the child's expansion panel currently open\r\n   */\r\n  step: number = -1;\r\n\r\n  constructor(\r\n    private location: Location,\r\n    private route: ActivatedRoute,\r\n    private utilitiesService: UtilitiesService,\r\n\r\n    private pageState: PageStateService,\r\n    private authService: AuthService,\r\n    private teamService: TeamUserService,\r\n    private monthService: MonthService,\r\n    private forecastService: ForecastService,\r\n    private executiveService: ExecutiveForecastsService\r\n  ) {\r\n    this.userId = this.authService.getUserId();\r\n   }\r\n\r\n  ngOnInit(): void {\r\n    this.pageState.forecastrReady$.subscribe((ready: boolean) => {\r\n\t\t\tif (ready && this.authService.hasRole(env.roles.pl)) {\r\n\t\t\t\tthis.initTeamForecast();\r\n\t\t\t}\r\n\t\t});\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.monthSubscription.unsubscribe();\r\n  }\r\n\r\n  private initTeamForecast(): void {\r\n    this.teamService.initializePLTeam();\r\n    this.monthSubscription = this.utilitiesService.months$\r\n      .subscribe((months: Month[]) => {\r\n        this.months = months.filter((m: Month) => m.active === true);\r\n        \r\n        var today = new Date();\r\n\t\t\t\tvar todayMonth = new Date(today.getFullYear(), today.getMonth(), 1);\r\n\t\t\t\tthis.months = this.months.filter((m: Month) => new Date(m.time) >= todayMonth);\r\n\r\n\t\t\t\tif(this.months.length > 7) {\r\n\t\t\t\t\tthis.months = this.months.slice(1, 7);\r\n        }\r\n        \r\n        let id: number = parseInt(this.route.snapshot.paramMap.get('id'), 10);\r\n        if (typeof id !== 'undefined' && id >= 0 && id < this.months.length) {\r\n          this.activeMonth = id;\r\n\r\n        } else {\r\n          for (let i: number = 0; i < this.months.length; i++) {\r\n            if (Date.parse(this.months[i].time) > (new Date()).setMonth((new Date().getMonth() - 1))) {\r\n              this.activeMonth = i;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        setTimeout(() => {\r\n\t\t\t\t\tlet shift: number = parseInt(window.getComputedStyle(document.querySelector('.mat-tab-label-container')).width) - parseInt(window.getComputedStyle(document.querySelector('.mat-tab-list')).width);\r\n\t\t\t\t\tlet pos: number = parseInt((document.querySelector('.mat-tab-label-active') as HTMLElement).getAttribute('aria-posinset'), 10);\r\n\t\t\t\t\tif (shift < ((pos ? pos : 1) - 1) * -100) {\r\n\t\t\t\t\t\tshift = ((pos ? pos : 1) - 1) * -100;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t(document.querySelector('.mat-tab-list') as HTMLElement).style.transform = 'translateX(' + shift + 'px)';\r\n\t\t\t\t}, 100);\r\n      });\r\n\r\n      this.monthService.getLockedMonths().subscribe(\r\n        (lockedMonths: LockedMonth[]) => {\r\n          let activeLockedMonths = lockedMonths.filter((m: LockedMonth) => this.months.find((x: Month) => x.id === m.id) !== undefined);\r\n          for(let i = 0; i < this.months.length; i++) {\r\n            this.months[i].locked = activeLockedMonths[i].locked;\r\n          }\r\n        });\r\n  }\r\n\r\n  setTabActive(index: number): void {\r\n    this.activeMonth = index;\r\n    this.location.replaceState('/forecast/practice/' + this.activeMonth);\r\n  }\r\n\r\n  forecastState(type: string, monthId: number): boolean {\r\n\t\treturn this.forecastService.checkForecastState(type, monthId, this.userId);\r\n\t}\r\n\r\n  //Reflect a step change from teamlead-month into parent\r\n  setStep(event : number){\r\n    this.step = event;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./practice.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "teamService",
                        "type": "TeamUserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "monthService",
                        "type": "MonthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "teamService",
                        "type": "TeamUserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "monthService",
                        "type": "MonthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<mat-tab-group [selectedIndex]=\"activeMonth\" (selectedIndexChange)=\"setTabActive($event)\">\r\n    <mat-tab *ngFor=\"let month of months\" label=\"{{month.name}}\"  id=\"{{month.id}}\">\r\n      <ng-template mat-tab-label>\r\n          <mat-icon *ngIf=\"forecastState('edited', month.id)\" class=\"icon-edited\">radio_button_checked</mat-icon>\r\n          <mat-icon *ngIf=\"month.locked || forecastState('locked', month.id)\" class=\"icon-locked\">lock</mat-icon>\r\n          {{month.name}}\r\n      </ng-template>\r\n      <ng-template matTabContent> <!-- matTabContent for tab lazy loading -->\r\n        <app-teamlead-month [role]=\"'practice'\" [month]=\"month\" [step]=\"step\" (setStepEvent)=setStep($event)></app-teamlead-month>\r\n      </ng-template>\r\n    </mat-tab>\r\n  </mat-tab-group>"
        },
        {
            "name": "PracticesComponent",
            "id": "component-PracticesComponent-dcaedaad082f9dfb9b81528d60d8a889",
            "file": "src/app/forecast/pages/practices/practices.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-practices",
            "styleUrls": [
                "./practices.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./practices.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "availableMonths",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "months",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "monthSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "period",
                    "defaultValue": "{ from: undefined, to: undefined }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "viewSwitch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "changeViewSwitch",
                    "args": [
                        {
                            "name": "switchState",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "switchState",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initPracticesView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOpen dialog for executive chart",
                    "description": "<p>Open dialog for executive chart</p>\n"
                },
                {
                    "name": "setDefaultPeriod",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the default period to current month until 6 months in the future\n",
                    "description": "<p>Sets the default period to current month until 6 months in the future</p>\n"
                },
                {
                    "name": "showPeriod",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReloads the values after period update\n",
                    "description": "<p>Reloads the values after period update</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Month } from '../../../core/interfaces/month';\nimport { Subscription } from 'rxjs';\nimport { UtilitiesService } from '../../../core/services/utilities.service';\nimport { PageStateService } from '../../../core/shared/page-state.service';\nimport { ExecutiveChartComponent } from \"../../components/executive-chart/executive-chart.component\";\nimport { MatDialog } from \"@angular/material/dialog\";\n\n@Component({\n  selector: 'app-practices',\n  templateUrl: './practices.component.html',\n  styleUrls: ['./practices.component.scss']\n})\nexport class PracticesComponent implements OnInit, OnDestroy {\n\n  monthSubscription: Subscription;\n\n  months: Month[] = [];\n\n  availableMonths: Month[] = [];\n\n  period: any = { from: undefined, to: undefined };\n\n  viewSwitch: string;\n\n\n  constructor(\n    private utilitiesService: UtilitiesService,\n    private pageState: PageStateService,\n    public dialog: MatDialog,\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.pageState.forecastrReady$.subscribe((ready:boolean)=> {\n      if (ready) {\n         this.initPracticesView();\n      }\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.monthSubscription.unsubscribe();\n  }\n\n  initPracticesView(): void {\n    this.monthSubscription = this.utilitiesService.months$.subscribe((months: Month[]) => {\n      this.availableMonths = months;\n      this.setDefaultPeriod();\n    });\n  }\n\n      /**\n   * Reloads the values after period update\n   */\n  showPeriod(): void {\n    if (this.period.to < this.period.from) {\n      this.period.to = this.period.from;\n    }\n\n    this.pageState.showSpinner();\n    this.months = this.utilitiesService\n      .getMonths()\n      .filter((m: Month) => m.id >= this.period.from && m.id <= this.period.to);\n    this.pageState.hideSpinner();\n  }\n\n  /**\n   * Sets the default period to current month until 6 months in the future\n   */\n  setDefaultPeriod(): void {\n    let months: Month[] = this.utilitiesService.getMonths();\n\n    for (let i: number = 0; i < months.length; i++) {\n      if (\n        Date.parse(months[i].time) >\n        new Date().setMonth(new Date().getMonth() + 1)\n      ) {\n        this.period.from = i;\n        this.period.to = i + 5;\n        this.showPeriod();\n        break;\n      }\n    }\n  }\n  \n  /**Open dialog for executive chart */\n  openDialog(): void {\n    const dialogRef = this.dialog.open(ExecutiveChartComponent, {\n      height: \"90%\",\n      width: \"90%\",\n      panelClass: \"custom-dialog-container\",\n      data: {},\n    });\n    dialogRef.afterClosed().subscribe(() => {  });\n  }\n\n  changeViewSwitch(switchState: string): void {\n    this.viewSwitch = switchState;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../assets/styles/variables.scss\";\n\n.practices-view-container {\n    margin-top: 5px;\n    padding: 0;\n    background: transparent;\n}\n\n.second-header {\n    width: 100%;\n}\n\n.executive-btn {\n    float: right;\n    position: relative;\n}\n\n.mat-icon {\n    font-size: 18px;\n    color: #fff !important;\n}\n\n.period-container {\n    width: 100%;\n}\n.period-component {\n    display: inline-flex;\n    margin: 0 5px;\n\n    &.mat-form-field {\n      width: 200px;\n    }\n\n    &.mat-raised-button {\n      margin-top: 4px;\n      bottom: 4px;\n    }\n\n    &:first-child {\n      margin-left: 0;\n    }\n}\n  \n.period-download {\n    margin-top: 4px;\n    bottom: 4px;\n}",
                    "styleUrl": "./practices.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"practices-view\">\r\n    <div class=\"practices-view-container\">\r\n        <div class=\"period-container\">\r\n            <mat-form-field class=\"period-component\" appearance=\"outline\">\r\n                <mat-label>Period Start Month</mat-label>\r\n        \r\n                    <mat-select [(ngModel)]=\"period.from\">\r\n                        <ng-container *ngFor=\"let r of availableMonths\">\r\n                            <mat-option [value]=\"r.id\">{{ r.name }}</mat-option>\r\n                        </ng-container>\r\n                    </mat-select>\r\n                </mat-form-field>\r\n        \r\n                <mat-form-field class=\"period-component\" appearance=\"outline\">\r\n                    <mat-label>Period End Month</mat-label>\r\n        \r\n                    <mat-select [(ngModel)]=\"period.to\">\r\n                        <ng-container *ngFor=\"let r of availableMonths\">\r\n                            <mat-option [value]=\"r.id\">{{ r.name }}</mat-option>\r\n                        </ng-container>\r\n                    </mat-select>\r\n        \r\n                </mat-form-field>\r\n        \r\n                <button class=\"period-component\" mat-raised-button color=\"primary\" (click)=\"showPeriod()\">\r\n                    <mat-icon>search</mat-icon> Show Period\r\n                </button>\r\n        </div>\r\n        \r\n        <h3>Months</h3>\r\n        <mat-tab-group>\r\n            <mat-tab *ngFor=\"let month of months\" label=\"{{ month.name }}\">\r\n                <ng-template matTabContent>\r\n                    <app-executive-detail (viewSwitch)=\"changeViewSwitch($event)\" [switchState]=\"viewSwitch\"  [month]=\"month\" [months]=\"months\"></app-executive-detail>\r\n                  </ng-template>\r\n            </mat-tab>\r\n        </mat-tab-group>\r\n    </div>\r\n</div>"
        },
        {
            "name": "ProjectRequestDialog",
            "id": "component-ProjectRequestDialog-3e2241114adad1a62b17fc4c46c1c48a",
            "file": "src/app/forecast/dialogs/add-project/project-request.dialog.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./project-request.dialog.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "line": 32,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<ProjectRequestDialog>",
                    "optional": false,
                    "line": 28,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "projectCode",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "projectComment",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "projectName",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "openEmail",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Component for Add Project Dialog</p>\n",
            "rawdescription": "\n\nComponent for Add Project Dialog\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from \"@angular/core\";\nimport { MatDialogRef, MAT_DIALOG_DATA } from \"@angular/material/dialog\";\nimport { ProjectRequest } from \"../../../core/interfaces/projectRequest\";\nimport { HttpClient } from '@angular/common/http';\nimport { BusinessOperationsService } from '../../../core/shared/business-operations.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n/**\n * Component for Add Project Dialog\n */\n@Component({\n  templateUrl: \"./project-request.dialog.html\"\n})\nexport class ProjectRequestDialog {\n  \n  projectCode:String = \"\";\n\n  projectName:String = \"\";\n\n  projectComment:String = \"\";\n  \n  /**\n   * default constructor for addProjectDialog\n   * @param dialogRef\n   * @param data\n   */\n  constructor(\n    public dialogRef: MatDialogRef<ProjectRequestDialog>,\n    private http: HttpClient,\n    private snackBar: MatSnackBar,\n    private BO: BusinessOperationsService,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n  ) {\n    this.projectCode = data.code;\n    this.projectName = data.name;\n    this.projectComment = data.comment;\n\n  }\n  public openEmail() {\n    let projectRequest = new ProjectRequest();\n    projectRequest.comment = this.data.comment;\n    projectRequest.projectCode = this.data.code;\n    projectRequest.projectName = this.data.name;\n\n    this.http.post(this.BO.requestProject(), projectRequest).subscribe((res: any) => {\n      this.snackBar.open(\"A Request has been sent to add this Project\", \"\", {duration: 1000,});\n    },\n    (e: any) => {\n      this.snackBar.open(\"A Problem has occured while performing the Project Request\", \"\", {duration: 1000,});\n    });\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>default constructor for addProjectDialog</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ProjectRequestDialog>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "rawdescription": "\n\ndefault constructor for addProjectDialog\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 703,
                            "end": 712,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialogRef"
                        },
                        "type": "MatDialogRef<ProjectRequestDialog>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 697,
                            "end": 702,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "BO",
                        "type": "BusinessOperationsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 725,
                            "end": 729,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "data"
                        },
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 719,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "templateData": "<h2 mat-dialog-title>Project Request</h2>\n<mat-dialog-content>Send a e-mail with following project code and name.</mat-dialog-content>\n<br>\n<mat-form-field>\n  <input matInput placeholder=\"project code\" [(ngModel)]=\"data.code\">\n</mat-form-field>\n<mat-form-field>\n  <input matInput placeholder=\"project name\" [(ngModel)]=\"data.name\">\n</mat-form-field>\n<mat-form-field>\n<textarea matInput [(ngModel)]=\"data.comment\"  name=\"comment\"  maxLength=\"200\"\n        cdkTextareaAutosize #autosize=\"cdkTextareaAutosize\" cdkAutosizeMinRows=\"2\" cdkAutosizeMaxRows=\"6\" placeholder=\"leave a comment\"></textarea>\n</mat-form-field>\n<mat-dialog-actions>\n  <button mat-button  mat-dialog-close cdkFocusInitial [mat-dialog-close]=\"false\">cancel</button>\n  <!-- The mat-dialog-close directive optionally accepts a value as a result for the dialog. -->\n  <button mat-button [mat-dialog-close]=\"true\" (click)=\"openEmail()\">submit </button>\n</mat-dialog-actions>\n"
        },
        {
            "name": "ProjectsComponent",
            "id": "component-ProjectsComponent-50c2337cb7cc60731ebae97c8e6dc912",
            "file": "src/app/admin/components/projects/projects.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-admin-projects",
            "styleUrls": [
                "../../admin.component.scss",
                "./projects.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./projects.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "projects",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTableDataSource<Project>",
                    "optional": false,
                    "description": "<p>project list</p>\n",
                    "line": 25,
                    "rawdescription": "\n\nproject list\n"
                },
                {
                    "name": "projectSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>project list subscription</p>\n",
                    "line": 30,
                    "rawdescription": "\n\nproject list subscription\n"
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSort",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSort, {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "addProject",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow new project dialog window\n",
                    "description": "<p>Show new project dialog window</p>\n"
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemove project subscription when component gets destroyed\n",
                    "description": "<p>Remove project subscription when component gets destroyed</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSubscribe to projects at component init\n",
                    "description": "<p>Subscribe to projects at component init</p>\n"
                },
                {
                    "name": "setProjectActiveState",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "active",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSwitch active state of project\n",
                    "description": "<p>Switch active state of project</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2001,
                                "end": 2003,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1995,
                                "end": 2000,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 2016,
                                "end": 2022,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "active"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2010,
                                "end": 2015,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "showEditDialog",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpens add/edit project dialog window\n",
                    "description": "<p>Opens add/edit project dialog window</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2214,
                                "end": 2221,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "project"
                            },
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2208,
                                "end": 2213,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "updateProject",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nShow update project dialog window\n",
                    "description": "<p>Show update project dialog window</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1818,
                                "end": 1820,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1812,
                                "end": 1817,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>project-admin component</p>\n",
            "rawdescription": "\n\nproject-admin component\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\nimport { MatSort } from '@angular/material/sort';\n\nimport { Project } from '../../../core/interfaces/project';\nimport { Subscription } from 'rxjs';\nimport { ProjectService } from '../../../core/services/admin/projects.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { AddProjectDialog } from '../../dialogs/add-project/add-project.dialog';\n\n/**\n * project-admin component\n */\n@Component({\n  selector: 'app-admin-projects',\n  templateUrl: './projects.component.html',\n  styleUrls: ['../../admin.component.scss', './projects.component.scss'],\n})\nexport class ProjectsComponent implements OnInit, OnDestroy {\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n\n  /**\n   * project list\n   */\n  projects: MatTableDataSource<Project>;\n\n  /**\n   * project list subscription\n   */\n  projectSubscription: Subscription;\n\n  /**\n   * default constructor\n   * @param dialog\n   * @param projectService\n   */\n  constructor(\n    private dialog: MatDialog,\n    private projectService: ProjectService,\n  ) {}\n\n  /**\n   * Subscribe to projects at component init\n   */\n  ngOnInit(): void {\n    this.projectService.initializeProjects();\n\n    this.projectSubscription = this.projectService.projects$\n      .subscribe((projects: Project[]) => {\n        this.projects = new MatTableDataSource(projects);\n        this.projects.sort = this.sort;\n      });\n  }\n\n  /**\n   * Remove project subscription when component gets destroyed\n   */\n  ngOnDestroy(): void {\n    this.projectSubscription.unsubscribe();\n  }\n\n  /**\n   * Show new project dialog window\n   */\n  addProject(): void {\n    this.showEditDialog(new Project());\n  }\n\n  /**\n   * Show update project dialog window\n   * @param id\n   */\n  updateProject(id: number): void {\n    this.showEditDialog(this.projects.data.find((p: Project) => p.id === id));\n  }\n\n  /**\n   * Switch active state of project\n   * @param id\n   * @param active\n   */\n  setProjectActiveState(id: number, active: boolean): void {\n    this.projectService.setProjectActiveState(id, active);\n  }\n\n  /**\n   * Opens add/edit project dialog window\n   * @param project\n   */\n  showEditDialog(project: Project): void {\n    let dialogRef: any = this.dialog.open(AddProjectDialog, {\n      data: {\n        project: project,\n      },\n    });\n\n    dialogRef.afterClosed().subscribe((p: Project | boolean) => {\n      if (p) {\n        this.projectService.setProject(<Project>p);\n      }\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../assets/styles/variables.scss';\n\n.mat-sidenav-container{\n\tbackground: transparent;\n\tmargin: 0 10px;\n}\n\n.mat-drawer {\n\tdisplay: none;\n\tbackground: transparent;\n\twidth: 50px;\n\tborder-right-width: 0px;\n}\n\n.nav-button-container {\n\tmargin: 4px 0;\n\n\t.mat-icon-button {\n\t\twidth: 50px;\n\t\theight: 50px;\n\t\tmargin-bottom: 10px;\n\t\tpadding: 0;\n\n\t\t&.active, &.active .mat-icon {\n\t\t\tcolor: map-get($font-colors, blue);\n\t\t}\n\t}\n\n\t.mat-icon {\n\t\twidth: 1em;\n\t\theight: 1em;\n\t\tline-height: 1rem;\n\t\tfont-size: 2rem;\n\t}\n}\n\n\ntd.mat-cell:first-of-type, td.mat-footer-cell:first-of-type, th.mat-header-cell:first-of-type {\n\tpadding-left: 0;\n}\n\ntd.mat-cell:last-of-type, td.mat-footer-cell:last-of-type, th.mat-header-cell:last-of-type {\n\tpadding-right: 0;\n}\n\n.action-button {\n\twidth: 50px;\n\ttext-align: center;\n}\n\n.flag-button {\n\twidth: 70px;\n\ttext-align: center;\n}\n\n.button-row {\n\tmargin: 50px;\n\n\t.mat-raised-button {\n\t\tposition: fixed;\n\t\tz-index: 100;\n\t\tbottom: 32px;\n\t\tright: 30px;\n\t\tbox-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n\t}\n}\n\n.mat-form-field {\n\tmargin: 5px 0;\n}\n\ntr.mat-row.inactive td {\n\tcolor: map-get($font-colors, grey-label);\n\n\t.flag-inactive {\n\t\tbackground: map-get($font-colors, red);\n\t\tcolor: map-get($font-colors, white);\n\t\tpadding: 3px 6px;\n\t\tborder-radius: 4px;\n\t}\n}\n\n.mat-table tr.mat-row:last-child td {\n\tborder-bottom: 0;\n}",
                    "styleUrl": "../../admin.component.scss"
                },
                {
                    "data": "",
                    "styleUrl": "./projects.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>default constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "projectService",
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "rawdescription": "\n\ndefault constructor\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1016,
                            "end": 1022,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialog"
                        },
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1010,
                            "end": 1015,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1035,
                            "end": 1049,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "projectService"
                        },
                        "type": "ProjectService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1029,
                            "end": 1034,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<table mat-table matSort [dataSource]=\"projects\">\n\n\t<ng-container matColumnDef=\"active\">\n\t\t<th mat-header-cell mat-sort-header *matHeaderCellDef></th>\n\t\t<td mat-cell *matCellDef=\"let project\" class=\"flag-button\">\n\t\t\t<mat-slide-toggle color=\"primary\" [checked]=\"project.active\" [(ngModel)]=\"project.active\" (change)=\"setProjectActiveState(project.id, project.active)\"></mat-slide-toggle>\n\t\t</td>\n\t</ng-container>\n\n\t<ng-container matColumnDef=\"code\">\n\t\t<th mat-header-cell mat-sort-header *matHeaderCellDef>Code</th>\n\t\t<td mat-cell *matCellDef=\"let project\">{{ project.code }}</td>\n\t</ng-container>\n\t\n\t<ng-container matColumnDef=\"name\">\n\t\t<th mat-header-cell mat-sort-header *matHeaderCellDef>Name</th>\n\t\t<td mat-cell *matCellDef=\"let project\">{{ project.name }}</td>\n\t</ng-container>\n\n\t<ng-container matColumnDef=\"mandatory\">\n\t\t<th mat-header-cell mat-sort-header *matHeaderCellDef>Mandatory</th>\n\t\t<td mat-cell *matCellDef=\"let project\">\n\t\t\t<ng-container [ngSwitch]=\"project.mandatory\">\n\t\t\t\t<ng-container *ngSwitchCase=\"'Y'\">Mandatory</ng-container>\n\t\t\t\t<ng-container *ngSwitchCase=\"'N'\">Not Mandatory</ng-container>\n\t\t\t</ng-container>\n\t\t</td>\n\t</ng-container>\n\n\t<ng-container matColumnDef=\"billable\">\n\t\t<th mat-header-cell mat-sort-header *matHeaderCellDef>Billable</th>\n\t\t<td mat-cell *matCellDef=\"let project\">\n\t\t\t<ng-container [ngSwitch]=\"project.billable\">\n\t\t\t\t<ng-container *ngSwitchCase=\"true\">Billable</ng-container>\n\t\t\t\t<ng-container *ngSwitchCase=\"false\">Non-billable</ng-container>\n\t\t\t</ng-container>\n\t\t</td>\n\t</ng-container>\n\n\t<ng-container matColumnDef=\"projectType\">\n\t\t<th mat-header-cell mat-sort-header *matHeaderCellDef>Type</th>\n\t\t<td mat-cell *matCellDef=\"let project\">\n\t\t\t<ng-container [ngSwitch]=\"project.projectType\">\n\t\t\t\t<ng-container *ngSwitchCase=\"0\">Default</ng-container>\n\t\t\t\t<ng-container *ngSwitchCase=\"5\">Non-billable / No COR</ng-container>\n\t\t\t\t<ng-container *ngSwitchCase=\"1\">Business Development Days</ng-container>\n\t\t\t\t<ng-container *ngSwitchCase=\"2\">Training</ng-container>\n\t\t\t\t<ng-container *ngSwitchCase=\"3\">Vacation</ng-container>\n\t\t\t\t<ng-container *ngSwitchCase=\"4\">Bench Time</ng-container>\n\t\t\t</ng-container>\n\t\t</td>\n\t</ng-container>\n\n\t<ng-container matColumnDef=\"edit\">\n\t\t<th mat-header-cell *matHeaderCellDef class=\"action-button\"></th>\n\t\t<td mat-cell *matCellDef=\"let project\" class=\"action-button\"><mat-icon *ngIf=\"project.active\" (click)=\"updateProject(project.id)\">edit</mat-icon></td>\n\t</ng-container>\n\t\n\t<tr mat-header-row *matHeaderRowDef=\"['active', 'code', 'name', 'mandatory', 'billable', 'projectType', 'edit']\"></tr>\n\t<tr mat-row *matRowDef=\"let row; columns: ['active', 'code', 'name', 'mandatory', 'billable', 'projectType', 'edit'];\" [ngClass]=\"{'inactive': (!row.active)}\"></tr>\n</table>\n\n<div class=\"button-row\">\n\t<button mat-raised-button color=\"primary\" (click)=\"addProject()\">\n\t\t<mat-icon>playlist_add</mat-icon> Add Project\n\t</button>\n</div>"
        },
        {
            "name": "ResetPasswordComponent",
            "id": "component-ResetPasswordComponent-d928029af8b9af0a8310046db683fb3e",
            "file": "src/app/reset-password/reset-password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-reset-password",
            "styleUrls": [
                "./reset-password.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./reset-password.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formSubmitError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Contains error message if an error happened at the login</p>\n",
                    "line": 32,
                    "rawdescription": "\n\nContains error message if an error happened at the login\n"
                },
                {
                    "name": "resetActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "<p>true while login process is active</p>\n",
                    "line": 37,
                    "rawdescription": "\n\ntrue while login process is active\n"
                },
                {
                    "name": "resetPasswordGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "<p>Reset form group element for comparing two password fields</p>\n",
                    "line": 42,
                    "rawdescription": "\n\nReset form group element for comparing two password fields\n"
                },
                {
                    "name": "resetPasswordToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Token, which is returned from database and is created for resetting password</p>\n",
                    "line": 47,
                    "rawdescription": "\n\nToken, which is returned from database and is created for resetting password\n"
                },
                {
                    "name": "responseRejectedText",
                    "defaultValue": "\"Your password is not strong enough. Please read the rules above again to generate your password.\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "responseSuccessfulText",
                    "defaultValue": "\"Your password has been successfully changed. You will be re-directed to login page shortly.\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Response text for successful and unsuccessful attempts for resetting password</p>\n",
                    "line": 52,
                    "rawdescription": "\n\nResponse text for successful and unsuccessful attempts for resetting password\n",
                    "modifierKind": [
                        142
                    ]
                },
                {
                    "name": "responseUnsuccessfulText",
                    "defaultValue": "\"Problem occured while resetting your password. Please check your reset link and try again later.\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        142
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ResetPasswordService } from '../core/security/resetPassword.service';\nimport { FormGroup, AbstractControl, FormBuilder, Validators, ValidatorFn, ValidationErrors, FormControl } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatDialogRef, MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ConfirmMessageDialog } from '../forecast/dialogs/confirm-message/confirm-message.dialog';\n\nfunction passwordMatcherValidator(control: AbstractControl): { [key: string]: any } | null {\n  let newPasswordControl = control.get('newPassword');\n  let confirmPasswordControl = control.get('confirmPassword');\n\n  if(newPasswordControl.pristine || confirmPasswordControl.pristine) {\n    return null;\n  }\n\n  if(newPasswordControl.value === confirmPasswordControl.value) {\n    return null;\n  }\n  return {'passwordMatch': true};\n}\n\n@Component({\n  selector: 'app-reset-password',\n  templateUrl: './reset-password.component.html',\n  styleUrls: ['./reset-password.component.scss']\n})\nexport class ResetPasswordComponent implements OnInit{\n  /**\n   * Contains error message if an error happened at the login\n   */\n  formSubmitError: string;\n\n  /**\n   * true while login process is active\n   */\n  resetActive: boolean = false;\n\n  /**\n   * Reset form group element for comparing two password fields\n   */\n  resetPasswordGroup: FormGroup;\n\n  /**\n   * Token, which is returned from database and is created for resetting password\n   */\n  resetPasswordToken: string;\n\n  /**\n   * Response text for successful and unsuccessful attempts for resetting password\n   */\n  readonly responseSuccessfulText: string = \"Your password has been successfully changed. You will be re-directed to login page shortly.\";\n  readonly responseUnsuccessfulText: string = \"Problem occured while resetting your password. Please check your reset link and try again later.\";\n  readonly responseRejectedText: string = \"Your password is not strong enough. Please read the rules above again to generate your password.\";\n\n  constructor(\n    private resetPasswordService: ResetPasswordService,\n    private fb: FormBuilder,\n    private activatedRoute: ActivatedRoute,\n    private dialog: MatDialog,\n    private snackBar: MatSnackBar,\n    private router: Router,) { }\n\n  ngOnInit() {\n    this.resetPasswordGroup = this.fb.group({\n      newPassword: [''],\n      confirmPassword: [''],\n    }, {validator: passwordMatcherValidator});\n  }\n\n  resetPassword(): void {\n    //this.resetActive = false;\n\n    let resetToken = this.activatedRoute.snapshot.paramMap.get('token');\n    let newPassword = this.resetPasswordGroup.controls['newPassword'].value;\n\n    let dialogRef: MatDialogRef<ConfirmMessageDialog> = this.dialog.open(ConfirmMessageDialog, {\n      data: {\n        message: \"Are you sure you want to reset your password? This action cannot be undone.\",\n        button: { cancel: 'Cancel', submit: 'Reset' },\n      },\n    });\n\n    dialogRef.afterClosed().subscribe((remove: boolean) => {\n      this.resetActive = true;\n      if (remove === true) {\n        this.resetPasswordService.resetPasswordWithToken(resetToken, newPassword).subscribe(\n          (response: any) => {\n            this.resetActive = false;\n            if(response.status === 200) {\n              this.snackBar.open(this.responseSuccessfulText, \"\",{duration: 5000,});\n              setTimeout(() => {\n                this.router.navigate(['/login']);\n              }, 5000);\n            }\n            else {\n              this.snackBar.open(this.responseUnsuccessfulText, \"\",{duration: 5000,});\n            }\n          },\n          (error: any) => {\n            this.resetActive = false;\n            if(error.status === 422) {\n              this.snackBar.open(this.responseRejectedText, \"\",{duration: 5000,});\n            }\n            else {\n              this.snackBar.open(this.responseUnsuccessfulText, \"\",{duration: 5000,});\n            }\n            \n          }\n        );\n      }\n    });\n    \n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../assets/styles/variables.scss';\n\n.reset-password-container {\n  display: flex;\n  height: 100%;\n  background: url(../../assets/img/capgemini-shape.png);\n  background-size: contain;\n  background-repeat: no-repeat;\n  background-position: right bottom;\n \n  > div {\n    margin: auto;\n  }\n}\n\n.invalid-feedback {\n    color: map-get($font-colors, red);\n    margin-bottom: 12px;\n}\n\n.reset-password-label {\n  color: map-get($font-colors, blue);\n  font-size: 1.25rem;\n  margin-bottom: 12px;\n  font-weight: 700;\n}\n\n.mat-card {\n  width: 320px;\n  padding: 20px;\n  box-shadow: 0 4px 8px 2px rgba(0,0,0,.06) !important;\n  background-color: rgba(255,255,255,0.9);\n  \n  .mat-card-title {\n    display: flex;\n    height: 36px;\n    line-height: 36px;\n    margin: 5px 0;\n    padding: 0;\n\n    div {\n      display: inline-block;\n      height: inherit;\n      font-size: 1.25rem;\n      font-weight: 700;\n      color: map-get($font-colors, blue);\n    }\n\n    .logo {\n      height: inherit;\n      margin-right: 10px;\n    }\n  }\n\n  .mat-card-content {\n    padding: 0;\n\n    form {\n      padding: 0;\n    }\n\n    .mat-form-field {\n      line-height: 1;\n    }\n  }\n}\n\n.spinner-container {\n  display: none;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin: -50px 0 0 -50px;\n\n  &.active {\n    display: block;\n  }\n}",
                    "styleUrl": "./reset-password.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "resetPasswordService",
                        "type": "ResetPasswordService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 54,
                "jsdoctags": [
                    {
                        "name": "resetPasswordService",
                        "type": "ResetPasswordService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<div class=\"reset-password-container\">\n  <div layout=\"row\" layout-align=\"center\">\n    \n    <mat-card>\n      <mat-card-title>\n        <div>\n          <img class=\"logo\" src=\"{{'assets/img/cap_logo_p.png'}}\">\n        </div>\n       \n      </mat-card-title>\n\n      <mat-card-content>\n        \n        <form layout=\"column\" class=\"pad\" (ngSubmit)=\"resetPassword()\" #resetPasswordForm=\"ngForm\" >\n          <br>\n          <mat-label class=\"reset-password-label\">Reset your password</mat-label>\n          <div>Your password should have the following properties:</div>\n          <ul>\n            <li>at least 8 characters</li>\n            <li>at least one uppercase and lowercase letters</li>\n            <li>at least one number</li>\n            <li>at least one special character (!_$@#/? etc.)</li>\n          </ul>\n          <div [formGroup]=\"resetPasswordGroup\">\n            <mat-form-field flex>\n              <input matInput type=\"password\" placeholder=\"New password\" formControlName=\"newPassword\" required>\n            </mat-form-field>\n  \n            <mat-form-field flex>\n              <input class=\"form-control\" matInput type=\"password\" placeholder=\"Confirm your new password\" formControlName=\"confirmPassword\" required pattern=\"{{ resetPasswordGroup.controls.newPassword.value }}\">\n            </mat-form-field>\n            <div class=\"invalid-feedback\">\n              <span *ngIf=\"resetPasswordGroup.errors?.passwordMatch\">\n                Your password doesn't match with above.\n              </span>\n            </div>\n          </div>\n\n          <button class=\"reset-button\" mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"!resetPasswordGroup.valid || resetActive\">Reset Password</button>\n          \n        </form>\n        \n        <div class=\"spinner-container\" [ngClass]=\"{'active': resetActive}\">\n          <mat-progress-spinner\n            class=\"progress-spinner\" color=\"primary\" mode=\"indeterminate\">\n          </mat-progress-spinner>\n        </div>\n      </mat-card-content>\n    </mat-card>\n  </div>\n</div>\n"
        },
        {
            "name": "StaffingComponent",
            "id": "component-StaffingComponent-fd23b8f160a204697143b6de42142859",
            "file": "src/app/forecast/pages/staffing/staffing.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-staffing",
            "styleUrls": [
                "./staffing.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./staffing.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "availableMonths",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "<p>next 6 months</p>\n",
                    "line": 28,
                    "rawdescription": "\n\nnext 6 months\n"
                },
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "months",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "monthSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "period",
                    "defaultValue": "{ from: undefined, to: undefined }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "<p>Defines executive data view period (monthIDs)</p>\n",
                    "line": 33,
                    "rawdescription": "\n\nDefines executive data view period (monthIDs)\n"
                },
                {
                    "name": "users",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User[]",
                    "optional": false,
                    "description": "<p>all active users</p>\n",
                    "line": 38,
                    "rawdescription": "\n\nall active users\n"
                },
                {
                    "name": "userSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "methodsClass": [
                {
                    "name": "initStaffingView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ninitiates staffing view\n",
                    "description": "<p>initiates staffing view</p>\n"
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOpen dialog for executive chart",
                    "description": "<p>Open dialog for executive chart</p>\n"
                },
                {
                    "name": "setDefaultPeriod",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSets the default period to current month until 6 months in the future\n",
                    "description": "<p>Sets the default period to current month until 6 months in the future</p>\n"
                },
                {
                    "name": "showPeriod",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReloads the values after period update\n",
                    "description": "<p>Reloads the values after period update</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { MatDialog } from \"@angular/material/dialog\";\nimport { Subscription } from \"rxjs\";\n\nimport { environment as env } from \"../../../../environments/environment.prod\";\n\nimport { User } from \"../../../core/interfaces/user\";\nimport { Month } from \"../../../core/interfaces/month\";\n\nimport { UserService } from \"../../../core/services/user.service\";\nimport { UtilitiesService } from \"../../../core/services/utilities.service\";\nimport { PageStateService } from \"../../../core/shared/page-state.service\";\nimport { ExecutiveChartComponent } from \"../../components/executive-chart/executive-chart.component\";\nimport { AuthService } from \"../../../core/security/auth.service\";\nimport { ForecastService } from \"../../../core/services/forecasts/forecast.service\";\nimport { ExecutiveForecastsService } from \"../../../core/services/forecasts/executive-forecasts.service\";\n\n@Component({\n  selector: \"app-staffing\",\n  templateUrl: \"./staffing.component.html\",\n  styleUrls: [\"./staffing.component.scss\"]\n})\nexport class StaffingComponent implements OnInit, OnDestroy {\n\n  /**\n   * next 6 months\n   */\n  availableMonths: Month[] = [];\n\n    /**\n   * Defines executive data view period (monthIDs)\n   */\n  period: any = { from: undefined, to: undefined };\n\n  /**\n   * all active users\n   */\n  users: User[] = []\n\n  monthSubscription: Subscription;\n\n  userSubscription: Subscription;\n\n  months: Month[] = [];\n  \n\n  constructor(\n    private utilitiesService: UtilitiesService,\n    private pageState: PageStateService,\n    private userService: UserService,\n    public dialog: MatDialog,\n    private authService: AuthService,\n    private forecastService: ForecastService,\n    private executiveService: ExecutiveForecastsService,\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.pageState.forecastrReady$.subscribe((ready: boolean) => {\n      if (ready && this.authService.hasRole(env.roles.msl)) {\n        this.initStaffingView();\n      }\n    });\n  }\n\n  /**\n   * initiates staffing view\n   */\n  initStaffingView(): void {\n\n    this.monthSubscription = this.utilitiesService.months$.subscribe((months: Month[]) => {\n      this.availableMonths = months;\n      this.setDefaultPeriod();\n\n      /**for (let month of months) {\n        this.forecastService.initStaffingForecasts(month.id);\n        this.executiveService.initializeDetailValues(month.id);\n      }**/\n    });\n\n    this.userSubscription = this.userService.allUsers$.subscribe((user: User[]) => {\n      this.users = user;\n    });\n  }\n\n    /**\n   * Sets the default period to current month until 6 months in the future\n   */\n  setDefaultPeriod(): void {\n    let months: Month[] = this.utilitiesService.getMonths();\n\n    for (let i: number = 0; i < months.length; i++) {\n      if (\n        Date.parse(months[i].time) >\n        new Date().setMonth(new Date().getMonth() + 1)\n      ) {\n        this.period.from = i;\n        this.period.to = i + 5;\n        this.showPeriod();\n        break;\n      }\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.monthSubscription.unsubscribe();\n    this.userSubscription.unsubscribe();\n  }\n\n    /**\n   * Reloads the values after period update\n   */\n  showPeriod(): void {\n    if (this.period.to < this.period.from) {\n      this.period.to = this.period.from;\n    }\n\n    this.pageState.showSpinner();\n    this.months = this.utilitiesService\n      .getMonths()\n      .filter((m: Month) => m.id >= this.period.from && m.id <= this.period.to);\n    for (let month of this.months) {\n      this.forecastService.initStaffingForecasts(month.id);\n      this.executiveService.initializeDetailValues(month.id);\n    }\n  }\n\n  /**Open dialog for executive chart */\n  openDialog(): void {\n    const dialogRef = this.dialog.open(ExecutiveChartComponent, {\n      height: \"90%\",\n      width: \"90%\",\n      panelClass: \"custom-dialog-container\",\n      data: {},\n    });\n\n    dialogRef.afterClosed().subscribe(() => { });\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../../assets/styles/variables.scss\";\n\n.staffing-view-container {\n    margin-top: 5px;\n    padding: 0;\n    background: transparent;\n}\n\n.second-header {\n    width: 100%;\n}\n\n.executive-btn {\n    float: right;\n    position: relative;\n}\n\n.mat-icon {\n    font-size: 18px;\n    color: #fff !important;\n}\n\n.period-container {\n    width: 100%;\n}\n.period-component {\n    display: inline-flex;\n    margin: 0 5px;\n\n    &.mat-form-field {\n      width: 200px;\n    }\n\n    &.mat-raised-button {\n      margin-top: 4px;\n      bottom: 4px;\n    }\n\n    &:first-child {\n      margin-left: 0;\n    }\n}\n  \n.period-download {\n    margin-top: 4px;\n    bottom: 4px;\n}",
                    "styleUrl": "./staffing.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"staffing-view\">\n    <div class=\"period-container\">\n\n        <mat-form-field class=\"period-component\" appearance=\"outline\">\n            <mat-label>Period Start Month</mat-label>\n\n            <mat-select [(ngModel)]=\"period.from\">\n                <ng-container *ngFor=\"let r of availableMonths\">\n                    <mat-option [value]=\"r.id\">{{ r.name }}</mat-option>\n                </ng-container>\n            </mat-select>\n        </mat-form-field>\n\n        <mat-form-field class=\"period-component\" appearance=\"outline\">\n            <mat-label>Period End Month</mat-label>\n\n            <mat-select [(ngModel)]=\"period.to\">\n                <ng-container *ngFor=\"let r of availableMonths\">\n                    <mat-option [value]=\"r.id\">{{ r.name }}</mat-option>\n                </ng-container>\n            </mat-select>\n\n        </mat-form-field>\n\n        <button class=\"period-component\" mat-raised-button color=\"primary\" (click)=\"showPeriod()\">\n            <mat-icon>search</mat-icon> Show Period\n        </button>\n\n        <div class=\"staffing-view-container\">\n            <app-staffing-overview [months]=\"months\" [users]=\"users\"></app-staffing-overview>\n        </div>\n    </div>\n</div>"
        },
        {
            "name": "StaffingOverviewComponent",
            "id": "component-StaffingOverviewComponent-11a0308bf471a21eb09139f9f0c80562",
            "file": "src/app/forecast/components/staffing-overview/staffing-overview.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-staffing-overview",
            "styleUrls": [
                "./staffing-overview.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./staffing-overview.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "months",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "Month[]"
                },
                {
                    "name": "users",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "User[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "columnsToDisplay",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "String[]",
                    "optional": false,
                    "description": "<p>columns which are displayed</p>\n",
                    "line": 44,
                    "rawdescription": "\n\ncolumns which are displayed\n"
                },
                {
                    "name": "forecastrSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "forecasts",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FcEntry[]",
                    "optional": false,
                    "description": "<p>list of all forecast entries for all users</p>\n",
                    "line": 49,
                    "rawdescription": "\n\nlist of all forecast entries for all users\n"
                },
                {
                    "name": "isFinished",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "isPageReady",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "projectHelpers",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProjectHelper[]",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "projects",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Project[]",
                    "optional": false,
                    "description": "",
                    "line": 51
                }
            ],
            "methodsClass": [
                {
                    "name": "exportCSV",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 309,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMonthARVEFromPerson",
                    "args": [
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 399,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMonthFTEFromPerson",
                    "args": [
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 383,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProjectCode",
                    "args": [
                        {
                            "name": "forecastHelpers",
                            "type": "ProjectHelper[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "String",
                    "typeParameters": [],
                    "line": 253,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "forecastHelpers",
                            "type": "ProjectHelper[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProjectCodes",
                    "args": [
                        {
                            "name": "forecastHelpers",
                            "type": "ProjectHelper[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "String",
                    "typeParameters": [],
                    "line": 266,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "forecastHelpers",
                            "type": "ProjectHelper[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProjectHelper",
                    "args": [
                        {
                            "name": "forecasts",
                            "type": "FcEntry[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ProjectHelper[]",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "forecasts",
                            "type": "FcEntry[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProjects",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "viewColumn",
                            "type": "String",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "String",
                    "typeParameters": [],
                    "line": 218,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "viewColumn",
                            "type": "String",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTeam",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "String",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTotalARVE",
                    "args": [
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTotalFTE",
                    "args": [
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initStaffing",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 286,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 415,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "parseForCSV",
                    "args": [
                        {
                            "name": "toParse",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "div",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 374,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "toParse",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "div",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, Input, OnChanges, SimpleChange, SimpleChanges, AfterContentInit, AfterViewInit } from \"@angular/core\";\n\nimport { User } from \"../../../core/interfaces/user\";\nimport { Month } from \"../../../core/interfaces/month\";\nimport { FcEntry } from \"../../../core/interfaces/fcEntry\";\nimport { ForecastService } from \"../../../core/services/forecasts/forecast.service\";\nimport { UserService } from \"../../../core/services/user.service\";\nimport { DatePipe } from \"@angular/common\";\nimport { PageStateService } from \"../../../core/shared/page-state.service\";\nimport { MatTooltipModule } from \"@angular/material/tooltip\";\nimport { TooltipPosition } from '@angular/material/tooltip';\nimport { Subscription } from \"rxjs\";\nimport { Project } from \"../../../core/interfaces/project\";\nimport { UtilitiesService } from \"../../../core/services/utilities.service\";\nimport { parseHostBindings } from \"@angular/compiler\";\n\nclass ProjectHelper {\n    projectId: number;\n    days: number;\n    projectCode: String;\n\n    constructor() {\n        this.projectId = 0;\n        this.days = 0;\n        this.projectCode = undefined;\n    }\n\n}\n\n@Component({\n    selector: 'app-staffing-overview',\n    templateUrl: './staffing-overview.component.html',\n    styleUrls: ['./staffing-overview.component.scss'],\n})\nexport class StaffingOverviewComponent implements OnInit, OnDestroy, OnChanges {\n\n    @Input('months') months: Month[];\n\n    @Input('users') users: User[];\n\n    /**\n      * columns which are displayed\n     */\n    columnsToDisplay: String[] = [];\n\n    /**\n      * list of all forecast entries for all users\n     */\n    forecasts: FcEntry[] = [];\n\n    projects: Project[] = [];\n    // allForecast: FcEntry[] = [];\n\n    projectHelpers: ProjectHelper[] = [];\n\n    forecastrSubscription: Subscription;\n\n    isPageReady: boolean = false;\n\n     isFinished: boolean = false;\n    /**\n     * constructor for staffing-overview component\n     *  @param forecastService\n     */\n    constructor(\n        private forecastService: ForecastService,\n        private userService: UserService,\n        private datePipe: DatePipe,\n        private pageState: PageStateService,\n        private utilityService: UtilitiesService\n    ) {\n    }\n\n    ngOnInit(): void {\n        this.pageState.forecastrReady$.subscribe((ready: boolean) => {\n            if (ready) {\n                this.initStaffing();\n            }\n        });\n\n    }\n    ngOnChanges(): void {\n        this.pageState.forecastrReady$.subscribe((ready: boolean) => {\n            if (ready) {\n                this.initStaffing();\n            }\n        });\n    }\n\n    getTotalARVE(month: Month): string {\n        let projectDays = 0;\n        let totalDays = 0;\n        let vacationDays = 0;\n\n        for (let user of this.users) {\n            let forecast: FcEntry = this.forecastService.forecasts.find((fc: FcEntry) => {\n                return fc.monthId === month.id && fc.userId === user.id\n            });\n\n            if (user.active) {\n                if (user.active.valueOf) {\n                    if (forecast) {\n                        if (forecast.isRelevant) {\n                            if (forecast.projectDays) {\n                                projectDays += forecast.projectDays;\n                            }\n                            if (forecast.vacationDays) {\n                                vacationDays += forecast.vacationDays;\n                            }\n                            if (forecast.totalDays) {\n                                totalDays += forecast.totalDays;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        let arve = (projectDays) / (totalDays - vacationDays);\n        return (arve * 100).toFixed(2);\n    }\n\n    getTotalFTE(month: Month): string {\n        let fte = 0;\n\n        for (let user of this.users) {\n            let forecast: FcEntry = this.forecastService.forecasts.find((fc: FcEntry) => {\n                return fc.monthId === month.id && fc.userId === user.id\n            });\n\n            if (forecast) {\n                //if(forecast.isRelevant) {\n                fte += forecast.fte;\n                //}\n            }\n        }\n\n        return fte.toFixed(2);\n    }\n\n    getTeam(user: User): String {\n        if (user.id === -1) {\n            return \"\";\n        }\n\n        let team = user;\n\n        if (team === undefined) {\n            return \"-\";\n        }\n\n        let parentId = user.parentId;\n\n        if (parentId === undefined) {\n            return team.lastName + \", \" + team.firstName;\n        }\n\n        let parentUser = this.userService.getUser(parentId);\n        let parentRole = this.userService.getRole(parentUser.roleId);\n\n        if (parentUser !== undefined) {\n            team = parentUser;\n\n            while (parentUser !== undefined && parentRole !== undefined && (parentRole.shortcut === \"CSS\" || parentRole.shortcut === \"PDL\")) {\n                parentId = parentUser.parentId;\n\n                if (parentId === undefined) {\n                    return team.lastName + \", \" + team.firstName;\n                }\n\n                parentUser = this.userService.getUser(parentId);\n\n                if (parentUser !== undefined) {\n                    parentRole = this.userService.getRole(parentUser.roleId);\n                }\n\n                team = parentUser;\n            }\n        }\n\n        if (team === undefined) {\n            return \"-\";\n        }\n\n        return team.lastName + \", \" + team.firstName + \" (\" + parentRole.shortcut + \")\";\n    }\n\n    getProjectHelper(forecasts: FcEntry[]): ProjectHelper[] {\n\n        let projectHelpers: ProjectHelper[] = []\n        var check: boolean = false;\n        for (let fcEntry of forecasts) {\n            for (let project of fcEntry.projects) {\n\n                let helper = projectHelpers.find((helper: ProjectHelper) => {\n                    return helper.projectId === project.projectId;\n                });\n\n                if (helper) {\n                    helper.days += project.plannedProjectDays;\n                }\n                else {\n                    let projectTemp: Project = this.forecastService.projects.find((pro: Project) => {\n                        return pro.id === project.projectId\n                    });\n\n                    let projectHelperTemp: ProjectHelper = new ProjectHelper;\n                    projectHelperTemp.days = project.plannedProjectDays;\n                    projectHelperTemp.projectId = project.projectId;\n                    projectHelperTemp.projectCode = projectTemp.name.split('-')[0];\n                    projectHelpers.push(projectHelperTemp);\n                }\n            }\n        }\n        return projectHelpers;\n    }\n\n    getProjects(user: User, viewColumn: String): String {\n\n        const projectIds = []\n        if (user.id === -1) {\n            return \"\";\n        }\n\n        let forecasts: FcEntry[] = [];\n        let forecast: FcEntry;\n\n        for (let month of this.months) {\n            forecast = this.forecastService.forecasts.find((fc: FcEntry) => {\n                return fc.monthId === month.id && fc.userId === user.id\n            });\n\n            if (forecast) {\n                forecasts.push(forecast);\n            }\n            forecast = null;\n        }\n\n        if (forecast) {\n            forecasts.push(forecast);\n        }\n\n        let forecastHelpers = this.getProjectHelper(forecasts);\n\n        if (viewColumn === \"table\") {\n            return this.getProjectCode(forecastHelpers);\n        }\n        else {\n            return this.getProjectCodes(forecastHelpers);\n        }\n    }\n\n    getProjectCode(forecastHelpers: ProjectHelper[]): String {\n\n        if (forecastHelpers.length <= 0) {\n            return \"no project\";\n        }\n\n        forecastHelpers.sort(function (a, b) {\n            return a.days - b.days;\n        }).reverse();\n\n        return forecastHelpers[0].projectCode.toString();\n    }\n\n    getProjectCodes(forecastHelpers: ProjectHelper[]): String {\n\n        if (forecastHelpers.length <= 0) {\n            return \"no project\";\n        }\n\n        forecastHelpers.sort(function (a, b) {\n            return a.days - b.days;\n        }).reverse();\n\n        let returnString = \" \";\n\n        for (let helper of forecastHelpers) {\n            if (helper.days !== 0) {\n                returnString += helper.projectCode + \"\\n\";\n            }\n        }\n        return returnString;\n    }\n\n    initStaffing(): void {\n        this.projects = this.utilityService.getProjects();\n        this.columnsToDisplay = [];\n        this.columnsToDisplay.push('name');\n        this.columnsToDisplay.push('team');\n        this.columnsToDisplay.push(\"corp\");\n        this.columnsToDisplay.push(\"projects\");\n\n        for (let month of this.months) {\n            this.columnsToDisplay.push(month.name);\n        }\n\n        if (!this.users.find((u: User) => u.id === -1)) {\n            let user: User = new User();\n            user.id = -1;\n            user.firstName = \"\";\n            user.lastName = \"Total\";\n            user.globalId = -1;\n            user.fte = 0;\n            this.users.unshift(user);\n        }\n    }\n\n    exportCSV(): void {\n        this.pageState.showSpinner();\n\n        let lineEnding = \"\\r\\n\";\n        let header: string = \"Employee;Team;Corp Id;\" + this.months.map(x => x.name + \" ARVE;\" + x.name + \" FTE\").join(\";\") + lineEnding;\n\n        let body = \"\";\n\n        let teams = new Map<string, User[]>();\n\n        for (let u of this.users) {\n            if (u.id === -1) {\n                continue;\n            }\n\n            let team = this.getTeam(u);\n            let teamContent: User[] = teams.get(team.toString());\n\n            if (teamContent === undefined) {\n                teams = teams.set(team.toString(), [u]);\n            } else {\n                teamContent.push(u);\n                teams = teams.set(team.toString(), teamContent);\n            }\n        }\n\n        let teamNames = Array.from(teams.keys());\n\n        for (let team of teamNames) {\n            body += team + lineEnding;\n            body += header;\n            body += teams.get(team).map(u => u.lastName + \", \" + u.firstName + \";\" +\n                team + \";\" +\n                u.globalId.toString() + \";\" +\n                this.months.map(x => this.parseForCSV(this.getMonthARVEFromPerson(x, u), 4, 100) + \";\" +\n                    this.parseForCSV(this.getMonthFTEFromPerson(x, u), 0, 1)).join(\";\")).join(lineEnding);\n            body += lineEnding + lineEnding;\n        }\n        //summary\n        body += \"Summary\" + lineEnding;\n        body += this.months.map(x => x.name + \" ARVE;\" + x.name + \" FTE\").join(\";\") + lineEnding;\n        body += this.months.map(x => this.getTotalARVE(x) + \";\" + this.getTotalFTE(x)).join(\";\") + lineEnding;\n\n        const data = body;\n        const blob: Blob = new Blob([data], { type: \"text/csv\" });\n        const filename: string = this.datePipe.transform(new Date(), \"yyyyMMdd\") + \"-AllOverview.csv\";\n\n        this.pageState.hideSpinner();\n\n        if (window.navigator.msSaveOrOpenBlob) {\n            window.navigator.msSaveOrOpenBlob(blob, filename);\n        } else {\n            const url: string = window.URL.createObjectURL(blob);\n\n            let a: HTMLAnchorElement = document.createElement(\"a\");\n            a.href = url;\n            a.download = filename;\n\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            window.URL.revokeObjectURL(url);\n        }\n    }\n\n    parseForCSV(toParse: string, min: number, div: number): string {\n        if (toParse == \"-\") {\n            return \"0\";\n        }\n\n        let n = parseFloat(toParse) / div;\n        return n.toLocaleString(\"de\", { minimumFractionDigits: min }).replace(\".\", \"\");\n    }\n\n    getMonthFTEFromPerson(month: Month, user: User): string {\n        if (user.id === -1) {\n            return this.getTotalFTE(month);\n        }\n\n        let forecast: FcEntry = this.forecastService.forecasts.find((fc: FcEntry) => {\n            return fc.monthId === month.id && fc.userId === user.id\n        });\n\n        if (forecast) {\n            return forecast.fte.toString();\n        } else {\n            return user.fte.toString();\n        }\n    }\n\n    getMonthARVEFromPerson(month: Month, user: User): string {\n        if (user.id === -1) {\n            return this.getTotalARVE(month);\n        }\n\n        let forecast: FcEntry = this.forecastService.forecasts.find((fc: FcEntry) => {\n            return fc.monthId === month.id && fc.userId === user.id\n        });\n\n        if (forecast) {\n            return (forecast.arve * 100).toFixed(2);\n        } else {\n            return \"-\";\n        }\n    }\n\n    ngOnDestroy(): void {\n    }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../assets/styles/variables.scss';\n\n.goodUt {\n  color:  green;\n}\n\n.medUt {  \n  color: orange;\n}\n\n.badUt {\n  color: red;\n}\n\n.mat-stroked-button {\n\tmargin: 5px;\n\tmargin-left: 0;\n}\n\n.accordion-header {\n    display: flex;\n    flex: 1;\n    flex-direction: row;\n    align-items: center;\n    padding: 15px 45px 15px 15px;\n    color: map-get($font-colors, black);\n    margin-right: 8px;\n  \n    div {\n      display: flex;\n      flex-grow: 1;\n      width: 0;\n      margin-right: 0;\n  \n      &:first-child {\n        padding-left: 10px;\n      }\n  \n      &:last-child {\n        flex-grow: 2;\n        text-align: center;\n      }\n  \n      span {\n        flex: 1;\n        word-break: break-word;\n      }\n    }\n  }\n\n  .tooltip{\n    background: transparent;\n    border: none;\n  }",
                    "styleUrl": "./staffing-overview.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor for staffing-overview component\n @param forecastService</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilityService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 60,
                "rawdescription": "\n\nconstructor for staffing-overview component\n @param forecastService\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1952,
                            "end": 1967,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "forecastService"
                        },
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1946,
                            "end": 1951,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilityService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy",
                "OnChanges"
            ],
            "templateData": "<button mat-stroked-button class=\"mat-primary-reversed\" color=\"primary\" (click)=\"exportCSV()\">\n    <mat-icon>insert_drive_file</mat-icon> Export CSV\n</button>\n<table mat-table matSort [dataSource]=\"users\">\n    <ng-container matColumnDef=\"name\">\n        <th mat-header-cell mat-sort-header *matHeaderCellDef>Name</th>\n        <td mat-cell *matCellDef=\"let user\">{{user.lastName}}{{user.firstName.length > 0 ? \",\": \"\"}} {{user.firstName}}</td>\n    </ng-container>\n    <ng-container matColumnDef=\"team\">\n        <th mat-header-cell mat-sort-header *matHeaderCellDef>Team</th>\n        <td mat-cell *matCellDef=\"let user\">{{getTeam(user)}}</td>\n    </ng-container>\n    <ng-container matColumnDef=\"corp\">\n        <th mat-header-cell mat-sort-header *matHeaderCellDef>Corp Id</th>\n        <td mat-cell *matCellDef=\"let user\">{{user.globalId > -1 ? user.globalId : \"\"}}</td>\n    </ng-container>\n    <ng-container matColumnDef=\"projects\">\n        <th mat-header-cell mat-sort-header *matHeaderCellDef>Projects</th>\n        <td mat-cell *matCellDef=\"let user\"><button class=\"tooltip\" #tooltip=\"matTooltip\"\n                matTooltip=\"{{getProjects(user,'tooltip')}}\" matTooltipPosition=\"right\">{{getProjects(user, 'table')}}\n            </button></td>\n    </ng-container>\n    <ng-container matColumnDef=\"{{month.name}}\" *ngFor=\"let month of months\">\n        <th mat-header-cell mat-sort-header *matHeaderCellDef>{{month.name}}</th>\n        <td mat-cell *matCellDef=\"let user\" [ngClass]=\"{\n            'goodUt' : getMonthARVEFromPerson(month,user) >= 80,\n            'medUt' : getMonthARVEFromPerson(month,user) < 80 && getMonthARVEFromPerson(month,user) >= 60,\n            'badUt' : getMonthARVEFromPerson(month,user) < 60\n        }\">{{getMonthARVEFromPerson(month,user)}} % ({{getMonthFTEFromPerson(month,user)}} FTE)</td>\n    </ng-container>\n    <tr mat-header-row *matHeaderRowDef=\"columnsToDisplay\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: columnsToDisplay\"></tr>\n</table>"
        },
        {
            "name": "TeamComponent",
            "id": "component-TeamComponent-cf1818a083f1f4ed296ff7386a67646f",
            "file": "src/app/forecast/pages/team/team.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-team",
            "styleUrls": [
                "../../forecast.component.scss",
                "./team.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./team.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeMonth",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>index of currently selected tab (= month)</p>\n",
                    "line": 38,
                    "rawdescription": "\n\nindex of currently selected tab (= month)\n"
                },
                {
                    "name": "months",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "monthSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "step",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Number of the header in the child&#39;s expansion panel currently open</p>\n",
                    "line": 43,
                    "rawdescription": "\n\nNumber of the header in the child's expansion panel currently open\n"
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>id of currently logged-in user (received from auth-service)</p>\n",
                    "line": 33,
                    "rawdescription": "\n\nid of currently logged-in user (received from auth-service)\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "forecastState",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "monthId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initTeamForecast",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnsubscribes services when component gets destroyed\n",
                    "description": "<p>Unsubscribes services when component gets destroyed</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInitializes teamlead component\n",
                    "description": "<p>Initializes teamlead component</p>\n"
                },
                {
                    "name": "setStep",
                    "args": [
                        {
                            "name": "event",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTabActive",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nChanges active month, if change to an other tab.\n",
                    "description": "<p>Changes active month, if change to an other tab.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4762,
                                "end": 4767,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4756,
                                "end": 4761,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>team forecast-view component</p>\n",
            "rawdescription": "\n\nteam forecast-view component\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy } from \"@angular/core\";\r\nimport { Location } from '@angular/common';\r\nimport { ActivatedRoute } from \"@angular/router\";\r\n\r\nimport { UtilitiesService } from \"../../../core/services/utilities.service\";\r\nimport { Month } from \"../../../core/interfaces/month\";\r\nimport { UserService } from \"../../../core/services/user.service\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { PageStateService } from \"../../../core/shared/page-state.service\";\r\nimport { AuthService } from \"../../../core/security/auth.service\";\r\nimport { environment as env } from \"../../../../environments/environment.prod\";\r\nimport { TeamUserService } from '../../../core/services/forecasts/team-user.service';\r\nimport { MonthService } from \"../../../core/services/admin/months.service\";\r\nimport { LockedMonth } from \"../../../core/interfaces/lockedMonth\";\r\nimport { ForecastService } from \"../../../core/services/forecasts/forecast.service\";\r\nimport { ExecutiveForecastsService } from '../../../core/services/forecasts/executive-forecasts.service';\r\n\r\n/**\r\n * team forecast-view component\r\n */\r\n@Component({\r\n  selector: \"app-team\",\r\n  templateUrl: \"./team.component.html\",\r\n  styleUrls: [\"../../forecast.component.scss\", \"./team.component.scss\"]\r\n})\r\nexport class TeamComponent implements OnInit, OnDestroy {\r\n  months: Month[] = [];\r\n  monthSubscription: Subscription;\r\n\r\n  /**\r\n\t * id of currently logged-in user (received from auth-service)\r\n\t */\r\n\tuserId: number;\r\n\r\n  /**\r\n\t * index of currently selected tab (= month)\r\n\t */\r\n  activeMonth: number = 0;\r\n\r\n  /**\r\n   * Number of the header in the child's expansion panel currently open\r\n   */\r\n  step: number = -1;\r\n\r\n  /**\r\n\t * team forecast-view component constructor\r\n\t */\r\n  constructor(\r\n    private location: Location,\r\n\t\tprivate route: ActivatedRoute,\r\n    private utilitiesService: UtilitiesService,\r\n    private userService: UserService,\r\n    private pageState: PageStateService,\r\n    private authService: AuthService,\r\n    private teamService: TeamUserService,\r\n    private monthService: MonthService,\r\n    private forecastService: ForecastService,\r\n    private executiveService: ExecutiveForecastsService\r\n  ) {\r\n    this.userId = this.authService.getUserId();\r\n  }\r\n\r\n  /**\r\n   * Initializes teamlead component\r\n   */\r\n  ngOnInit(): void {\r\n\t\tthis.pageState.forecastrReady$.subscribe((ready: boolean) => {\r\n\t\t\tif (ready && this.authService.hasRole(env.roles.pdl)) {\r\n\t\t\t\tthis.initTeamForecast();\r\n\t\t\t}\r\n\t\t});\r\n  }\r\n\r\n  /**\r\n   * Unsubscribes services when component gets destroyed\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.monthSubscription.unsubscribe();\r\n  }\r\n\r\n  private initTeamForecast(): void {\r\n    this.teamService.initializePDLTeam();\r\n    this.monthSubscription = this.utilitiesService.months$\r\n      .subscribe((months: Month[]) => {\r\n        this.months = months.filter((m: Month) => m.active === true);\r\n        var today = new Date();\r\n        var todayMonth = new Date(today.getFullYear(), today.getMonth(), 1);\r\n\r\n        this.months = this.months.filter((m: Month) => new Date(m.time) >= todayMonth);\r\n\r\n\t\t\t\tif(this.months.length > 7) {\r\n\t\t\t\t\tthis.months = this.months.slice(1, 7);\r\n        }\r\n        \r\n        let id: number = parseInt(this.route.snapshot.paramMap.get('id'), 10);\r\n        if (typeof id !== 'undefined' && id >= 0 && id < this.months.length) {\r\n          this.activeMonth = id;\r\n  \r\n        } else {\r\n          for (let i: number = 0; i < this.months.length; i++) {\r\n            if (Date.parse(this.months[i].time) > (new Date()).setMonth((new Date().getMonth() - 1))) {\r\n              this.activeMonth = i;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        setTimeout(() => {\r\n\t\t\t\t\tlet shift: number = parseInt(window.getComputedStyle(document.querySelector('.mat-tab-label-container')).width) - parseInt(window.getComputedStyle(document.querySelector('.mat-tab-list')).width);\r\n\t\t\t\t\tlet pos: number = parseInt((document.querySelector('.mat-tab-label-active') as HTMLElement).getAttribute('aria-posinset'), 10);\r\n\t\t\t\t\tif (shift < ((pos ? pos : 1) - 1) * -100) {\r\n\t\t\t\t\t\tshift = ((pos ? pos : 1) - 1) * -100;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t(document.querySelector('.mat-tab-list') as HTMLElement).style.transform = 'translateX(' + shift + 'px)';\r\n\t\t\t\t}, 100);\r\n      });\r\n\r\n      this.monthService.getLockedMonths().subscribe(\r\n        (lockedMonths: LockedMonth[]) => {\r\n          let activeLockedMonths = lockedMonths.filter((m: LockedMonth) => this.months.find((x: Month) => x.id === m.id) !== undefined);\r\n          for(let i = 0; i < this.months.length; i++) {\r\n            this.months[i].locked = activeLockedMonths[i].locked;\r\n          }\r\n        }\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Changes active month, if change to an other tab.\r\n   * @param index\r\n   */\r\n  setTabActive(index: number): void {\r\n    this.activeMonth = index;\r\n    this.location.replaceState('/forecast/team/' + this.activeMonth);\r\n  }\r\n\r\n  forecastState(type: string, monthId: number): boolean {\r\n\t\treturn this.forecastService.checkForecastState(type, monthId, this.userId);\r\n\t}\r\n\r\n  //Reflect a step change from teamlead-month into parent\r\n  setStep(event : number){\r\n    this.step = event;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../assets/styles/variables.scss\";\r\n\r\n.role-header {\r\n  position: relative;\r\n  height: 37px;\r\n  margin: 20px 0px 30px 0px;\r\n\r\n  h1 {\r\n    line-height: 37px;\r\n    font-size: 1.8em;\r\n    margin: 0;\r\n  }\r\n\r\n  .mat-button-toggle-group {\r\n    background-color: map-get($font-colors, white);\r\n    font-size: 1.1em;\r\n    border-radius: 4px;\r\n  }\r\n\r\n  .mat-button-toggle {\r\n    background-color: map-get($font-colors, white);\r\n    color: map-get($font-colors, blue);\r\n    border-right: 1px solid #0070ad;\r\n    width: 120px;\r\n\r\n    .mat-icon {\r\n      color: map-get($font-colors, blue);\r\n    }\r\n\r\n    &:hover {\r\n      background-color: map-get($bg-colors, light);\r\n    }\r\n\r\n    &:last-child {\r\n      border: none;\r\n    }\r\n  }\r\n\r\n  .mat-button-toggle-checked,\r\n  .mat-button-toggle-checked .mat-icon {\r\n    background-color: map-get($font-colors, blue);\r\n    color: map-get($font-colors, white);\r\n\r\n    &:hover {\r\n      background-color: map-get($font-colors, blue);\r\n    }\r\n  }\r\n\r\n  .switch-role-toggle {\r\n    position: absolute;\r\n    right: 0px;\r\n    top: 0;\r\n    height: 34px;\r\n    line-height: 34px;\r\n    border-radius: 0;\r\n  }\r\n\r\n  .dashboard-button {\r\n    position: absolute;\r\n    width: 180px;\r\n    top: 0;\r\n    height: 34px;\r\n    line-height: 34px;\r\n    border-radius: 20px;\r\n    background-color: map-get($font-colors, blue);\r\n    color: map-get($font-colors, white);\r\n    box-shadow: 0px 1px 5px grey;\r\n\r\n    .mat-icon {\r\n      color: map-get($font-colors, white);\r\n    }\r\n  }\r\n\r\n  .practice-dashboard {\r\n    right: 375px;\r\n  }\r\n\r\n  .pdl-dashboard {\r\n    right: 250px;\r\n  }\r\n\r\n  .sm-hop-button-toggle-group {\r\n    right: 0px;\r\n  }\r\n\r\n  .sm-hop-button-toggle {\r\n    width: 140px;\r\n  }\r\n}\r\n\r\n.progress-spinner-overlay {\r\n  display:  none;\r\n  position: fixed;\r\n  bottom: 0;\r\n  right: 0;\r\n  z-index: 10000;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: map-get($font-colors, white);\r\n  opacity: 0.5;\r\n\r\n  \r\n  &.active {\r\n\t\tdisplay: block;\r\n\t}\r\n\r\n  &.hide {\r\n\t\tdisplay: none;\r\n\t}\r\n}\r\n.progress-spinner {\r\n\ttop: 50%;\r\n\tleft: 50%;\r\n  z-index: 11000;\r\n\ttransform: translate(-50%, -50%);\r\n}\r\n\r\n.mat-sidenav-container {\r\n  min-width: 700px;\r\n  background: transparent;\r\n  margin: 0 10px;\r\n}\r\n\r\n.mat-drawer {\r\n  display: none;\r\n  background: transparent;\r\n  width: 50px;\r\n  border-right-width: 0px;\r\n}\r\n\r\n.nav-button-container {\r\n  margin: 4px 0;\r\n\r\n  .mat-icon-button {\r\n    width: 50px;\r\n    height: 50px;\r\n    margin-bottom: 10px;\r\n    padding: 0;\r\n\r\n    &.active,\r\n    &.active .mat-icon {\r\n      color: map-get($font-colors, blue);\r\n    }\r\n  }\r\n\r\n  .mat-icon {\r\n    width: 1em;\r\n    height: 1em;\r\n    line-height: 1em;\r\n    font-size: 2em;\r\n  }\r\n}\r\n",
                    "styleUrl": "../../forecast.component.scss"
                },
                {
                    "data": "",
                    "styleUrl": "./team.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>team forecast-view component constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "teamService",
                        "type": "TeamUserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "monthService",
                        "type": "MonthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 43,
                "rawdescription": "\n\nteam forecast-view component constructor\n",
                "jsdoctags": [
                    {
                        "name": "location",
                        "type": "Location",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "teamService",
                        "type": "TeamUserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "monthService",
                        "type": "MonthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "executiveService",
                        "type": "ExecutiveForecastsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<mat-tab-group [selectedIndex]=\"activeMonth\" (selectedIndexChange)=\"setTabActive($event)\">\r\n  <mat-tab *ngFor=\"let month of months\" label=\"{{month.name}}\" id=\"{{month.id}}\">\r\n    <ng-template mat-tab-label>\r\n\t\t\t<mat-icon *ngIf=\"forecastState('edited', month.id)\" class=\"icon-edited\">radio_button_checked</mat-icon>\r\n      <mat-icon *ngIf=\"month.locked || forecastState('locked', month.id)\" class=\"icon-locked\">lock</mat-icon>\r\n\t\t\t{{month.name}}\r\n\t\t</ng-template>\r\n    <ng-template matTabContent> <!-- matTabContent for tab lazy loading -->\r\n      <app-teamlead-month [month]=\"month\" [step]=\"step\" (setStepEvent)=setStep($event)></app-teamlead-month>\r\n    </ng-template>\r\n  </mat-tab>\r\n</mat-tab-group>"
        },
        {
            "name": "TeamleadMonthComponent",
            "id": "component-TeamleadMonthComponent-caccc4738852cb438c840ac0eccf0566",
            "file": "src/app/forecast/components/teamlead-month/teamlead-month.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-teamlead-month",
            "styleUrls": [
                "./teamlead-month.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./teamlead-month.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "month",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "month (received as input)",
                    "description": "<p>month (received as input)</p>\n",
                    "line": 29,
                    "type": "Month"
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string"
                },
                {
                    "name": "step",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "step-input-variable for angular material expansion panel",
                    "description": "<p>step-input-variable for angular material expansion panel</p>\n",
                    "line": 34,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "setStepEvent",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\noutput event to inform parent about step change\n",
                    "description": "<p>output event to inform parent about step change</p>\n",
                    "line": 39,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "fcEntries",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FcEntry[]",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "fcSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "firstTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "scrollToIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>scroll-variable for scrolling into in AfterViewChecked</p>\n",
                    "line": 52,
                    "rawdescription": "\n\nscroll-variable for scrolling into in AfterViewChecked\n"
                },
                {
                    "name": "team",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User[]",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "teamFcSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "teamSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>userId (loaded from auth-service)</p>\n",
                    "line": 44,
                    "rawdescription": "\n\nuserId (loaded from auth-service)\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "ExpPanelClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 170,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalled when an expansion panel is closed\n",
                    "description": "<p>Called when an expansion panel is closed</p>\n",
                    "jsdoctags": []
                },
                {
                    "name": "forecastState",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean | string",
                    "typeParameters": [],
                    "line": 280,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "userId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturn value for given type (used for arve + urve + revenue + workingdays)\n",
                    "description": "<p>Return value for given type (used for arve + urve + revenue + workingdays)</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5407,
                                "end": 5411,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "originalKeywordKind": 149,
                                "escapedText": "type"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5401,
                                "end": 5406,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 5425,
                                "end": 5431,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "userId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5419,
                                "end": 5424,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "nextStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 322,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGo to next accordion\n",
                    "description": "<p>Go to next accordion</p>\n"
                },
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n Called after the ngAfterViewInit() and every subsequent ngAfterContentChecked()\n If something in the component is clicked etc. this is called\n",
                    "description": "<p> Called after the ngAfterViewInit() and every subsequent ngAfterContentChecked()\n If something in the component is clicked etc. this is called</p>\n"
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnsubscribe services when component gets destroyed\n",
                    "description": "<p>Unsubscribe services when component gets destroyed</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInitiates forecast-entries + team\n",
                    "description": "<p>Initiates forecast-entries + team</p>\n"
                },
                {
                    "name": "onMousewheel",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nScroll with mousewheel\n",
                    "description": "<p>Scroll with mousewheel</p>\n",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mousewheel', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5012,
                                "end": 5017,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "event"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5006,
                                "end": 5011,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "onScroll",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nScroll of the wrapper for this component\n",
                    "description": "<p>Scroll of the wrapper for this component</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4891,
                                "end": 4896,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "event"
                            },
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4885,
                                "end": 4890,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "prevStep",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 329,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGo to previous accordion\n",
                    "description": "<p>Go to previous accordion</p>\n"
                },
                {
                    "name": "setStep",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 313,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet index for accordion\n",
                    "description": "<p>Set index for accordion</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 10915,
                                "end": 10920,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 10909,
                                "end": 10914,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "working",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 288,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "mousewheel",
                    "args": [
                        {
                            "name": "event",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nScroll with mousewheel\n",
                    "description": "<p>Scroll with mousewheel</p>\n",
                    "jsdoctags": [
                        {
                            "pos": 5005,
                            "end": 5023,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 330,
                            "tagName": {
                                "pos": 5006,
                                "end": 5011,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "name": {
                                "pos": 5012,
                                "end": 5017,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "event"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ],
                    "line": 162
                }
            ],
            "description": "<p>teamlead view component</p>\n",
            "rawdescription": "\n\nteamlead view component\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, OnDestroy, Output,EventEmitter, HostListener } from \"@angular/core\";\r\nimport { FcEntry } from \"../../../core/interfaces/fcEntry\";\r\nimport { UserService } from \"../../../core/services/user.service\";\r\nimport { User } from \"../../../core/interfaces/user\";\r\nimport { ForecastService } from \"../../../core/services/forecasts/forecast.service\";\r\nimport { Month } from \"../../../core/interfaces/month\";\r\nimport { AuthService } from \"../../../core/security/auth.service\";\r\nimport { FcProject } from \"../../../core/interfaces/fcProject\";\r\nimport { TeamForecastService } from \"../../../core/services/forecasts/team-forecasts.service\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { TeamUserService } from \"../../../core/services/forecasts/team-user.service\";\r\nimport { UtilitiesService } from \"../../../core/services/utilities.service\";\r\nimport { Project } from \"../../../core/interfaces/project\";\r\nimport { environment as env } from '../../../../environments/environment';\r\nimport { formatDate } from '@angular/common';\r\n\r\n/**\r\n * teamlead view component\r\n */\r\n@Component({\r\n  selector: \"app-teamlead-month\",\r\n  templateUrl: \"./teamlead-month.component.html\",\r\n  styleUrls: [\"./teamlead-month.component.scss\"]\r\n})\r\nexport class TeamleadMonthComponent implements OnInit, OnDestroy {\r\n  /**\r\n   * month (received as input)\r\n   */\r\n  @Input('month') month: Month;\r\n  @Input('role') role: string;\r\n    /**\r\n   * step-input-variable for angular material expansion panel\r\n   */\r\n  @Input('step') step: number;\r\n\r\n  /**\r\n   * output event to inform parent about step change\r\n   */\r\n  @Output() setStepEvent = new EventEmitter<number>();\r\n\r\n  /**\r\n   * userId (loaded from auth-service)\r\n   */\r\n  userId: number;\r\n\r\n  fcEntries: FcEntry[] = [];\r\n  team: User[] = [];\r\n  \r\n  /**\r\n   * scroll-variable for scrolling into in AfterViewChecked\r\n   */\r\n  scrollToIndex : number;\r\n\r\n  fcSubscription: Subscription;\r\n  teamSubscription: Subscription;\r\n  teamFcSubscription: Subscription;\r\n  firstTime: boolean;\r\n\r\n  /**\r\n   * teamlead component constructor\r\n   */\r\n  constructor(\r\n    private userService: UserService,\r\n    private teamService: TeamUserService,\r\n    private authService: AuthService,\r\n    private utilitiesService: UtilitiesService,\r\n    private forecastService: ForecastService,\r\n    private teamForecastService: TeamForecastService,\r\n  ) {\r\n    this.userId = this.authService.getUserId();\r\n  }\r\n\r\n  /**\r\n   * Initiates forecast-entries + team\r\n   */\r\n  ngOnInit(): void {\r\n    this.firstTime = true;\r\n    this.fcSubscription = this.forecastService.forecasts$\r\n      .subscribe((forecasts: FcEntry[]) => {\r\n        this.fcEntries = forecasts.filter((fc: FcEntry) => fc.monthId === this.month.id);\r\n      });\r\n\r\n    if (this.role === 'practice') {\r\n      this.teamSubscription = this.teamService.teamPL$\r\n        .subscribe((team: User[]) => {\r\n          for (let i = 0; i < team.length; i++) {\r\n            for (let i = 0; i < team.length; i++) {\r\n              if(this.userId === team[i].id) {\r\n                let tempUser: User = team[0];\r\n                team[0] = team[i];\r\n                team.splice(i, 1);\r\n                team.splice(1, 0, tempUser);\r\n              }\r\n            }\r\n          }\r\n          this.team = team;\r\n        });\r\n    } else {\r\n      this.teamSubscription = this.teamService.teamPDL$\r\n        .subscribe((team: User[]) => {\r\n          for (let i = 0; i < team.length; i++) {\r\n            if(this.userId === team[i].id) {\r\n              let tempUser: User = team[0];\r\n              team[0] = team[i];\r\n              team.splice(i, 1);\r\n              team.splice(1, 0, tempUser);\r\n            }\r\n          }\r\n          this.team = team;\r\n        });\r\n    }\r\n\r\n    let level: number = 1;\r\n    if (this.role === 'practice') {\r\n      level = 2;\r\n    }\r\n\r\n    this.teamFcSubscription = this.teamForecastService\r\n      .getTeamForecast(this.userId, this.month.id, level)\r\n      .subscribe((fcEntries: FcEntry[]) => {\r\n        this.forecastService.addForecasts(fcEntries);\r\n      });\r\n  }\r\n\r\n  /**\r\n   *  Called after the ngAfterViewInit() and every subsequent ngAfterContentChecked()\r\n   *  If something in the component is clicked etc. this is called\r\n   */\r\n  ngAfterViewChecked() :void{\r\n    //Check if the component already scrollled successfully\r\n    if(this.scrollToIndex !== -1){\r\n      let index = this.scrollToIndex == 0 ? 0 : this.scrollToIndex -1; \r\n      let element = document.getElementById(\"panel-\"+ index);\r\n      if(element){\r\n          element.scrollIntoView({block: \"start\", behavior: \"smooth\"});\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unsubscribe services when component gets destroyed\r\n   */\r\n  ngOnDestroy(): void {\r\n    this.fcSubscription.unsubscribe();\r\n    this.teamSubscription.unsubscribe();\r\n    this.teamFcSubscription.unsubscribe();\r\n  }\r\n\r\n  /**\r\n   * Scroll of the wrapper for this component\r\n   * @param event \r\n   */\r\n  onScroll(event) {\r\n    this.scrollToIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Scroll with mousewheel\r\n   * @param event \r\n   */\r\n  @HostListener('mousewheel', ['$event']) \r\n  onMousewheel(event) {\r\n    this.scrollToIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Called when an expansion panel is closed\r\n   * @param event \r\n   */\r\n   ExpPanelClicked(){\r\n    this.scrollToIndex = -1;\r\n    this.setStepEvent.emit(-1);\r\n  }\r\n\r\n  /**\r\n   * Return value for given type (used for arve + urve + revenue + workingdays)\r\n   * @param type\r\n   * @param userId\r\n   */\r\n  getValue(type: string, userId: number): any {\r\n    let fc: FcEntry = this.fcEntries.find((e: FcEntry) => e.userId === userId);\r\n    if (!fc) {\r\n      if (type === 'totaldays') {\r\n        let u: User = this.userService.getUser(userId);\r\n        if (u && u.fte) {\r\n          return u.fte * parseInt(this.month.workingdays, 10);\r\n        } else {\r\n          return parseInt(this.month.workingdays, 10);\r\n        }\r\n      }\r\n      return 0;\r\n    }\r\n\r\n    if (type === 'arve' && typeof fc.arve === 'number') {\r\n      return parseFloat((fc.arve * 100).toFixed(0));\r\n\r\n    } else if (type === 'urve' && typeof fc.urve === 'number') {\r\n      return parseFloat((fc.urve * 100).toFixed(0));\r\n\r\n    } else if (type === 'totaldays') {\r\n      if (typeof fc.fte !== 'undefined') {\r\n        return parseInt(this.month.workingdays, 10) * fc.fte;\r\n      } else {\r\n        return parseInt(this.month.workingdays, 10);\r\n      }\r\n\r\n    } else if (fc.projects && fc.projects.length > 0) {\r\n      if (type === 'billabledays') {\r\n        return fc.projects\r\n          .map((p: FcProject) => ((p.plannedProjectDays && p.billable) ? p.plannedProjectDays : 0))\r\n          .reduce((pSum: number, a: number) => pSum + a);\r\n\r\n      } else if (type === 'projectdays') {\r\n        let projectIds: number[] = this.utilitiesService.getProjects()\r\n          .filter((p: Project) => (p.projectType === env.projectTypes.default || p.projectType === env.projectTypes.nonbillable))\r\n          .map((p: Project) => p.id);\r\n\r\n        return fc.projects\r\n          .map((p: FcProject) => (p.plannedProjectDays && (projectIds.indexOf(p.projectId) >= 0) ? p.plannedProjectDays : 0))\r\n          .reduce((pSum: number, a: number) => pSum + a);\r\n\r\n      } else if (type === 'vacationdays') {\r\n        let projectIds: number[] = this.utilitiesService.getProjects()\r\n          .filter((p: Project) => (p.projectType === env.projectTypes.vacationdays))\r\n          .map((p: Project) => p.id);\r\n\r\n        return fc.projects\r\n          .map((p: FcProject) => (p.plannedProjectDays && (projectIds.indexOf(p.projectId) >= 0) ? p.plannedProjectDays : 0))\r\n          .reduce((pSum: number, a: number) => pSum + a);\r\n\r\n      } else if (type === 'benchdays') {\r\n        let projectIds: number[] = this.utilitiesService.getProjects()\r\n          .filter((p: Project) => (p.projectType === env.projectTypes.benchdays))\r\n          .map((p: Project) => p.id);\r\n\r\n        return fc.projects\r\n          .map((p: FcProject) => (p.plannedProjectDays && (projectIds.indexOf(p.projectId) >= 0) ? p.plannedProjectDays : 0))\r\n          .reduce((pSum: number, a: number) => pSum + a);\r\n\r\n      } else if (type === 'trainingdays') {\r\n        let projectIds: number[] = this.utilitiesService.getProjects()\r\n          .filter((p: Project) => (p.projectType === env.projectTypes.trainingdays))\r\n          .map((p: Project) => p.id);\r\n\r\n        return fc.projects\r\n          .map((p: FcProject) => (p.plannedProjectDays && (projectIds.indexOf(p.projectId) >= 0) ? p.plannedProjectDays : 0))\r\n          .reduce((pSum: number, a: number) => pSum + a);\r\n\r\n      } else if (type === 'businessdays') {\r\n        let projectIds: number[] = this.utilitiesService.getProjects()\r\n          .filter((p: Project) => (p.projectType === env.projectTypes.businessdays))\r\n          .map((p: Project) => p.id);\r\n\r\n        return fc.projects\r\n          .map((p: FcProject) => (p.plannedProjectDays && (projectIds.indexOf(p.projectId) >= 0) ? p.plannedProjectDays : 0))\r\n          .reduce((pSum: number, a: number) => pSum + a);\r\n\r\n      } else if (type === 'workingdays') {\r\n        return fc.projects\r\n          .map((p: FcProject) => (p.plannedProjectDays ? p.plannedProjectDays : 0))\r\n          .reduce((pSum: number, a: number) => pSum + a);\r\n\r\n      } else if (type === 'revenue') {\r\n        return fc.projects\r\n          .map((p: FcProject) => ((p.plannedProjectDays ? p.plannedProjectDays : 0) * (p.cor ? p.cor : 0)))\r\n          .reduce((pSum: number, a: number) => pSum + a);\r\n\r\n      }\r\n      else if (type === 'history') {\r\n        if (fc.history && fc.history.length > 0 && fc.history[0].createdAt) {\r\n          let date: string = formatDate(fc.history[0].createdAt, 'dd.MM.yyyy', 'en');\r\n          return  'Last updated from ' + fc.changedBy + ', ' + date;\r\n        }\r\n      }\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  forecastState(type: string, userId: number): boolean | string {\r\n    if (type === 'locklevel') {\r\n      return this.userService.getRoleName(this.forecastService.getForecastLockLevel(this.month.id, userId));\r\n    } else {\r\n      return this.forecastService.checkForecastState(type, this.month.id, userId);\r\n    }\r\n  }\r\n\r\n  working(user: User, month: Month): boolean {\r\n    if(user.endDate && user.startDate && month.time) {\r\n      var endMonth = new Date(user.endDate);\r\n      endMonth = new Date(endMonth.getFullYear(), endMonth.getMonth(), 1);\r\n      var startMonth = new Date(user.startDate);\r\n      startMonth = new Date(startMonth.getFullYear(), endMonth.getMonth(), 1);\r\n      var monthMonth = new Date(month.time);\r\n      monthMonth = new Date(monthMonth.getFullYear(), monthMonth.getMonth(), 1)\r\n      if(startMonth <= endMonth) {\r\n        if(monthMonth > endMonth) {\r\n          return false;\r\n        }\r\n      } else if(startMonth > endMonth) {\r\n        if(monthMonth <= startMonth && monthMonth >= endMonth) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Set index for accordion\r\n   * @param index\r\n   */\r\n  setStep(index: number): void {\r\n    this.scrollToIndex = index;\r\n    this.step = index;\r\n    this.setStepEvent.emit(index);\r\n  }\r\n\r\n  /**\r\n   * Go to next accordion\r\n   */\r\n  nextStep(): void {\r\n    this.step++;\r\n  }\r\n\r\n  /**\r\n   * Go to previous accordion\r\n   */\r\n  prevStep(): void {\r\n    this.step--;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../assets/styles/variables.scss';\r\n\r\n.accordion-header {\r\n  display: flex;\r\n  flex: 1;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  padding: 15px 24px;\r\n  color: map-get($font-colors, grey-dark);\r\n  margin-right: 8px;\r\n\r\n  div {\r\n    display: flex;\r\n    flex-grow: 1;\r\n    width: 0;\r\n    margin-right: 16px;\r\n\r\n    &:last-child {\r\n      flex-grow: 4;\r\n      text-align: center;\r\n    }\r\n\r\n    span {\r\n      flex: 1;\r\n      word-break: break-word;\r\n      align-self: center;\r\n    }\r\n  }\r\n}\r\n\r\n.mat-accordion .mat-expansion-panel {\r\n  border-radius: 0;\r\n\r\n  .mat-expansion-panel-header-description, .mat-expansion-panel-header-title {\r\n    font-size: 1.1rem;\r\n    line-height: 1.2rem;\r\n    width: 0;\r\n    align-items: center;\r\n    flex-grow: 1;\r\n\r\n    .mat-cell {\r\n      font-size: 1.1rem;\r\n    }\r\n  }\r\n  \r\n  .mat-expansion-panel-header-description {\r\n    text-align: center; \r\n    flex-grow: 4;\r\n  }\r\n\r\n  .mat-cell, .mat-header-cell {\r\n    flex: 1;\r\n    color: map-get($font-colors, grey-dark);\r\n  }\r\n}\r\n\r\n.mat-icon {\r\n\tfont-size: 20px;\r\n\tline-height: 20px;\r\n\r\n\t&:hover {\r\n\t\tcolor: map-get($font-colors, grey-light);\r\n\t}\r\n\r\n\t&.icon-edited, &.icon-edited:hover {\r\n\t\tcolor: map-get($font-colors, red);\r\n\t}\r\n}\r\n\r\n.locked-leveldesc {\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.mat-expansion-panel.mat-expanded {\r\n  order: -1;\r\n}",
                    "styleUrl": "./teamlead-month.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>teamlead component constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "teamService",
                        "type": "TeamUserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "teamForecastService",
                        "type": "TeamForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 57,
                "rawdescription": "\n\nteamlead component constructor\n",
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "teamService",
                        "type": "TeamUserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "teamForecastService",
                        "type": "TeamForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div style=\"height: 72vh; overflow: auto;\"  (scroll)=\"onScroll($event)\">\r\n  <div class=\"no-data\" *ngIf=\"team.length == 0\">\r\n    <h3>No user assigned.</h3>\r\n  </div>\r\n\r\n  <div layout=\"row\" layout-wrap *ngIf=\"team.length > 0\">\r\n    <div flex=\"100\" flex-gt-md=\"75\">\r\n      <div class=\"mat-row accordion-header\">\r\n        <div>Name</div>\r\n        <div>\r\n          <span></span>\r\n          <span>Paid Days</span>\r\n          <span>Project Days</span>\r\n          <span>Billable Days</span>\r\n          <span>Vacation Days</span>\r\n          <span>Bench Time</span>\r\n          <span>Training Days</span>\r\n          <span>Business Development Days</span>\r\n          <span>ARVE</span>\r\n          <span>URVE</span>\r\n          <span>ROS</span>\r\n        </div>\r\n      </div>\r\n\r\n      <mat-accordion displayMode=\"flat\" multi >\r\n        <!--order of events closed and opened is important-->\r\n        <mat-expansion-panel *ngFor=\"let u of team; let i = index\" id=\"{{'panel-' + i}}\" [expanded]=\"step === i\" (closed)=\"ExpPanelClicked()\" (opened)=\"setStep(i)\" >\r\n          <mat-expansion-panel-header *ngIf='working(u, month)'>\r\n            <mat-panel-title>\r\n              {{u.lastName}}, {{u.firstName}}\r\n            </mat-panel-title>\r\n            <mat-panel-description class=\"mat-row\">\r\n                <span class=\"mat-cell\">\r\n                  <mat-icon *ngIf=\"forecastState('locked', u.id)\" class=\"icon-locked\"\r\n                  matTooltip=\"{{getValue('history', u.id)}}\" matTooltipPosition=\"above\" matTooltipDisabled=\"{{!getValue('history', u.id)}}\">\r\n                  lock</mat-icon>\r\n                  <ng-container *ngIf=\"forecastState('locked-sub', u.id)\">\r\n                    <mat-icon class=\"icon-locked-sublevel\"\r\n                    matTooltip=\"{{getValue('history', u.id)}}\" matTooltipPosition=\"above\" matTooltipDisabled=\"{{!getValue('history', u.id)}}\">\r\n                      lock_open</mat-icon>\r\n                    <div class=\"locked-leveldesc\">{{forecastState('locklevel', u.id)}}</div>\r\n                  </ng-container>\r\n                  <mat-icon *ngIf=\"forecastState('saved', u.id)\" \r\n                  matTooltip=\"{{getValue('history', u.id)}}\" matTooltipPosition=\"above\" matTooltipDisabled=\"{{!getValue('history', u.id)}}\">\r\n                  save</mat-icon>\r\n                  <mat-icon *ngIf=\"forecastState('edited', u.id)\" class=\"icon-edited\">radio_button_checked</mat-icon>\r\n                </span>\r\n                <span class=\"mat-cell\">{{getValue('totaldays', u.id) | number: '1.0-2': 'de'}}</span>\r\n                <span class=\"mat-cell\">{{getValue('projectdays', u.id) | number: '1.0-2': 'de'}}</span>\r\n                <span class=\"mat-cell\">{{getValue('billabledays', u.id) | number: '1.0-2': 'de'}}</span>\r\n                <span class=\"mat-cell\">{{getValue('vacationdays', u.id) | number: '1.0-2': 'de'}}</span>\r\n\r\n                <span class=\"mat-cell\">{{getValue('benchdays', u.id) | number: '1.0-2': 'de'}}</span>\r\n                <span class=\"mat-cell\">{{getValue('trainingdays', u.id) | number: '1.0-2': 'de'}}</span>\r\n                <span class=\"mat-cell\">{{getValue('businessdays', u.id) | number: '1.0-2': 'de'}}</span>\r\n                \r\n                <span class=\"mat-cell\">{{getValue('arve', u.id) | number: '1.0-2': 'de'}}%</span>\r\n                <span class=\"mat-cell\">{{getValue('urve', u.id) | number: '1.0-2': 'de'}}%</span>\r\n                <span class=\"mat-cell\">&euro; {{getValue('revenue',u.id) | number:'1.0-2':'de' }}</span>\r\n            </mat-panel-description>\r\n          </mat-expansion-panel-header>\r\n        \r\n          <ng-template matExpansionPanelContent>\r\n            <app-fc-entry class=\"tab-container\" [userId]=\"u.id\" [singleView]=\"false\" [month]=\"month\"></app-fc-entry>\r\n          </ng-template>\r\n          \r\n          <mat-action-row>\r\n            <button mat-button color=\"warn\" (click)=\"prevStep()\" *ngIf=\"i > 0\">Previous</button>\r\n            <button mat-button color=\"primary\" (click)=\"nextStep()\" *ngIf=\"i < (team.length-1)\">Next</button>\r\n          </mat-action-row>\r\n        </mat-expansion-panel>\r\n      </mat-accordion>\r\n    </div>\r\n\r\n    <div flex=\"100\" flex-gt-md=\"25\" class=\"summary-box-container\">\r\n      <app-teamlead-summary [role]=\"role\" [month]=\"month\"></app-teamlead-summary>\r\n    </div>\r\n  </div>\r\n</div>"
        },
        {
            "name": "TeamleadSummaryComponent",
            "id": "component-TeamleadSummaryComponent-c78f902e9d150494762ecf22bd28a2bc",
            "file": "src/app/forecast/components/teamlead-summary/teamlead-summary.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-teamlead-summary",
            "styleUrls": [
                "./teamlead-summary.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./teamlead-summary.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "month",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "month (received as input)",
                    "description": "<p>month (received as input)</p>\n",
                    "line": 39,
                    "type": "Month"
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fcEntries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FcEntry[]",
                    "optional": false,
                    "description": "<p>list of all forecast entries for teamlead + month</p>\n",
                    "line": 45,
                    "rawdescription": "\n\nlist of all forecast entries for teamlead + month\n"
                },
                {
                    "name": "fcSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>forecast subscription</p>\n",
                    "line": 75,
                    "rawdescription": "\n\nforecast subscription\n"
                },
                {
                    "name": "months",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Month[]",
                    "optional": false,
                    "description": "<p>months list</p>\n",
                    "line": 55,
                    "rawdescription": "\n\nmonths list\n"
                },
                {
                    "name": "projects",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Project[]",
                    "optional": false,
                    "description": "<p>project list</p>\n",
                    "line": 50,
                    "rawdescription": "\n\nproject list\n"
                },
                {
                    "name": "summaryData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SummaryData",
                    "optional": false,
                    "description": "<p>contains summary-data (calculated in teamlead-summary service)</p>\n",
                    "line": 65,
                    "rawdescription": "\n\ncontains summary-data (calculated in teamlead-summary service)\n"
                },
                {
                    "name": "summaryProjects",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTableDataSource<SummaryDataProject>",
                    "optional": false,
                    "description": "<p>provides summary-data projects in &#39;MatTableDataSource&#39; format</p>\n",
                    "line": 70,
                    "rawdescription": "\n\nprovides summary-data projects in 'MatTableDataSource' format\n"
                },
                {
                    "name": "team",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User[]",
                    "optional": false,
                    "description": "<p>team member list</p>\n",
                    "line": 60,
                    "rawdescription": "\n\nteam member list\n"
                },
                {
                    "name": "teamSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>team subscription</p>\n",
                    "line": 80,
                    "rawdescription": "\n\nteam subscription\n"
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 82
                }
            ],
            "methodsClass": [
                {
                    "name": "exportPeriodForecastToCSV",
                    "args": [
                        {
                            "name": "csvExportMonths",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 287,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nExport forecasts for team for the selected months\n",
                    "description": "<p>Export forecasts for team for the selected months</p>\n",
                    "jsdoctags": [
                        {
                            "name": "csvExportMonths",
                            "type": "number[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasPracticeLeadRole",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 263,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns whether the logged in user has a practice lead role\n",
                    "description": "<p>Returns whether the logged in user has a practice lead role</p>\n"
                },
                {
                    "name": "isUserRelevantForMonth",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "month",
                            "type": "Month",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnsubscribe services when component gets destroyed\n",
                    "description": "<p>Unsubscribe services when component gets destroyed</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInit summaryDays\nSet Utilities\nCalc Total workingDays\nSubscribe forecast at ForecastService for updates\n",
                    "description": "<p>Init summaryDays\nSet Utilities\nCalc Total workingDays\nSubscribe forecast at ForecastService for updates</p>\n"
                },
                {
                    "name": "numberToString",
                    "args": [
                        {
                            "name": "no",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "precision",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 469,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "no",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "precision",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openCSVExportModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 270,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpen csv export modal to choose which data to export\n",
                    "description": "<p>Open csv export modal to choose which data to export</p>\n"
                },
                {
                    "name": "percentageValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturn for giving VALUE percentage value.\n",
                    "description": "<p>Return for giving VALUE percentage value.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5616,
                                "end": 5621,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "value"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5610,
                                "end": 5615,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setLockState",
                    "args": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "role",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "messageSuccess",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "messageFail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 238,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReset all forecasts to initial state DEACTIVATED\n",
                    "description": "<p>Reset all forecasts to initial state DEACTIVATED</p>\n",
                    "jsdoctags": [
                        {
                            "name": "locked",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "role",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "messageSuccess",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "messageFail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "submitAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 183,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSubmit all forecasts at once\n",
                    "description": "<p>Submit all forecasts at once</p>\n"
                },
                {
                    "name": "unlockAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 200,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>teamlead summary component</p>\n",
            "rawdescription": "\n\nteamlead summary component\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, OnChanges, OnDestroy, Inject } from \"@angular/core\";\nimport { DatePipe } from '@angular/common';\nimport { MatDialog, MatDialogRef } from \"@angular/material/dialog\";\nimport { MatSnackBar } from \"@angular/material/snack-bar\";\nimport { MatTableDataSource } from \"@angular/material/table\";\n\nimport { UtilitiesService } from \"../../../core/services/utilities.service\";\nimport { ForecastService } from \"../../../core/services/forecasts/forecast.service\";\nimport { UserService } from \"../../../core/services/user.service\";\nimport { AuthService } from \"../../../core/security/auth.service\";\n\nimport { FcEntry } from \"../../../core/interfaces/fcEntry\";\nimport { Project } from \"../../../core/interfaces/project\";\nimport { Month } from \"../../../core/interfaces/month\";\nimport { User } from \"../../../core/interfaces/user\";\nimport { Grade } from \"../../../core/interfaces/grade\";\nimport { SummaryData, SummaryDataProject } from '../../../core/interfaces/summaryData';\n\nimport { TeamForecastService } from \"../../../core/services/forecasts/team-forecasts.service\";\nimport { Subscription } from \"rxjs\";\nimport { PageStateService } from \"../../../core/shared/page-state.service\";\nimport { environment as env } from '../../../../environments/environment';\nimport { TeamUserService } from \"../../../core/services/forecasts/team-user.service\";\nimport { ExportCsvDialog } from \"../../dialogs/export-csv/export-csv.dialog\";\nimport { ConfirmMessageDialog } from \"../../dialogs/confirm-message/confirm-message.dialog\";\n\n/**\n * teamlead summary component\n */\n@Component({\n  selector: \"app-teamlead-summary\",\n  templateUrl: \"./teamlead-summary.component.html\",\n  styleUrls: [\"./teamlead-summary.component.scss\"]\n})\nexport class TeamleadSummaryComponent implements OnInit, OnDestroy {\n  /**\n   * month (received as input)\n   */\n  @Input('month') month: Month;\n  @Input('role') role: string;\n\n  /**\n   * list of all forecast entries for teamlead + month\n   */\n  fcEntries: FcEntry[];\n\n  /**\n   * project list\n   */\n  projects: Project[] = [];\n\n  /**\n   * months list\n   */\n  months: Month[] = [];\n  \n  /**\n   * team member list\n   */\n  team: User[] = [];\n\n  /**\n   * contains summary-data (calculated in teamlead-summary service)\n   */\n  summaryData: SummaryData;\n\n  /**\n   * provides summary-data projects in 'MatTableDataSource' format\n   */\n  summaryProjects: MatTableDataSource<SummaryDataProject>;\n\n  /**\n   * forecast subscription\n   */\n  fcSubscription: Subscription;\n\n  /**\n   * team subscription\n   */\n  teamSubscription: Subscription;\n\n  userId: number;\n\n  /**\n   * constructor for teamlead-summary component\n   * @param datePipe\n   * @param dialog\n   * @param utilitiesService\n   * @param forecastService\n   * @param teamForecastService\n   * @param userService\n   * @param pageState\n   */\n  constructor(\n    private datePipe: DatePipe,\n    private dialog: MatDialog,\n    private snackBar: MatSnackBar,\n    private utilitiesService: UtilitiesService,\n    private forecastService: ForecastService,\n    private teamForecastService: TeamForecastService,\n    private userService: UserService,\n    private teamService: TeamUserService,\n    private authService: AuthService,\n    private pageState: PageStateService,\n  ) {\n    this.fcEntries = [];\n    this.summaryProjects = new MatTableDataSource([]);\n    this.userId = this.authService.getUserId();\n  }\n\n  /**\n   * Init summaryDays\n   * Set Utilities\n   * Calc Total workingDays\n   * Subscribe forecast at ForecastService for updates\n   */\n  ngOnInit(): void {\n    this.projects = this.utilitiesService.getProjects();\n    this.months = this.utilitiesService.getMonths();\n\n    if (this.role === 'practice') {\n      this.teamSubscription = this.teamService.teamPL$\n        .subscribe((team: User[]) => {\n          this.team = team;\n        });\n    } else {\n      this.teamSubscription = this.teamService.teamPDL$\n        .subscribe((team: User[]) => {\n          this.team = team;\n        });\n    }\n\n    this.fcSubscription = this.forecastService.forecasts$\n      .subscribe((forecasts: FcEntry[]) => {\n        let relevantUsers: User[] = this.team.filter((u: User) => this.isUserRelevantForMonth(u, this.month));\n        let userIds: number[] = relevantUsers.map((u: User) => u.id);\n        this.fcEntries = forecasts.filter((fc: FcEntry) => fc.monthId === this.month.id && userIds.indexOf(fc.userId) >= 0);\n        this.summaryData = this.teamForecastService.getSummaryData(this.fcEntries, parseInt(this.month.workingdays, 10), relevantUsers);\n        this.summaryProjects = new MatTableDataSource(this.summaryData.days);\n      });\n  }\n\n  isUserRelevantForMonth(user: User, month: Month) : boolean {\n    if(user.endDate && user.startDate && month.time) {\n      var endMonth = new Date(user.endDate);\n      endMonth = new Date(endMonth.getFullYear(), endMonth.getMonth(), 1);\n      var startMonth = new Date(user.startDate);\n      startMonth = new Date(startMonth.getFullYear(), endMonth.getMonth(), 1);\n      var monthMonth = new Date(month.time);\n      monthMonth = new Date(monthMonth.getFullYear(), monthMonth.getMonth(), 1)\n      if(startMonth <= endMonth) {\n        if(monthMonth > endMonth) {\n          return false;\n        }\n      } else if(startMonth > endMonth) {\n        if(monthMonth <= startMonth && monthMonth >= endMonth) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Unsubscribe services when component gets destroyed\n   */\n  ngOnDestroy(): void {\n    this.fcSubscription.unsubscribe();\n    this.teamSubscription.unsubscribe();\n  }\n\n  /**\n   * Return for giving VALUE percentage value.\n   * @param value\n   */\n  percentageValue(value: number): number {\n    return parseFloat((value * 100).toFixed(0));\n  }\n\n  /**\n   * Submit all forecasts at once\n   */\n  submitAll(): void {\n    let dialogRef: MatDialogRef<ConfirmMessageDialog> = this.dialog.open(ConfirmMessageDialog, {\n      data: {\n        message: 'Are you sure you want to submit all forecasts?',\n        button: { cancel: 'No', submit: 'Yes' },\n      },\n    });\n\n    dialogRef.afterClosed().subscribe((submit: boolean) => {\n      if (submit === true) {\n        this.pageState.showSpinner();\n        this.setLockState(true, this.userId, 'All forecast entries are successfully submitted.', 'Forecast entries could not be submitted. Please try again later.');\n      }\n      \n    });\n  }\n\n  unlockAll(): void {\n    let dialogRef: MatDialogRef<ConfirmMessageDialog> = this.dialog.open(ConfirmMessageDialog, {\n      data: {\n        message: 'Are you sure you want to unlock all forecasts?',\n        button: { cancel: 'No', submit: 'Yes' },\n      },\n    });\n    dialogRef.afterClosed().subscribe((submit: boolean) => {\n      if (submit === true) {\n        this.pageState.showSpinner();\n        for(let member of this.team) {\n          this.forecastService.unlockForecast(this.month.id, member.id);\n        }\n        this.forecastService.unlockForecast(this.month.id, this.userId);\n        this.pageState.hideSpinner();\n      }\n    });\n  }\n\n  /**\n   * Reset all forecasts to initial state DEACTIVATED\n   */\n  // resetAll(): void {\n  //   let dialogRef: MatDialogRef<ConfirmMessageDialog> = this.dialog.open(ConfirmMessageDialog, {\n  //     data: {\n  //       message: 'Are you sure you want to re-initialize all forecasts?',\n  //       button: { cancel: 'No', submit: 'Yes' },\n  //     },\n  //   });\n\n  //   dialogRef.afterClosed().subscribe((submit: boolean) => {\n  //     if (submit === true) {\n  //       this.pageState.showSpinner();\n  //       this.setLockState(false, -1, 'All forecast entries are successfully re-initialized.', 'Forecast entries could not be re-initialized. Please try again later.');\n  //     }\n  //   });\n  // }\n\n  setLockState(locked: boolean, role: number, messageSuccess: string, messageFail: string): void {\n    let level: number = 1;\n    if (this.role === 'practice') {\n      level = 2;\n    }\n\n    this.teamForecastService.setForecastsLockState(this.month.id, level, locked)\n      .then((forecasts: FcEntry[]) => {\n        if (forecasts) {\n          this.forecastService.addForecasts(forecasts, true);\n        } else {\n          this.forecastService.setTeamLockState(this.month.id, level, role);\n        }\n\n        this.snackBar.open(messageSuccess, 'OK', { duration: 10000, });\n        this.pageState.hideSpinner();\n      }).catch(() => {\n        this.snackBar.open(messageFail, 'OK', { duration: 10000, });\n        this.pageState.hideSpinner();\n      });\n  }\n\n  /**\n   * Returns whether the logged in user has a practice lead role\n   */\n  hasPracticeLeadRole(): boolean {\n    return this.authService.hasRole(env.roles.pl);\n  }\n\n  /**\n   * Open csv export modal to choose which data to export\n   */\n  openCSVExportModal(): void {\n    let dialogRef: any = this.dialog.open(ExportCsvDialog, {\n      width: '30vw',\n      maxHeight: '80vh',\n      data: { months: this.months.filter((m: Month) => m.active === true) },\n    });\n\n    dialogRef.afterClosed().subscribe((csvExportMonths: number[]) => {\n      if (csvExportMonths) {\n        this.exportPeriodForecastToCSV(csvExportMonths);\n      }\n    });\n  }\n\n  /**\n   * Export forecasts for team for the selected months\n   */\n  exportPeriodForecastToCSV(csvExportMonths: number[]): void {\n    this.pageState.showSpinner();\n    let openRequests: number = csvExportMonths.length;\n\n    let level: number = 1;\n    if (this.role === 'practice') {\n      level = 2;\n    }\n    let summaryMap = new Map();\n    let monthSummaries: string[] = [];\n    let lineEnding = \"\\r\\n\";\n    let header = \"Name;Grade;FTE;Paid Days;Project Days;Billable Days;Vacation Days;Training Days;Business Development Days;Bench Days;ARVE;URVE;External Revenue;Internal Revenue;Revenue;Weighted COR\" + lineEnding;\n    let summaryHeader = \"FTE;Paid Days;Project Days;Billable Days;Vacation Days;Training Days;Business Development Days;Bench Days;ARVE;URVE;External Revenue;Internal Revenue;Revenue;Weighted COR\" + lineEnding;\n\n    this.utilitiesService.getMonths().forEach((month: Month) => {\n      if (csvExportMonths.indexOf(month.id) >= 0) {\n        this.teamForecastService.getTeamForecastPromise(this.userId, month.id, level).then((fcEntries: FcEntry[]) => {\n          let monthSummary: string = \"Month;\" + month.name + lineEnding + \"Working Days;\" + month.workingdays + lineEnding;\n          monthSummary += header;\n\n          let totalExternal: number = 0;\n          let totalInternal: number = 0;\n          let totalRevenue: number = 0;\n\n          let totalFTE: number = 0;\n\n          let totalBDD: number = 0;\n          let totalVaction: number = 0;\n          let totalTraining: number = 0;\n          let totalBench: number = 0;\n          let totalProject: number = 0;\n          let totalBillable: number = 0;\n          let totalPaid: number = 0;\n          let totalNonBillable: number = 0;\n\n          let totalCOR: number = 0;\n\n          for(var fc of fcEntries) {\n            let user = this.userService.getUser(fc.userId);\n            let userName = user.firstName + \" \" + user.lastName;\n            \n            let grade = this.userService.getGrades().find((grade: Grade) => grade.gradeId === fc.gradeId);\n            let gradeName = grade.name;\n\n            let externalRevenue: number = 0;\n            let internalRevenue: number = 0;\n            let revenue: number = 0;\n\n            let bddDays: number = 0;\n            let vacationDays: number = 0;\n            let trainingDays: number = 0;\n            let benchDays: number = 0;\n            let projectDays: number = 0;\n            let billableDays: number = 0;\n            let nonBillableDays: number = 0;\n\n            let paidDays: number = parseInt(month.workingdays) * fc.fte;\n\n            let cor: number = 0;\n\n            for(var pj of fc.projects) {\n              if(pj.projectType === 1 || pj.projectType === 6) {\n                projectDays += pj.plannedProjectDays;\n              }\n\n              if(pj.projectType === 2) {\n                bddDays += pj.plannedProjectDays;\n              } else if(pj.projectType === 3) {\n                trainingDays += pj.plannedProjectDays;\n              } else if(pj.projectType === 4) {\n                vacationDays += pj.plannedProjectDays;\n              } else if(pj.projectType === 5) {\n                benchDays += pj.plannedProjectDays;\n              }\n\n              if(pj.billable && (pj.projectType === 1 || pj.projectType === 6)) {\n                let rev = pj.cor * pj.plannedProjectDays;\n                cor += rev;\n                if(pj.externalRevenue) {\n                  externalRevenue += rev;\n                } else {\n                  internalRevenue += rev;\n                }\n\n                billableDays += pj.plannedProjectDays;\n                revenue += rev;\n              } else if(!pj.billable && (pj.projectType === 1 || pj.projectType === 6)) {\n                nonBillableDays += pj.plannedProjectDays;\n              }\n            }\n\n            let monthEntry: string = userName + \";\" + \n              gradeName + \";\" + \n              this.numberToString(fc.fte) + \";\" + \n              this.numberToString(paidDays) + \";\" + \n              this.numberToString(projectDays) + \";\" + \n              this.numberToString(billableDays) + \";\" + \n              this.numberToString(vacationDays) + \";\" + \n              this.numberToString(trainingDays) + \";\" + \n              this.numberToString(bddDays) + \";\" + \n              this.numberToString(benchDays) + \";\" + \n              this.numberToString((billableDays - nonBillableDays)/(paidDays - vacationDays), 4) + \";\" + \n              this.numberToString((billableDays)/(paidDays - vacationDays), 4) + \";\" + \n              this.numberToString(externalRevenue) + \";\" + \n              this.numberToString(internalRevenue) + \";\" + \n              this.numberToString(revenue) + \";\" +\n              this.numberToString(cor / billableDays) +\n              lineEnding;\n\n            totalExternal += externalRevenue;\n            totalInternal += internalRevenue;\n            totalRevenue += revenue;\n\n            totalFTE += fc.fte;\n\n            totalBDD += bddDays;\n            totalVaction += vacationDays;\n            totalTraining += trainingDays;\n            totalBench += benchDays;\n            totalProject += projectDays;\n            totalBillable += billableDays;\n            totalNonBillable += nonBillableDays;\n\n            totalPaid += paidDays;\n\n            totalCOR += cor;\n\n            monthSummary += monthEntry;\n          }\n\n          let monthTotalEntry = this.numberToString(totalFTE) + \";\" + \n            this.numberToString(totalPaid) + \";\" + \n            this.numberToString(totalProject) + \";\" + \n            this.numberToString(totalBillable) + \";\" + \n            this.numberToString(totalVaction) + \";\" + \n            this.numberToString(totalTraining) + \";\" + \n            this.numberToString(totalBDD) + \";\" + \n            this.numberToString(totalBench) + \";\" + \n            this.numberToString((totalBillable + totalNonBillable) / (totalPaid - totalVaction), 4) + \";\" + \n            this.numberToString((totalBillable) / (totalPaid - totalVaction), 4) + \";\" + \n            this.numberToString(totalExternal) + \";\" + \n            this.numberToString(totalInternal) + \";\" + \n            this.numberToString(totalRevenue) + \";\" +\n            this.numberToString(totalCOR / totalBillable) +\n            lineEnding;\n\n          monthSummary += \"\\n\\n\" + \"Summary\\n\" + summaryHeader + monthTotalEntry + \"\\n\";\n          openRequests--;\n          summaryMap = summaryMap.set(month.id, monthSummary);\n\n          if (openRequests === 0) {\n            this.pageState.hideSpinner();\n            let keys = Array.from(summaryMap.keys()).sort();\n\n            for(var key of keys) {\n              monthSummaries.push(summaryMap.get(key));\n            }\n\n            const data = monthSummaries.join(\"\\n\\n\");\n            const blob: Blob = new Blob([data], { type: \"text/csv\" });\n            const filename: string = this.datePipe.transform(new Date(), \"yyyyMMdd\") + \"-Summary.csv\";    \n    \n            if (window.navigator.msSaveOrOpenBlob) {\n              window.navigator.msSaveOrOpenBlob(blob, filename);\n            } else {\n              const url: string = window.URL.createObjectURL(blob);\n        \n              let a: HTMLAnchorElement = document.createElement(\"a\");\n              a.href = url;\n              a.download = filename;\n        \n              document.body.appendChild(a);\n              a.click();\n              document.body.removeChild(a);\n              window.URL.revokeObjectURL(url);\n            }\n          }\n        });\n      }\n    });\n  }\n\n  numberToString(no: number, precision: number = 2): string {\n    return no.toLocaleString(\"de\",  { minimumFractionDigits: precision } ).replace(\".\",\"\");\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-stroked-button {\n\tmargin: 5px;\n\tmargin-left: 0;\n}\n\n.button-rows {\n\tdisplay: flex;\n\t.button-row {\n\t\twidth: 50%\n\t}\n}",
                    "styleUrl": "./teamlead-summary.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor for teamlead-summary component</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "datePipe",
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilitiesService",
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "forecastService",
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "teamForecastService",
                        "type": "TeamForecastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "teamService",
                        "type": "TeamUserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pageState",
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 82,
                "rawdescription": "\n\nconstructor for teamlead-summary component\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 2642,
                            "end": 2650,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "datePipe"
                        },
                        "type": "DatePipe",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2636,
                            "end": 2641,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 2663,
                            "end": 2669,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialog"
                        },
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2657,
                            "end": 2662,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 2682,
                            "end": 2698,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "utilitiesService"
                        },
                        "type": "UtilitiesService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2676,
                            "end": 2681,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 2711,
                            "end": 2726,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "forecastService"
                        },
                        "type": "ForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2705,
                            "end": 2710,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 2739,
                            "end": 2758,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "teamForecastService"
                        },
                        "type": "TeamForecastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2733,
                            "end": 2738,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 2771,
                            "end": 2782,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "userService"
                        },
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2765,
                            "end": 2770,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "teamService",
                        "type": "TeamUserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 2795,
                            "end": 2804,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "pageState"
                        },
                        "type": "PageStateService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 2789,
                            "end": 2794,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<mat-card class=\"summary-box\">\n  <mat-card-title>\n    Summary {{month.name}}\n  </mat-card-title>\n\n  <mat-card-content>\n    <table mat-table [dataSource]=\"summaryProjects\">\n      <ng-container matColumnDef=\"name\">\n        <th mat-header-cell *matHeaderCellDef>Project name</th>\n        <td mat-cell *matCellDef=\"let project\">{{ project.title }}</td>\n        <td mat-footer-cell *matFooterCellDef>\n          Billable days<br>\n          Non-billable days<br>\n          <span class=\"total\">Total days</span><br>\n          <span class=\"note\">Expected days</span>\n        </td>\n      </ng-container>\n\n      <ng-container matColumnDef=\"days\">\n        <th mat-header-cell *matHeaderCellDef>Days</th>\n        <td mat-cell *matCellDef=\"let project\">{{ project.days | number: '1.0-2' :'de'}}</td>\n        <td mat-footer-cell *matFooterCellDef>\n          {{summaryData.billableDays | number: '1.0-2':'de'}}<br>\n          {{summaryData.nonbillableDays | number: '1.0-2':'de'}}<br>\n          <span class=\"total\">{{(summaryData.billableDays + summaryData.nonbillableDays) | number: '1.0-2':'de'}}</span><br>\n          <span class=\"note\">{{ summaryData.workingDays | number: '1.0-2':'de' }}</span>\n        </td>\n      </ng-container>\n      <tr mat-header-row *matHeaderRowDef=\"['name', 'days']\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: ['name', 'days']\"></tr>\n      <tr mat-footer-row *matFooterRowDef=\"['name', 'days']\"></tr>\n    </table>\n\n\t\t<div class=\"card-section\">\n      <mat-chip-list>\n        <mat-chip><mat-icon>timeline</mat-icon>ARVE {{summaryData.arve * 100 | number: '1.0-2': 'de'}}%</mat-chip>\n        <mat-chip><mat-icon>timeline</mat-icon>URVE {{summaryData.urve * 100 | number: '1.0-2': 'de'}}%</mat-chip>\n        <mat-chip><mat-icon>trending_up</mat-icon>External Revenue € {{summaryData.extRevenue | number:'':'de' }}</mat-chip>\n        <mat-chip><mat-icon>trending_up</mat-icon>Internal Revenue € {{summaryData.intRevenue | number:'':'de' }}</mat-chip>\n        <mat-chip><mat-icon>trending_up</mat-icon>ROS € {{summaryData.revenue | number:'':'de' }}</mat-chip>\n      </mat-chip-list>\n    </div>\n    <div class=\"card-section\">\n    <!-- <div class=\"card-section button-rows\"> -->\n      <button mat-stroked-button class=\"mat-primary-reversed button-row\" *ngIf=\"role == 'practice' && hasPracticeLeadRole()\" (click)=\"submitAll()\">\n        <mat-icon>lock</mat-icon> Submit all forecasts\n      </button>\n      <!-- <button mat-stroked-button class=\"mat-primary-reversed button-row\" *ngIf=\"role == 'practice' && hasPracticeLeadRole()\" (click)=\"resetAll()\"> DEACTIVATED\n        <mat-icon>restore</mat-icon> Reset to initial values\n      </button> -->\n    </div>\n\n    <div class=\"card-section\">\n    <!-- <div class=\"card-section button-rows\"> -->\n      <button mat-stroked-button class=\"mat-primary-reversed button-row\" *ngIf=\"role == 'practice' && hasPracticeLeadRole()\" (click)=\"unlockAll()\">\n          <mat-icon>lock_open</mat-icon> Unlock all forecasts\n      </button>\n      <button mat-stroked-button class=\"mat-primary-reversed\" [ngClass]=\"{'button-row': role == 'practice' && hasPracticeLeadRole()}\" (click)=\"openCSVExportModal()\">\n        <mat-icon>insert_drive_file</mat-icon> CSV Export\n      </button>\n    </div>\n  </mat-card-content>\n</mat-card>\n"
        },
        {
            "name": "TeamsComponent",
            "id": "component-TeamsComponent-93be713745d726d8bd6ccefcf26305ce",
            "file": "src/app/admin/components/teams/teams.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-admin-teams",
            "styleUrls": [
                "../../admin.component.scss",
                "./teams.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./teams.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Role[]",
                    "optional": false,
                    "description": "<p>role list</p>\n",
                    "line": 48,
                    "rawdescription": "\n\nrole list\n"
                },
                {
                    "name": "roleSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>role list subscription</p>\n",
                    "line": 58,
                    "rawdescription": "\n\nrole list subscription\n"
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSort",
                    "optional": false,
                    "description": "<p>Sort variable for angular material table sort method</p>\n",
                    "line": 28,
                    "rawdescription": "\n\nSort variable for angular material table sort method\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSort, {static: false}"
                        }
                    ]
                },
                {
                    "name": "teamleads",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User[]",
                    "optional": false,
                    "description": "<p>teamlead list</p>\n",
                    "line": 43,
                    "rawdescription": "\n\nteamlead list\n"
                },
                {
                    "name": "teams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Team[]",
                    "optional": false,
                    "description": "<p>team list</p>\n",
                    "line": 33,
                    "rawdescription": "\n\nteam list\n"
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User[]",
                    "optional": false,
                    "description": "<p>user list</p>\n",
                    "line": 38,
                    "rawdescription": "\n\nuser list\n"
                },
                {
                    "name": "userSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>user list subscription</p>\n",
                    "line": 53,
                    "rawdescription": "\n\nuser list subscription\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "addTeam",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteTeam",
                    "args": [
                        {
                            "name": "team",
                            "type": "Team",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "team",
                            "type": "Team",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRole",
                    "args": [
                        {
                            "name": "roleId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | boolean",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns user role description\n",
                    "description": "<p>returns user role description</p>\n",
                    "jsdoctags": [
                        {
                            "name": "roleId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTeamMembers",
                    "args": [
                        {
                            "name": "parentId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "MatTableDataSource<User>",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns teammember-list as MatDataTableSource\n",
                    "description": "<p>Returns teammember-list as MatDataTableSource</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3236,
                                "end": 3244,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "parentId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3230,
                                "end": 3235,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nRemove project subscription when component gets destroyed\n",
                    "description": "<p>Remove project subscription when component gets destroyed</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSubscribe to user at component init\n",
                    "description": "<p>Subscribe to user at component init</p>\n"
                },
                {
                    "name": "showEditDialog",
                    "args": [
                        {
                            "name": "team",
                            "type": "Team",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOpens add/edit team dialog window\n",
                    "description": "<p>Opens add/edit team dialog window</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3996,
                                "end": 4000,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "team"
                            },
                            "type": "Team",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3990,
                                "end": 3995,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "updateTeam",
                    "args": [
                        {
                            "name": "team",
                            "type": "Team",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "team",
                            "type": "Team",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>project-admin component</p>\n",
            "rawdescription": "\n\nproject-admin component\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { MatSort } from '@angular/material/sort';\n\nimport { Subscription } from 'rxjs';\nimport { UserService } from '../../../core/services/user.service';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { User } from '../../../core/interfaces/user';\nimport { Role } from '../../../core/interfaces/role';\nimport { environment } from '../../../../environments/environment';\nimport { TeamService } from '../../../core/services/admin/team.service';\nimport { Team } from '../../../core/interfaces/team';\nimport { AddTeamDialog } from '../../dialogs/add-team/add-team.dialog';\nimport { ConfirmMessageDialog } from '../../dialogs/confirm-message/confirm-message.dialog';\n\n/**\n * project-admin component\n */\n@Component({\n  selector: 'app-admin-teams',\n  templateUrl: './teams.component.html',\n  styleUrls: ['../../admin.component.scss', './teams.component.scss'],\n})\nexport class TeamsComponent implements OnInit, OnDestroy {\n  /**\n   * Sort variable for angular material table sort method\n   */\n  @ViewChild(MatSort, { static: false }) sort: MatSort;\n\n  /**\n   * team list\n   */\n  teams: Team[];\n\n  /**\n   * user list\n   */\n  user: User[];\n\n  /**\n   * teamlead list\n   */\n  teamleads: User[];\n\n  /**\n   * role list\n   */\n  roles: Role[];\n\n  /**\n   * user list subscription\n   */\n  userSubscription: Subscription;\n\n  /**\n   * role list subscription\n   */\n  roleSubscription: Subscription;\n\n  /**\n   * team service constructor\n   * @param userService\n   */\n  constructor(\n    private dialog: MatDialog,\n    private userService: UserService,\n    private teamService: TeamService,\n  ) {}\n\n  /**\n   * Subscribe to user at component init\n   */\n\tngOnInit(): void {\n    this.teamService.initTeams();\n\n    this.teamService.teams$\n      .subscribe((teams: Team[]) => {\n        this.teams = teams;\n        //console.log(teams);\n      });\n\n    this.userSubscription = this.userService.allUsers$\n      .subscribe((user: User[]) => {\n\t\t\t\tthis.user = user;\n\t\t\t\tlet teamleadIDs: number[] = user.filter((u: User) => u.permission >= environment.roles.pdl).map((u: User) => u.id);\n\t\t\t\tthis.teamleads = user.filter((u: User) => teamleadIDs.indexOf(u.id) >= 0);\n      });\n\n    this.roleSubscription = this.userService.roles$\n      .subscribe((roles: Role[]) => {\n        this.roles = roles;\n      });\n  }\n\n  addTeam(): void {\n    this.showEditDialog(new Team());\n  }\n\n  updateTeam(team: Team): void {\n    this.showEditDialog(team);\n  }\n\n  deleteTeam(team: Team): void {\n    let dialogRef: MatDialogRef<ConfirmMessageDialog> = this.dialog.open(ConfirmMessageDialog, {\n      data: {\n        message: 'Are you sure you want to delete the team \"' + team.name + '\"?',\n        button: { cancel: 'Cancel', submit: 'Delete' },\n      },\n    });\n\n    dialogRef.afterClosed().subscribe((remove: boolean) => {\n      if (remove) {\n        this.teamService.deleteTeam(team.teamId);\n      }\n    });\n  }\n\n  /**\n   * Remove project subscription when component gets destroyed\n   */\n  ngOnDestroy(): void {\n    this.userSubscription.unsubscribe();\n\t}\n\n  /**\n   * Returns teammember-list as MatDataTableSource\n   * @param parentId\n   */\n\tgetTeamMembers(parentId: number): MatTableDataSource<User> {\n    let teamlead: User = this.user.find((u: User) => u.id === parentId);\n    let team: User[] = this.user.filter((u: User) => u.parentId === parentId);\n\n    team = [...team, ...this.user.filter((u: User) => team.map((us: User) => us.id).indexOf(u.parentId) >= 0)]; // max 2 levels (PDL + PL-level)\n    team.unshift(teamlead);\n\n\t\treturn new MatTableDataSource(team);\n  }\n  \n  /**\n   * returns user role description\n   */\n  getRole(roleId: number): string | boolean {\n    if (this.roles.find((r: Role) => r.roleId === roleId)) {\n      return this.roles.find((r: Role) => r.roleId === roleId).name;\n    }\n\n    return false;\n  }\n\n  /**\n   * Opens add/edit team dialog window\n   * @param team\n   */\n  showEditDialog(team: Team): void {\n    let dialogRef: any = this.dialog.open(AddTeamDialog, {\n      data: {\n        team: team,\n        user: this.user,\n      },\n    });\n\n    dialogRef.afterClosed().subscribe((t: Team | boolean) => {\n      if (t) {\n        this.teamService.setTeam(<Team>t);\n      }\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../assets/styles/variables.scss';\n\n.mat-sidenav-container{\n\tbackground: transparent;\n\tmargin: 0 10px;\n}\n\n.mat-drawer {\n\tdisplay: none;\n\tbackground: transparent;\n\twidth: 50px;\n\tborder-right-width: 0px;\n}\n\n.nav-button-container {\n\tmargin: 4px 0;\n\n\t.mat-icon-button {\n\t\twidth: 50px;\n\t\theight: 50px;\n\t\tmargin-bottom: 10px;\n\t\tpadding: 0;\n\n\t\t&.active, &.active .mat-icon {\n\t\t\tcolor: map-get($font-colors, blue);\n\t\t}\n\t}\n\n\t.mat-icon {\n\t\twidth: 1em;\n\t\theight: 1em;\n\t\tline-height: 1rem;\n\t\tfont-size: 2rem;\n\t}\n}\n\n\ntd.mat-cell:first-of-type, td.mat-footer-cell:first-of-type, th.mat-header-cell:first-of-type {\n\tpadding-left: 0;\n}\n\ntd.mat-cell:last-of-type, td.mat-footer-cell:last-of-type, th.mat-header-cell:last-of-type {\n\tpadding-right: 0;\n}\n\n.action-button {\n\twidth: 50px;\n\ttext-align: center;\n}\n\n.flag-button {\n\twidth: 70px;\n\ttext-align: center;\n}\n\n.button-row {\n\tmargin: 50px;\n\n\t.mat-raised-button {\n\t\tposition: fixed;\n\t\tz-index: 100;\n\t\tbottom: 32px;\n\t\tright: 30px;\n\t\tbox-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n\t}\n}\n\n.mat-form-field {\n\tmargin: 5px 0;\n}\n\ntr.mat-row.inactive td {\n\tcolor: map-get($font-colors, grey-label);\n\n\t.flag-inactive {\n\t\tbackground: map-get($font-colors, red);\n\t\tcolor: map-get($font-colors, white);\n\t\tpadding: 3px 6px;\n\t\tborder-radius: 4px;\n\t}\n}\n\n.mat-table tr.mat-row:last-child td {\n\tborder-bottom: 0;\n}",
                    "styleUrl": "../../admin.component.scss"
                },
                {
                    "data": "@import '../../../../assets/styles/variables.scss';\n\n.mat-expansion-panel {\n\t.mat-expansion-panel-header {\n\t\theight: 44px;\n\t\tfont-size: $font-size;\n\t}\n\n\ttable {\n\t\tbox-shadow: none;\n\t}\n\n\ttd.mat-cell {\n\t\tpadding: 0 16px;\n\t}\n\t\n\t.mat-table tr.mat-row {\n\t\theight: 40px;\n\t}\n}\n\n.mat-expansion-panel-header-description, .mat-expansion-panel-header-title {\n\tline-height: 24px;\n}\n\n.mat-expansion-panel-header-description {\n\tflex-direction: row-reverse;\n\n\t.mat-icon {\n\t\tpadding: 0 10px;\n\t}\n}",
                    "styleUrl": "./teams.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>team service constructor</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "teamService",
                        "type": "TeamService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 58,
                "rawdescription": "\n\nteam service constructor\n",
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": {
                            "pos": 1592,
                            "end": 1603,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "userService"
                        },
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1586,
                            "end": 1591,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "teamService",
                        "type": "TeamService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<mat-accordion displayMode=\"flat\" multi>\n  <mat-expansion-panel *ngFor=\"let team of teams\">\n    <mat-expansion-panel-header>\n      <mat-panel-title>\n        {{team.name}}\n      </mat-panel-title>\n      <mat-panel-description class=\"mat-row\">\n        <mat-icon (click)=\"deleteTeam(team)\">delete</mat-icon>\n        <mat-icon (click)=\"updateTeam(team)\">edit</mat-icon>\n      </mat-panel-description>\n    </mat-expansion-panel-header>\n\n    <table mat-table [dataSource]=\"getTeamMembers(team.teamLeadId)\" class=\"mat-elevation-z8\">\n\t\t\t\t<ng-container matColumnDef=\"name\">\n\t\t\t\t\t<td mat-cell *matCellDef=\"let user; let i = index\"> {{user.lastName}}, {{user.firstName}} \n            <ng-container *ngIf=\"i == 0\">(Teamlead)</ng-container>\n          </td>\n\t\t\t\t</ng-container>\n\n\t\t\t\t<tr mat-row *matRowDef=\"let row; columns: ['name'];\"></tr>\n\t\t\t</table>\n\t</mat-expansion-panel>\n</mat-accordion>\n\n<div class=\"button-row\">\n  <button mat-raised-button color=\"primary\" (click)=\"addTeam()\">\n    <mat-icon>playlist_add</mat-icon> Add Team\n  </button>\n</div>"
        },
        {
            "name": "UsersComponent",
            "id": "component-UsersComponent-77c51ac7cfc12c24d89f1df15f0c290d",
            "file": "src/app/admin/components/users/users.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-admin-users",
            "styleUrls": [
                "../../admin.component.scss",
                "./users.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./users.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "grades",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Grade[]",
                    "optional": false,
                    "description": "<p>Defined grades</p>\n",
                    "line": 35,
                    "rawdescription": "\n\nDefined grades\n"
                },
                {
                    "name": "gradeSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>grade update subscription</p>\n",
                    "line": 55,
                    "rawdescription": "\n\ngrade update subscription\n"
                },
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Role[]",
                    "optional": false,
                    "description": "<p>Defined roles</p>\n",
                    "line": 30,
                    "rawdescription": "\n\nDefined roles\n"
                },
                {
                    "name": "roleSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>role update subscription</p>\n",
                    "line": 50,
                    "rawdescription": "\n\nrole update subscription\n"
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSort",
                    "optional": false,
                    "description": "<p>sort for angular material table</p>\n",
                    "line": 25,
                    "rawdescription": "\n\nsort for angular material table\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSort, {static: true}"
                        }
                    ]
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTableDataSource<User>",
                    "optional": false,
                    "description": "<p>User array as MatTableDataSource (needed for auto updates on table)</p>\n",
                    "line": 40,
                    "rawdescription": "\n\nUser array as MatTableDataSource (needed for auto updates on table)\n"
                },
                {
                    "name": "userSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "<p>user update subscription</p>\n",
                    "line": 45,
                    "rawdescription": "\n\nuser update subscription\n"
                }
            ],
            "methodsClass": [
                {
                    "name": "addNewUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nopen add user dialog\n",
                    "description": "<p>open add user dialog</p>\n"
                },
                {
                    "name": "getGrade",
                    "args": [
                        {
                            "name": "gradeId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns user grade\n",
                    "description": "<p>returns user grade</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3457,
                                "end": 3464,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "gradeId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3451,
                                "end": 3456,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getRole",
                    "args": [
                        {
                            "name": "roleId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns user role\n",
                    "description": "<p>returns user role</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3237,
                                "end": 3243,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "roleId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3231,
                                "end": 3236,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getTeamlead",
                    "args": [
                        {
                            "name": "parentId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nreturns teamlead name\n",
                    "description": "<p>returns teamlead name</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3692,
                                "end": 3700,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "parentId"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3686,
                                "end": 3691,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUnsubscribe services when component gets destroyed\n",
                    "description": "<p>Unsubscribe services when component gets destroyed</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ninit method to load users + roles\n",
                    "description": "<p>init method to load users + roles</p>\n"
                },
                {
                    "name": "openUserDialog",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nopen update user dialog\n",
                    "description": "<p>open update user dialog</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2698,
                                "end": 2702,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "user"
                            },
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2692,
                                "end": 2697,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "setUserActiveState",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "active",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate user active state\n",
                    "description": "<p>Update user active state</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3047,
                                "end": 3049,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "id"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3041,
                                "end": 3046,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 3062,
                                "end": 3068,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "active"
                            },
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3056,
                                "end": 3061,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 78,
                                "escapedText": "param"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Component for admin user-list</p>\n",
            "rawdescription": "\n\nComponent for admin user-list\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';\nimport { User } from '../../../core/interfaces/user';\nimport { UserService } from '../../../core/services/user.service';\nimport { Subscription } from 'rxjs';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { AddUserDialog } from '../../dialogs/add-user/add-user.dialog';\nimport { Role } from '../../../core/interfaces/role';\nimport { Grade } from '../../../core/interfaces/grade';\nimport { UserAdminService } from '../../../core/services/admin/user.service';\n\n/**\n * Component for admin user-list\n */\n@Component({\n  selector: 'app-admin-users',\n  templateUrl: './users.component.html',\n  styleUrls: ['../../admin.component.scss', './users.component.scss'],\n})\nexport class UsersComponent implements OnInit, OnDestroy {\n  /**\n   * sort for angular material table\n   */\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n\n  /**\n   * Defined roles\n   */\n  roles: Role[];\n\n  /**\n   * Defined grades\n   */\n  grades: Grade[];\n\n  /**\n   * User array as MatTableDataSource (needed for auto updates on table)\n   */\n  user: MatTableDataSource<User>;\n\n  /**\n   * user update subscription\n   */\n  userSubscription: Subscription;\n\n  /**\n   * role update subscription\n   */\n  roleSubscription: Subscription;\n\n  /**\n   * grade update subscription\n   */\n  gradeSubscription: Subscription;\n\n  /**\n   * constructor to init user datasource\n   * @param dialog\n   * @param userService\n   */\n  constructor(\n    private dialog: MatDialog,\n    private userService: UserService,\n    private userAdminService: UserAdminService,\n  ) {\n    this.user = new MatTableDataSource([]);\n  }\n\n  /**\n   * init method to load users + roles\n   */\n  ngOnInit(): void {\n    this.userAdminService.initData();\n\n    this.userSubscription = this.userService.allUsers$\n      .subscribe((user: User[]) => {\n        this.user = new MatTableDataSource(user);\n        this.user.sort = this.sort;\n      });\n\n    this.roleSubscription = this.userService.roles$\n      .subscribe((roles: Role[]) => {\n        this.roles = roles;\n      });\n\n    this.gradeSubscription = this.userService.grades$\n      .subscribe((grades: Grade[]) => {\n        this.grades = grades;\n      });\n  }\n\n  /**\n   * Unsubscribe services when component gets destroyed\n   */\n  ngOnDestroy(): void {\n    this.userSubscription.unsubscribe();\n    this.roleSubscription.unsubscribe();\n    this.gradeSubscription.unsubscribe();\n  }\n\n  /**\n   * open add user dialog\n   */\n  addNewUser(): void {\n    this.openUserDialog(new User());\n  }\n\n  /**\n   * open update user dialog\n   * @param user\n   */\n  openUserDialog(user: User): void {\n    let dialogRef: any = this.dialog.open(AddUserDialog, { height: 'auto', width: '50vw', data: user });\n\n    dialogRef.afterClosed().subscribe((u: User | boolean) => {\n      if (u) {\n        this.userAdminService.setUser(<User>u);\n      }\n    });\n  }\n\n  /**\n   * Update user active state\n   * @param id\n   * @param active\n   */\n  setUserActiveState(id: number, active: boolean): void {\n    this.userAdminService.setUserActiveState(id, active);\n  }\n\n  /**\n   * returns user role\n   * @param roleId\n   */\n  getRole(roleId: number): string {\n    return this.roles.find((r: Role) => r.roleId === roleId) ? this.roles.find((r: any) => r.roleId === roleId).name : '-';\n  }\n\n  /**\n   * returns user grade\n   * @param gradeId\n   */\n  getGrade(gradeId: number): string {\n    return this.grades.find((g: Grade) => g.gradeId === gradeId) ? this.grades.find((g: Grade) => g.gradeId === gradeId).name : '-';\n  }\n\n  /**\n   * returns teamlead name\n   * @param parentId\n   */\n  getTeamlead(parentId: number): string {\n    let parent: User = this.user.data.find((u: User) => u.id === parentId);\n    return parent ? (parent.lastName + ', ' + parent.firstName) : '';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../assets/styles/variables.scss';\n\n.mat-sidenav-container{\n\tbackground: transparent;\n\tmargin: 0 10px;\n}\n\n.mat-drawer {\n\tdisplay: none;\n\tbackground: transparent;\n\twidth: 50px;\n\tborder-right-width: 0px;\n}\n\n.nav-button-container {\n\tmargin: 4px 0;\n\n\t.mat-icon-button {\n\t\twidth: 50px;\n\t\theight: 50px;\n\t\tmargin-bottom: 10px;\n\t\tpadding: 0;\n\n\t\t&.active, &.active .mat-icon {\n\t\t\tcolor: map-get($font-colors, blue);\n\t\t}\n\t}\n\n\t.mat-icon {\n\t\twidth: 1em;\n\t\theight: 1em;\n\t\tline-height: 1rem;\n\t\tfont-size: 2rem;\n\t}\n}\n\n\ntd.mat-cell:first-of-type, td.mat-footer-cell:first-of-type, th.mat-header-cell:first-of-type {\n\tpadding-left: 0;\n}\n\ntd.mat-cell:last-of-type, td.mat-footer-cell:last-of-type, th.mat-header-cell:last-of-type {\n\tpadding-right: 0;\n}\n\n.action-button {\n\twidth: 50px;\n\ttext-align: center;\n}\n\n.flag-button {\n\twidth: 70px;\n\ttext-align: center;\n}\n\n.button-row {\n\tmargin: 50px;\n\n\t.mat-raised-button {\n\t\tposition: fixed;\n\t\tz-index: 100;\n\t\tbottom: 32px;\n\t\tright: 30px;\n\t\tbox-shadow: 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);\n\t}\n}\n\n.mat-form-field {\n\tmargin: 5px 0;\n}\n\ntr.mat-row.inactive td {\n\tcolor: map-get($font-colors, grey-label);\n\n\t.flag-inactive {\n\t\tbackground: map-get($font-colors, red);\n\t\tcolor: map-get($font-colors, white);\n\t\tpadding: 3px 6px;\n\t\tborder-radius: 4px;\n\t}\n}\n\n.mat-table tr.mat-row:last-child td {\n\tborder-bottom: 0;\n}",
                    "styleUrl": "../../admin.component.scss"
                },
                {
                    "data": "@import '../../../../assets/styles/variables.scss';\n\n.form-field-toggle {\n  margin: 10px;\n}\n\n\n.accordion-header {\n  display: flex;\n  flex: 1;\n  flex-direction: row;\n  align-items: center;\n  padding: 15px 24px;\n  color: map-get($font-colors, grey-dark);\n  margin-right: 8px;\n\n  div {\n    display: flex;\n    flex-grow: 1;\n    width: 0;\n    margin-right: 16px;\n\n    &:last-child {\n      flex-grow: 2;\n      text-align: center;\n    }\n\n    span {\n      flex: 1;\n      word-break: break-word;\n    }\n  }\n}\n\n.mat-accordion .mat-expansion-panel {\n  border-radius: 0;\n\n  .mat-expansion-panel-header-description, .mat-expansion-panel-header-title {\n    width: 0;\n    line-height: 15px;\n    align-items: center;\n    flex-grow: 1;\n  }\n  \n  .mat-expansion-panel-header-description {\n    text-align: center; \n    flex-grow: 2;\n  }\n\n  .mat-cell, .mat-header-cell {\n    flex: 1;\n    color: map-get($font-colors, grey-dark);\n  }\n}\n\n.mat-raised-button{\n    margin-top: 20px;\n}\n\n.button-margin {\n  margin: 10px,\n}\n\n.clicked {\n  background-color: #f9fafb;\n}\n\n\ntd.mat-cell:last-of-type, td.mat-footer-cell:last-of-type, th.mat-header-cell:last-of-type {\n\tpadding-right: 5;\n}\n\n",
                    "styleUrl": "./users.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>constructor to init user datasource</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userService",
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "userAdminService",
                        "type": "UserAdminService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 55,
                "rawdescription": "\n\nconstructor to init user datasource\n",
                "jsdoctags": [
                    {
                        "name": {
                            "pos": 1535,
                            "end": 1541,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "dialog"
                        },
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1529,
                            "end": 1534,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": {
                            "pos": 1554,
                            "end": 1565,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "userService"
                        },
                        "type": "UserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "pos": 1548,
                            "end": 1553,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 78,
                            "escapedText": "param"
                        },
                        "comment": ""
                    },
                    {
                        "name": "userAdminService",
                        "type": "UserAdminService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<table mat-table matSort [dataSource]=\"user\">\n  <ng-container matColumnDef=\"active\">\n    <th mat-header-cell mat-sort-header *matHeaderCellDef></th>\n    <td mat-cell *matCellDef=\"let user\" class=\"flag-button\">\n      <mat-slide-toggle color=\"primary\" [checked]=\"user.active\" [(ngModel)]=\"user.active\" (change)=\"setUserActiveState(user.id, user.active)\"></mat-slide-toggle>\n    </td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"globalId\">\n    <th mat-header-cell  mat-sort-header *matHeaderCellDef>Capgemini ID</th>\n    <td mat-cell  *matCellDef=\"let user\">{{user.globalId}}</td>\n  </ng-container>\n\n  <ng-container  matColumnDef=\"lastName\">\n    <th mat-header-cell  mat-sort-header *matHeaderCellDef>Name</th>\n    <td mat-cell  *matCellDef=\"let user\">{{user.lastName}}, {{user.firstName}}</td>\n  </ng-container>\n\n  <ng-container  matColumnDef=\"email\">\n    <th mat-header-cell  mat-sort-header *matHeaderCellDef>Email</th>\n    <td mat-cell  *matCellDef=\"let user\">{{ user.email }}</td>\n  </ng-container>\n\n<!--   <ng-container  matColumnDef=\"fte\">\n    <th mat-header-cell  mat-sort-header *matHeaderCellDef>FTE</th>\n    <td mat-cell *matCellDef=\"let user\">{{ user.fte }}</td>\n  </ng-container> -->\n\n  <ng-container  matColumnDef=\"roleId\">\n    <th mat-header-cell  mat-sort-header *matHeaderCellDef>Role</th>\n    <td mat-cell *matCellDef=\"let user\">{{ getRole(user.roleId) }}</td>\n  </ng-container>\n\n  <ng-container  matColumnDef=\"gradeId\">\n    <th mat-header-cell  mat-sort-header *matHeaderCellDef>Grade</th>\n    <td mat-cell *matCellDef=\"let user\">{{ getGrade(user.gradeId) }}</td>\n  </ng-container>\n\n  <ng-container  matColumnDef=\"parentId\">\n    <th mat-header-cell  mat-sort-header *matHeaderCellDef>Teamlead</th>\n    <td mat-cell *matCellDef=\"let user\">{{ getTeamlead(user.parentId) }}</td>\n  </ng-container>\n\n  <ng-container  matColumnDef=\"admin\">\n    <th mat-header-cell  mat-sort-header *matHeaderCellDef>Permissions</th>\n    <td mat-cell *matCellDef=\"let user\">{{ user.admin ? 'Administrator' : '-' }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"edit\">\n    <th mat-header-cell *matHeaderCellDef class=\"action-button\"></th>\n    <td mat-cell *matCellDef=\"let user\" class=\"action-button\" (click)=\"openUserDialog(user)\"><mat-icon>edit</mat-icon></td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"[ 'active', 'globalId', 'lastName', 'email', 'roleId', 'gradeId', 'parentId', 'admin', 'edit']\"></tr>\n  <tr mat-row  *matRowDef=\"let row; columns: [ 'active', 'globalId', 'lastName', 'email', 'roleId', 'gradeId', 'parentId', 'admin','edit'];\" ></tr>\n</table>\n\n<div class=\"button-row\">\n  <button mat-raised-button (click)=\"addNewUser()\" color=\"primary\">\n    <mat-icon>person_add</mat-icon> Add User\n  </button>\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AdminModule",
            "id": "module-AdminModule-81151299b2eb88ec344440f3e2b9f4e8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/admin/admin.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AppRoutingModule } from '../app-routing.module';\nimport { CommonModule } from '@angular/common';\nimport { CoreModule } from '../core/core.module';\nimport { LayoutModule } from '../layout/layout.module';\n\nimport { AdminComponent } from './admin.component';\nimport { UsersComponent  } from './components/users/users.component';\nimport { ProjectsComponent } from './components/projects/projects.component';\nimport { MonthsComponent } from './components/months/months.component';\nimport { TeamsComponent } from './components/teams/teams.component';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { AddMonthDialog } from './dialogs/add-month/add-month.dialog';\nimport { AddProjectDialog } from './dialogs/add-project/add-project.dialog';\nimport { AddUserDialog } from './dialogs/add-user/add-user.dialog';\nimport { AddTeamDialog } from './dialogs/add-team/add-team.dialog';\nimport { ConfirmMessageDialog } from './dialogs/confirm-message/confirm-message.dialog';\n@NgModule({\n  imports: [\n    CommonModule,\n    CoreModule,\n    LayoutModule,\n    FormsModule,\n    ReactiveFormsModule,\n    AppRoutingModule,\n    MatDialogModule,\n  ],\n  providers: [],\n  declarations: [\n\t\tAdminComponent,\n\t\tUsersComponent,\n    ProjectsComponent,\n    MonthsComponent,\n    TeamsComponent,\n    AddProjectDialog,\n    AddMonthDialog,\n    AddUserDialog,\n    AddTeamDialog,\n    ConfirmMessageDialog,\n  ],\n  entryComponents: [\n    AddProjectDialog,\n    AddMonthDialog,\n    TeamsComponent,\n    AddUserDialog,\n    AddTeamDialog,\n    ConfirmMessageDialog,\n  ],\n  exports: [\n    MatExpansionModule,\n  ],\n})\nexport class AdminModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddMonthDialog"
                        },
                        {
                            "name": "AddProjectDialog"
                        },
                        {
                            "name": "AddTeamDialog"
                        },
                        {
                            "name": "AddUserDialog"
                        },
                        {
                            "name": "AdminComponent"
                        },
                        {
                            "name": "ConfirmMessageDialog"
                        },
                        {
                            "name": "MonthsComponent"
                        },
                        {
                            "name": "ProjectsComponent"
                        },
                        {
                            "name": "TeamsComponent"
                        },
                        {
                            "name": "UsersComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "LayoutModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-cbb313e817b15db36e9d2b01c186fde3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { NgModule } from \"@angular/core\";\nimport { AppRoutingModule } from \"./app-routing.module\";\nimport { CoreModule } from \"./core/core.module\";\nimport { LayoutModule } from \"./layout/layout.module\";\nimport { ForecastModule } from \"./forecast/forecast.module\";\nimport { AdminModule } from \"./admin/admin.module\";\nimport { TranslateModule, TranslateLoader } from \"@ngx-translate/core\";\nimport { TranslateHttpLoader } from \"@ngx-translate/http-loader\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { FlexLayoutModule } from \"@angular/flex-layout\";\nimport { AppComponent } from \"./app.component\";\nimport { LoginComponent } from \"./login/login.component\";\nimport { DatePipe } from \"@angular/common\";\nimport { ReactiveFormsModule, FormsModule } from \"@angular/forms\";\nimport { SafeHtmlPipe } from \"./core/pipes/safe-html\";\nimport { ResetPasswordComponent } from \"./reset-password/reset-password.component\";\nimport { DeviceDetectorModule } from \"ngx-device-detector\";\n\n/**\n * AoT requires an exported function for factories\n */\nexport function HttpLoaderFactory(http: HttpClient): TranslateHttpLoader {\n  return new TranslateHttpLoader(http);\n}\n\n@NgModule({\n  declarations: [AppComponent, LoginComponent, ResetPasswordComponent],\n  imports: [\n    BrowserModule,\n    FlexLayoutModule,\n    BrowserAnimationsModule,\n    LayoutModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n    CoreModule,\n    ForecastModule,\n    AdminModule,\n    FormsModule,\n    DeviceDetectorModule.forRoot(),\n    TranslateModule.forRoot({\n      loader: {\n        provide: TranslateLoader,\n        useFactory: HttpLoaderFactory,\n        deps: [HttpClient]\n      }\n    })\n  ],\n  providers: [DatePipe],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "ResetPasswordComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AdminModule"
                        },
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "ForecastModule"
                        },
                        {
                            "name": "LayoutModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-a2eba0fd68b8f40bae03405bf67bb614",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { RoleGuard } from './core/security/role-guard.service';\n\nimport { LoginComponent } from './login/login.component';\nimport { ForecastComponent } from './forecast/forecast.component';\nimport { AdminComponent } from './admin/admin.component';\n\nimport { IndividualComponent } from './forecast/pages/individual/individual.component';\nimport { TeamComponent } from './forecast/pages/team/team.component';\n\n// Currently (June 2019) not possible to use ENV variable in routing module because compodoc doc-generation would fail otherwise\nimport { environment as env } from '../environments/environment';\nimport { PracticeComponent } from './forecast/pages/practice/practice.component';\nimport { ExecutiveComponent } from './forecast/pages/executive/executive.component';\nimport { ResetPasswordComponent } from './reset-password/reset-password.component';\nimport { StaffingComponent } from './forecast/pages/staffing/staffing.component';\nimport { HeadOfPracticesComponent } from './forecast/pages/head-of-practices/head-of-practices.component';\nimport { PracticesComponent } from './forecast/pages/practices/practices.component';\nimport { CanActivate } from '@angular/router';\nimport { FinancialControllerComponent } from './forecast/pages/financial-controller/financial-controller.component';\n\nconst routes: Routes = [\n  {\n    path: 'login',\n    component: LoginComponent,\n  },\n  {\n    path: 'reset-password/:token',\n    component: ResetPasswordComponent,\n  },\n  {\n    path: 'admin', // env.routes.admin\n    component: AdminComponent,\n    canActivate: [RoleGuard],\n    data: {\n      expectedRole: 100, // env.roles.admin,\n    },\n  },\n  {\n    path: 'forecast',\n    component: ForecastComponent,\n    canActivate: [RoleGuard],\n    data: {\n      expectedRole: 0, // env.roles.css,\n    },\n    children: [\n      {\n        path: 'individual/:id',\n        component: IndividualComponent,\n      },\n      {\n        path: 'team/:id',\n        component: TeamComponent,\n        canActivate: [RoleGuard],\n        data: {\n          expectedRole: 1, // env.roles.pdl,\n        },\n      },\n      {\n        path: 'practice/:id',\n        component: PracticeComponent,\n        canActivate: [RoleGuard],\n        data: {\n          expectedRole: 2, // env.roles.pl,\n        },\n      },\n      {\n        path: 'executive/:id',\n        component: ExecutiveComponent,\n        canActivate: [RoleGuard],\n        data: {\n          expectedRole: 3, // env.roles.msl,\n        },\n      },\n      {\n        path: 'executive-detail/:id',\n        component: ExecutiveComponent,\n        canActivate: [RoleGuard],\n        data: {\n          expectedRole: 3, // env.roles.msl,\n        },\n      },\n      {\n        path: 'staffing/:id',\n        component: StaffingComponent,\n        canActivate: [RoleGuard],\n        data: {\n          expectedRole : 3, //env.roles.sm,\n        },\n      },\n      {\n        path: \"head-of-practices/:id\",\n        component: HeadOfPracticesComponent,\n        canActivate: [RoleGuard],\n        data: {\n          expectedRole: 3, //env.roles.hop\n        },\n      },\n      {\n        path: \"practices/:id\",\n        component: PracticesComponent,\n        canActivate: [RoleGuard],\n        data: {\n          expectedRole: 3, //env.roles.hop | sm\n        },\n      },\n      {\n        path: \"financial-controller/:id\",\n        component: FinancialControllerComponent,\n        canActivate: [RoleGuard],\n        data: {\n          expectedRole: 4, //env.roles.fc\n        },\n      },\n    ],\n  },\n  {\n    path: '',\n    redirectTo: '/login',\n    pathMatch: 'full',\n  },\n  {\n    path: '**',\n    redirectTo: '/login',\n  },\n];\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-69ee0e498a72c3e798f236c6137accdd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/core/core.module.ts",
            "methods": [],
            "sourceCode": "import { \n  NgModule, \n  ErrorHandler,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport {\n  HttpClientModule,\n  HttpClientXsrfModule,\n  HTTP_INTERCEPTORS,\n} from '@angular/common/http';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatNativeDateModule, MatRippleModule } from '@angular/material/core';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatListModule } from '@angular/material/list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { CovalentChipsModule } from '@covalent/core/chips';\nimport { CovalentLayoutModule } from '@covalent/core/layout';\nimport { CovalentExpansionPanelModule } from '@covalent/core/expansion-panel';\nimport { CovalentDataTableModule } from '@covalent/core/data-table';\nimport { CovalentSearchModule } from '@covalent/core/search';\nimport { CovalentPagingModule } from '@covalent/core/paging';\nimport { CovalentDialogsModule } from '@covalent/core/dialogs';\nimport { CovalentNotificationsModule } from '@covalent/core/notifications';\nimport { CovalentCommonModule } from '@covalent/core/common';\n\nimport 'hammerjs';\n\nimport { HttpRequestInterceptorService } from './security/httpRequestInterceptor.service';\nimport { RoleGuard } from './security/role-guard.service';\nimport { AuthService } from './security/auth.service';\nimport { BusinessOperationsService } from './shared/business-operations.service';\nimport { PageStateService } from './shared/page-state.service';\nimport { LoginService } from './security/login.service';\nimport { MyErrorHandler } from './errors/error.service';\nimport { DataSharingService } from './shared/data-sharing.service';\n\n@NgModule({\n  imports: [\n    HttpClientModule,\n    HttpClientXsrfModule,\n    CdkTableModule,\n    RouterModule,\n    BrowserAnimationsModule,\n  ],\n  exports: [\n    CommonModule,\n    MatAutocompleteModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    CdkTableModule,\n    CovalentChipsModule,\n    CovalentLayoutModule,\n    CovalentExpansionPanelModule,\n    CovalentDataTableModule,\n    CovalentSearchModule,\n    CovalentPagingModule,\n    CovalentNotificationsModule,\n    CovalentCommonModule,\n    CovalentDialogsModule,\n  ],\n  declarations: [],\n  providers: [\n    RoleGuard,\n    LoginService,\n    AuthService,\n    BusinessOperationsService,\n    PageStateService,\n    DataSharingService,\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: HttpRequestInterceptorService,\n      multi: true,\n    },\n    {\n      provide: ErrorHandler,\n      useClass: MyErrorHandler,\n    }\n  ],\n})\nexport class CoreModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthService"
                        },
                        {
                            "name": "BusinessOperationsService"
                        },
                        {
                            "name": "DataSharingService"
                        },
                        {
                            "name": "HttpRequestInterceptorService"
                        },
                        {
                            "name": "LoginService"
                        },
                        {
                            "name": "PageStateService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ForecastModule",
            "id": "module-ForecastModule-c23adbcda736ec6f078dacc0ffd20187",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/forecast/forecast.module.ts",
            "methods": [],
            "sourceCode": "import { TranslateModule } from \"@ngx-translate/core\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { AppRoutingModule } from \"../app-routing.module\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { CoreModule } from \"../core/core.module\";\r\nimport { LayoutModule } from \"../layout/layout.module\";\r\nimport { MatBottomSheetModule } from \"@angular/material/bottom-sheet\";\r\nimport { MatDialogModule } from \"@angular/material/dialog\";\r\n\r\nimport { ForecastComponent } from \"./forecast.component\";\r\nimport { IndividualComponent } from \"./pages/individual/individual.component\";\r\nimport { TeamComponent } from \"./pages/team/team.component\";\r\n\r\nimport { FcEntryComponent } from \"./components/fc-entry/fc-entry.component\";\r\nimport { FcProjectComponent } from \"./components/fc-project/fc-project.component\";\r\nimport { FcEntrySummaryComponent } from \"./components/fc-entry-summary/fc-entry-summary.component\";\r\nimport { TeamleadSummaryComponent } from \"./components/teamlead-summary/teamlead-summary.component\";\r\nimport { TeamleadMonthComponent } from \"./components/teamlead-month/teamlead-month.component\";\r\nimport { PracticeComponent } from \"./pages/practice/practice.component\";\r\n\r\nimport { ConfirmMessageDialog } from \"./dialogs/confirm-message/confirm-message.dialog\";\r\nimport { ExportCsvDialog } from \"./dialogs/export-csv/export-csv.dialog\";\r\nimport { ProjectRequestDialog } from \"./dialogs/add-project/project-request.dialog\";\r\nimport { ExecutiveComponent } from \"./pages/executive/executive.component\";\r\nimport { ExecutiveDetailComponent } from \"./components/executive-detail/executive-detail.component\";\r\nimport { ExecutiveSummaryComponent } from \"./components/executive-summary/executive-summary.component\";\r\n\r\nimport { NgxPowerBiModule } from \"ngx-powerbi\";\r\nimport { ExecutiveFcEntryComponent } from \"./dialogs/executive-fc-entry/executive-fc-entry.component\";\r\nimport { FcEntryDetailDialogComponent } from \"./components/executive-detail/fc-entry-detail-dialog.component\";\r\nimport { ExecutiveChartComponent } from \"./components/executive-chart/executive-chart.component\";\r\nimport { ExecutiveStatsComponent } from './components/executive-stats/executive-stats.component';\r\n\r\nimport { StaffingComponent } from \"./pages/staffing/staffing.component\";\r\nimport { StaffingOverviewComponent } from \"./components/staffing-overview/staffing-overview.component\";\r\nimport { HeadOfPracticesComponent } from \"./pages/head-of-practices/head-of-practices.component\";\r\nimport { PracticesComponent } from \"./pages/practices/practices.component\";\r\nimport { FinancialControllerComponent } from \"./pages/financial-controller/financial-controller.component\";\r\nimport { FinancialControllerOverviewComponent } from \"./components/financial-controller-overview/financial-controller-overview.component\";\r\nimport { FcEntrySummaryVacationWarningComponent } from \"./components/fc-entry-summary/vacation-warning/fc-entry-summary-vacation-warning.component\";\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatDialogModule,\r\n    MatBottomSheetModule,\r\n    CoreModule,\r\n    LayoutModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    AppRoutingModule,\r\n    TranslateModule,\r\n    NgxPowerBiModule\r\n  ],\r\n  providers: [],\r\n  declarations: [\r\n    ForecastComponent,\r\n    IndividualComponent,\r\n    TeamComponent,\r\n    PracticeComponent,\r\n    FcEntryComponent,\r\n    FcProjectComponent,\r\n    FcEntrySummaryComponent,\r\n    TeamleadMonthComponent,\r\n    TeamleadSummaryComponent,\r\n    ExecutiveComponent,\r\n    ExecutiveDetailComponent,\r\n    ExecutiveSummaryComponent,\r\n    ConfirmMessageDialog,\r\n    ExportCsvDialog,\r\n    ProjectRequestDialog,\r\n    ExecutiveFcEntryComponent,\r\n    FcEntryDetailDialogComponent,\r\n    FcEntrySummaryVacationWarningComponent,\r\n    PracticesComponent,\r\n    ExecutiveChartComponent,\r\n    ExecutiveStatsComponent,\r\n    StaffingComponent,\r\n    StaffingOverviewComponent,\r\n    HeadOfPracticesComponent,\r\n    FinancialControllerComponent,\r\n    FinancialControllerOverviewComponent,\r\n  ],\r\n  entryComponents: [\r\n    ConfirmMessageDialog,\r\n    ExportCsvDialog,\r\n    ProjectRequestDialog,\r\n    ExecutiveFcEntryComponent,\r\n    FcEntryDetailDialogComponent,\r\n    FcEntrySummaryVacationWarningComponent,\r\n    ExecutiveChartComponent\r\n  ],\r\n  exports: []\r\n})\r\nexport class ForecastModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ConfirmMessageDialog"
                        },
                        {
                            "name": "ExecutiveChartComponent"
                        },
                        {
                            "name": "ExecutiveComponent"
                        },
                        {
                            "name": "ExecutiveDetailComponent"
                        },
                        {
                            "name": "ExecutiveFcEntryComponent"
                        },
                        {
                            "name": "ExecutiveStatsComponent"
                        },
                        {
                            "name": "ExecutiveSummaryComponent"
                        },
                        {
                            "name": "ExportCsvDialog"
                        },
                        {
                            "name": "FcEntryComponent"
                        },
                        {
                            "name": "FcEntryDetailDialogComponent"
                        },
                        {
                            "name": "FcEntrySummaryComponent"
                        },
                        {
                            "name": "FcEntrySummaryVacationWarningComponent"
                        },
                        {
                            "name": "FcProjectComponent"
                        },
                        {
                            "name": "FinancialControllerComponent"
                        },
                        {
                            "name": "FinancialControllerOverviewComponent"
                        },
                        {
                            "name": "ForecastComponent"
                        },
                        {
                            "name": "HeadOfPracticesComponent"
                        },
                        {
                            "name": "IndividualComponent"
                        },
                        {
                            "name": "PracticeComponent"
                        },
                        {
                            "name": "PracticesComponent"
                        },
                        {
                            "name": "ProjectRequestDialog"
                        },
                        {
                            "name": "StaffingComponent"
                        },
                        {
                            "name": "StaffingOverviewComponent"
                        },
                        {
                            "name": "TeamComponent"
                        },
                        {
                            "name": "TeamleadMonthComponent"
                        },
                        {
                            "name": "TeamleadSummaryComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        },
                        {
                            "name": "LayoutModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LayoutModule",
            "id": "module-LayoutModule-3487a56040c1b2655092789e88164b11",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/layout/layout.module.ts",
            "methods": [],
            "sourceCode": "import { TranslateModule } from \"@ngx-translate/core\";\nimport { CoreModule } from \"../core/core.module\";\nimport { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\n\nimport { AppRoutingModule } from \"../app-routing.module\";\n\nimport { HeaderComponent } from \"./header/header.component\";\nimport { FooterComponent } from \"./footer/footer.component\";\nimport { TdMediaService } from \"@covalent/core/media\";\nimport { GetStarted } from \"./getStartedModal/get-started.component\";\nimport { MatDialogModule } from \"@angular/material/dialog\";\nimport { MatStepperModule } from \"@angular/material/stepper\";\nimport { FaqModalComponent } from \"./faq-modal/faq-modal.component\";\nimport { SafeHtmlPipe } from \"../core/pipes/safe-html\";\nimport { OrganizationDialogComponent } from \"./organizationModal/organization-dialog.component\";\nimport { CdkTreeModule } from \"@angular/cdk/tree\";\nimport { MatTreeModule } from \"@angular/material/tree\";\nimport { FeedBackDialogComponent } from \"./dialogs/feedback/feedback-dialog.component\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatDialogModule,\n    CoreModule,\n    AppRoutingModule,\n    TranslateModule,\n    MatStepperModule,\n    CdkTreeModule,\n    MatTreeModule,\n  ],\n  providers: [TdMediaService],\n  declarations: [\n    HeaderComponent,\n    FooterComponent,\n    GetStarted,\n    FaqModalComponent,\n    SafeHtmlPipe,\n    OrganizationDialogComponent,\n    FeedBackDialogComponent,\n  ],\n  exports: [HeaderComponent, FooterComponent],\n  entryComponents: [GetStarted, FaqModalComponent, OrganizationDialogComponent],\n})\nexport class LayoutModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FaqModalComponent"
                        },
                        {
                            "name": "FeedBackDialogComponent"
                        },
                        {
                            "name": "FooterComponent"
                        },
                        {
                            "name": "GetStarted"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "OrganizationDialogComponent"
                        },
                        {
                            "name": "SafeHtmlPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FooterComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "defaultValue": "{\r\n  production: false,\r\n  version: 'dev',\r\n  api: 'https://forecastr-test.at.capgemini.com/forecastr-api/api/v1/',\r\n  security: 'jwt',\r\n  authPath: 'auth',\r\n  usersPath: 'users',\r\n  utilsPath: 'utilities',\r\n  teamUtilsPath: 'teams',\r\n  projectsPath: 'projects',\r\n  monthsPath: 'months',\r\n  rolePath: 'roles',\r\n  gradePath: 'grades',\r\n  forecastsPath: 'forecasts',\r\n  lockedPath: 'locked',\r\n  savedPath: 'saved',\r\n  teamPath: 'team',\r\n  executivePath: 'company',\r\n  resetPasswordPath: 'password/reset',\r\n  roles: {\r\n    css: 0,\r\n    pdl: 1,\r\n    pl: 2,\r\n    msl: 3,\r\n    fc: 4,\r\n    sm: 5,\r\n    hop: 6,\r\n    admin: 100,\r\n  },\r\n  routes: {\r\n    admin: 'admin',\r\n  },\r\n  projectTypes: {\r\n    default: 0,\r\n    businessdays: 1,\r\n    trainingdays: 2,\r\n    vacationdays: 3,\r\n    benchdays: 4,\r\n    nonbillable: 5,\r\n  },\r\n}",
                "rawdescription": "Define global environment variables",
                "description": "<p>Define global environment variables</p>\n"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type",
                "defaultValue": "{\n  production: true,\n  version: 'prod',\n  api: 'https://forecastr-test.at.capgemini.com/forecastr-api/api/v1/',\n  security: 'jwt',\n  authPath: 'auth',\n  usersPath: 'users',\n  utilsPath: 'utilities',\n  teamUtilsPath: 'teams',\n  projectsPath: 'projects',\n  monthsPath: 'months',\n  rolePath: 'roles',\n  gradePath: 'grades',\n  forecastsPath: 'forecasts',\n  lockedPath: 'locked',\n  savedPath: 'saved',\n  teamPath: 'team',\n  executivePath: 'company',\n  resetPasswordPath: 'password/reset',\n  roles: {\n    css: 0,\n    pdl: 1,\n    pl: 2,\n    msl: 3,\n    fc: 4,\n    admin: 100,\n  },\n  routes: {\n    admin: 'admin',\n  },\n  projectTypes: {\n    default: 0,\n    nonbillable: 5,\n    businessdays: 1,\n    trainingdays: 2,\n    vacationdays: 3,\n    benchdays: 4,\n  },\n}",
                "rawdescription": "Define global environment variables for prod version",
                "description": "<p>Define global environment variables for prod version</p>\n"
            },
            {
                "name": "faqData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/faq-modal/faqData.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n    {\n        \"question\": \"<p>1. What does <strong> FTE </strong> mean?</p>\",\n        \"answer\": `<ul>\n        <li>FTE stands for Full Time Equivalent and is calculated as follows:</li>\n        </ul>\n        <p><img class=\"image\" src=\"assets/img/faq/f0.png\" /></p>\n        <ul>\n        <li>\n        <p>For example:</p>\n        <p>If you work 4 full days per week (32 hours) you are a \"Full time equivalent\" of 0,8:</p>\n        <p>[32/40= 0,8 = 80%]. This means that you should slide the bar to 80.<br /><br /></p>\n        <img class=\"image\" src=\"assets/img/faq/f1.png\" /><br /> By doing this, also the number of expected working days on the right side above the comment field will change accordingly</li>\n        </ul>`,\n    },\n    {\n        \"question\": \"<p>2. What do <strong>ARVE</strong> and <strong>URVE</strong> mean? How are they calculated?</p>\",\n        \"answer\": `<ul>\n        <li><strong>ARVE </strong>(Assignment Rate Vacation Excluded): The percentage utilization of an employee on both internal and external projects. Vacation days are deducted beforehand from the possible workdays of the period.</li>\n        </ul>\n        <img class=\"image\" src=\"assets/img/faq/f4.png\" style=\"max-width: 50vw;\"/>\n        <ul>\n        <li><strong>URVE </strong>(Utilization Rate Vacation Excluded): The percentage workload of an employee on externally billable projects. Vacation days are deducted beforehand from the possible workdays in the period.</li>\n        </ul>\n        <img class=\"image\" src=\"assets/img/faq/f5.png\" style=\"max-width: 50vw;\"/>\n        <p>&nbsp;</p>\n        <ul>\n        <li>For example:<br /><br />\n        <table style=\"height: 226px;\" width=\"281\">\n        <tbody>\n        <tr>\n        <td style=\"width: 213px;\">\n        <p>Expected working days</p>\n        </td>\n        <td style=\"width: 52px;\">\n        <p>20</p>\n        </td>\n        </tr>\n        <tr>\n        <td style=\"width: 213px;\">\n        <p>Billable project days</p>\n        </td>\n        <td style=\"width: 52px;\">\n        <p>5</p>\n        </td>\n        </tr>\n        <tr>\n        <td style=\"width: 213px;\">\n        <p>Non-billable project days</p>\n        </td>\n        <td style=\"width: 52px;\">\n        <p>6</p>\n        </td>\n        </tr>\n        <tr>\n        <td style=\"width: 213px;\">\n        <p>Bench Time</p>\n        </td>\n        <td style=\"width: 52px;\">\n        <p>3</p>\n        </td>\n        </tr>\n        <tr>\n        <td style=\"width: 213px;\">\n        <p>Business Development Days</p>\n        </td>\n        <td style=\"width: 52px;\">\n        <p>4</p>\n        </td>\n        </tr>\n        <tr>\n        <td style=\"width: 213px;\">\n        <p>Vacation Days</p>\n        </td>\n        <td style=\"width: 52px;\">\n        <p>2</p>\n        </td>\n        </tr>\n        </tbody>\n        </table>\n        </li>\n        </ul>\n        <img class=\"ff\" src=\"assets/img/faq/f6.png\" style=\"max-width: 50vw;\"/>`,\n    },\n    {\n        \"question\": \"<p>3. What does <strong>ARVE/URVE Relevance</strong> mean?</p>\",\n        \"answer\": ` <p>If you are a Student Consultant and working on non-billable projects the <strong>ARVE/URVE Relevance</strong> button is automatically disabled. This means that your ARVE and URVE are set to 0. Check question 12 for further explanation.</p>`,\n    },\n    {\n        \"question\": \"<p>4. Why are <strong>Austria Vacation</strong>, <strong>AT_Training CSS</strong> and <strong>Bench Time_non-client_APPS </strong>default projects?</p>\",\n        \"answer\": `<p></p>This is been decided by the Development Team.</p>`,\n    },\n    {\n        \"question\": \"<p>5. What is the <strong>forecastr risk probability</strong>?</p>\",\n        \"answer\": ` <p><img class=\"image\" src=\"assets/img/faq/f2.png\" /></p><p>It is the chance that a risk will occur.</p>\n        <p>Here is an explanation of the three possible risk probabilities.</p>\n        <ul>\n        <li><strong>Firm</strong>: Firm is used for fixed (\"fixed\") commitments or tasks. This includes tasks and assignments that have already been confirmed by the customer and discussed with your PDL. For example: official confirmation by signing a contract or approval of leave in DPW.</li>\n        <li><strong>Named Likely</strong>: Named Likely is used when there is already a verbal commitment but the project formalities and onboarding are not yet completed. For example: ISOW has not yet been started.</li>\n        <li><strong>Unnamed</strong>: Unnamed is used if there are no concrete commitments yet. For example: bench time, training and business development, as well as interview processes are booked under Unnamed.</li>\n        </ul>\n        <p>&nbsp;</p>\n        <p>It is important to select one of the above-mentioned risk probabilities for each forecasted project.</p>`,\n    },\n    {\n        \"question\": \"<p>6. How do I forecast <strong>Austria Vacation </strong>if I am not (exactly) sure when I will be on vacation? Which risk probability do I choose?</p>\",\n        \"answer\": `\n        <p>If you are not sure when you will be on vacation, you should choose either</p>\n        <ul>\n        <li><strong>Named Likely</strong>, when you know when it will be, but it hasn&rsquo;t been confirmed yet or</li>\n        <li><strong>Unnamed</strong>, when you don&rsquo;t know when or if it will take place at all. (I might take a day off next month, but I am not sure yet.)</li>\n        </ul>\n       As soon as you have requested the exact vacation days in DPW and they have been approved by your PDL, you can change the risk probability to <strong>Firm</strong>.</strong>\n        `,\n    },\n    {\n        \"question\": \"<p>7. How do I forecast <strong>Bench Time_non-client_APPS</strong>? Which risk probability do I choose?</p>\",\n        \"answer\": `<p>If you are not involved in a project, you choose either <strong>AT_CSS_billable time interco.</strong> or <strong>AT_CSS_billable time external</strong>\n                   <ul>\n                   <li><i>First Month</i>: 5 days</li>\n                   <li><i>Second Month</i>: 10 days</li>\n                   <li><i>Third Month</i>: 15 days</li>\n                   <li><i>Other Months</i>: 15 days</li>\n                   </ul>\n                   The Risk Probability is <strong>Unnamed<strong>.</p>`,\n    },\n    {\n        \"question\": \"<p>8. How do I forecast a project I cannot find?</p>\",\n        \"answer\": `<p>There are two projects you can choose in that case:</p>\n        <ul>\n        <li><strong>AT_CSS_billable time interco. </strong>for projects outside Austria.</li>\n        <li><strong>AT_CSS_billable time external </strong>for projects in Austria.</li>\n        </ul>\n        <p>The project names may seem a bit confusing. Check question 10 for further explanation.</p>`,\n    },\n    {\n        \"question\": \"<p>9. How do I forecast a project when I don&rsquo;t know the exact number of days I will be working on this project?</p>\",\n        \"answer\": `<p><img class=\"image\" src=\"assets/img/faq/f3.png\" style=\"max-width: 50vw;\"/></p><p>If the days you work on a project vary each month depending on the workload, you can fill-in the number of fixed project days, mark if a project is billable or not, and choose the forecast probability <strong>Firm. </strong>After this, try to estimate the varying project days, mark if a project is billable or not and choose the forecast probability <strong>Named Likely </strong>as shown in the screenshot below.</p>`,\n    },\n    {\n        \"question\": \"<p>10. What is the difference between <strong>internal </strong>and<strong> external revenue</strong>?</p>\",\n        \"answer\": `<ul>\n        <li><strong>External revenue</strong>: Sales generated with projects <strong>in</strong> Austria.</li>\n        <li><strong>Internal revenue</strong>: Sales generated with projects <strong>outside</strong> Austria.</li>\n        </ul>`,\n    },\n    {\n        \"question\": \"<p>11. What is the difference between <strong>billable </strong>and<strong> non-billable projects</strong>?</p>\",\n        \"answer\": `<p>All externally chargeable project days. If days are booked on a customer project, but the customer does not pay for it (e.g.: overrun for fixed price project or training), they do not count as billable project days.</p>`,\n    },\n    {\n        \"question\": \"<p>12. Why does (sometimes) the number of <strong>Bench Time non-client APPS change</strong> after saving my forecast?</p>\",\n        \"answer\": `<p>If you forecasted less than expected working days, the system automatically adds the remaining days to the <strong>Bench Time non-client APPS change.</strong></p>`,\n    },\n    {\n        \"question\": \"<p>13. How do I forecast <strong>Team Meetings</strong>?</p>\",\n        \"answer\": `<p>Team Meetings are counted to the default project 100528772 - Bench Time_non-client_APPS.</p>\n        <p>As the forecast is done on a daily basis, you can use the following formula:</p>\n        <img class=\"ff\" src=\"assets/img/faq/f7.png\" style=\"max-width: 50vw;\"/>\n        <p>Use a decimal dot instead of a comma.</p>`,\n    },\n    {\n        \"question\": \"<p>14. How do I forecast <strong>sickness and educational absence</strong>?</p>\",\n        \"answer\" : \"<p>Sickness and educational absence should be forecasted as Bench Time_non_client_APPS.</p>\"\n    }\n]"
            },
            {
                "name": "getStartedData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/getStartedModal/getStartedData.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n\n    \"css\":[\n        {\n            \"title\":\"Get Started\",\n            \"html\": `<p><span>The following steps will help you get started on how to create your utilization forecast for the upcoming months.</span></p>`,\n            \"image\": \"0_css.png\"\n        },\n        {\n            \"title\":\"Select a month\",\n            \"html\": `<p><span>Choose the month for which the forecast will be created.<br /></span></p>`,\n            \"image\": \"1_css.png\"\n        },\n        {\n            \"title\":\"Forecast expected Vacation, Bench Time and Training Days\",\n            \"html\": `<p>Fill-in the number of <strong>Vacation, Bench Time  </strong>and<strong> Training</strong> days you have planned for the selected month, as well as the forecast probability.</p><br>\n            <p>Forecast Probabilities:</p>\n            <ul>\n            <li><strong>Firm</strong>: I am sure I will be part of this event.</li>\n            <li><strong>Named Likely</strong>: I know the event, but it hasn&rsquo;t been confirmed yet.</li>\n            <li><strong>Unnamed</strong>: I don&rsquo;t know the event, or if it will take place.</li>\n            </ul>`,\n            \"image\": \"2_css.png\"\n        },\n        {\n            \"title\":\"Forecast client projects\",\n            \"html\": `<p>Use the <strong>Add Project </strong>button to forecast additional client projects. Fill-in the number of project days, mark if a project is billable or not, and choose the forecast probability accordingly.</p><br>\n            <p>Forecast Probabilities:</p>\n            <ul>\n            <li><strong>Firm</strong>: I am sure I will be on this project;</li>\n            <li><strong>Named Likely</strong>: I know the opportunity, but the contract hasn&rsquo;t been signed yet;</li>\n            <li><strong>Unnamed</strong>: I don&rsquo;t know on which project I will be working.</li>\n            </ul>\n            <p><strong>Hint:</strong> Quickly navigate through the fields by only using the keyboard. E.g. use <strong>Tab </strong>to jump from one field to another, <strong>Enter</strong> to select a project and <strong>Space </strong>to select or deselect a choice field</p>`,\n            \"image\": \"3_css.png\"\n        },\n        {\n            \"title\":\"Review the forecast summary\",\n            \"html\": `<p>Review the summary panel before you <strong>Save and Submit </strong>your forecast entries.&nbsp;</p>\n            <ul>\n            <li><strong>ARVE</strong>: The percentage workload of an employee on externally billable projects.</li>\n            <li><strong>URVE</strong>: The percentage utilization of an employee on both internal and external projects (vacation days are deducted beforehand from the possible working days).\n            </li>\n            </ul>`,\n            \"image\": \"4_css.png\"\n        },\n    ],\n\n    \"pdl\" :[\n        {\n            \"title\":\"Get Started\",\n            \"html\": `<p><span lang=\"EN-US\">The following steps will help you get started on how to create the utilization forecast for yourself or for your team for the upcoming months.</span></p>`,\n            \"image\": \"0_pdl.png\"\n        },\n        {\n            \"title\":\"Select a month\",\n            \"html\": `<p>Choose the month for which the forecast will be created.</p>`,\n            \"image\": \"1_pdl.png\"\n        },\n        {\n            \"title\":\"Forecast expected Vacation, Bench Time and Training Days\",\n            \"html\": `<p>Fill-in the number of <strong>Vacation, Bench Time </strong>and<strong> Training</strong> days you have planned for the selected month, as well as the forecast probability.</p><br>\n            <p>Forecast Probabilities:</p>\n            <ul>\n            <li><strong>Firm</strong>: I am sure I will be part of this event.</li>\n            <li><strong>Named Likely</strong>: I know the event, but it hasn&rsquo;t been confirmed yet.</li>\n            <li><strong>Unnamed</strong>: I don&rsquo;t know the event, or if it will take place.</li>\n            </ul>`,\n            \"image\": \"2_pdl.png\"\n        },\n        {\n            \"title\":\"Forecast client projects\",\n            \"html\": `<p>Use the <strong>Add Project </strong>button to forecast additional client projects. Fill-in the number of project days, mark if a project is billable or not, fill-in the Charge Out Rate (COR), which is only visible for teamleads. Mark if a project is external or internal revenue, and choose the forecast probability accordingly.</p><br>\n            <p>Forecast Probabilities:</p>\n            <ul>\n            <li><strong>Firm</strong>: I am sure I will be on this project.</li>\n            <li><strong>Named Likely</strong>: I know the opportunity, but the contract hasn&rsquo;t been signed yet.</li>\n            <li><strong>Unnamed</strong>: I don&rsquo;t know on which project I will be working.</li>\n            </ul>\n            <p><strong>Hint:</strong> Quickly navigate through the fields by only using the keyboard. E.g. use <strong>Tab </strong>to jump from one field to another, <strong>Enter</strong> to select a project and <strong>Space </strong>to select or deselect a choice field.</p>`,\n            \"image\": \"3_pdl.png\"\n        },\n        {\n            \"title\":\"Review the forecast summary\",\n            \"html\": `<p>Review the summary panel before you <strong>Save and Submit </strong>your forecast entries. <br /></p>\n            <ul>\n            <li><strong>ARVE</strong>: The percentage workload of an employee on externally billable projects.</li>\n            <li><strong>URVE</strong>: The percentage utilization of an employee on both internal and external projects (vacation days are deducted beforehand from the possible working days).</li>\n            </ul>`,\n            \"image\": \"4_pdl.png\"\n        },\n        {\n            \"title\":\"Select the team view\",\n            \"html\": `<p>Switch between your individual view and the team view by using the upper-right corner toggle buttons.</p>`,\n            \"image\": \"5_pdl.png\"\n        },\n        {\n            \"title\":\"Review the locks\",\n            \"html\": `<p>The Lock icon with standing CSS below means, that you as the PDL must submit this Forecast. The Lock icon without any text means, that you have already submitted this Forecast.</p>`,\n            \"image\": \"6_pdl.png\"\n        },\n        {\n            \"title\":\"Review and update the team forecast\",\n            \"html\": `<p>Expand and update your team&rsquo;s utilization forecast. Fill-in the COR, mark if a project is external or internal revenue, and <strong>Submit</strong> the forecast for each team member individually.</p><br> <p> Once a forecast is submitted, it becomes <strong>locked</strong> and cannot be updated by the team member. Locked forecast entries can easily be unlocked using the <strong>Unlock </strong>button.</p>`,\n            \"image\": \"7_pdl.png\"\n        },\n        {\n            \"title\":\"Review the team forecast summary\",\n            \"html\": `<p>Review the summary panel before you <strong>Export </strong>your team&rsquo;s forecast entries. </p>\n            <ul>\n            <li>\n            <strong>ARVE</strong>: The average workload of all team members on externally billable projects.\n            </li>\n            <li><strong>URVE</strong>: The average utilization of all team members on both internal and external projects (vacation days are deducted beforehand from the possible working days).</li>\n            <li><strong>ROS</strong>: Revenue Own Staff.</li>\n            </ul>`,\n            \"image\": \"8_pdl.png\"\n        },\n       \n        \n    ],  \n    \"pl\":[\n        {\n            \"title\":\"Get Started\",\n            \"html\": `<p><span>The following steps will help you get started on how to create the utilization forecast for yourself or for your team for the upcoming months.</span></p>`,\n            \"image\": \"0_pl.png\"\n        },\n        {\n            \"title\":\"Select a month\",\n            \"html\": `<p>Choose the month for which the forecast will be created.</p>`,\n            \"image\": \"1_pl.png\"\n        },\n        {\n            \"title\":\"Forecast expected Vacation, Bench Time and Training Days\",\n            \"html\": `<p>Fill-in the number of <strong>Vacation, Bench Time </strong>and<strong> Training</strong> days you have planned for the selected month, as well as the forecast probability.</p><br>`,\n            \"image\": \"2_pl.png\"\n        }, {\n            \"title\":\"Forecast client projects\",\n            \"html\": `<p>Use the <strong>Add Project</strong> button to forecast additional client projects. Fill-in the number of project days, mark if a project is billable or not, fill-in the Charge Out Rate (COR), which is only visible for you as a PDL/PL. Mark if a project is external or internal revenue and choose the forecast probability accordingly.</p>\n            <p><strong>Hint:</strong> Quickly navigate through the fields by only using the keyboard. E.g. use <strong>Tab </strong>to jump from one field to another, <strong>Enter</strong> to select a project and <strong>Space </strong>to select or deselect a choice field.</p>`,\n            \"image\": \"3_pl.png\"\n        }, {\n            \"title\":\"Review the forecast summary\",\n            \"html\": `<p>Review the summary panel before you <strong>Save </strong>your forecast entries. <br /></p>`,\n            \"image\": \"4_pl.png\"\n        },\n        {\n            \"title\":\"Select the team view\",\n            \"html\": `<p>Switch between your individual view and the team view by using the upper-right corner toggle buttons.</p>`,\n            \"image\": \"5_pl.png\"\n        },{\n            \"title\":\"Review and update the team forecast\",\n            \"html\": `<p>Expand and update your team&rsquo;s utilization forecast. Fill-in the COR, mark if a project is external or internal revenue, and <strong>Submit</strong> the forecast for each team member individually.</p><br> <p> Once a forecast is submitted, it becomes <strong>locked</strong> and cannot be updated by the team member. Locked forecast entries can easily be unlocked using the <strong>Unlock </strong>button.</p>`,\n            \"image\": \"6_pl.png\"\n        },\n        {\n            \"title\":\"Review the team forecast summary\",\n            \"html\": `<p>Review the summary panel before you <strong>Export </strong>your team&rsquo;s forecast entries. </p>`,\n            \"image\": \"7_pl.png\"\n        },\n        {\n            \"title\":\"Select the practice lead view\",\n            \"html\": `<p>Switch between your individual, team and practice lead view using the upper-right corner toggle buttons. </p>`,\n            \"image\": \"8_pl.png\"\n        },\n        {\n            \"title\":\"Review and update your team members’ forecasts.\",\n            \"html\": `<p>Expand to update the utilization forecasts. </p>`,\n            \"image\": \"9_pl.png\"\n        },\n        {\n            \"title\":\"Review the forecast summary and submit your team members’ forecasts.\",\n            \"html\": `<p>Review and submit all forecast entries to the Market Segment Lead.</p>`,\n            \"image\": \"10_pl.png\"\n        },\n    ]\n}",
                "rawdescription": "Data for getStarted",
                "description": "<p>Data for getStarted</p>\n"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "TREE_DATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/organizationModal/organization-dialog.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HierarchyNode[]",
                "defaultValue": "[]"
            }
        ],
        "functions": [
            {
                "name": "HttpLoaderFactory",
                "file": "src/app/app.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>AoT requires an exported function for factories</p>\n",
                "args": [
                    {
                        "name": "http",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "TranslateHttpLoader",
                "jsdoctags": [
                    {
                        "name": "http",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "passwordMatcherValidator",
                "file": "src/app/reset-password/reset-password.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "control",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "literal type | null",
                "jsdoctags": [
                    {
                        "name": "control",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "defaultValue": "{\r\n  production: false,\r\n  version: 'dev',\r\n  api: 'https://forecastr-test.at.capgemini.com/forecastr-api/api/v1/',\r\n  security: 'jwt',\r\n  authPath: 'auth',\r\n  usersPath: 'users',\r\n  utilsPath: 'utilities',\r\n  teamUtilsPath: 'teams',\r\n  projectsPath: 'projects',\r\n  monthsPath: 'months',\r\n  rolePath: 'roles',\r\n  gradePath: 'grades',\r\n  forecastsPath: 'forecasts',\r\n  lockedPath: 'locked',\r\n  savedPath: 'saved',\r\n  teamPath: 'team',\r\n  executivePath: 'company',\r\n  resetPasswordPath: 'password/reset',\r\n  roles: {\r\n    css: 0,\r\n    pdl: 1,\r\n    pl: 2,\r\n    msl: 3,\r\n    fc: 4,\r\n    sm: 5,\r\n    hop: 6,\r\n    admin: 100,\r\n  },\r\n  routes: {\r\n    admin: 'admin',\r\n  },\r\n  projectTypes: {\r\n    default: 0,\r\n    businessdays: 1,\r\n    trainingdays: 2,\r\n    vacationdays: 3,\r\n    benchdays: 4,\r\n    nonbillable: 5,\r\n  },\r\n}",
                    "rawdescription": "Define global environment variables",
                    "description": "<p>Define global environment variables</p>\n"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "defaultValue": "{\n  production: true,\n  version: 'prod',\n  api: 'https://forecastr-test.at.capgemini.com/forecastr-api/api/v1/',\n  security: 'jwt',\n  authPath: 'auth',\n  usersPath: 'users',\n  utilsPath: 'utilities',\n  teamUtilsPath: 'teams',\n  projectsPath: 'projects',\n  monthsPath: 'months',\n  rolePath: 'roles',\n  gradePath: 'grades',\n  forecastsPath: 'forecasts',\n  lockedPath: 'locked',\n  savedPath: 'saved',\n  teamPath: 'team',\n  executivePath: 'company',\n  resetPasswordPath: 'password/reset',\n  roles: {\n    css: 0,\n    pdl: 1,\n    pl: 2,\n    msl: 3,\n    fc: 4,\n    admin: 100,\n  },\n  routes: {\n    admin: 'admin',\n  },\n  projectTypes: {\n    default: 0,\n    nonbillable: 5,\n    businessdays: 1,\n    trainingdays: 2,\n    vacationdays: 3,\n    benchdays: 4,\n  },\n}",
                    "rawdescription": "Define global environment variables for prod version",
                    "description": "<p>Define global environment variables for prod version</p>\n"
                }
            ],
            "src/app/layout/faq-modal/faqData.ts": [
                {
                    "name": "faqData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/faq-modal/faqData.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n    {\n        \"question\": \"<p>1. What does <strong> FTE </strong> mean?</p>\",\n        \"answer\": `<ul>\n        <li>FTE stands for Full Time Equivalent and is calculated as follows:</li>\n        </ul>\n        <p><img class=\"image\" src=\"assets/img/faq/f0.png\" /></p>\n        <ul>\n        <li>\n        <p>For example:</p>\n        <p>If you work 4 full days per week (32 hours) you are a \"Full time equivalent\" of 0,8:</p>\n        <p>[32/40= 0,8 = 80%]. This means that you should slide the bar to 80.<br /><br /></p>\n        <img class=\"image\" src=\"assets/img/faq/f1.png\" /><br /> By doing this, also the number of expected working days on the right side above the comment field will change accordingly</li>\n        </ul>`,\n    },\n    {\n        \"question\": \"<p>2. What do <strong>ARVE</strong> and <strong>URVE</strong> mean? How are they calculated?</p>\",\n        \"answer\": `<ul>\n        <li><strong>ARVE </strong>(Assignment Rate Vacation Excluded): The percentage utilization of an employee on both internal and external projects. Vacation days are deducted beforehand from the possible workdays of the period.</li>\n        </ul>\n        <img class=\"image\" src=\"assets/img/faq/f4.png\" style=\"max-width: 50vw;\"/>\n        <ul>\n        <li><strong>URVE </strong>(Utilization Rate Vacation Excluded): The percentage workload of an employee on externally billable projects. Vacation days are deducted beforehand from the possible workdays in the period.</li>\n        </ul>\n        <img class=\"image\" src=\"assets/img/faq/f5.png\" style=\"max-width: 50vw;\"/>\n        <p>&nbsp;</p>\n        <ul>\n        <li>For example:<br /><br />\n        <table style=\"height: 226px;\" width=\"281\">\n        <tbody>\n        <tr>\n        <td style=\"width: 213px;\">\n        <p>Expected working days</p>\n        </td>\n        <td style=\"width: 52px;\">\n        <p>20</p>\n        </td>\n        </tr>\n        <tr>\n        <td style=\"width: 213px;\">\n        <p>Billable project days</p>\n        </td>\n        <td style=\"width: 52px;\">\n        <p>5</p>\n        </td>\n        </tr>\n        <tr>\n        <td style=\"width: 213px;\">\n        <p>Non-billable project days</p>\n        </td>\n        <td style=\"width: 52px;\">\n        <p>6</p>\n        </td>\n        </tr>\n        <tr>\n        <td style=\"width: 213px;\">\n        <p>Bench Time</p>\n        </td>\n        <td style=\"width: 52px;\">\n        <p>3</p>\n        </td>\n        </tr>\n        <tr>\n        <td style=\"width: 213px;\">\n        <p>Business Development Days</p>\n        </td>\n        <td style=\"width: 52px;\">\n        <p>4</p>\n        </td>\n        </tr>\n        <tr>\n        <td style=\"width: 213px;\">\n        <p>Vacation Days</p>\n        </td>\n        <td style=\"width: 52px;\">\n        <p>2</p>\n        </td>\n        </tr>\n        </tbody>\n        </table>\n        </li>\n        </ul>\n        <img class=\"ff\" src=\"assets/img/faq/f6.png\" style=\"max-width: 50vw;\"/>`,\n    },\n    {\n        \"question\": \"<p>3. What does <strong>ARVE/URVE Relevance</strong> mean?</p>\",\n        \"answer\": ` <p>If you are a Student Consultant and working on non-billable projects the <strong>ARVE/URVE Relevance</strong> button is automatically disabled. This means that your ARVE and URVE are set to 0. Check question 12 for further explanation.</p>`,\n    },\n    {\n        \"question\": \"<p>4. Why are <strong>Austria Vacation</strong>, <strong>AT_Training CSS</strong> and <strong>Bench Time_non-client_APPS </strong>default projects?</p>\",\n        \"answer\": `<p></p>This is been decided by the Development Team.</p>`,\n    },\n    {\n        \"question\": \"<p>5. What is the <strong>forecastr risk probability</strong>?</p>\",\n        \"answer\": ` <p><img class=\"image\" src=\"assets/img/faq/f2.png\" /></p><p>It is the chance that a risk will occur.</p>\n        <p>Here is an explanation of the three possible risk probabilities.</p>\n        <ul>\n        <li><strong>Firm</strong>: Firm is used for fixed (\"fixed\") commitments or tasks. This includes tasks and assignments that have already been confirmed by the customer and discussed with your PDL. For example: official confirmation by signing a contract or approval of leave in DPW.</li>\n        <li><strong>Named Likely</strong>: Named Likely is used when there is already a verbal commitment but the project formalities and onboarding are not yet completed. For example: ISOW has not yet been started.</li>\n        <li><strong>Unnamed</strong>: Unnamed is used if there are no concrete commitments yet. For example: bench time, training and business development, as well as interview processes are booked under Unnamed.</li>\n        </ul>\n        <p>&nbsp;</p>\n        <p>It is important to select one of the above-mentioned risk probabilities for each forecasted project.</p>`,\n    },\n    {\n        \"question\": \"<p>6. How do I forecast <strong>Austria Vacation </strong>if I am not (exactly) sure when I will be on vacation? Which risk probability do I choose?</p>\",\n        \"answer\": `\n        <p>If you are not sure when you will be on vacation, you should choose either</p>\n        <ul>\n        <li><strong>Named Likely</strong>, when you know when it will be, but it hasn&rsquo;t been confirmed yet or</li>\n        <li><strong>Unnamed</strong>, when you don&rsquo;t know when or if it will take place at all. (I might take a day off next month, but I am not sure yet.)</li>\n        </ul>\n       As soon as you have requested the exact vacation days in DPW and they have been approved by your PDL, you can change the risk probability to <strong>Firm</strong>.</strong>\n        `,\n    },\n    {\n        \"question\": \"<p>7. How do I forecast <strong>Bench Time_non-client_APPS</strong>? Which risk probability do I choose?</p>\",\n        \"answer\": `<p>If you are not involved in a project, you choose either <strong>AT_CSS_billable time interco.</strong> or <strong>AT_CSS_billable time external</strong>\n                   <ul>\n                   <li><i>First Month</i>: 5 days</li>\n                   <li><i>Second Month</i>: 10 days</li>\n                   <li><i>Third Month</i>: 15 days</li>\n                   <li><i>Other Months</i>: 15 days</li>\n                   </ul>\n                   The Risk Probability is <strong>Unnamed<strong>.</p>`,\n    },\n    {\n        \"question\": \"<p>8. How do I forecast a project I cannot find?</p>\",\n        \"answer\": `<p>There are two projects you can choose in that case:</p>\n        <ul>\n        <li><strong>AT_CSS_billable time interco. </strong>for projects outside Austria.</li>\n        <li><strong>AT_CSS_billable time external </strong>for projects in Austria.</li>\n        </ul>\n        <p>The project names may seem a bit confusing. Check question 10 for further explanation.</p>`,\n    },\n    {\n        \"question\": \"<p>9. How do I forecast a project when I don&rsquo;t know the exact number of days I will be working on this project?</p>\",\n        \"answer\": `<p><img class=\"image\" src=\"assets/img/faq/f3.png\" style=\"max-width: 50vw;\"/></p><p>If the days you work on a project vary each month depending on the workload, you can fill-in the number of fixed project days, mark if a project is billable or not, and choose the forecast probability <strong>Firm. </strong>After this, try to estimate the varying project days, mark if a project is billable or not and choose the forecast probability <strong>Named Likely </strong>as shown in the screenshot below.</p>`,\n    },\n    {\n        \"question\": \"<p>10. What is the difference between <strong>internal </strong>and<strong> external revenue</strong>?</p>\",\n        \"answer\": `<ul>\n        <li><strong>External revenue</strong>: Sales generated with projects <strong>in</strong> Austria.</li>\n        <li><strong>Internal revenue</strong>: Sales generated with projects <strong>outside</strong> Austria.</li>\n        </ul>`,\n    },\n    {\n        \"question\": \"<p>11. What is the difference between <strong>billable </strong>and<strong> non-billable projects</strong>?</p>\",\n        \"answer\": `<p>All externally chargeable project days. If days are booked on a customer project, but the customer does not pay for it (e.g.: overrun for fixed price project or training), they do not count as billable project days.</p>`,\n    },\n    {\n        \"question\": \"<p>12. Why does (sometimes) the number of <strong>Bench Time non-client APPS change</strong> after saving my forecast?</p>\",\n        \"answer\": `<p>If you forecasted less than expected working days, the system automatically adds the remaining days to the <strong>Bench Time non-client APPS change.</strong></p>`,\n    },\n    {\n        \"question\": \"<p>13. How do I forecast <strong>Team Meetings</strong>?</p>\",\n        \"answer\": `<p>Team Meetings are counted to the default project 100528772 - Bench Time_non-client_APPS.</p>\n        <p>As the forecast is done on a daily basis, you can use the following formula:</p>\n        <img class=\"ff\" src=\"assets/img/faq/f7.png\" style=\"max-width: 50vw;\"/>\n        <p>Use a decimal dot instead of a comma.</p>`,\n    },\n    {\n        \"question\": \"<p>14. How do I forecast <strong>sickness and educational absence</strong>?</p>\",\n        \"answer\" : \"<p>Sickness and educational absence should be forecasted as Bench Time_non_client_APPS.</p>\"\n    }\n]"
                }
            ],
            "src/app/layout/getStartedModal/getStartedData.ts": [
                {
                    "name": "getStartedData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/getStartedModal/getStartedData.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n\n    \"css\":[\n        {\n            \"title\":\"Get Started\",\n            \"html\": `<p><span>The following steps will help you get started on how to create your utilization forecast for the upcoming months.</span></p>`,\n            \"image\": \"0_css.png\"\n        },\n        {\n            \"title\":\"Select a month\",\n            \"html\": `<p><span>Choose the month for which the forecast will be created.<br /></span></p>`,\n            \"image\": \"1_css.png\"\n        },\n        {\n            \"title\":\"Forecast expected Vacation, Bench Time and Training Days\",\n            \"html\": `<p>Fill-in the number of <strong>Vacation, Bench Time  </strong>and<strong> Training</strong> days you have planned for the selected month, as well as the forecast probability.</p><br>\n            <p>Forecast Probabilities:</p>\n            <ul>\n            <li><strong>Firm</strong>: I am sure I will be part of this event.</li>\n            <li><strong>Named Likely</strong>: I know the event, but it hasn&rsquo;t been confirmed yet.</li>\n            <li><strong>Unnamed</strong>: I don&rsquo;t know the event, or if it will take place.</li>\n            </ul>`,\n            \"image\": \"2_css.png\"\n        },\n        {\n            \"title\":\"Forecast client projects\",\n            \"html\": `<p>Use the <strong>Add Project </strong>button to forecast additional client projects. Fill-in the number of project days, mark if a project is billable or not, and choose the forecast probability accordingly.</p><br>\n            <p>Forecast Probabilities:</p>\n            <ul>\n            <li><strong>Firm</strong>: I am sure I will be on this project;</li>\n            <li><strong>Named Likely</strong>: I know the opportunity, but the contract hasn&rsquo;t been signed yet;</li>\n            <li><strong>Unnamed</strong>: I don&rsquo;t know on which project I will be working.</li>\n            </ul>\n            <p><strong>Hint:</strong> Quickly navigate through the fields by only using the keyboard. E.g. use <strong>Tab </strong>to jump from one field to another, <strong>Enter</strong> to select a project and <strong>Space </strong>to select or deselect a choice field</p>`,\n            \"image\": \"3_css.png\"\n        },\n        {\n            \"title\":\"Review the forecast summary\",\n            \"html\": `<p>Review the summary panel before you <strong>Save and Submit </strong>your forecast entries.&nbsp;</p>\n            <ul>\n            <li><strong>ARVE</strong>: The percentage workload of an employee on externally billable projects.</li>\n            <li><strong>URVE</strong>: The percentage utilization of an employee on both internal and external projects (vacation days are deducted beforehand from the possible working days).\n            </li>\n            </ul>`,\n            \"image\": \"4_css.png\"\n        },\n    ],\n\n    \"pdl\" :[\n        {\n            \"title\":\"Get Started\",\n            \"html\": `<p><span lang=\"EN-US\">The following steps will help you get started on how to create the utilization forecast for yourself or for your team for the upcoming months.</span></p>`,\n            \"image\": \"0_pdl.png\"\n        },\n        {\n            \"title\":\"Select a month\",\n            \"html\": `<p>Choose the month for which the forecast will be created.</p>`,\n            \"image\": \"1_pdl.png\"\n        },\n        {\n            \"title\":\"Forecast expected Vacation, Bench Time and Training Days\",\n            \"html\": `<p>Fill-in the number of <strong>Vacation, Bench Time </strong>and<strong> Training</strong> days you have planned for the selected month, as well as the forecast probability.</p><br>\n            <p>Forecast Probabilities:</p>\n            <ul>\n            <li><strong>Firm</strong>: I am sure I will be part of this event.</li>\n            <li><strong>Named Likely</strong>: I know the event, but it hasn&rsquo;t been confirmed yet.</li>\n            <li><strong>Unnamed</strong>: I don&rsquo;t know the event, or if it will take place.</li>\n            </ul>`,\n            \"image\": \"2_pdl.png\"\n        },\n        {\n            \"title\":\"Forecast client projects\",\n            \"html\": `<p>Use the <strong>Add Project </strong>button to forecast additional client projects. Fill-in the number of project days, mark if a project is billable or not, fill-in the Charge Out Rate (COR), which is only visible for teamleads. Mark if a project is external or internal revenue, and choose the forecast probability accordingly.</p><br>\n            <p>Forecast Probabilities:</p>\n            <ul>\n            <li><strong>Firm</strong>: I am sure I will be on this project.</li>\n            <li><strong>Named Likely</strong>: I know the opportunity, but the contract hasn&rsquo;t been signed yet.</li>\n            <li><strong>Unnamed</strong>: I don&rsquo;t know on which project I will be working.</li>\n            </ul>\n            <p><strong>Hint:</strong> Quickly navigate through the fields by only using the keyboard. E.g. use <strong>Tab </strong>to jump from one field to another, <strong>Enter</strong> to select a project and <strong>Space </strong>to select or deselect a choice field.</p>`,\n            \"image\": \"3_pdl.png\"\n        },\n        {\n            \"title\":\"Review the forecast summary\",\n            \"html\": `<p>Review the summary panel before you <strong>Save and Submit </strong>your forecast entries. <br /></p>\n            <ul>\n            <li><strong>ARVE</strong>: The percentage workload of an employee on externally billable projects.</li>\n            <li><strong>URVE</strong>: The percentage utilization of an employee on both internal and external projects (vacation days are deducted beforehand from the possible working days).</li>\n            </ul>`,\n            \"image\": \"4_pdl.png\"\n        },\n        {\n            \"title\":\"Select the team view\",\n            \"html\": `<p>Switch between your individual view and the team view by using the upper-right corner toggle buttons.</p>`,\n            \"image\": \"5_pdl.png\"\n        },\n        {\n            \"title\":\"Review the locks\",\n            \"html\": `<p>The Lock icon with standing CSS below means, that you as the PDL must submit this Forecast. The Lock icon without any text means, that you have already submitted this Forecast.</p>`,\n            \"image\": \"6_pdl.png\"\n        },\n        {\n            \"title\":\"Review and update the team forecast\",\n            \"html\": `<p>Expand and update your team&rsquo;s utilization forecast. Fill-in the COR, mark if a project is external or internal revenue, and <strong>Submit</strong> the forecast for each team member individually.</p><br> <p> Once a forecast is submitted, it becomes <strong>locked</strong> and cannot be updated by the team member. Locked forecast entries can easily be unlocked using the <strong>Unlock </strong>button.</p>`,\n            \"image\": \"7_pdl.png\"\n        },\n        {\n            \"title\":\"Review the team forecast summary\",\n            \"html\": `<p>Review the summary panel before you <strong>Export </strong>your team&rsquo;s forecast entries. </p>\n            <ul>\n            <li>\n            <strong>ARVE</strong>: The average workload of all team members on externally billable projects.\n            </li>\n            <li><strong>URVE</strong>: The average utilization of all team members on both internal and external projects (vacation days are deducted beforehand from the possible working days).</li>\n            <li><strong>ROS</strong>: Revenue Own Staff.</li>\n            </ul>`,\n            \"image\": \"8_pdl.png\"\n        },\n       \n        \n    ],  \n    \"pl\":[\n        {\n            \"title\":\"Get Started\",\n            \"html\": `<p><span>The following steps will help you get started on how to create the utilization forecast for yourself or for your team for the upcoming months.</span></p>`,\n            \"image\": \"0_pl.png\"\n        },\n        {\n            \"title\":\"Select a month\",\n            \"html\": `<p>Choose the month for which the forecast will be created.</p>`,\n            \"image\": \"1_pl.png\"\n        },\n        {\n            \"title\":\"Forecast expected Vacation, Bench Time and Training Days\",\n            \"html\": `<p>Fill-in the number of <strong>Vacation, Bench Time </strong>and<strong> Training</strong> days you have planned for the selected month, as well as the forecast probability.</p><br>`,\n            \"image\": \"2_pl.png\"\n        }, {\n            \"title\":\"Forecast client projects\",\n            \"html\": `<p>Use the <strong>Add Project</strong> button to forecast additional client projects. Fill-in the number of project days, mark if a project is billable or not, fill-in the Charge Out Rate (COR), which is only visible for you as a PDL/PL. Mark if a project is external or internal revenue and choose the forecast probability accordingly.</p>\n            <p><strong>Hint:</strong> Quickly navigate through the fields by only using the keyboard. E.g. use <strong>Tab </strong>to jump from one field to another, <strong>Enter</strong> to select a project and <strong>Space </strong>to select or deselect a choice field.</p>`,\n            \"image\": \"3_pl.png\"\n        }, {\n            \"title\":\"Review the forecast summary\",\n            \"html\": `<p>Review the summary panel before you <strong>Save </strong>your forecast entries. <br /></p>`,\n            \"image\": \"4_pl.png\"\n        },\n        {\n            \"title\":\"Select the team view\",\n            \"html\": `<p>Switch between your individual view and the team view by using the upper-right corner toggle buttons.</p>`,\n            \"image\": \"5_pl.png\"\n        },{\n            \"title\":\"Review and update the team forecast\",\n            \"html\": `<p>Expand and update your team&rsquo;s utilization forecast. Fill-in the COR, mark if a project is external or internal revenue, and <strong>Submit</strong> the forecast for each team member individually.</p><br> <p> Once a forecast is submitted, it becomes <strong>locked</strong> and cannot be updated by the team member. Locked forecast entries can easily be unlocked using the <strong>Unlock </strong>button.</p>`,\n            \"image\": \"6_pl.png\"\n        },\n        {\n            \"title\":\"Review the team forecast summary\",\n            \"html\": `<p>Review the summary panel before you <strong>Export </strong>your team&rsquo;s forecast entries. </p>`,\n            \"image\": \"7_pl.png\"\n        },\n        {\n            \"title\":\"Select the practice lead view\",\n            \"html\": `<p>Switch between your individual, team and practice lead view using the upper-right corner toggle buttons. </p>`,\n            \"image\": \"8_pl.png\"\n        },\n        {\n            \"title\":\"Review and update your team members’ forecasts.\",\n            \"html\": `<p>Expand to update the utilization forecasts. </p>`,\n            \"image\": \"9_pl.png\"\n        },\n        {\n            \"title\":\"Review the forecast summary and submit your team members’ forecasts.\",\n            \"html\": `<p>Review and submit all forecast entries to the Market Segment Lead.</p>`,\n            \"image\": \"10_pl.png\"\n        },\n    ]\n}",
                    "rawdescription": "Data for getStarted",
                    "description": "<p>Data for getStarted</p>\n"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/app/layout/organizationModal/organization-dialog.component.ts": [
                {
                    "name": "TREE_DATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/organizationModal/organization-dialog.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HierarchyNode[]",
                    "defaultValue": "[]"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/app.module.ts": [
                {
                    "name": "HttpLoaderFactory",
                    "file": "src/app/app.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>AoT requires an exported function for factories</p>\n",
                    "args": [
                        {
                            "name": "http",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "TranslateHttpLoader",
                    "jsdoctags": [
                        {
                            "name": "http",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/reset-password/reset-password.component.ts": [
                {
                    "name": "passwordMatcherValidator",
                    "file": "src/app/reset-password/reset-password.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "control",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "literal type | null",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "login",
                        "component": "LoginComponent"
                    },
                    {
                        "path": "reset-password/:token",
                        "component": "ResetPasswordComponent"
                    },
                    {
                        "path": "admin",
                        "component": "AdminComponent",
                        "canActivate": [
                            "RoleGuard"
                        ],
                        "data": {
                            "expectedRole": "100"
                        }
                    },
                    {
                        "path": "forecast",
                        "component": "ForecastComponent",
                        "canActivate": [
                            "RoleGuard"
                        ],
                        "data": {
                            "expectedRole": "0"
                        },
                        "children": [
                            {
                                "path": "individual/:id",
                                "component": "IndividualComponent"
                            },
                            {
                                "path": "team/:id",
                                "component": "TeamComponent",
                                "canActivate": [
                                    "RoleGuard"
                                ],
                                "data": {
                                    "expectedRole": "1"
                                }
                            },
                            {
                                "path": "practice/:id",
                                "component": "PracticeComponent",
                                "canActivate": [
                                    "RoleGuard"
                                ],
                                "data": {
                                    "expectedRole": "2"
                                }
                            },
                            {
                                "path": "executive/:id",
                                "component": "ExecutiveComponent",
                                "canActivate": [
                                    "RoleGuard"
                                ],
                                "data": {
                                    "expectedRole": "3"
                                }
                            },
                            {
                                "path": "executive-detail/:id",
                                "component": "ExecutiveComponent",
                                "canActivate": [
                                    "RoleGuard"
                                ],
                                "data": {
                                    "expectedRole": "3"
                                }
                            },
                            {
                                "path": "staffing/:id",
                                "component": "StaffingComponent",
                                "canActivate": [
                                    "RoleGuard"
                                ],
                                "data": {
                                    "expectedRole": "3"
                                }
                            },
                            {
                                "path": "head-of-practices/:id",
                                "component": "HeadOfPracticesComponent",
                                "canActivate": [
                                    "RoleGuard"
                                ],
                                "data": {
                                    "expectedRole": "3"
                                }
                            },
                            {
                                "path": "practices/:id",
                                "component": "PracticesComponent",
                                "canActivate": [
                                    "RoleGuard"
                                ],
                                "data": {
                                    "expectedRole": "3"
                                }
                            },
                            {
                                "path": "financial-controller/:id",
                                "component": "FinancialControllerComponent",
                                "canActivate": [
                                    "RoleGuard"
                                ],
                                "data": {
                                    "expectedRole": "4"
                                }
                            }
                        ]
                    },
                    {
                        "path": "",
                        "redirectTo": "/login",
                        "pathMatch": "full"
                    },
                    {
                        "path": "**",
                        "redirectTo": "/login"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 48,
        "status": "medium",
        "files": [
            {
                "filePath": "e2e_testing/login/login.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoginPage",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/admin/admin.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdminComponent",
                "coveragePercent": 100,
                "coverageCount": "3/3",
                "status": "very-good"
            },
            {
                "filePath": "src/app/admin/components/months/months.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MonthsComponent",
                "coveragePercent": 100,
                "coverageCount": "11/11",
                "status": "very-good"
            },
            {
                "filePath": "src/app/admin/components/projects/projects.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProjectsComponent",
                "coveragePercent": 90,
                "coverageCount": "10/11",
                "status": "very-good"
            },
            {
                "filePath": "src/app/admin/components/teams/teams.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TeamsComponent",
                "coveragePercent": 82,
                "coverageCount": "14/17",
                "status": "very-good"
            },
            {
                "filePath": "src/app/admin/components/users/users.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UsersComponent",
                "coveragePercent": 100,
                "coverageCount": "17/17",
                "status": "very-good"
            },
            {
                "filePath": "src/app/admin/dialogs/add-month/add-month.dialog.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddMonthDialog",
                "coveragePercent": 77,
                "coverageCount": "7/9",
                "status": "very-good"
            },
            {
                "filePath": "src/app/admin/dialogs/add-month/add-month.dialog.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppDateAdapter",
                "coveragePercent": 100,
                "coverageCount": "2/2",
                "status": "very-good"
            },
            {
                "filePath": "src/app/admin/dialogs/add-project/add-project.dialog.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddProjectDialog",
                "coveragePercent": 55,
                "coverageCount": "5/9",
                "status": "good"
            },
            {
                "filePath": "src/app/admin/dialogs/add-team/add-team.dialog.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddTeamDialog",
                "coveragePercent": 71,
                "coverageCount": "5/7",
                "status": "good"
            },
            {
                "filePath": "src/app/admin/dialogs/add-user/add-user.dialog.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddUserDialog",
                "coveragePercent": 72,
                "coverageCount": "13/18",
                "status": "good"
            },
            {
                "filePath": "src/app/admin/dialogs/confirm-message/confirm-message.dialog.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmMessageDialog",
                "coveragePercent": 50,
                "coverageCount": "2/4",
                "status": "medium"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 100,
                "coverageCount": "2/2",
                "status": "very-good"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/errors/error.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MyErrorHandler",
                "coveragePercent": 100,
                "coverageCount": "2/2",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/interfaces/exportCSV/entry.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Entry",
                "coveragePercent": 100,
                "coverageCount": "6/6",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/interfaces/exportCSV/export.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Export",
                "coveragePercent": 100,
                "coverageCount": "5/5",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/interfaces/exportCSV/summary.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Summary",
                "coveragePercent": 100,
                "coverageCount": "11/11",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/interfaces/fcEntry.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FcEntry",
                "coveragePercent": 51,
                "coverageCount": "14/27",
                "status": "good"
            },
            {
                "filePath": "src/app/core/interfaces/fcProject.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FcProject",
                "coveragePercent": 63,
                "coverageCount": "7/11",
                "status": "good"
            },
            {
                "filePath": "src/app/core/interfaces/financialAppsSummary.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FinancialControllerSummaryAPPS",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interfaces/financialSummary.ts",
                "type": "class",
                "linktype": "classe",
                "name": "FincancialControllerSummary",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interfaces/grade.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Grade",
                "coveragePercent": 66,
                "coverageCount": "2/3",
                "status": "good"
            },
            {
                "filePath": "src/app/core/interfaces/graphicData.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GraphicSummaryProbabilityEntry",
                "coveragePercent": 100,
                "coverageCount": "3/3",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/interfaces/graphicData.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GraphicSummaryProjectTypeEntry",
                "coveragePercent": 100,
                "coverageCount": "3/3",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/interfaces/graphicData.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GraphicSummaryReport",
                "coveragePercent": 100,
                "coverageCount": "10/10",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/interfaces/hierarchyNode.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HierarchyNode",
                "coveragePercent": 85,
                "coverageCount": "6/7",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/interfaces/kpiData.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MonthlySummaryReport",
                "coveragePercent": 100,
                "coverageCount": "12/12",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/interfaces/lockedMonth.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LockedMonth",
                "coveragePercent": 100,
                "coverageCount": "4/4",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/interfaces/month.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Month",
                "coveragePercent": 100,
                "coverageCount": "10/10",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/interfaces/perGrade.ts",
                "type": "class",
                "linktype": "classe",
                "name": "PerGrade",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interfaces/probability.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Probability",
                "coveragePercent": 100,
                "coverageCount": "3/3",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/interfaces/probabilityRecord.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProbabilityRecord",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interfaces/probabilitySummary.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProbabilitySummary",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interfaces/project.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Project",
                "coveragePercent": 100,
                "coverageCount": "10/10",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/interfaces/projectRequest.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProjectRequest",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interfaces/role.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Role",
                "coveragePercent": 85,
                "coverageCount": "6/7",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/interfaces/savedMonth.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SavedMonth",
                "coveragePercent": 100,
                "coverageCount": "4/4",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/interfaces/suggestion.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Suggestion",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interfaces/summaryData.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SummaryData",
                "coveragePercent": 100,
                "coverageCount": "10/10",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/interfaces/summaryData.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SummaryDataProject",
                "coveragePercent": 100,
                "coverageCount": "4/4",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/interfaces/team.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Team",
                "coveragePercent": 71,
                "coverageCount": "5/7",
                "status": "good"
            },
            {
                "filePath": "src/app/core/interfaces/user.ts",
                "type": "class",
                "linktype": "classe",
                "name": "User",
                "coveragePercent": 63,
                "coverageCount": "12/19",
                "status": "good"
            },
            {
                "filePath": "src/app/core/pipes/safe-html.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "SafeHtmlPipe",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/security/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 92,
                "coverageCount": "24/26",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/security/httpRequestInterceptor.service.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "HttpRequestInterceptorService",
                "coveragePercent": 100,
                "coverageCount": "3/3",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/security/login.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoginService",
                "coveragePercent": 77,
                "coverageCount": "7/9",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/security/resetPassword.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ResetPasswordService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/security/role-guard.service.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "RoleGuard",
                "coveragePercent": 100,
                "coverageCount": "3/3",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/services/admin/months.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MonthService",
                "coveragePercent": 63,
                "coverageCount": "7/11",
                "status": "good"
            },
            {
                "filePath": "src/app/core/services/admin/projects.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProjectService",
                "coveragePercent": 66,
                "coverageCount": "6/9",
                "status": "good"
            },
            {
                "filePath": "src/app/core/services/admin/team.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TeamService",
                "coveragePercent": 57,
                "coverageCount": "4/7",
                "status": "good"
            },
            {
                "filePath": "src/app/core/services/admin/user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserAdminService",
                "coveragePercent": 100,
                "coverageCount": "7/7",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/services/forecasts/calculation.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CalculationService",
                "coveragePercent": 4,
                "coverageCount": "1/23",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/forecasts/executive-forecasts.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ExecutiveForecastsService",
                "coveragePercent": 6,
                "coverageCount": "2/32",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/forecasts/executive-forecasts.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProValues",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/forecasts/executive-forecasts.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SummaryValues",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/forecasts/forecast.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ForecastService",
                "coveragePercent": 78,
                "coverageCount": "22/28",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/services/forecasts/team-forecasts.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TeamForecastService",
                "coveragePercent": 81,
                "coverageCount": "9/11",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/services/forecasts/team-user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TeamUserService",
                "coveragePercent": 66,
                "coverageCount": "8/12",
                "status": "good"
            },
            {
                "filePath": "src/app/core/services/user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 81,
                "coverageCount": "13/16",
                "status": "very-good"
            },
            {
                "filePath": "src/app/core/services/utilities.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UtilitiesService",
                "coveragePercent": 64,
                "coverageCount": "11/17",
                "status": "good"
            },
            {
                "filePath": "src/app/core/shared/business-operations.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BusinessOperationsService",
                "coveragePercent": 66,
                "coverageCount": "28/42",
                "status": "good"
            },
            {
                "filePath": "src/app/core/shared/data-sharing.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DataSharingService",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/core/shared/page-state.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PageStateService",
                "coveragePercent": 62,
                "coverageCount": "5/8",
                "status": "good"
            },
            {
                "filePath": "src/app/forecast/components/executive-chart/executive-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExecutiveChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/components/executive-chart/executive-chart.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SummaryValues",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/components/executive-detail/executive-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExecutiveDetailComponent",
                "coveragePercent": 25,
                "coverageCount": "10/39",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/components/executive-detail/fc-entry-detail-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FcEntryDetailDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/components/executive-stats/executive-stats.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExecutiveStatsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/components/executive-summary/executive-summary.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExecutiveSummaryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/components/executive-summary/executive-summary.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PeriodicElement",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/components/executive-summary/executive-summary.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SummaryValues",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/components/fc-entry-summary/fc-entry-summary.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FcEntrySummaryComponent",
                "coveragePercent": 53,
                "coverageCount": "16/30",
                "status": "good"
            },
            {
                "filePath": "src/app/forecast/components/fc-entry-summary/vacation-warning/fc-entry-summary-vacation-warning.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FcEntrySummaryVacationWarningComponent",
                "coveragePercent": 50,
                "coverageCount": "1/2",
                "status": "medium"
            },
            {
                "filePath": "src/app/forecast/components/fc-entry/fc-entry.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FcEntryComponent",
                "coveragePercent": 50,
                "coverageCount": "18/36",
                "status": "medium"
            },
            {
                "filePath": "src/app/forecast/components/fc-project/fc-project.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FcProjectComponent",
                "coveragePercent": 57,
                "coverageCount": "20/35",
                "status": "good"
            },
            {
                "filePath": "src/app/forecast/components/financial-controller-overview/financial-controller-overview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FinancialControllerOverviewComponent",
                "coveragePercent": 4,
                "coverageCount": "1/21",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/components/staffing-overview/staffing-overview.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StaffingOverviewComponent",
                "coveragePercent": 11,
                "coverageCount": "3/26",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/components/staffing-overview/staffing-overview.component.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProjectHelper",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/components/teamlead-month/teamlead-month.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TeamleadMonthComponent",
                "coveragePercent": 66,
                "coverageCount": "18/27",
                "status": "good"
            },
            {
                "filePath": "src/app/forecast/components/teamlead-summary/teamlead-summary.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TeamleadSummaryComponent",
                "coveragePercent": 79,
                "coverageCount": "19/24",
                "status": "very-good"
            },
            {
                "filePath": "src/app/forecast/dialogs/add-project/project-request.dialog.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProjectRequestDialog",
                "coveragePercent": 25,
                "coverageCount": "2/8",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/dialogs/confirm-message/confirm-message.dialog.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmMessageDialog",
                "coveragePercent": 50,
                "coverageCount": "2/4",
                "status": "medium"
            },
            {
                "filePath": "src/app/forecast/dialogs/executive-fc-entry/executive-fc-entry.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExecutiveFcEntryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/dialogs/export-csv/export-csv.dialog.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExportCsvDialog",
                "coveragePercent": 87,
                "coverageCount": "7/8",
                "status": "very-good"
            },
            {
                "filePath": "src/app/forecast/forecast.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ForecastComponent",
                "coveragePercent": 52,
                "coverageCount": "13/25",
                "status": "good"
            },
            {
                "filePath": "src/app/forecast/pages/executive/executive.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExecutiveComponent",
                "coveragePercent": 75,
                "coverageCount": "15/20",
                "status": "good"
            },
            {
                "filePath": "src/app/forecast/pages/financial-controller/financial-controller.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FinancialControllerComponent",
                "coveragePercent": 18,
                "coverageCount": "2/11",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/pages/head-of-practices/head-of-practices.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeadOfPracticesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/pages/individual/individual.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IndividualComponent",
                "coveragePercent": 63,
                "coverageCount": "7/11",
                "status": "good"
            },
            {
                "filePath": "src/app/forecast/pages/practice/practice.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PracticeComponent",
                "coveragePercent": 15,
                "coverageCount": "2/13",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/pages/practices/practices.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PracticesComponent",
                "coveragePercent": 20,
                "coverageCount": "3/15",
                "status": "low"
            },
            {
                "filePath": "src/app/forecast/pages/staffing/staffing.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StaffingComponent",
                "coveragePercent": 46,
                "coverageCount": "7/15",
                "status": "medium"
            },
            {
                "filePath": "src/app/forecast/pages/team/team.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TeamComponent",
                "coveragePercent": 61,
                "coverageCount": "8/13",
                "status": "good"
            },
            {
                "filePath": "src/app/layout/dialogs/feedback/feedback-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FeedBackDialogComponent",
                "coveragePercent": 22,
                "coverageCount": "2/9",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/faq-modal/faq-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FaqModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/faq-modal/faqData.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "faqData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/layout/getStartedModal/get-started.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GetStarted",
                "coveragePercent": 71,
                "coverageCount": "5/7",
                "status": "good"
            },
            {
                "filePath": "src/app/layout/getStartedModal/getStartedData.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getStartedData",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/layout/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 63,
                "coverageCount": "14/22",
                "status": "good"
            },
            {
                "filePath": "src/app/layout/organizationModal/organization-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OrganizationDialogComponent",
                "coveragePercent": 11,
                "coverageCount": "1/9",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/organizationModal/organization-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ExampleFlatNode",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/organizationModal/organization-dialog.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FoodNode",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/layout/organizationModal/organization-dialog.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TREE_DATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 64,
                "coverageCount": "9/14",
                "status": "good"
            },
            {
                "filePath": "src/app/reset-password/reset-password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ResetPasswordComponent",
                "coveragePercent": 45,
                "coverageCount": "5/11",
                "status": "medium"
            },
            {
                "filePath": "src/app/reset-password/reset-password.component.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "passwordMatcherValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}